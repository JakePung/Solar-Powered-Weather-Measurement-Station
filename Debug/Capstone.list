
Capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c530  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c88  0800c768  0800c768  0000d768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d3f0  0800d3f0  0000e3f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d3f8  0800d3f8  0000e3f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800d3fc  0800d3fc  0000e3fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e8  20000000  0800d400  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003ec4  200001e8  0800d5e8  0000f1e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200040ac  0800d5e8  000100ac  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000f1e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e141  00000000  00000000  0000f21e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003be1  00000000  00000000  0002d35f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017e0  00000000  00000000  00030f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000124e  00000000  00000000  00032720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031c35  00000000  00000000  0003396e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002091f  00000000  00000000  000655a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012da2e  00000000  00000000  00085ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b38f0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000769c  00000000  00000000  001b3934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  001bafd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001e8 	.word	0x200001e8
 8000254:	00000000 	.word	0x00000000
 8000258:	0800c750 	.word	0x0800c750

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001ec 	.word	0x200001ec
 8000274:	0800c750 	.word	0x0800c750

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc4:	f000 b97e 	b.w	8000ec4 <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000be4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000be6:	460c      	mov	r4, r1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d14d      	bne.n	8000c88 <__udivmoddi4+0xa8>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	460f      	mov	r7, r1
 8000bf0:	4684      	mov	ip, r0
 8000bf2:	4696      	mov	lr, r2
 8000bf4:	fab2 f382 	clz	r3, r2
 8000bf8:	d960      	bls.n	8000cbc <__udivmoddi4+0xdc>
 8000bfa:	b14b      	cbz	r3, 8000c10 <__udivmoddi4+0x30>
 8000bfc:	fa02 fe03 	lsl.w	lr, r2, r3
 8000c00:	f1c3 0220 	rsb	r2, r3, #32
 8000c04:	409f      	lsls	r7, r3
 8000c06:	fa00 fc03 	lsl.w	ip, r0, r3
 8000c0a:	fa20 f202 	lsr.w	r2, r0, r2
 8000c0e:	4317      	orrs	r7, r2
 8000c10:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000c14:	fa1f f48e 	uxth.w	r4, lr
 8000c18:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000c1c:	fbb7 f1f6 	udiv	r1, r7, r6
 8000c20:	fb06 7711 	mls	r7, r6, r1, r7
 8000c24:	fb01 f004 	mul.w	r0, r1, r4
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	4290      	cmp	r0, r2
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x62>
 8000c30:	eb1e 0202 	adds.w	r2, lr, r2
 8000c34:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c38:	d202      	bcs.n	8000c40 <__udivmoddi4+0x60>
 8000c3a:	4290      	cmp	r0, r2
 8000c3c:	f200 812d 	bhi.w	8000e9a <__udivmoddi4+0x2ba>
 8000c40:	4639      	mov	r1, r7
 8000c42:	1a12      	subs	r2, r2, r0
 8000c44:	fa1f fc8c 	uxth.w	ip, ip
 8000c48:	fbb2 f0f6 	udiv	r0, r2, r6
 8000c4c:	fb06 2210 	mls	r2, r6, r0, r2
 8000c50:	fb00 f404 	mul.w	r4, r0, r4
 8000c54:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000c58:	4564      	cmp	r4, ip
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x8e>
 8000c5c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000c60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c64:	d202      	bcs.n	8000c6c <__udivmoddi4+0x8c>
 8000c66:	4564      	cmp	r4, ip
 8000c68:	f200 811a 	bhi.w	8000ea0 <__udivmoddi4+0x2c0>
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c72:	ebac 0c04 	sub.w	ip, ip, r4
 8000c76:	2100      	movs	r1, #0
 8000c78:	b125      	cbz	r5, 8000c84 <__udivmoddi4+0xa4>
 8000c7a:	fa2c f303 	lsr.w	r3, ip, r3
 8000c7e:	2200      	movs	r2, #0
 8000c80:	e9c5 3200 	strd	r3, r2, [r5]
 8000c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d905      	bls.n	8000c98 <__udivmoddi4+0xb8>
 8000c8c:	b10d      	cbz	r5, 8000c92 <__udivmoddi4+0xb2>
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	2100      	movs	r1, #0
 8000c94:	4608      	mov	r0, r1
 8000c96:	e7f5      	b.n	8000c84 <__udivmoddi4+0xa4>
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	d14d      	bne.n	8000d3c <__udivmoddi4+0x15c>
 8000ca0:	42a3      	cmp	r3, r4
 8000ca2:	f0c0 80f2 	bcc.w	8000e8a <__udivmoddi4+0x2aa>
 8000ca6:	4290      	cmp	r0, r2
 8000ca8:	f080 80ef 	bcs.w	8000e8a <__udivmoddi4+0x2aa>
 8000cac:	4606      	mov	r6, r0
 8000cae:	4623      	mov	r3, r4
 8000cb0:	4608      	mov	r0, r1
 8000cb2:	2d00      	cmp	r5, #0
 8000cb4:	d0e6      	beq.n	8000c84 <__udivmoddi4+0xa4>
 8000cb6:	e9c5 6300 	strd	r6, r3, [r5]
 8000cba:	e7e3      	b.n	8000c84 <__udivmoddi4+0xa4>
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	f040 80a2 	bne.w	8000e06 <__udivmoddi4+0x226>
 8000cc2:	1a8a      	subs	r2, r1, r2
 8000cc4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000cc8:	fa1f f68e 	uxth.w	r6, lr
 8000ccc:	2101      	movs	r1, #1
 8000cce:	fbb2 f4f7 	udiv	r4, r2, r7
 8000cd2:	fb07 2014 	mls	r0, r7, r4, r2
 8000cd6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000cda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cde:	fb06 f004 	mul.w	r0, r6, r4
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	d90f      	bls.n	8000d06 <__udivmoddi4+0x126>
 8000ce6:	eb1e 0202 	adds.w	r2, lr, r2
 8000cea:	f104 38ff 	add.w	r8, r4, #4294967295
 8000cee:	bf2c      	ite	cs
 8000cf0:	f04f 0901 	movcs.w	r9, #1
 8000cf4:	f04f 0900 	movcc.w	r9, #0
 8000cf8:	4290      	cmp	r0, r2
 8000cfa:	d903      	bls.n	8000d04 <__udivmoddi4+0x124>
 8000cfc:	f1b9 0f00 	cmp.w	r9, #0
 8000d00:	f000 80c8 	beq.w	8000e94 <__udivmoddi4+0x2b4>
 8000d04:	4644      	mov	r4, r8
 8000d06:	1a12      	subs	r2, r2, r0
 8000d08:	fa1f fc8c 	uxth.w	ip, ip
 8000d0c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d10:	fb07 2210 	mls	r2, r7, r0, r2
 8000d14:	fb00 f606 	mul.w	r6, r0, r6
 8000d18:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d1c:	4566      	cmp	r6, ip
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x152>
 8000d20:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d28:	d202      	bcs.n	8000d30 <__udivmoddi4+0x150>
 8000d2a:	4566      	cmp	r6, ip
 8000d2c:	f200 80bb 	bhi.w	8000ea6 <__udivmoddi4+0x2c6>
 8000d30:	4610      	mov	r0, r2
 8000d32:	ebac 0c06 	sub.w	ip, ip, r6
 8000d36:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d3a:	e79d      	b.n	8000c78 <__udivmoddi4+0x98>
 8000d3c:	f1c1 0620 	rsb	r6, r1, #32
 8000d40:	408b      	lsls	r3, r1
 8000d42:	fa04 fe01 	lsl.w	lr, r4, r1
 8000d46:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4a:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d4e:	40f4      	lsrs	r4, r6
 8000d50:	408a      	lsls	r2, r1
 8000d52:	431f      	orrs	r7, r3
 8000d54:	ea4e 030c 	orr.w	r3, lr, ip
 8000d58:	fa00 fe01 	lsl.w	lr, r0, r1
 8000d5c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d60:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d6c:	fb08 4410 	mls	r4, r8, r0, r4
 8000d70:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d74:	fb00 f90c 	mul.w	r9, r0, ip
 8000d78:	45a1      	cmp	r9, r4
 8000d7a:	d90e      	bls.n	8000d9a <__udivmoddi4+0x1ba>
 8000d7c:	193c      	adds	r4, r7, r4
 8000d7e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d82:	bf2c      	ite	cs
 8000d84:	f04f 0b01 	movcs.w	fp, #1
 8000d88:	f04f 0b00 	movcc.w	fp, #0
 8000d8c:	45a1      	cmp	r9, r4
 8000d8e:	d903      	bls.n	8000d98 <__udivmoddi4+0x1b8>
 8000d90:	f1bb 0f00 	cmp.w	fp, #0
 8000d94:	f000 8093 	beq.w	8000ebe <__udivmoddi4+0x2de>
 8000d98:	4650      	mov	r0, sl
 8000d9a:	eba4 0409 	sub.w	r4, r4, r9
 8000d9e:	fa1f f983 	uxth.w	r9, r3
 8000da2:	fbb4 f3f8 	udiv	r3, r4, r8
 8000da6:	fb08 4413 	mls	r4, r8, r3, r4
 8000daa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d906      	bls.n	8000dc4 <__udivmoddi4+0x1e4>
 8000db6:	193c      	adds	r4, r7, r4
 8000db8:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dbc:	d201      	bcs.n	8000dc2 <__udivmoddi4+0x1e2>
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d87a      	bhi.n	8000eb8 <__udivmoddi4+0x2d8>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dc8:	eba4 040c 	sub.w	r4, r4, ip
 8000dcc:	fba0 9802 	umull	r9, r8, r0, r2
 8000dd0:	4544      	cmp	r4, r8
 8000dd2:	46cc      	mov	ip, r9
 8000dd4:	4643      	mov	r3, r8
 8000dd6:	d302      	bcc.n	8000dde <__udivmoddi4+0x1fe>
 8000dd8:	d106      	bne.n	8000de8 <__udivmoddi4+0x208>
 8000dda:	45ce      	cmp	lr, r9
 8000ddc:	d204      	bcs.n	8000de8 <__udivmoddi4+0x208>
 8000dde:	3801      	subs	r0, #1
 8000de0:	ebb9 0c02 	subs.w	ip, r9, r2
 8000de4:	eb68 0307 	sbc.w	r3, r8, r7
 8000de8:	b15d      	cbz	r5, 8000e02 <__udivmoddi4+0x222>
 8000dea:	ebbe 020c 	subs.w	r2, lr, ip
 8000dee:	eb64 0403 	sbc.w	r4, r4, r3
 8000df2:	fa04 f606 	lsl.w	r6, r4, r6
 8000df6:	fa22 f301 	lsr.w	r3, r2, r1
 8000dfa:	40cc      	lsrs	r4, r1
 8000dfc:	431e      	orrs	r6, r3
 8000dfe:	e9c5 6400 	strd	r6, r4, [r5]
 8000e02:	2100      	movs	r1, #0
 8000e04:	e73e      	b.n	8000c84 <__udivmoddi4+0xa4>
 8000e06:	fa02 fe03 	lsl.w	lr, r2, r3
 8000e0a:	f1c3 0120 	rsb	r1, r3, #32
 8000e0e:	fa04 f203 	lsl.w	r2, r4, r3
 8000e12:	fa00 fc03 	lsl.w	ip, r0, r3
 8000e16:	40cc      	lsrs	r4, r1
 8000e18:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e1c:	fa20 f101 	lsr.w	r1, r0, r1
 8000e20:	fa1f f68e 	uxth.w	r6, lr
 8000e24:	fbb4 f0f7 	udiv	r0, r4, r7
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	fb07 4410 	mls	r4, r7, r0, r4
 8000e2e:	0c11      	lsrs	r1, r2, #16
 8000e30:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000e34:	fb00 f406 	mul.w	r4, r0, r6
 8000e38:	428c      	cmp	r4, r1
 8000e3a:	d90e      	bls.n	8000e5a <__udivmoddi4+0x27a>
 8000e3c:	eb1e 0101 	adds.w	r1, lr, r1
 8000e40:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e44:	bf2c      	ite	cs
 8000e46:	f04f 0901 	movcs.w	r9, #1
 8000e4a:	f04f 0900 	movcc.w	r9, #0
 8000e4e:	428c      	cmp	r4, r1
 8000e50:	d902      	bls.n	8000e58 <__udivmoddi4+0x278>
 8000e52:	f1b9 0f00 	cmp.w	r9, #0
 8000e56:	d02c      	beq.n	8000eb2 <__udivmoddi4+0x2d2>
 8000e58:	4640      	mov	r0, r8
 8000e5a:	1b09      	subs	r1, r1, r4
 8000e5c:	b292      	uxth	r2, r2
 8000e5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e62:	fb07 1114 	mls	r1, r7, r4, r1
 8000e66:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e6a:	fb04 f106 	mul.w	r1, r4, r6
 8000e6e:	4291      	cmp	r1, r2
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x2a2>
 8000e72:	eb1e 0202 	adds.w	r2, lr, r2
 8000e76:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e7a:	d201      	bcs.n	8000e80 <__udivmoddi4+0x2a0>
 8000e7c:	4291      	cmp	r1, r2
 8000e7e:	d815      	bhi.n	8000eac <__udivmoddi4+0x2cc>
 8000e80:	4644      	mov	r4, r8
 8000e82:	1a52      	subs	r2, r2, r1
 8000e84:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000e88:	e721      	b.n	8000cce <__udivmoddi4+0xee>
 8000e8a:	1a86      	subs	r6, r0, r2
 8000e8c:	eb64 0303 	sbc.w	r3, r4, r3
 8000e90:	2001      	movs	r0, #1
 8000e92:	e70e      	b.n	8000cb2 <__udivmoddi4+0xd2>
 8000e94:	3c02      	subs	r4, #2
 8000e96:	4472      	add	r2, lr
 8000e98:	e735      	b.n	8000d06 <__udivmoddi4+0x126>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4472      	add	r2, lr
 8000e9e:	e6d0      	b.n	8000c42 <__udivmoddi4+0x62>
 8000ea0:	44f4      	add	ip, lr
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	e6e3      	b.n	8000c6e <__udivmoddi4+0x8e>
 8000ea6:	44f4      	add	ip, lr
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e742      	b.n	8000d32 <__udivmoddi4+0x152>
 8000eac:	3c02      	subs	r4, #2
 8000eae:	4472      	add	r2, lr
 8000eb0:	e7e7      	b.n	8000e82 <__udivmoddi4+0x2a2>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4471      	add	r1, lr
 8000eb6:	e7d0      	b.n	8000e5a <__udivmoddi4+0x27a>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	443c      	add	r4, r7
 8000ebc:	e782      	b.n	8000dc4 <__udivmoddi4+0x1e4>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	443c      	add	r4, r7
 8000ec2:	e76a      	b.n	8000d9a <__udivmoddi4+0x1ba>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b090      	sub	sp, #64	@ 0x40
 8000ecc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* MCU Configuration--------------------------------------------------------*/
  //printf("At the very start of the loop\n");
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ece:	f001 fecf 	bl	8002c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed2:	f000 f9a5 	bl	8001220 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000ed6:	f000 fa04 	bl	80012e2 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eda:	f000 fc33 	bl	8001744 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000ede:	f000 facd 	bl	800147c <MX_ICACHE_Init>
  MX_I2C1_Init();
 8000ee2:	f000 fa0b 	bl	80012fc <MX_I2C1_Init>
  MX_I2C3_Init();
 8000ee6:	f000 fa89 	bl	80013fc <MX_I2C3_Init>
  MX_USART3_UART_Init();
 8000eea:	f000 fbdf 	bl	80016ac <MX_USART3_UART_Init>
  MX_RTC_Init();
 8000eee:	f000 fad9 	bl	80014a4 <MX_RTC_Init>
  MX_I2C2_Init();
 8000ef2:	f000 fa43 	bl	800137c <MX_I2C2_Init>
  MX_SPI1_Init();
 8000ef6:	f000 fb6b 	bl	80015d0 <MX_SPI1_Init>
  	//ST7735_Init(0);
    //fillScreen(BLACK);
    //testAll();


    HAL_Delay(1000);
 8000efa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000efe:	f001 ff7d 	bl	8002dfc <HAL_Delay>
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000f02:	b662      	cpsie	i
}
 8000f04:	bf00      	nop
    //ST7735_FillRectangle(0, 0, 180, 128, 0xF800); // Fill screen with red
    __enable_irq();
  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 8000f06:	2000      	movs	r0, #0
 8000f08:	f001 fcea 	bl	80028e0 <BSP_LED_Init>

  BSP_LED_Toggle(LED_GREEN);
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f001 fd23 	bl	8002958 <BSP_LED_Toggle>
  HAL_Delay(1000);
 8000f12:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f16:	f001 ff71 	bl	8002dfc <HAL_Delay>
  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f001 fd39 	bl	8002994 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000f22:	4bae      	ldr	r3, [pc, #696]	@ (80011dc <main+0x314>)
 8000f24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f28:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000f2a:	4bac      	ldr	r3, [pc, #688]	@ (80011dc <main+0x314>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000f30:	4baa      	ldr	r3, [pc, #680]	@ (80011dc <main+0x314>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000f36:	4ba9      	ldr	r3, [pc, #676]	@ (80011dc <main+0x314>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000f3c:	4ba7      	ldr	r3, [pc, #668]	@ (80011dc <main+0x314>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000f42:	49a6      	ldr	r1, [pc, #664]	@ (80011dc <main+0x314>)
 8000f44:	2000      	movs	r0, #0
 8000f46:	f001 fdb3 	bl	8002ab0 <BSP_COM_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <main+0x8c>
  {
    Error_Handler();
 8000f50:	f000 fc9a 	bl	8001888 <Error_Handler>
  }

  printf("ABout to initialize the display\n");
 8000f54:	48a2      	ldr	r0, [pc, #648]	@ (80011e0 <main+0x318>)
 8000f56:	f009 faad 	bl	800a4b4 <puts>
   HAL_Delay(1000);
 8000f5a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f5e:	f001 ff4d 	bl	8002dfc <HAL_Delay>
   ssd1306_Init();
 8000f62:	f000 fed9 	bl	8001d18 <ssd1306_Init>
  /* USER CODE END BSP */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int entry_shown = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	637b      	str	r3, [r7, #52]	@ 0x34
  int new_entry, last_entry = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int num_of_entries = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62bb      	str	r3, [r7, #40]	@ 0x28
  int max_entries = 720; //can be changed, 720 = sample every 2 minutes for 1 day
 8000f72:	f44f 7334 	mov.w	r3, #720	@ 0x2d0
 8000f76:	61fb      	str	r3, [r7, #28]

  int button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2); //Extra button for whatever else
 8000f78:	2104      	movs	r1, #4
 8000f7a:	489a      	ldr	r0, [pc, #616]	@ (80011e4 <main+0x31c>)
 8000f7c:	f002 fb64 	bl	8003648 <HAL_GPIO_ReadPin>
 8000f80:	4603      	mov	r3, r0
 8000f82:	61bb      	str	r3, [r7, #24]
  int button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0); //Original Button that actually works
 8000f84:	2101      	movs	r1, #1
 8000f86:	4897      	ldr	r0, [pc, #604]	@ (80011e4 <main+0x31c>)
 8000f88:	f002 fb5e 	bl	8003648 <HAL_GPIO_ReadPin>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	617b      	str	r3, [r7, #20]
  int button3 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3); //New Button, Need to replace with nucleo button that was being used
 8000f90:	2108      	movs	r1, #8
 8000f92:	4894      	ldr	r0, [pc, #592]	@ (80011e4 <main+0x31c>)
 8000f94:	f002 fb58 	bl	8003648 <HAL_GPIO_ReadPin>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	613b      	str	r3, [r7, #16]
  bool busy = false;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t start_powerdown = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	623b      	str	r3, [r7, #32]
  char str[] = "Jake Rules!";
 8000fa6:	4a90      	ldr	r2, [pc, #576]	@ (80011e8 <main+0x320>)
 8000fa8:	463b      	mov	r3, r7
 8000faa:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  uint8_t x = 10;
 8000fb0:	230a      	movs	r3, #10
 8000fb2:	73fb      	strb	r3, [r7, #15]
  uint8_t y = 10;
 8000fb4:	230a      	movs	r3, #10
 8000fb6:	73bb      	strb	r3, [r7, #14]
  printf("ABout to enter while loop\n");
 8000fb8:	488c      	ldr	r0, [pc, #560]	@ (80011ec <main+0x324>)
 8000fba:	f009 fa7b 	bl	800a4b4 <puts>
  while (1)
  {
	  printf("Inside while loop at the start\n");
 8000fbe:	488c      	ldr	r0, [pc, #560]	@ (80011f0 <main+0x328>)
 8000fc0:	f009 fa78 	bl	800a4b4 <puts>
	  //ssd1306_SetCursor(x, y);
	  //ssd1306_WriteString(str, Font_6x8, White);
	  //printf("%s\n", str);
	  //THERE IS SOME REDUNDANCY HERE NOT SURE WHAT TO KEEP/GET RID OF AT THE MOMENT, I THINK THE BUTTON INITIALIZATION ABOVE? BUT NOT SURE WHAT TO INITIALIZE THE BUTTONS TO ALSO SHOULD BE BOOLS?
	  //printf("Something\n");
	  button1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8000fc4:	2104      	movs	r1, #4
 8000fc6:	4887      	ldr	r0, [pc, #540]	@ (80011e4 <main+0x31c>)
 8000fc8:	f002 fb3e 	bl	8003648 <HAL_GPIO_ReadPin>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	61bb      	str	r3, [r7, #24]
	  button2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	4884      	ldr	r0, [pc, #528]	@ (80011e4 <main+0x31c>)
 8000fd4:	f002 fb38 	bl	8003648 <HAL_GPIO_ReadPin>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	617b      	str	r3, [r7, #20]
	  button3 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
 8000fdc:	2108      	movs	r1, #8
 8000fde:	4881      	ldr	r0, [pc, #516]	@ (80011e4 <main+0x31c>)
 8000fe0:	f002 fb32 	bl	8003648 <HAL_GPIO_ReadPin>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	613b      	str	r3, [r7, #16]
	          printf("Button 1 Pressed\n");  // Print message for Button 1
	      }*/
	    //NO USLEEP()
	  	  //printf("about to enter power_down\n");
	  	  //power_down();
	  	  if((count - start_powerdown >= 10000) && !busy){ //was 120,000
 8000fe8:	4b82      	ldr	r3, [pc, #520]	@ (80011f4 <main+0x32c>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	6a3b      	ldr	r3, [r7, #32]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d950      	bls.n	800109a <main+0x1d2>
 8000ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ffc:	f083 0301 	eor.w	r3, r3, #1
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	d049      	beq.n	800109a <main+0x1d2>
		     power_up();  // sensor_read wakes up controller from sleep w
 8001006:	f000 fc6f 	bl	80018e8 <power_up>

			  //printf("\033\143"); // TEMP - putty clear
			  printf("Checking new data..."); //screen shows 'updating'
 800100a:	487b      	ldr	r0, [pc, #492]	@ (80011f8 <main+0x330>)
 800100c:	f009 f9ea 	bl	800a3e4 <iprintf>

			  // update the new_entry and last_entry 'pointers' to the storage array
			  if(num_of_entries == 0){ // when there is no data, new_entry is set to the first value
 8001010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001012:	2b00      	cmp	r3, #0
 8001014:	d104      	bne.n	8001020 <main+0x158>
				  new_entry = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	633b      	str	r3, [r7, #48]	@ 0x30
				  last_entry = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800101e:	e017      	b.n	8001050 <main+0x188>
			  }
			  else{ // in normal operating, new_entry is incremented to not overwrite the previous read
				  //OLD: new_entry += 1;
				  new_entry = (new_entry+1) % max_entries; // will wrap around if reaching the end of the array
 8001020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001022:	3301      	adds	r3, #1
 8001024:	69fa      	ldr	r2, [r7, #28]
 8001026:	fb93 f2f2 	sdiv	r2, r3, r2
 800102a:	69f9      	ldr	r1, [r7, #28]
 800102c:	fb01 f202 	mul.w	r2, r1, r2
 8001030:	1a9b      	subs	r3, r3, r2
 8001032:	633b      	str	r3, [r7, #48]	@ 0x30
				  if(new_entry == last_entry){ // if this read will overwrite the oldest value, increase the pointer to the next oldest value
 8001034:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001038:	429a      	cmp	r2, r3
 800103a:	d109      	bne.n	8001050 <main+0x188>
				  		//last_entry += 1;
				  		last_entry = (last_entry+1) % max_entries; // will wrap around if reaching the end of the array
 800103c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800103e:	3301      	adds	r3, #1
 8001040:	69fa      	ldr	r2, [r7, #28]
 8001042:	fb93 f2f2 	sdiv	r2, r3, r2
 8001046:	69f9      	ldr	r1, [r7, #28]
 8001048:	fb01 f202 	mul.w	r2, r1, r2
 800104c:	1a9b      	subs	r3, r3, r2
 800104e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				last_entry += 1;
				last_entry = last_entry % max_entries; // will wrap around if reaching the end of the array
			  }*/
			  //printf("2\n");
			  //read from sensors to index of new_entry
			  store_data(&sample_array[new_entry]);
 8001050:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001052:	4613      	mov	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4a68      	ldr	r2, [pc, #416]	@ (80011fc <main+0x334>)
 800105c:	4413      	add	r3, r2
 800105e:	4618      	mov	r0, r3
 8001060:	f000 fd0c 	bl	8001a7c <store_data>

			  //printf("3\n");
			  entry_shown = new_entry; // show the most up-to-date data on the display
 8001064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001066:	637b      	str	r3, [r7, #52]	@ 0x34
			  if(num_of_entries < max_entries){ // increase the 'size' of the used array if not full yet
 8001068:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	429a      	cmp	r2, r3
 800106e:	da02      	bge.n	8001076 <main+0x1ae>
				  num_of_entries += 1;
 8001070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001072:	3301      	adds	r3, #1
 8001074:	62bb      	str	r3, [r7, #40]	@ 0x28
			  //HAL_Delay(500); //leave error messages on the screen for a moment
	  	  	  	  // TODO - store error messages to struct when they come up.

			  //update screen
			  //ssd1306_SetCursor(0, 8);
			  display_sample_struct(&sample_array[entry_shown], 1);
 8001076:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4a5e      	ldr	r2, [pc, #376]	@ (80011fc <main+0x334>)
 8001082:	4413      	add	r3, r2
 8001084:	2101      	movs	r1, #1
 8001086:	4618      	mov	r0, r3
 8001088:	f000 fc50 	bl	800192c <display_sample_struct>
			  ssd1306_UpdateScreen();
 800108c:	f000 fed6 	bl	8001e3c <ssd1306_UpdateScreen>
			  //printf("4\n");
			  power_down();
 8001090:	f000 fc08 	bl	80018a4 <power_down>
			  start_powerdown = count;
 8001094:	4b57      	ldr	r3, [pc, #348]	@ (80011f4 <main+0x32c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	623b      	str	r3, [r7, #32]





		 if(BspButtonState == BUTTON_PRESSED){
 800109a:	4b59      	ldr	r3, [pc, #356]	@ (8001200 <main+0x338>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	f040 8097 	bne.w	80011d2 <main+0x30a>
			  HAL_Delay(50);//input_detected = true; // debounce detector- won't run this section again until all buttons left unpressed.
 80010a4:	2032      	movs	r0, #50	@ 0x32
 80010a6:	f001 fea9 	bl	8002dfc <HAL_Delay>
			  if(BspButtonState == BUTTON_PRESSED){
 80010aa:	4b55      	ldr	r3, [pc, #340]	@ (8001200 <main+0x338>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	f040 808f 	bne.w	80011d2 <main+0x30a>
			  if(button2){ // Button 2 increments the index of the data shown on-screen
				  //printf("button2 was pressed\n");
				  entry_shown += 1;
				  entry_shown = entry_shown % num_of_entries;
			  }*/
			  if(BspButtonState == BUTTON_PRESSED){ //  Button 3 deposits available data to the SD card
 80010b4:	4b52      	ldr	r3, [pc, #328]	@ (8001200 <main+0x338>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	f040 808a 	bne.w	80011d2 <main+0x30a>
				  BspButtonState = BUTTON_RELEASED;
 80010be:	4b50      	ldr	r3, [pc, #320]	@ (8001200 <main+0x338>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
				  // REPURPOSED - instead this button with scan through all avaliable data, displaying each for each struct for a half second before transitioning to the next
				  entry_shown = last_entry;
 80010c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010c6:	637b      	str	r3, [r7, #52]	@ 0x34
				  printf("About to display 24 Hours worth of data\n");
 80010c8:	484e      	ldr	r0, [pc, #312]	@ (8001204 <main+0x33c>)
 80010ca:	f009 f9f3 	bl	800a4b4 <puts>
				  printf("***************************************\n");
 80010ce:	484e      	ldr	r0, [pc, #312]	@ (8001208 <main+0x340>)
 80010d0:	f009 f9f0 	bl	800a4b4 <puts>
				  printf("***************************************\n");
 80010d4:	484c      	ldr	r0, [pc, #304]	@ (8001208 <main+0x340>)
 80010d6:	f009 f9ed 	bl	800a4b4 <puts>
				  while(1){
					  busy = 1;
 80010da:	2301      	movs	r3, #1
 80010dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					//printf("\033\143"); //Clear terminal
					display_sample_struct(&sample_array[entry_shown], 1); //display on upper line
 80010e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80010e2:	4613      	mov	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4a44      	ldr	r2, [pc, #272]	@ (80011fc <main+0x334>)
 80010ec:	4413      	add	r3, r2
 80010ee:	2101      	movs	r1, #1
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 fc1b 	bl	800192c <display_sample_struct>
					ssd1306_UpdateScreen();
 80010f6:	f000 fea1 	bl	8001e3c <ssd1306_UpdateScreen>
					HAL_Delay(1000);
 80010fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010fe:	f001 fe7d 	bl	8002dfc <HAL_Delay>
					if(entry_shown +1 < num_of_entries){
 8001102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001104:	3301      	adds	r3, #1
 8001106:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001108:	429a      	cmp	r2, r3
 800110a:	dd0d      	ble.n	8001128 <main+0x260>
						display_sample_struct(&sample_array[entry_shown+1], 0); //display on lower line
 800110c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	4613      	mov	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4a38      	ldr	r2, [pc, #224]	@ (80011fc <main+0x334>)
 800111a:	4413      	add	r3, r2
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f000 fc04 	bl	800192c <display_sample_struct>
						ssd1306_UpdateScreen();
 8001124:	f000 fe8a 	bl	8001e3c <ssd1306_UpdateScreen>
					}
					HAL_Delay(1000);
 8001128:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800112c:	f001 fe66 	bl	8002dfc <HAL_Delay>
					if(entry_shown == new_entry){
 8001130:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001134:	429a      	cmp	r2, r3
 8001136:	d122      	bne.n	800117e <main+0x2b6>
						printf("REACHED END OF STORED DATA\n RESUMING NORMAL OPERATIONS\n");
 8001138:	4834      	ldr	r0, [pc, #208]	@ (800120c <main+0x344>)
 800113a:	f009 f9bb 	bl	800a4b4 <puts>
						printf("*******************************************************\n");
 800113e:	4834      	ldr	r0, [pc, #208]	@ (8001210 <main+0x348>)
 8001140:	f009 f9b8 	bl	800a4b4 <puts>
						printf("*******************************************************\n");
 8001144:	4832      	ldr	r0, [pc, #200]	@ (8001210 <main+0x348>)
 8001146:	f009 f9b5 	bl	800a4b4 <puts>
						ssd1306_Fill(Black);
 800114a:	2000      	movs	r0, #0
 800114c:	f000 fe5e 	bl	8001e0c <ssd1306_Fill>
						ssd1306_UpdateScreen();
 8001150:	f000 fe74 	bl	8001e3c <ssd1306_UpdateScreen>
						ssd1306_SetCursor(0,0);
 8001154:	2100      	movs	r1, #0
 8001156:	2000      	movs	r0, #0
 8001158:	f000 ffa4 	bl	80020a4 <ssd1306_SetCursor>
						ssd1306_WriteString("Reached End of Buffer", Font_6x8, White);
 800115c:	4b2d      	ldr	r3, [pc, #180]	@ (8001214 <main+0x34c>)
 800115e:	2201      	movs	r2, #1
 8001160:	9200      	str	r2, [sp, #0]
 8001162:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001164:	482c      	ldr	r0, [pc, #176]	@ (8001218 <main+0x350>)
 8001166:	f000 ff77 	bl	8002058 <ssd1306_WriteString>

						HAL_Delay(20000);
 800116a:	f644 6020 	movw	r0, #20000	@ 0x4e20
 800116e:	f001 fe45 	bl	8002dfc <HAL_Delay>
						ssd1306_Fill(Black);
 8001172:	2000      	movs	r0, #0
 8001174:	f000 fe4a 	bl	8001e0c <ssd1306_Fill>
						ssd1306_UpdateScreen();
 8001178:	f000 fe60 	bl	8001e3c <ssd1306_UpdateScreen>
						break;
 800117c:	e029      	b.n	80011d2 <main+0x30a>
					}
					entry_shown += 2; //entry_shown += 1;
 800117e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001180:	3302      	adds	r3, #2
 8001182:	637b      	str	r3, [r7, #52]	@ 0x34
					entry_shown = entry_shown % num_of_entries;
 8001184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001186:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001188:	fb93 f2f2 	sdiv	r2, r3, r2
 800118c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800118e:	fb01 f202 	mul.w	r2, r1, r2
 8001192:	1a9b      	subs	r3, r3, r2
 8001194:	637b      	str	r3, [r7, #52]	@ 0x34
					if((BspButtonState == BUTTON_PRESSED) || button2){ // Emergency abort of scan
 8001196:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <main+0x338>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d002      	beq.n	80011a4 <main+0x2dc>
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d09a      	beq.n	80010da <main+0x212>
						BspButtonState = BUTTON_RELEASED;
 80011a4:	4b16      	ldr	r3, [pc, #88]	@ (8001200 <main+0x338>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
						printf("ABORTING SCROLL\n RESUMING NORMAL FUNCTION WHEN BUTTON RELEASED\n");
 80011aa:	481c      	ldr	r0, [pc, #112]	@ (800121c <main+0x354>)
 80011ac:	f009 f982 	bl	800a4b4 <puts>
						while((BspButtonState == BUTTON_PRESSED) || button2){
 80011b0:	e005      	b.n	80011be <main+0x2f6>
							busy = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
							HAL_Delay(100);
 80011b8:	2064      	movs	r0, #100	@ 0x64
 80011ba:	f001 fe1f 	bl	8002dfc <HAL_Delay>
						while((BspButtonState == BUTTON_PRESSED) || button2){
 80011be:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <main+0x338>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d0f5      	beq.n	80011b2 <main+0x2ea>
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1f2      	bne.n	80011b2 <main+0x2ea>
						}
					busy = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				  }

			  }
		  	}
  	  	  }
		  HAL_Delay(5000);
 80011d2:	f241 3088 	movw	r0, #5000	@ 0x1388
 80011d6:	f001 fe11 	bl	8002dfc <HAL_Delay>
	  printf("Inside while loop at the start\n");
 80011da:	e6f0      	b.n	8000fbe <main+0xf6>
 80011dc:	20003a44 	.word	0x20003a44
 80011e0:	0800c768 	.word	0x0800c768
 80011e4:	42020000 	.word	0x42020000
 80011e8:	0800c8f4 	.word	0x0800c8f4
 80011ec:	0800c788 	.word	0x0800c788
 80011f0:	0800c7a4 	.word	0x0800c7a4
 80011f4:	20003ca8 	.word	0x20003ca8
 80011f8:	0800c7c4 	.word	0x0800c7c4
 80011fc:	20000204 	.word	0x20000204
 8001200:	20003a54 	.word	0x20003a54
 8001204:	0800c7dc 	.word	0x0800c7dc
 8001208:	0800c804 	.word	0x0800c804
 800120c:	0800c82c 	.word	0x0800c82c
 8001210:	0800c864 	.word	0x0800c864
 8001214:	0800cf70 	.word	0x0800cf70
 8001218:	0800c89c 	.word	0x0800c89c
 800121c:	0800c8b4 	.word	0x0800c8b4

08001220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b09e      	sub	sp, #120	@ 0x78
 8001224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001226:	f107 0318 	add.w	r3, r7, #24
 800122a:	2260      	movs	r2, #96	@ 0x60
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f009 fa5a 	bl	800a6e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001234:	463b      	mov	r3, r7
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]
 8001242:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001244:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8001248:	f003 f9a4 	bl	8004594 <HAL_PWREx_ControlVoltageScaling>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001252:	f000 fb19 	bl	8001888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8001256:	2318      	movs	r3, #24
 8001258:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800125a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800125e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001260:	2301      	movs	r3, #1
 8001262:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001264:	2310      	movs	r3, #16
 8001266:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8001268:	2300      	movs	r3, #0
 800126a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001270:	2302      	movs	r3, #2
 8001272:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001274:	2301      	movs	r3, #1
 8001276:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8001278:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800127c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 800127e:	2303      	movs	r3, #3
 8001280:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001282:	230a      	movs	r3, #10
 8001284:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001286:	2302      	movs	r3, #2
 8001288:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800128a:	2302      	movs	r3, #2
 800128c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 800128e:	2301      	movs	r3, #1
 8001290:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001292:	230c      	movs	r3, #12
 8001294:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129a:	f107 0318 	add.w	r3, r7, #24
 800129e:	4618      	mov	r0, r3
 80012a0:	f003 fa54 	bl	800474c <HAL_RCC_OscConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80012aa:	f000 faed 	bl	8001888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ae:	231f      	movs	r3, #31
 80012b0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b2:	2303      	movs	r3, #3
 80012b4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012c6:	463b      	mov	r3, r7
 80012c8:	2104      	movs	r1, #4
 80012ca:	4618      	mov	r0, r3
 80012cc:	f004 f91a 	bl	8005504 <HAL_RCC_ClockConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <SystemClock_Config+0xba>
  {
    Error_Handler();
 80012d6:	f000 fad7 	bl	8001888 <Error_Handler>
  }
}
 80012da:	bf00      	nop
 80012dc:	3778      	adds	r7, #120	@ 0x78
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	af00      	add	r7, sp, #0

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80012e6:	2002      	movs	r0, #2
 80012e8:	f003 f9e0 	bl	80046ac <HAL_PWREx_ConfigSupply>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <SystemPower_Config+0x14>
  {
    Error_Handler();
 80012f2:	f000 fac9 	bl	8001888 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001300:	4b1b      	ldr	r3, [pc, #108]	@ (8001370 <MX_I2C1_Init+0x74>)
 8001302:	4a1c      	ldr	r2, [pc, #112]	@ (8001374 <MX_I2C1_Init+0x78>)
 8001304:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 8001306:	4b1a      	ldr	r3, [pc, #104]	@ (8001370 <MX_I2C1_Init+0x74>)
 8001308:	4a1b      	ldr	r2, [pc, #108]	@ (8001378 <MX_I2C1_Init+0x7c>)
 800130a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800130c:	4b18      	ldr	r3, [pc, #96]	@ (8001370 <MX_I2C1_Init+0x74>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001312:	4b17      	ldr	r3, [pc, #92]	@ (8001370 <MX_I2C1_Init+0x74>)
 8001314:	2201      	movs	r2, #1
 8001316:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001318:	4b15      	ldr	r3, [pc, #84]	@ (8001370 <MX_I2C1_Init+0x74>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800131e:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <MX_I2C1_Init+0x74>)
 8001320:	2200      	movs	r2, #0
 8001322:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001324:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <MX_I2C1_Init+0x74>)
 8001326:	2200      	movs	r2, #0
 8001328:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800132a:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <MX_I2C1_Init+0x74>)
 800132c:	2200      	movs	r2, #0
 800132e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001330:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <MX_I2C1_Init+0x74>)
 8001332:	2200      	movs	r2, #0
 8001334:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001336:	480e      	ldr	r0, [pc, #56]	@ (8001370 <MX_I2C1_Init+0x74>)
 8001338:	f002 f9d0 	bl	80036dc <HAL_I2C_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001342:	f000 faa1 	bl	8001888 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001346:	2100      	movs	r1, #0
 8001348:	4809      	ldr	r0, [pc, #36]	@ (8001370 <MX_I2C1_Init+0x74>)
 800134a:	f003 f85b 	bl	8004404 <HAL_I2CEx_ConfigAnalogFilter>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001354:	f000 fa98 	bl	8001888 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001358:	2100      	movs	r1, #0
 800135a:	4805      	ldr	r0, [pc, #20]	@ (8001370 <MX_I2C1_Init+0x74>)
 800135c:	f003 f89d 	bl	800449a <HAL_I2CEx_ConfigDigitalFilter>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001366:	f000 fa8f 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20003a58 	.word	0x20003a58
 8001374:	40005400 	.word	0x40005400
 8001378:	30909dec 	.word	0x30909dec

0800137c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001380:	4b1b      	ldr	r3, [pc, #108]	@ (80013f0 <MX_I2C2_Init+0x74>)
 8001382:	4a1c      	ldr	r2, [pc, #112]	@ (80013f4 <MX_I2C2_Init+0x78>)
 8001384:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 8001386:	4b1a      	ldr	r3, [pc, #104]	@ (80013f0 <MX_I2C2_Init+0x74>)
 8001388:	4a1b      	ldr	r2, [pc, #108]	@ (80013f8 <MX_I2C2_Init+0x7c>)
 800138a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800138c:	4b18      	ldr	r3, [pc, #96]	@ (80013f0 <MX_I2C2_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001392:	4b17      	ldr	r3, [pc, #92]	@ (80013f0 <MX_I2C2_Init+0x74>)
 8001394:	2201      	movs	r2, #1
 8001396:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001398:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <MX_I2C2_Init+0x74>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800139e:	4b14      	ldr	r3, [pc, #80]	@ (80013f0 <MX_I2C2_Init+0x74>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013a4:	4b12      	ldr	r3, [pc, #72]	@ (80013f0 <MX_I2C2_Init+0x74>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013aa:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <MX_I2C2_Init+0x74>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013b0:	4b0f      	ldr	r3, [pc, #60]	@ (80013f0 <MX_I2C2_Init+0x74>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013b6:	480e      	ldr	r0, [pc, #56]	@ (80013f0 <MX_I2C2_Init+0x74>)
 80013b8:	f002 f990 	bl	80036dc <HAL_I2C_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80013c2:	f000 fa61 	bl	8001888 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013c6:	2100      	movs	r1, #0
 80013c8:	4809      	ldr	r0, [pc, #36]	@ (80013f0 <MX_I2C2_Init+0x74>)
 80013ca:	f003 f81b 	bl	8004404 <HAL_I2CEx_ConfigAnalogFilter>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80013d4:	f000 fa58 	bl	8001888 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80013d8:	2100      	movs	r1, #0
 80013da:	4805      	ldr	r0, [pc, #20]	@ (80013f0 <MX_I2C2_Init+0x74>)
 80013dc:	f003 f85d 	bl	800449a <HAL_I2CEx_ConfigDigitalFilter>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80013e6:	f000 fa4f 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20003aac 	.word	0x20003aac
 80013f4:	40005800 	.word	0x40005800
 80013f8:	30909dec 	.word	0x30909dec

080013fc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001400:	4b1b      	ldr	r3, [pc, #108]	@ (8001470 <MX_I2C3_Init+0x74>)
 8001402:	4a1c      	ldr	r2, [pc, #112]	@ (8001474 <MX_I2C3_Init+0x78>)
 8001404:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30909DEC;
 8001406:	4b1a      	ldr	r3, [pc, #104]	@ (8001470 <MX_I2C3_Init+0x74>)
 8001408:	4a1b      	ldr	r2, [pc, #108]	@ (8001478 <MX_I2C3_Init+0x7c>)
 800140a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800140c:	4b18      	ldr	r3, [pc, #96]	@ (8001470 <MX_I2C3_Init+0x74>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001412:	4b17      	ldr	r3, [pc, #92]	@ (8001470 <MX_I2C3_Init+0x74>)
 8001414:	2201      	movs	r2, #1
 8001416:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001418:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <MX_I2C3_Init+0x74>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800141e:	4b14      	ldr	r3, [pc, #80]	@ (8001470 <MX_I2C3_Init+0x74>)
 8001420:	2200      	movs	r2, #0
 8001422:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001424:	4b12      	ldr	r3, [pc, #72]	@ (8001470 <MX_I2C3_Init+0x74>)
 8001426:	2200      	movs	r2, #0
 8001428:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800142a:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <MX_I2C3_Init+0x74>)
 800142c:	2200      	movs	r2, #0
 800142e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001430:	4b0f      	ldr	r3, [pc, #60]	@ (8001470 <MX_I2C3_Init+0x74>)
 8001432:	2200      	movs	r2, #0
 8001434:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001436:	480e      	ldr	r0, [pc, #56]	@ (8001470 <MX_I2C3_Init+0x74>)
 8001438:	f002 f950 	bl	80036dc <HAL_I2C_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001442:	f000 fa21 	bl	8001888 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001446:	2100      	movs	r1, #0
 8001448:	4809      	ldr	r0, [pc, #36]	@ (8001470 <MX_I2C3_Init+0x74>)
 800144a:	f002 ffdb 	bl	8004404 <HAL_I2CEx_ConfigAnalogFilter>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001454:	f000 fa18 	bl	8001888 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001458:	2100      	movs	r1, #0
 800145a:	4805      	ldr	r0, [pc, #20]	@ (8001470 <MX_I2C3_Init+0x74>)
 800145c:	f003 f81d 	bl	800449a <HAL_I2CEx_ConfigDigitalFilter>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001466:	f000 fa0f 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20003b00 	.word	0x20003b00
 8001474:	46002800 	.word	0x46002800
 8001478:	30909dec 	.word	0x30909dec

0800147c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001480:	2000      	movs	r0, #0
 8001482:	f003 f857 	bl	8004534 <HAL_ICACHE_ConfigAssociativityMode>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800148c:	f000 f9fc 	bl	8001888 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001490:	f003 f870 	bl	8004574 <HAL_ICACHE_Enable>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800149a:	f000 f9f5 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08e      	sub	sp, #56	@ 0x38
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80014aa:	f107 031c 	add.w	r3, r7, #28
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	611a      	str	r2, [r3, #16]
 80014ba:	615a      	str	r2, [r3, #20]
 80014bc:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80014d2:	4b3d      	ldr	r3, [pc, #244]	@ (80015c8 <MX_RTC_Init+0x124>)
 80014d4:	4a3d      	ldr	r2, [pc, #244]	@ (80015cc <MX_RTC_Init+0x128>)
 80014d6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80014d8:	4b3b      	ldr	r3, [pc, #236]	@ (80015c8 <MX_RTC_Init+0x124>)
 80014da:	2200      	movs	r2, #0
 80014dc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80014de:	4b3a      	ldr	r3, [pc, #232]	@ (80015c8 <MX_RTC_Init+0x124>)
 80014e0:	227f      	movs	r2, #127	@ 0x7f
 80014e2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80014e4:	4b38      	ldr	r3, [pc, #224]	@ (80015c8 <MX_RTC_Init+0x124>)
 80014e6:	22ff      	movs	r2, #255	@ 0xff
 80014e8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80014ea:	4b37      	ldr	r3, [pc, #220]	@ (80015c8 <MX_RTC_Init+0x124>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_POS1;
 80014f0:	4b35      	ldr	r3, [pc, #212]	@ (80015c8 <MX_RTC_Init+0x124>)
 80014f2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80014f6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014f8:	4b33      	ldr	r3, [pc, #204]	@ (80015c8 <MX_RTC_Init+0x124>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80014fe:	4b32      	ldr	r3, [pc, #200]	@ (80015c8 <MX_RTC_Init+0x124>)
 8001500:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001504:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001506:	4b30      	ldr	r3, [pc, #192]	@ (80015c8 <MX_RTC_Init+0x124>)
 8001508:	2200      	movs	r2, #0
 800150a:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800150c:	4b2e      	ldr	r3, [pc, #184]	@ (80015c8 <MX_RTC_Init+0x124>)
 800150e:	2200      	movs	r2, #0
 8001510:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001512:	482d      	ldr	r0, [pc, #180]	@ (80015c8 <MX_RTC_Init+0x124>)
 8001514:	f006 ff92 	bl	800843c <HAL_RTC_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 800151e:	f000 f9b3 	bl	8001888 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001526:	2300      	movs	r3, #0
 8001528:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800152a:	2300      	movs	r3, #0
 800152c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800152e:	2300      	movs	r3, #0
 8001530:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001532:	f107 031c 	add.w	r3, r7, #28
 8001536:	4619      	mov	r1, r3
 8001538:	4823      	ldr	r0, [pc, #140]	@ (80015c8 <MX_RTC_Init+0x124>)
 800153a:	f007 faff 	bl	8008b3c <HAL_RTCEx_PrivilegeModeSet>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8001544:	f000 f9a0 	bl	8001888 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001548:	2300      	movs	r3, #0
 800154a:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 800154c:	2300      	movs	r3, #0
 800154e:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8001550:	2300      	movs	r3, #0
 8001552:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001558:	2300      	movs	r3, #0
 800155a:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800155c:	f107 0308 	add.w	r3, r7, #8
 8001560:	2201      	movs	r2, #1
 8001562:	4619      	mov	r1, r3
 8001564:	4818      	ldr	r0, [pc, #96]	@ (80015c8 <MX_RTC_Init+0x124>)
 8001566:	f006 ffeb 	bl	8008540 <HAL_RTC_SetTime>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_RTC_Init+0xd0>
  {
    Error_Handler();
 8001570:	f000 f98a 	bl	8001888 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001574:	2301      	movs	r3, #1
 8001576:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8001578:	2301      	movs	r3, #1
 800157a:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 800157c:	2301      	movs	r3, #1
 800157e:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8001580:	2300      	movs	r3, #0
 8001582:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	2201      	movs	r2, #1
 8001588:	4619      	mov	r1, r3
 800158a:	480f      	ldr	r0, [pc, #60]	@ (80015c8 <MX_RTC_Init+0x124>)
 800158c:	f007 f8e6 	bl	800875c <HAL_RTC_SetDate>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_RTC_Init+0xf6>
  {
    Error_Handler();
 8001596:	f000 f977 	bl	8001888 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 800159a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800159e:	480a      	ldr	r0, [pc, #40]	@ (80015c8 <MX_RTC_Init+0x124>)
 80015a0:	f007 fa98 	bl	8008ad4 <HAL_RTCEx_SetCalibrationOutPut>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80015aa:	f000 f96d 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  //HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);  // Set the interrupt priority
  HAL_NVIC_EnableIRQ(RTC_IRQn);
 80015ae:	2002      	movs	r0, #2
 80015b0:	f001 fd1a 	bl	8002fe8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2100      	movs	r1, #0
 80015b8:	2002      	movs	r0, #2
 80015ba:	f001 fcfb 	bl	8002fb4 <HAL_NVIC_SetPriority>
  /* USER CODE END RTC_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	3738      	adds	r7, #56	@ 0x38
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20003b54 	.word	0x20003b54
 80015cc:	46007800 	.word	0x46007800

080015d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015e0:	4b30      	ldr	r3, [pc, #192]	@ (80016a4 <MX_SPI1_Init+0xd4>)
 80015e2:	4a31      	ldr	r2, [pc, #196]	@ (80016a8 <MX_SPI1_Init+0xd8>)
 80015e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015e6:	4b2f      	ldr	r3, [pc, #188]	@ (80016a4 <MX_SPI1_Init+0xd4>)
 80015e8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80015ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015ee:	4b2d      	ldr	r3, [pc, #180]	@ (80016a4 <MX_SPI1_Init+0xd4>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80015f4:	4b2b      	ldr	r3, [pc, #172]	@ (80016a4 <MX_SPI1_Init+0xd4>)
 80015f6:	2203      	movs	r2, #3
 80015f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015fa:	4b2a      	ldr	r3, [pc, #168]	@ (80016a4 <MX_SPI1_Init+0xd4>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001600:	4b28      	ldr	r3, [pc, #160]	@ (80016a4 <MX_SPI1_Init+0xd4>)
 8001602:	2200      	movs	r2, #0
 8001604:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001606:	4b27      	ldr	r3, [pc, #156]	@ (80016a4 <MX_SPI1_Init+0xd4>)
 8001608:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800160c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800160e:	4b25      	ldr	r3, [pc, #148]	@ (80016a4 <MX_SPI1_Init+0xd4>)
 8001610:	2200      	movs	r2, #0
 8001612:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001614:	4b23      	ldr	r3, [pc, #140]	@ (80016a4 <MX_SPI1_Init+0xd4>)
 8001616:	2200      	movs	r2, #0
 8001618:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800161a:	4b22      	ldr	r3, [pc, #136]	@ (80016a4 <MX_SPI1_Init+0xd4>)
 800161c:	2200      	movs	r2, #0
 800161e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001620:	4b20      	ldr	r3, [pc, #128]	@ (80016a4 <MX_SPI1_Init+0xd4>)
 8001622:	2200      	movs	r2, #0
 8001624:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001626:	4b1f      	ldr	r3, [pc, #124]	@ (80016a4 <MX_SPI1_Init+0xd4>)
 8001628:	2207      	movs	r2, #7
 800162a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800162c:	4b1d      	ldr	r3, [pc, #116]	@ (80016a4 <MX_SPI1_Init+0xd4>)
 800162e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001632:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001634:	4b1b      	ldr	r3, [pc, #108]	@ (80016a4 <MX_SPI1_Init+0xd4>)
 8001636:	2200      	movs	r2, #0
 8001638:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800163a:	4b1a      	ldr	r3, [pc, #104]	@ (80016a4 <MX_SPI1_Init+0xd4>)
 800163c:	2200      	movs	r2, #0
 800163e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001640:	4b18      	ldr	r3, [pc, #96]	@ (80016a4 <MX_SPI1_Init+0xd4>)
 8001642:	2200      	movs	r2, #0
 8001644:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001646:	4b17      	ldr	r3, [pc, #92]	@ (80016a4 <MX_SPI1_Init+0xd4>)
 8001648:	2200      	movs	r2, #0
 800164a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800164c:	4b15      	ldr	r3, [pc, #84]	@ (80016a4 <MX_SPI1_Init+0xd4>)
 800164e:	2200      	movs	r2, #0
 8001650:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001652:	4b14      	ldr	r3, [pc, #80]	@ (80016a4 <MX_SPI1_Init+0xd4>)
 8001654:	2200      	movs	r2, #0
 8001656:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001658:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <MX_SPI1_Init+0xd4>)
 800165a:	2200      	movs	r2, #0
 800165c:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800165e:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <MX_SPI1_Init+0xd4>)
 8001660:	2200      	movs	r2, #0
 8001662:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001664:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <MX_SPI1_Init+0xd4>)
 8001666:	2200      	movs	r2, #0
 8001668:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800166a:	480e      	ldr	r0, [pc, #56]	@ (80016a4 <MX_SPI1_Init+0xd4>)
 800166c:	f007 fa94 	bl	8008b98 <HAL_SPI_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 8001676:	f000 f907 	bl	8001888 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 800167e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001682:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	4619      	mov	r1, r3
 800168c:	4805      	ldr	r0, [pc, #20]	@ (80016a4 <MX_SPI1_Init+0xd4>)
 800168e:	f007 fbb4 	bl	8008dfa <HAL_SPIEx_SetConfigAutonomousMode>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 8001698:	f000 f8f6 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800169c:	bf00      	nop
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20003b84 	.word	0x20003b84
 80016a8:	40013000 	.word	0x40013000

080016ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016b0:	4b22      	ldr	r3, [pc, #136]	@ (800173c <MX_USART3_UART_Init+0x90>)
 80016b2:	4a23      	ldr	r2, [pc, #140]	@ (8001740 <MX_USART3_UART_Init+0x94>)
 80016b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016b6:	4b21      	ldr	r3, [pc, #132]	@ (800173c <MX_USART3_UART_Init+0x90>)
 80016b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016be:	4b1f      	ldr	r3, [pc, #124]	@ (800173c <MX_USART3_UART_Init+0x90>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016c4:	4b1d      	ldr	r3, [pc, #116]	@ (800173c <MX_USART3_UART_Init+0x90>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016ca:	4b1c      	ldr	r3, [pc, #112]	@ (800173c <MX_USART3_UART_Init+0x90>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016d0:	4b1a      	ldr	r3, [pc, #104]	@ (800173c <MX_USART3_UART_Init+0x90>)
 80016d2:	220c      	movs	r2, #12
 80016d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016d6:	4b19      	ldr	r3, [pc, #100]	@ (800173c <MX_USART3_UART_Init+0x90>)
 80016d8:	2200      	movs	r2, #0
 80016da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016dc:	4b17      	ldr	r3, [pc, #92]	@ (800173c <MX_USART3_UART_Init+0x90>)
 80016de:	2200      	movs	r2, #0
 80016e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016e2:	4b16      	ldr	r3, [pc, #88]	@ (800173c <MX_USART3_UART_Init+0x90>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016e8:	4b14      	ldr	r3, [pc, #80]	@ (800173c <MX_USART3_UART_Init+0x90>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ee:	4b13      	ldr	r3, [pc, #76]	@ (800173c <MX_USART3_UART_Init+0x90>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016f4:	4811      	ldr	r0, [pc, #68]	@ (800173c <MX_USART3_UART_Init+0x90>)
 80016f6:	f007 fbc1 	bl	8008e7c <HAL_UART_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001700:	f000 f8c2 	bl	8001888 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001704:	2100      	movs	r1, #0
 8001706:	480d      	ldr	r0, [pc, #52]	@ (800173c <MX_USART3_UART_Init+0x90>)
 8001708:	f008 f886 	bl	8009818 <HAL_UARTEx_SetTxFifoThreshold>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001712:	f000 f8b9 	bl	8001888 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001716:	2100      	movs	r1, #0
 8001718:	4808      	ldr	r0, [pc, #32]	@ (800173c <MX_USART3_UART_Init+0x90>)
 800171a:	f008 f8bb 	bl	8009894 <HAL_UARTEx_SetRxFifoThreshold>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001724:	f000 f8b0 	bl	8001888 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001728:	4804      	ldr	r0, [pc, #16]	@ (800173c <MX_USART3_UART_Init+0x90>)
 800172a:	f008 f83c 	bl	80097a6 <HAL_UARTEx_DisableFifoMode>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001734:	f000 f8a8 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20003c14 	.word	0x20003c14
 8001740:	40004800 	.word	0x40004800

08001744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08a      	sub	sp, #40	@ 0x28
 8001748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
 8001758:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800175a:	4b3e      	ldr	r3, [pc, #248]	@ (8001854 <MX_GPIO_Init+0x110>)
 800175c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001760:	4a3c      	ldr	r2, [pc, #240]	@ (8001854 <MX_GPIO_Init+0x110>)
 8001762:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001766:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800176a:	4b3a      	ldr	r3, [pc, #232]	@ (8001854 <MX_GPIO_Init+0x110>)
 800176c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001770:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001778:	4b36      	ldr	r3, [pc, #216]	@ (8001854 <MX_GPIO_Init+0x110>)
 800177a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800177e:	4a35      	ldr	r2, [pc, #212]	@ (8001854 <MX_GPIO_Init+0x110>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001788:	4b32      	ldr	r3, [pc, #200]	@ (8001854 <MX_GPIO_Init+0x110>)
 800178a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	4b2f      	ldr	r3, [pc, #188]	@ (8001854 <MX_GPIO_Init+0x110>)
 8001798:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800179c:	4a2d      	ldr	r2, [pc, #180]	@ (8001854 <MX_GPIO_Init+0x110>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001854 <MX_GPIO_Init+0x110>)
 80017a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b4:	4b27      	ldr	r3, [pc, #156]	@ (8001854 <MX_GPIO_Init+0x110>)
 80017b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017ba:	4a26      	ldr	r2, [pc, #152]	@ (8001854 <MX_GPIO_Init+0x110>)
 80017bc:	f043 0302 	orr.w	r3, r3, #2
 80017c0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017c4:	4b23      	ldr	r3, [pc, #140]	@ (8001854 <MX_GPIO_Init+0x110>)
 80017c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_11, GPIO_PIN_RESET);
 80017d2:	2200      	movs	r2, #0
 80017d4:	f44f 6101 	mov.w	r1, #2064	@ 0x810
 80017d8:	481f      	ldr	r0, [pc, #124]	@ (8001858 <MX_GPIO_Init+0x114>)
 80017da:	f001 ff4d 	bl	8003678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 80017de:	2200      	movs	r2, #0
 80017e0:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80017e4:	481d      	ldr	r0, [pc, #116]	@ (800185c <MX_GPIO_Init+0x118>)
 80017e6:	f001 ff47 	bl	8003678 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80017ea:	230d      	movs	r3, #13
 80017ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	4816      	ldr	r0, [pc, #88]	@ (8001858 <MX_GPIO_Init+0x114>)
 80017fe:	f001 fd4b 	bl	8003298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11;
 8001802:	f44f 6301 	mov.w	r3, #2064	@ 0x810
 8001806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001808:	2301      	movs	r3, #1
 800180a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	2300      	movs	r3, #0
 8001812:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	4619      	mov	r1, r3
 800181a:	480f      	ldr	r0, [pc, #60]	@ (8001858 <MX_GPIO_Init+0x114>)
 800181c:	f001 fd3c 	bl	8003298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001820:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001826:	2301      	movs	r3, #1
 8001828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2300      	movs	r3, #0
 8001830:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4619      	mov	r1, r3
 8001838:	4808      	ldr	r0, [pc, #32]	@ (800185c <MX_GPIO_Init+0x118>)
 800183a:	f001 fd2d 	bl	8003298 <HAL_GPIO_Init>
  //	  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
    //  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
     // GPIO_InitStruct.Pull = GPIO_PULLUP;
      //GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
     // GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	4619      	mov	r1, r3
 8001844:	4805      	ldr	r0, [pc, #20]	@ (800185c <MX_GPIO_Init+0x118>)
 8001846:	f001 fd27 	bl	8003298 <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 800184a:	bf00      	nop
 800184c:	3728      	adds	r7, #40	@ 0x28
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	46020c00 	.word	0x46020c00
 8001858:	42020000 	.word	0x42020000
 800185c:	42020800 	.word	0x42020800

08001860 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d102      	bne.n	8001876 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8001870:	4b04      	ldr	r3, [pc, #16]	@ (8001884 <BSP_PB_Callback+0x24>)
 8001872:	2201      	movs	r2, #1
 8001874:	601a      	str	r2, [r3, #0]
  }
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	20003a54 	.word	0x20003a54

08001888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800188c:	b672      	cpsid	i
}
 800188e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  BSP_LED_Toggle(LED_GREEN);
 8001890:	2000      	movs	r0, #0
 8001892:	f001 f861 	bl	8002958 <BSP_LED_Toggle>
	  HAL_Delay(500);
 8001896:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800189a:	f001 faaf 	bl	8002dfc <HAL_Delay>
	  BSP_LED_Toggle(LED_GREEN);
 800189e:	bf00      	nop
 80018a0:	e7f6      	b.n	8001890 <Error_Handler+0x8>
	...

080018a4 <power_down>:
 */
#include "main.h"
#include "power.h"
#include "peripheral.h"

void power_down(void){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); //Demonstrate Low Power Mode
 80018a8:	2200      	movs	r2, #0
 80018aa:	2110      	movs	r1, #16
 80018ac:	480b      	ldr	r0, [pc, #44]	@ (80018dc <power_down+0x38>)
 80018ae:	f001 fee3 	bl	8003678 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80018b2:	2032      	movs	r0, #50	@ 0x32
 80018b4:	f001 faa2 	bl	8002dfc <HAL_Delay>
	 __HAL_I2C_DISABLE(&hi2c3); //illuminance sensor
 80018b8:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <power_down+0x3c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <power_down+0x3c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 0201 	bic.w	r2, r2, #1
 80018c6:	601a      	str	r2, [r3, #0]

	 __HAL_I2C_DISABLE(&hi2c1); //temp and humidity sensor
 80018c8:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <power_down+0x40>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <power_down+0x40>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0201 	bic.w	r2, r2, #1
 80018d6:	601a      	str	r2, [r3, #0]
}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	42020000 	.word	0x42020000
 80018e0:	20003b00 	.word	0x20003b00
 80018e4:	20003a58 	.word	0x20003a58

080018e8 <power_up>:

void power_up(void){
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); //Demonstrate Low Power Mode
 80018ec:	2201      	movs	r2, #1
 80018ee:	2110      	movs	r1, #16
 80018f0:	480b      	ldr	r0, [pc, #44]	@ (8001920 <power_up+0x38>)
 80018f2:	f001 fec1 	bl	8003678 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80018f6:	2032      	movs	r0, #50	@ 0x32
 80018f8:	f001 fa80 	bl	8002dfc <HAL_Delay>
	 __HAL_I2C_ENABLE(&hi2c3); //illuminance sensor
 80018fc:	4b09      	ldr	r3, [pc, #36]	@ (8001924 <power_up+0x3c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <power_up+0x3c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0201 	orr.w	r2, r2, #1
 800190a:	601a      	str	r2, [r3, #0]

	 __HAL_I2C_ENABLE(&hi2c1); //temperature and humidity sensor
 800190c:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <power_up+0x40>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <power_up+0x40>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f042 0201 	orr.w	r2, r2, #1
 800191a:	601a      	str	r2, [r3, #0]
}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}
 8001920:	42020000 	.word	0x42020000
 8001924:	20003b00 	.word	0x20003b00
 8001928:	20003a58 	.word	0x20003a58

0800192c <display_sample_struct>:
#include "data_struct.h"
#include "ssd1306.h"
#include "ssd1306_tests.h"
#include "ssd1306_fonts.h"

void display_sample_struct(samples *sample, int position){ // temporary Putty code while trying to figure out our display
 800192c:	b5b0      	push	{r4, r5, r7, lr}
 800192e:	b092      	sub	sp, #72	@ 0x48
 8001930:	af04      	add	r7, sp, #16
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
// Example use: display_sample_struct( *store_data[entry_shown]);
	char buff1[21];
	char buff2[21];
	if(position){
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d04a      	beq.n	80019d2 <display_sample_struct+0xa6>
		ssd1306_SetCursor(0, 0);
 800193c:	2100      	movs	r1, #0
 800193e:	2000      	movs	r0, #0
 8001940:	f000 fbb0 	bl	80020a4 <ssd1306_SetCursor>
		sprintf(buff1, "%d/%d/%d %d:%d",sample->month,sample->day,sample->year,sample->hours,sample->minutes);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	785b      	ldrb	r3, [r3, #1]
 8001948:	461c      	mov	r4, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	461d      	mov	r5, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	789b      	ldrb	r3, [r3, #2]
 8001954:	461a      	mov	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	78db      	ldrb	r3, [r3, #3]
 800195a:	4619      	mov	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	791b      	ldrb	r3, [r3, #4]
 8001960:	f107 0020 	add.w	r0, r7, #32
 8001964:	9302      	str	r3, [sp, #8]
 8001966:	9101      	str	r1, [sp, #4]
 8001968:	9200      	str	r2, [sp, #0]
 800196a:	462b      	mov	r3, r5
 800196c:	4622      	mov	r2, r4
 800196e:	4940      	ldr	r1, [pc, #256]	@ (8001a70 <display_sample_struct+0x144>)
 8001970:	f008 fda8 	bl	800a4c4 <siprintf>
		ssd1306_WriteString(buff1, Font_6x8, White);
 8001974:	4b3f      	ldr	r3, [pc, #252]	@ (8001a74 <display_sample_struct+0x148>)
 8001976:	f107 0020 	add.w	r0, r7, #32
 800197a:	2201      	movs	r2, #1
 800197c:	9200      	str	r2, [sp, #0]
 800197e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001980:	f000 fb6a 	bl	8002058 <ssd1306_WriteString>

		ssd1306_SetCursor(0, 8);
 8001984:	2108      	movs	r1, #8
 8001986:	2000      	movs	r0, #0
 8001988:	f000 fb8c 	bl	80020a4 <ssd1306_SetCursor>
		sprintf(buff2,"T:%0.1f H:%0.1f I:%d", sample->temp, sample->humid, sample->irrad);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fddd 	bl	8000550 <__aeabi_f2d>
 8001996:	4604      	mov	r4, r0
 8001998:	460d      	mov	r5, r1
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fdd6 	bl	8000550 <__aeabi_f2d>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	6909      	ldr	r1, [r1, #16]
 80019ac:	f107 0008 	add.w	r0, r7, #8
 80019b0:	9102      	str	r1, [sp, #8]
 80019b2:	e9cd 2300 	strd	r2, r3, [sp]
 80019b6:	4622      	mov	r2, r4
 80019b8:	462b      	mov	r3, r5
 80019ba:	492f      	ldr	r1, [pc, #188]	@ (8001a78 <display_sample_struct+0x14c>)
 80019bc:	f008 fd82 	bl	800a4c4 <siprintf>
		ssd1306_WriteString(buff2, Font_6x8, White);
 80019c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001a74 <display_sample_struct+0x148>)
 80019c2:	f107 0008 	add.w	r0, r7, #8
 80019c6:	2201      	movs	r2, #1
 80019c8:	9200      	str	r2, [sp, #0]
 80019ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019cc:	f000 fb44 	bl	8002058 <ssd1306_WriteString>
	/*printf("\033\143"); //clear Putty
	printf("Date/Time - %d/%d/%d - %d:%d\n",sample->month,sample->day,sample->year,sample->hours,sample->minutes); //print data and time in a single line
	printf("Temperature - %f\u00B0C\n", sample->temp); //print temperature with degree symbol
	printf("Humidity - %f\n", sample->humid); //print relative humidity
	printf("Irradiance - %d\n", sample->irrad); //print irradiance (may require additional filtering)*/
}
 80019d0:	e049      	b.n	8001a66 <display_sample_struct+0x13a>
		ssd1306_SetCursor(0, 16);
 80019d2:	2110      	movs	r1, #16
 80019d4:	2000      	movs	r0, #0
 80019d6:	f000 fb65 	bl	80020a4 <ssd1306_SetCursor>
		sprintf(buff1, "%d/%d/%d %d:%d",sample->month,sample->day,sample->year,sample->hours,sample->minutes);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	785b      	ldrb	r3, [r3, #1]
 80019de:	461c      	mov	r4, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	461d      	mov	r5, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	789b      	ldrb	r3, [r3, #2]
 80019ea:	461a      	mov	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	78db      	ldrb	r3, [r3, #3]
 80019f0:	4619      	mov	r1, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	791b      	ldrb	r3, [r3, #4]
 80019f6:	f107 0020 	add.w	r0, r7, #32
 80019fa:	9302      	str	r3, [sp, #8]
 80019fc:	9101      	str	r1, [sp, #4]
 80019fe:	9200      	str	r2, [sp, #0]
 8001a00:	462b      	mov	r3, r5
 8001a02:	4622      	mov	r2, r4
 8001a04:	491a      	ldr	r1, [pc, #104]	@ (8001a70 <display_sample_struct+0x144>)
 8001a06:	f008 fd5d 	bl	800a4c4 <siprintf>
	    ssd1306_WriteString(buff1, Font_6x8, White);
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a74 <display_sample_struct+0x148>)
 8001a0c:	f107 0020 	add.w	r0, r7, #32
 8001a10:	2201      	movs	r2, #1
 8001a12:	9200      	str	r2, [sp, #0]
 8001a14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a16:	f000 fb1f 	bl	8002058 <ssd1306_WriteString>
	    ssd1306_SetCursor(0, 24);
 8001a1a:	2118      	movs	r1, #24
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f000 fb41 	bl	80020a4 <ssd1306_SetCursor>
	    sprintf(buff2,"T:%0.1f H:%0.1f I:%d", sample->temp, sample->humid, sample->irrad);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fd92 	bl	8000550 <__aeabi_f2d>
 8001a2c:	4604      	mov	r4, r0
 8001a2e:	460d      	mov	r5, r1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fd8b 	bl	8000550 <__aeabi_f2d>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	6909      	ldr	r1, [r1, #16]
 8001a42:	f107 0008 	add.w	r0, r7, #8
 8001a46:	9102      	str	r1, [sp, #8]
 8001a48:	e9cd 2300 	strd	r2, r3, [sp]
 8001a4c:	4622      	mov	r2, r4
 8001a4e:	462b      	mov	r3, r5
 8001a50:	4909      	ldr	r1, [pc, #36]	@ (8001a78 <display_sample_struct+0x14c>)
 8001a52:	f008 fd37 	bl	800a4c4 <siprintf>
		ssd1306_WriteString(buff2, Font_6x8, White);
 8001a56:	4b07      	ldr	r3, [pc, #28]	@ (8001a74 <display_sample_struct+0x148>)
 8001a58:	f107 0008 	add.w	r0, r7, #8
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	9200      	str	r2, [sp, #0]
 8001a60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a62:	f000 faf9 	bl	8002058 <ssd1306_WriteString>
}
 8001a66:	bf00      	nop
 8001a68:	3738      	adds	r7, #56	@ 0x38
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	0800c900 	.word	0x0800c900
 8001a74:	0800cf70 	.word	0x0800cf70
 8001a78:	0800c910 	.word	0x0800c910

08001a7c <store_data>:

#define I2C1_SLAVE_ADDR	(0x44<<1) //Temp and Humid device address is 0x44, Hal expects 8 bit address though.
#define I2C3_SLAVE_ADDR (0x23<<1) //HAL expects 8 bit address, if you pull addr pin high address changes 0x23low, 0x5c high (IRRD


void store_data(samples *sample_inst){
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b096      	sub	sp, #88	@ 0x58
 8001a80:	af02      	add	r7, sp, #8
 8001a82:	6078      	str	r0, [r7, #4]

	uint8_t SEND_DATA_TH[2] = {0x24, 0x16}; 	//LOW REPEATABILITY, CLOCK STRETCHING DISSABLED
 8001a84:	f241 6324 	movw	r3, #5668	@ 0x1624
 8001a88:	873b      	strh	r3, [r7, #56]	@ 0x38
	uint8_t HUM_TEMP_DATA[6] = {}; 				//2 bytes for temp, 2 bytes for humid, then checksum
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a8e:	2300      	movs	r3, #0
 8001a90:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t SI_SENSOR_ON[1] = {0x01};			// Solar intensity sensor on opcode
 8001a92:	2301      	movs	r3, #1
 8001a94:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	//uint8_t SI_SENSOR_OFF[1] = {0x00};//Solar Intensity sensor off opcode
	uint8_t SI_SENSOR_READ[1] = {0x20}; 		//One time read/ standard command, dont need mode 2 for lowlight
 8001a98:	2320      	movs	r3, #32
 8001a9a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	uint8_t SI_SENSOR_DATA[2] = {};
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	84bb      	strh	r3, [r7, #36]	@ 0x24


	//Query temperature and humidity sensor for a one time measurement, automatically shutsdown after single measurement mode
  	if(HAL_I2C_Master_Transmit(&hi2c1, I2C1_SLAVE_ADDR, SEND_DATA_TH, 2, HAL_MAX_DELAY) != HAL_OK){ //Write 00
 8001aa2:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	2302      	movs	r3, #2
 8001aae:	2188      	movs	r1, #136	@ 0x88
 8001ab0:	4873      	ldr	r0, [pc, #460]	@ (8001c80 <store_data+0x204>)
 8001ab2:	f001 feaf 	bl	8003814 <HAL_I2C_Master_Transmit>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d006      	beq.n	8001aca <store_data+0x4e>
  		printf("ERROR!\n");;
 8001abc:	4871      	ldr	r0, [pc, #452]	@ (8001c84 <store_data+0x208>)
 8001abe:	f008 fcf9 	bl	800a4b4 <puts>
  	    HAL_Delay(1000);
 8001ac2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ac6:	f001 f999 	bl	8002dfc <HAL_Delay>
  	 }

  	 HAL_Delay(100);
 8001aca:	2064      	movs	r0, #100	@ 0x64
 8001acc:	f001 f996 	bl	8002dfc <HAL_Delay>

  	 //Get the response from the sensor, 3rd byte is checksum, don't need that just ignore when combining values
  	 if(HAL_I2C_Master_Receive(&hi2c1, (I2C1_SLAVE_ADDR | 0x01), HUM_TEMP_DATA, 6, HAL_MAX_DELAY)!=HAL_OK){ //read |0x01
 8001ad0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	2306      	movs	r3, #6
 8001adc:	2189      	movs	r1, #137	@ 0x89
 8001ade:	4868      	ldr	r0, [pc, #416]	@ (8001c80 <store_data+0x204>)
 8001ae0:	f001 ff8c 	bl	80039fc <HAL_I2C_Master_Receive>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d006      	beq.n	8001af8 <store_data+0x7c>
  		 printf("ERROR!\n");;
 8001aea:	4866      	ldr	r0, [pc, #408]	@ (8001c84 <store_data+0x208>)
 8001aec:	f008 fce2 	bl	800a4b4 <puts>
  		 HAL_Delay(1000);
 8001af0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001af4:	f001 f982 	bl	8002dfc <HAL_Delay>
  	 }
  	 uint16_t temp_raw = HUM_TEMP_DATA[0] << 8 | HUM_TEMP_DATA[1]; 			//Combine the two bytes into one temperature value
 8001af8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001afc:	021b      	lsls	r3, r3, #8
 8001afe:	b21a      	sxth	r2, r3
 8001b00:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8001b04:	b21b      	sxth	r3, r3
 8001b06:	4313      	orrs	r3, r2
 8001b08:	b21b      	sxth	r3, r3
 8001b0a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  	 uint16_t humidity_raw = HUM_TEMP_DATA[3] << 8 | HUM_TEMP_DATA[4];		//Combine the humidity values raw
 8001b0e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	b21a      	sxth	r2, r3
 8001b16:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001b1a:	b21b      	sxth	r3, r3
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	b21b      	sxth	r3, r3
 8001b20:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
  	 float temp_F = -49 + 315*((float)temp_raw/65535); 						//convert raw reading to Fahrenheit
 8001b24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001b28:	ee07 3a90 	vmov	s15, r3
 8001b2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b30:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8001c88 <store_data+0x20c>
 8001b34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b38:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8001c8c <store_data+0x210>
 8001b3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b40:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8001c90 <store_data+0x214>
 8001b44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b48:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	 float rel_humidity = 100*((float)humidity_raw/65535); 					//Convert raw reading to humidity%
 8001b4c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001b50:	ee07 3a90 	vmov	s15, r3
 8001b54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b58:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8001c88 <store_data+0x20c>
 8001b5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b60:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8001c94 <store_data+0x218>
 8001b64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b68:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44


	 /*******************************************************TEST*************************************************************/
	 sample_inst->temp = temp_F;											//Update the array for temperature(F)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001b70:	609a      	str	r2, [r3, #8]

	 //HAL_Delay(500);

	 //printf("HUMIDITY: %f\n", rel_humidity);

	 sample_inst->humid = rel_humidity; 									//Update the array for humidity
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001b76:	60da      	str	r2, [r3, #12]
  //__HAL_I2C_ENABLE(&hi2c3);
  //HAL_Delay(100);

   /****************************************************SOLAR INTENSITY****************************************************/
  	//Query Illuminance sensor to get it turned on
  	if(HAL_I2C_Master_Transmit(&hi2c3, I2C3_SLAVE_ADDR, SI_SENSOR_ON, 1, 100) != HAL_OK){ //write
 8001b78:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001b7c:	2364      	movs	r3, #100	@ 0x64
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	2301      	movs	r3, #1
 8001b82:	2146      	movs	r1, #70	@ 0x46
 8001b84:	4844      	ldr	r0, [pc, #272]	@ (8001c98 <store_data+0x21c>)
 8001b86:	f001 fe45 	bl	8003814 <HAL_I2C_Master_Transmit>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d006      	beq.n	8001b9e <store_data+0x122>
  		  	printf("ERROR!\n");
 8001b90:	483c      	ldr	r0, [pc, #240]	@ (8001c84 <store_data+0x208>)
 8001b92:	f008 fc8f 	bl	800a4b4 <puts>
  		  	HAL_Delay(1000);
 8001b96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b9a:	f001 f92f 	bl	8002dfc <HAL_Delay>
    } else{
    	//printf("Im so turned on rn\n");
    }

  	HAL_Delay(10);
 8001b9e:	200a      	movs	r0, #10
 8001ba0:	f001 f92c 	bl	8002dfc <HAL_Delay>
  	//Query sensor to get a reading
  	if(HAL_I2C_Master_Transmit(&hi2c3, I2C3_SLAVE_ADDR, SI_SENSOR_READ, 1, 10) != HAL_OK){ //write
 8001ba4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001ba8:	230a      	movs	r3, #10
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	2301      	movs	r3, #1
 8001bae:	2146      	movs	r1, #70	@ 0x46
 8001bb0:	4839      	ldr	r0, [pc, #228]	@ (8001c98 <store_data+0x21c>)
 8001bb2:	f001 fe2f 	bl	8003814 <HAL_I2C_Master_Transmit>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d006      	beq.n	8001bca <store_data+0x14e>
  		printf("ERROR!\n");;
 8001bbc:	4831      	ldr	r0, [pc, #196]	@ (8001c84 <store_data+0x208>)
 8001bbe:	f008 fc79 	bl	800a4b4 <puts>
  		HAL_Delay(1000);
 8001bc2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bc6:	f001 f919 	bl	8002dfc <HAL_Delay>
    }

  	HAL_Delay(120);
 8001bca:	2078      	movs	r0, #120	@ 0x78
 8001bcc:	f001 f916 	bl	8002dfc <HAL_Delay>
  	//Grab measured illuminance from the
  	if(HAL_I2C_Master_Receive(&hi2c3, (I2C3_SLAVE_ADDR | 0x01), SI_SENSOR_DATA, 2, 10)!=HAL_OK){ //Read
 8001bd0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001bd4:	230a      	movs	r3, #10
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	2302      	movs	r3, #2
 8001bda:	2147      	movs	r1, #71	@ 0x47
 8001bdc:	482e      	ldr	r0, [pc, #184]	@ (8001c98 <store_data+0x21c>)
 8001bde:	f001 ff0d 	bl	80039fc <HAL_I2C_Master_Receive>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d006      	beq.n	8001bf6 <store_data+0x17a>

  		printf("ERROR!\n");;
 8001be8:	4826      	ldr	r0, [pc, #152]	@ (8001c84 <store_data+0x208>)
 8001bea:	f008 fc63 	bl	800a4b4 <puts>
  		HAL_Delay(1000);
 8001bee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bf2:	f001 f903 	bl	8002dfc <HAL_Delay>
    }

  	HAL_Delay(100);
 8001bf6:	2064      	movs	r0, #100	@ 0x64
 8001bf8:	f001 f900 	bl	8002dfc <HAL_Delay>
  	//printf("Got here #3\n");
  	uint16_t raw_intensity = SI_SENSOR_DATA[0] << 8 | SI_SENSOR_DATA[1]; 	//format the sensor data 16 bits
 8001bfc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	b21a      	sxth	r2, r3
 8001c04:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001c08:	b21b      	sxth	r3, r3
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	b21b      	sxth	r3, r3
 8001c0e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  	int intensity = (int)raw_intensity/1.2; 								// cast binary value to a int for conversion formula,
 8001c12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fc88 	bl	800052c <__aeabi_i2d>
 8001c1c:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8001c20:	4b1e      	ldr	r3, [pc, #120]	@ (8001c9c <store_data+0x220>)
 8001c22:	f7fe fe17 	bl	8000854 <__aeabi_ddiv>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f7fe ff97 	bl	8000b60 <__aeabi_d2iz>
 8001c32:	4603      	mov	r3, r0
 8001c34:	63fb      	str	r3, [r7, #60]	@ 0x3c

  	sample_inst->irrad = intensity;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c3a:	611a      	str	r2, [r3, #16]


  	RTC_TimeTypeDef sTime;
  	RTC_DateTypeDef sDate;

  	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001c3c:	f107 0310 	add.w	r3, r7, #16
 8001c40:	2200      	movs	r2, #0
 8001c42:	4619      	mov	r1, r3
 8001c44:	4816      	ldr	r0, [pc, #88]	@ (8001ca0 <store_data+0x224>)
 8001c46:	f006 fd17 	bl	8008678 <HAL_RTC_GetTime>
  	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); //Put this because RTC locks up after callling GetTime for protection, unlock it by calling this
 8001c4a:	f107 030c 	add.w	r3, r7, #12
 8001c4e:	2200      	movs	r2, #0
 8001c50:	4619      	mov	r1, r3
 8001c52:	4813      	ldr	r0, [pc, #76]	@ (8001ca0 <store_data+0x224>)
 8001c54:	f006 fe08 	bl	8008868 <HAL_RTC_GetDate>

  	//Update sample structure array instance with the date and time.
  	sample_inst->day = sDate.Date;
 8001c58:	7bba      	ldrb	r2, [r7, #14]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	701a      	strb	r2, [r3, #0]
  	sample_inst->month = sDate.Month;
 8001c5e:	7b7a      	ldrb	r2, [r7, #13]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	705a      	strb	r2, [r3, #1]
  	sample_inst->year = sDate.Year;
 8001c64:	7bfa      	ldrb	r2, [r7, #15]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	709a      	strb	r2, [r3, #2]

  	sample_inst->minutes = sTime.Minutes;
 8001c6a:	7c7a      	ldrb	r2, [r7, #17]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	711a      	strb	r2, [r3, #4]
  	sample_inst->hours = sTime.Hours;
 8001c70:	7c3a      	ldrb	r2, [r7, #16]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	70da      	strb	r2, [r3, #3]

}
 8001c76:	bf00      	nop
 8001c78:	3750      	adds	r7, #80	@ 0x50
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20003a58 	.word	0x20003a58
 8001c84:	0800c928 	.word	0x0800c928
 8001c88:	477fff00 	.word	0x477fff00
 8001c8c:	439d8000 	.word	0x439d8000
 8001c90:	42440000 	.word	0x42440000
 8001c94:	42c80000 	.word	0x42c80000
 8001c98:	20003b00 	.word	0x20003b00
 8001c9c:	3ff33333 	.word	0x3ff33333
 8001ca0:	20003b54 	.word	0x20003b54

08001ca4 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af04      	add	r7, sp, #16
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc2:	9302      	str	r3, [sp, #8]
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	9301      	str	r3, [sp, #4]
 8001cc8:	1dfb      	adds	r3, r7, #7
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	2301      	movs	r3, #1
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2178      	movs	r1, #120	@ 0x78
 8001cd2:	4803      	ldr	r0, [pc, #12]	@ (8001ce0 <ssd1306_WriteCommand+0x2c>)
 8001cd4:	f001 ff88 	bl	8003be8 <HAL_I2C_Mem_Write>
}
 8001cd8:	bf00      	nop
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20003aac 	.word	0x20003aac

08001ce4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af04      	add	r7, sp, #16
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf6:	9202      	str	r2, [sp, #8]
 8001cf8:	9301      	str	r3, [sp, #4]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	2301      	movs	r3, #1
 8001d00:	2240      	movs	r2, #64	@ 0x40
 8001d02:	2178      	movs	r1, #120	@ 0x78
 8001d04:	4803      	ldr	r0, [pc, #12]	@ (8001d14 <ssd1306_WriteData+0x30>)
 8001d06:	f001 ff6f 	bl	8003be8 <HAL_I2C_Mem_Write>
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20003aac 	.word	0x20003aac

08001d18 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
    // Reset OLED
	printf("Inside display init, about to reset\n");
 8001d1c:	4837      	ldr	r0, [pc, #220]	@ (8001dfc <ssd1306_Init+0xe4>)
 8001d1e:	f008 fbc9 	bl	800a4b4 <puts>
    ssd1306_Reset();
 8001d22:	f7ff ffbf 	bl	8001ca4 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001d26:	2064      	movs	r0, #100	@ 0x64
 8001d28:	f001 f868 	bl	8002dfc <HAL_Delay>

    // Init OLED
    printf("Turn display on\n");
 8001d2c:	4834      	ldr	r0, [pc, #208]	@ (8001e00 <ssd1306_Init+0xe8>)
 8001d2e:	f008 fbc1 	bl	800a4b4 <puts>
    ssd1306_SetDisplayOn(0); //display off
 8001d32:	2000      	movs	r0, #0
 8001d34:	f000 f9e2 	bl	80020fc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001d38:	2020      	movs	r0, #32
 8001d3a:	f7ff ffbb 	bl	8001cb4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f7ff ffb8 	bl	8001cb4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001d44:	20b0      	movs	r0, #176	@ 0xb0
 8001d46:	f7ff ffb5 	bl	8001cb4 <ssd1306_WriteCommand>
    printf("About to get into ifdef 1\n");
 8001d4a:	482e      	ldr	r0, [pc, #184]	@ (8001e04 <ssd1306_Init+0xec>)
 8001d4c:	f008 fbb2 	bl	800a4b4 <puts>
#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001d50:	20c8      	movs	r0, #200	@ 0xc8
 8001d52:	f7ff ffaf 	bl	8001cb4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001d56:	2000      	movs	r0, #0
 8001d58:	f7ff ffac 	bl	8001cb4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001d5c:	2010      	movs	r0, #16
 8001d5e:	f7ff ffa9 	bl	8001cb4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001d62:	2040      	movs	r0, #64	@ 0x40
 8001d64:	f7ff ffa6 	bl	8001cb4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001d68:	20ff      	movs	r0, #255	@ 0xff
 8001d6a:	f000 f9b3 	bl	80020d4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001d6e:	20a1      	movs	r0, #161	@ 0xa1
 8001d70:	f7ff ffa0 	bl	8001cb4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001d74:	20a6      	movs	r0, #166	@ 0xa6
 8001d76:	f7ff ff9d 	bl	8001cb4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001d7a:	20a8      	movs	r0, #168	@ 0xa8
 8001d7c:	f7ff ff9a 	bl	8001cb4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8001d80:	201f      	movs	r0, #31
 8001d82:	f7ff ff97 	bl	8001cb4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001d86:	20a4      	movs	r0, #164	@ 0xa4
 8001d88:	f7ff ff94 	bl	8001cb4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001d8c:	20d3      	movs	r0, #211	@ 0xd3
 8001d8e:	f7ff ff91 	bl	8001cb4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001d92:	2000      	movs	r0, #0
 8001d94:	f7ff ff8e 	bl	8001cb4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001d98:	20d5      	movs	r0, #213	@ 0xd5
 8001d9a:	f7ff ff8b 	bl	8001cb4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001d9e:	20f0      	movs	r0, #240	@ 0xf0
 8001da0:	f7ff ff88 	bl	8001cb4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001da4:	20d9      	movs	r0, #217	@ 0xd9
 8001da6:	f7ff ff85 	bl	8001cb4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001daa:	2022      	movs	r0, #34	@ 0x22
 8001dac:	f7ff ff82 	bl	8001cb4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001db0:	20da      	movs	r0, #218	@ 0xda
 8001db2:	f7ff ff7f 	bl	8001cb4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8001db6:	2002      	movs	r0, #2
 8001db8:	f7ff ff7c 	bl	8001cb4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001dbc:	20db      	movs	r0, #219	@ 0xdb
 8001dbe:	f7ff ff79 	bl	8001cb4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001dc2:	2020      	movs	r0, #32
 8001dc4:	f7ff ff76 	bl	8001cb4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001dc8:	208d      	movs	r0, #141	@ 0x8d
 8001dca:	f7ff ff73 	bl	8001cb4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001dce:	2014      	movs	r0, #20
 8001dd0:	f7ff ff70 	bl	8001cb4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	f000 f991 	bl	80020fc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f000 f816 	bl	8001e0c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001de0:	f000 f82c 	bl	8001e3c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001de4:	4b08      	ldr	r3, [pc, #32]	@ (8001e08 <ssd1306_Init+0xf0>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001dea:	4b07      	ldr	r3, [pc, #28]	@ (8001e08 <ssd1306_Init+0xf0>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001df0:	4b05      	ldr	r3, [pc, #20]	@ (8001e08 <ssd1306_Init+0xf0>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	711a      	strb	r2, [r3, #4]
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	0800c930 	.word	0x0800c930
 8001e00:	0800c954 	.word	0x0800c954
 8001e04:	0800c964 	.word	0x0800c964
 8001e08:	20003eac 	.word	0x20003eac

08001e0c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <ssd1306_Fill+0x14>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	e000      	b.n	8001e22 <ssd1306_Fill+0x16>
 8001e20:	23ff      	movs	r3, #255	@ 0xff
 8001e22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e26:	4619      	mov	r1, r3
 8001e28:	4803      	ldr	r0, [pc, #12]	@ (8001e38 <ssd1306_Fill+0x2c>)
 8001e2a:	f008 fc5d 	bl	800a6e8 <memset>
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20003cac 	.word	0x20003cac

08001e3c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001e42:	2300      	movs	r3, #0
 8001e44:	71fb      	strb	r3, [r7, #7]
 8001e46:	e016      	b.n	8001e76 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	3b50      	subs	r3, #80	@ 0x50
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff ff30 	bl	8001cb4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001e54:	2000      	movs	r0, #0
 8001e56:	f7ff ff2d 	bl	8001cb4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001e5a:	2010      	movs	r0, #16
 8001e5c:	f7ff ff2a 	bl	8001cb4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	01db      	lsls	r3, r3, #7
 8001e64:	4a08      	ldr	r2, [pc, #32]	@ (8001e88 <ssd1306_UpdateScreen+0x4c>)
 8001e66:	4413      	add	r3, r2
 8001e68:	2180      	movs	r1, #128	@ 0x80
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff ff3a 	bl	8001ce4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	3301      	adds	r3, #1
 8001e74:	71fb      	strb	r3, [r7, #7]
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d9e5      	bls.n	8001e48 <ssd1306_UpdateScreen+0xc>
    }
}
 8001e7c:	bf00      	nop
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20003cac 	.word	0x20003cac

08001e8c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
 8001e96:	460b      	mov	r3, r1
 8001e98:	71bb      	strb	r3, [r7, #6]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	db3d      	blt.n	8001f22 <ssd1306_DrawPixel+0x96>
 8001ea6:	79bb      	ldrb	r3, [r7, #6]
 8001ea8:	2b1f      	cmp	r3, #31
 8001eaa:	d83a      	bhi.n	8001f22 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001eac:	797b      	ldrb	r3, [r7, #5]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d11a      	bne.n	8001ee8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001eb2:	79fa      	ldrb	r2, [r7, #7]
 8001eb4:	79bb      	ldrb	r3, [r7, #6]
 8001eb6:	08db      	lsrs	r3, r3, #3
 8001eb8:	b2d8      	uxtb	r0, r3
 8001eba:	4603      	mov	r3, r0
 8001ebc:	01db      	lsls	r3, r3, #7
 8001ebe:	4413      	add	r3, r2
 8001ec0:	4a1b      	ldr	r2, [pc, #108]	@ (8001f30 <ssd1306_DrawPixel+0xa4>)
 8001ec2:	5cd3      	ldrb	r3, [r2, r3]
 8001ec4:	b25a      	sxtb	r2, r3
 8001ec6:	79bb      	ldrb	r3, [r7, #6]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	2101      	movs	r1, #1
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	b25b      	sxtb	r3, r3
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	b259      	sxtb	r1, r3
 8001ed8:	79fa      	ldrb	r2, [r7, #7]
 8001eda:	4603      	mov	r3, r0
 8001edc:	01db      	lsls	r3, r3, #7
 8001ede:	4413      	add	r3, r2
 8001ee0:	b2c9      	uxtb	r1, r1
 8001ee2:	4a13      	ldr	r2, [pc, #76]	@ (8001f30 <ssd1306_DrawPixel+0xa4>)
 8001ee4:	54d1      	strb	r1, [r2, r3]
 8001ee6:	e01d      	b.n	8001f24 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ee8:	79fa      	ldrb	r2, [r7, #7]
 8001eea:	79bb      	ldrb	r3, [r7, #6]
 8001eec:	08db      	lsrs	r3, r3, #3
 8001eee:	b2d8      	uxtb	r0, r3
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	01db      	lsls	r3, r3, #7
 8001ef4:	4413      	add	r3, r2
 8001ef6:	4a0e      	ldr	r2, [pc, #56]	@ (8001f30 <ssd1306_DrawPixel+0xa4>)
 8001ef8:	5cd3      	ldrb	r3, [r2, r3]
 8001efa:	b25a      	sxtb	r2, r3
 8001efc:	79bb      	ldrb	r3, [r7, #6]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	2101      	movs	r1, #1
 8001f04:	fa01 f303 	lsl.w	r3, r1, r3
 8001f08:	b25b      	sxtb	r3, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	b25b      	sxtb	r3, r3
 8001f0e:	4013      	ands	r3, r2
 8001f10:	b259      	sxtb	r1, r3
 8001f12:	79fa      	ldrb	r2, [r7, #7]
 8001f14:	4603      	mov	r3, r0
 8001f16:	01db      	lsls	r3, r3, #7
 8001f18:	4413      	add	r3, r2
 8001f1a:	b2c9      	uxtb	r1, r1
 8001f1c:	4a04      	ldr	r2, [pc, #16]	@ (8001f30 <ssd1306_DrawPixel+0xa4>)
 8001f1e:	54d1      	strb	r1, [r2, r3]
 8001f20:	e000      	b.n	8001f24 <ssd1306_DrawPixel+0x98>
        return;
 8001f22:	bf00      	nop
    }
}
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	20003cac 	.word	0x20003cac

08001f34 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001f34:	b590      	push	{r4, r7, lr}
 8001f36:	b089      	sub	sp, #36	@ 0x24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4604      	mov	r4, r0
 8001f3c:	4638      	mov	r0, r7
 8001f3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001f42:	4623      	mov	r3, r4
 8001f44:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	2b1f      	cmp	r3, #31
 8001f4a:	d902      	bls.n	8001f52 <ssd1306_WriteChar+0x1e>
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
 8001f4e:	2b7e      	cmp	r3, #126	@ 0x7e
 8001f50:	d901      	bls.n	8001f56 <ssd1306_WriteChar+0x22>
        return 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	e079      	b.n	800204a <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d005      	beq.n	8001f68 <ssd1306_WriteChar+0x34>
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
 8001f60:	3b20      	subs	r3, #32
 8001f62:	4413      	add	r3, r2
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	e000      	b.n	8001f6a <ssd1306_WriteChar+0x36>
 8001f68:	783b      	ldrb	r3, [r7, #0]
 8001f6a:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001f6c:	4b39      	ldr	r3, [pc, #228]	@ (8002054 <ssd1306_WriteChar+0x120>)
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	7dfb      	ldrb	r3, [r7, #23]
 8001f74:	4413      	add	r3, r2
 8001f76:	2b80      	cmp	r3, #128	@ 0x80
 8001f78:	dc06      	bgt.n	8001f88 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001f7a:	4b36      	ldr	r3, [pc, #216]	@ (8002054 <ssd1306_WriteChar+0x120>)
 8001f7c:	885b      	ldrh	r3, [r3, #2]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	787b      	ldrb	r3, [r7, #1]
 8001f82:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001f84:	2b20      	cmp	r3, #32
 8001f86:	dd01      	ble.n	8001f8c <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	e05e      	b.n	800204a <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	61fb      	str	r3, [r7, #28]
 8001f90:	e04d      	b.n	800202e <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
 8001f96:	3b20      	subs	r3, #32
 8001f98:	7879      	ldrb	r1, [r7, #1]
 8001f9a:	fb01 f303 	mul.w	r3, r1, r3
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	440b      	add	r3, r1
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	4413      	add	r3, r2
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8001fac:	2300      	movs	r3, #0
 8001fae:	61bb      	str	r3, [r7, #24]
 8001fb0:	e036      	b.n	8002020 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d013      	beq.n	8001fea <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001fc2:	4b24      	ldr	r3, [pc, #144]	@ (8002054 <ssd1306_WriteChar+0x120>)
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	4413      	add	r3, r2
 8001fce:	b2d8      	uxtb	r0, r3
 8001fd0:	4b20      	ldr	r3, [pc, #128]	@ (8002054 <ssd1306_WriteChar+0x120>)
 8001fd2:	885b      	ldrh	r3, [r3, #2]
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	4413      	add	r3, r2
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f7ff ff52 	bl	8001e8c <ssd1306_DrawPixel>
 8001fe8:	e017      	b.n	800201a <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001fea:	4b1a      	ldr	r3, [pc, #104]	@ (8002054 <ssd1306_WriteChar+0x120>)
 8001fec:	881b      	ldrh	r3, [r3, #0]
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	b2d8      	uxtb	r0, r3
 8001ff8:	4b16      	ldr	r3, [pc, #88]	@ (8002054 <ssd1306_WriteChar+0x120>)
 8001ffa:	885b      	ldrh	r3, [r3, #2]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	4413      	add	r3, r2
 8002004:	b2d9      	uxtb	r1, r3
 8002006:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800200a:	2b00      	cmp	r3, #0
 800200c:	bf0c      	ite	eq
 800200e:	2301      	moveq	r3, #1
 8002010:	2300      	movne	r3, #0
 8002012:	b2db      	uxtb	r3, r3
 8002014:	461a      	mov	r2, r3
 8002016:	f7ff ff39 	bl	8001e8c <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	3301      	adds	r3, #1
 800201e:	61bb      	str	r3, [r7, #24]
 8002020:	7dfb      	ldrb	r3, [r7, #23]
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	429a      	cmp	r2, r3
 8002026:	d3c4      	bcc.n	8001fb2 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	3301      	adds	r3, #1
 800202c:	61fb      	str	r3, [r7, #28]
 800202e:	787b      	ldrb	r3, [r7, #1]
 8002030:	461a      	mov	r2, r3
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	4293      	cmp	r3, r2
 8002036:	d3ac      	bcc.n	8001f92 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8002038:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <ssd1306_WriteChar+0x120>)
 800203a:	881a      	ldrh	r2, [r3, #0]
 800203c:	7dfb      	ldrb	r3, [r7, #23]
 800203e:	b29b      	uxth	r3, r3
 8002040:	4413      	add	r3, r2
 8002042:	b29a      	uxth	r2, r3
 8002044:	4b03      	ldr	r3, [pc, #12]	@ (8002054 <ssd1306_WriteChar+0x120>)
 8002046:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002048:	7bfb      	ldrb	r3, [r7, #15]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3724      	adds	r7, #36	@ 0x24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd90      	pop	{r4, r7, pc}
 8002052:	bf00      	nop
 8002054:	20003eac 	.word	0x20003eac

08002058 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af02      	add	r7, sp, #8
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	4638      	mov	r0, r7
 8002062:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8002066:	e013      	b.n	8002090 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	7818      	ldrb	r0, [r3, #0]
 800206c:	7e3b      	ldrb	r3, [r7, #24]
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	463b      	mov	r3, r7
 8002072:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002074:	f7ff ff5e 	bl	8001f34 <ssd1306_WriteChar>
 8002078:	4603      	mov	r3, r0
 800207a:	461a      	mov	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	d002      	beq.n	800208a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	e008      	b.n	800209c <ssd1306_WriteString+0x44>
        }
        str++;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	3301      	adds	r3, #1
 800208e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1e7      	bne.n	8002068 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	781b      	ldrb	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	460a      	mov	r2, r1
 80020ae:	71fb      	strb	r3, [r7, #7]
 80020b0:	4613      	mov	r3, r2
 80020b2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	4b05      	ldr	r3, [pc, #20]	@ (80020d0 <ssd1306_SetCursor+0x2c>)
 80020ba:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80020bc:	79bb      	ldrb	r3, [r7, #6]
 80020be:	b29a      	uxth	r2, r3
 80020c0:	4b03      	ldr	r3, [pc, #12]	@ (80020d0 <ssd1306_SetCursor+0x2c>)
 80020c2:	805a      	strh	r2, [r3, #2]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	20003eac 	.word	0x20003eac

080020d4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80020de:	2381      	movs	r3, #129	@ 0x81
 80020e0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff fde5 	bl	8001cb4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fde1 	bl	8001cb4 <ssd1306_WriteCommand>
}
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d005      	beq.n	8002118 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800210c:	23af      	movs	r3, #175	@ 0xaf
 800210e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002110:	4b08      	ldr	r3, [pc, #32]	@ (8002134 <ssd1306_SetDisplayOn+0x38>)
 8002112:	2201      	movs	r2, #1
 8002114:	715a      	strb	r2, [r3, #5]
 8002116:	e004      	b.n	8002122 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002118:	23ae      	movs	r3, #174	@ 0xae
 800211a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800211c:	4b05      	ldr	r3, [pc, #20]	@ (8002134 <ssd1306_SetDisplayOn+0x38>)
 800211e:	2200      	movs	r2, #0
 8002120:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002122:	7bfb      	ldrb	r3, [r7, #15]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fdc5 	bl	8001cb4 <ssd1306_WriteCommand>
}
 800212a:	bf00      	nop
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20003eac 	.word	0x20003eac

08002138 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800213e:	4b0a      	ldr	r3, [pc, #40]	@ (8002168 <HAL_MspInit+0x30>)
 8002140:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002144:	4a08      	ldr	r2, [pc, #32]	@ (8002168 <HAL_MspInit+0x30>)
 8002146:	f043 0304 	orr.w	r3, r3, #4
 800214a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800214e:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <HAL_MspInit+0x30>)
 8002150:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	607b      	str	r3, [r7, #4]
 800215a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	46020c00 	.word	0x46020c00

0800216c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b0be      	sub	sp, #248	@ 0xf8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002174:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002184:	f107 0320 	add.w	r3, r7, #32
 8002188:	22c0      	movs	r2, #192	@ 0xc0
 800218a:	2100      	movs	r1, #0
 800218c:	4618      	mov	r0, r3
 800218e:	f008 faab 	bl	800a6e8 <memset>
  if(hi2c->Instance==I2C1)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a73      	ldr	r2, [pc, #460]	@ (8002364 <HAL_I2C_MspInit+0x1f8>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d146      	bne.n	800222a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800219c:	f04f 0240 	mov.w	r2, #64	@ 0x40
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80021a8:	2300      	movs	r3, #0
 80021aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021ae:	f107 0320 	add.w	r3, r7, #32
 80021b2:	4618      	mov	r0, r3
 80021b4:	f003 fd7a 	bl	8005cac <HAL_RCCEx_PeriphCLKConfig>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80021be:	f7ff fb63 	bl	8001888 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c2:	4b69      	ldr	r3, [pc, #420]	@ (8002368 <HAL_I2C_MspInit+0x1fc>)
 80021c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021c8:	4a67      	ldr	r2, [pc, #412]	@ (8002368 <HAL_I2C_MspInit+0x1fc>)
 80021ca:	f043 0302 	orr.w	r3, r3, #2
 80021ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021d2:	4b65      	ldr	r3, [pc, #404]	@ (8002368 <HAL_I2C_MspInit+0x1fc>)
 80021d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	61fb      	str	r3, [r7, #28]
 80021de:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80021e0:	2348      	movs	r3, #72	@ 0x48
 80021e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021e6:	2312      	movs	r3, #18
 80021e8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f2:	2300      	movs	r3, #0
 80021f4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021f8:	2304      	movs	r3, #4
 80021fa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fe:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002202:	4619      	mov	r1, r3
 8002204:	4859      	ldr	r0, [pc, #356]	@ (800236c <HAL_I2C_MspInit+0x200>)
 8002206:	f001 f847 	bl	8003298 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800220a:	4b57      	ldr	r3, [pc, #348]	@ (8002368 <HAL_I2C_MspInit+0x1fc>)
 800220c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002210:	4a55      	ldr	r2, [pc, #340]	@ (8002368 <HAL_I2C_MspInit+0x1fc>)
 8002212:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002216:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800221a:	4b53      	ldr	r3, [pc, #332]	@ (8002368 <HAL_I2C_MspInit+0x1fc>)
 800221c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002220:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002224:	61bb      	str	r3, [r7, #24]
 8002226:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002228:	e097      	b.n	800235a <HAL_I2C_MspInit+0x1ee>
  else if(hi2c->Instance==I2C2)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a50      	ldr	r2, [pc, #320]	@ (8002370 <HAL_I2C_MspInit+0x204>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d147      	bne.n	80022c4 <HAL_I2C_MspInit+0x158>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002234:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8002238:	f04f 0300 	mov.w	r3, #0
 800223c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002240:	2300      	movs	r3, #0
 8002242:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002246:	f107 0320 	add.w	r3, r7, #32
 800224a:	4618      	mov	r0, r3
 800224c:	f003 fd2e 	bl	8005cac <HAL_RCCEx_PeriphCLKConfig>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8002256:	f7ff fb17 	bl	8001888 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800225a:	4b43      	ldr	r3, [pc, #268]	@ (8002368 <HAL_I2C_MspInit+0x1fc>)
 800225c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002260:	4a41      	ldr	r2, [pc, #260]	@ (8002368 <HAL_I2C_MspInit+0x1fc>)
 8002262:	f043 0302 	orr.w	r3, r3, #2
 8002266:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800226a:	4b3f      	ldr	r3, [pc, #252]	@ (8002368 <HAL_I2C_MspInit+0x1fc>)
 800226c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002278:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800227c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002280:	2312      	movs	r3, #18
 8002282:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228c:	2300      	movs	r3, #0
 800228e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002292:	2304      	movs	r3, #4
 8002294:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002298:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800229c:	4619      	mov	r1, r3
 800229e:	4833      	ldr	r0, [pc, #204]	@ (800236c <HAL_I2C_MspInit+0x200>)
 80022a0:	f000 fffa 	bl	8003298 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80022a4:	4b30      	ldr	r3, [pc, #192]	@ (8002368 <HAL_I2C_MspInit+0x1fc>)
 80022a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022aa:	4a2f      	ldr	r2, [pc, #188]	@ (8002368 <HAL_I2C_MspInit+0x1fc>)
 80022ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022b0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80022b4:	4b2c      	ldr	r3, [pc, #176]	@ (8002368 <HAL_I2C_MspInit+0x1fc>)
 80022b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80022ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022be:	613b      	str	r3, [r7, #16]
 80022c0:	693b      	ldr	r3, [r7, #16]
}
 80022c2:	e04a      	b.n	800235a <HAL_I2C_MspInit+0x1ee>
  else if(hi2c->Instance==I2C3)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a2a      	ldr	r2, [pc, #168]	@ (8002374 <HAL_I2C_MspInit+0x208>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d145      	bne.n	800235a <HAL_I2C_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80022ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022d2:	f04f 0300 	mov.w	r3, #0
 80022d6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 80022da:	2300      	movs	r3, #0
 80022dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022e0:	f107 0320 	add.w	r3, r7, #32
 80022e4:	4618      	mov	r0, r3
 80022e6:	f003 fce1 	bl	8005cac <HAL_RCCEx_PeriphCLKConfig>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <HAL_I2C_MspInit+0x188>
      Error_Handler();
 80022f0:	f7ff faca 	bl	8001888 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002368 <HAL_I2C_MspInit+0x1fc>)
 80022f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022fa:	4a1b      	ldr	r2, [pc, #108]	@ (8002368 <HAL_I2C_MspInit+0x1fc>)
 80022fc:	f043 0304 	orr.w	r3, r3, #4
 8002300:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002304:	4b18      	ldr	r3, [pc, #96]	@ (8002368 <HAL_I2C_MspInit+0x1fc>)
 8002306:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002312:	2303      	movs	r3, #3
 8002314:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002318:	2312      	movs	r3, #18
 800231a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002324:	2300      	movs	r3, #0
 8002326:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800232a:	2304      	movs	r3, #4
 800232c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002330:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002334:	4619      	mov	r1, r3
 8002336:	4810      	ldr	r0, [pc, #64]	@ (8002378 <HAL_I2C_MspInit+0x20c>)
 8002338:	f000 ffae 	bl	8003298 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800233c:	4b0a      	ldr	r3, [pc, #40]	@ (8002368 <HAL_I2C_MspInit+0x1fc>)
 800233e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002342:	4a09      	ldr	r2, [pc, #36]	@ (8002368 <HAL_I2C_MspInit+0x1fc>)
 8002344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002348:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800234c:	4b06      	ldr	r3, [pc, #24]	@ (8002368 <HAL_I2C_MspInit+0x1fc>)
 800234e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	68bb      	ldr	r3, [r7, #8]
}
 800235a:	bf00      	nop
 800235c:	37f8      	adds	r7, #248	@ 0xf8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40005400 	.word	0x40005400
 8002368:	46020c00 	.word	0x46020c00
 800236c:	42020400 	.word	0x42020400
 8002370:	40005800 	.word	0x40005800
 8002374:	46002800 	.word	0x46002800
 8002378:	42020800 	.word	0x42020800

0800237c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b0ba      	sub	sp, #232	@ 0xe8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002384:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002394:	f107 0310 	add.w	r3, r7, #16
 8002398:	22c0      	movs	r2, #192	@ 0xc0
 800239a:	2100      	movs	r1, #0
 800239c:	4618      	mov	r0, r3
 800239e:	f008 f9a3 	bl	800a6e8 <memset>
  if(hrtc->Instance==RTC)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a2d      	ldr	r2, [pc, #180]	@ (800245c <HAL_RTC_MspInit+0xe0>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d153      	bne.n	8002454 <HAL_RTC_MspInit+0xd8>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80023ac:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80023b0:	f04f 0300 	mov.w	r3, #0
 80023b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80023b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023c0:	f107 0310 	add.w	r3, r7, #16
 80023c4:	4618      	mov	r0, r3
 80023c6:	f003 fc71 	bl	8005cac <HAL_RCCEx_PeriphCLKConfig>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_RTC_MspInit+0x58>
    {
      Error_Handler();
 80023d0:	f7ff fa5a 	bl	8001888 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023d4:	4b22      	ldr	r3, [pc, #136]	@ (8002460 <HAL_RTC_MspInit+0xe4>)
 80023d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023da:	4a21      	ldr	r2, [pc, #132]	@ (8002460 <HAL_RTC_MspInit+0xe4>)
 80023dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80023e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002460 <HAL_RTC_MspInit+0xe4>)
 80023e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80023ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002460 <HAL_RTC_MspInit+0xe4>)
 80023ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80023f0:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80023f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002460 <HAL_RTC_MspInit+0xe4>)
 80023f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80023fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8002402:	4b17      	ldr	r3, [pc, #92]	@ (8002460 <HAL_RTC_MspInit+0xe4>)
 8002404:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002408:	4a15      	ldr	r2, [pc, #84]	@ (8002460 <HAL_RTC_MspInit+0xe4>)
 800240a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800240e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002412:	4b13      	ldr	r3, [pc, #76]	@ (8002460 <HAL_RTC_MspInit+0xe4>)
 8002414:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002418:	4a11      	ldr	r2, [pc, #68]	@ (8002460 <HAL_RTC_MspInit+0xe4>)
 800241a:	f043 0302 	orr.w	r3, r3, #2
 800241e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002422:	4b0f      	ldr	r3, [pc, #60]	@ (8002460 <HAL_RTC_MspInit+0xe4>)
 8002424:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration
    PB2     ------> RTC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002430:	2304      	movs	r3, #4
 8002432:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002436:	2302      	movs	r3, #2
 8002438:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002442:	2300      	movs	r3, #0
 8002444:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002448:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800244c:	4619      	mov	r1, r3
 800244e:	4805      	ldr	r0, [pc, #20]	@ (8002464 <HAL_RTC_MspInit+0xe8>)
 8002450:	f000 ff22 	bl	8003298 <HAL_GPIO_Init>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002454:	bf00      	nop
 8002456:	37e8      	adds	r7, #232	@ 0xe8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	46007800 	.word	0x46007800
 8002460:	46020c00 	.word	0x46020c00
 8002464:	42020400 	.word	0x42020400

08002468 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b0ba      	sub	sp, #232	@ 0xe8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002470:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002480:	f107 0310 	add.w	r3, r7, #16
 8002484:	22c0      	movs	r2, #192	@ 0xc0
 8002486:	2100      	movs	r1, #0
 8002488:	4618      	mov	r0, r3
 800248a:	f008 f92d 	bl	800a6e8 <memset>
  if(hspi->Instance==SPI1)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a27      	ldr	r2, [pc, #156]	@ (8002530 <HAL_SPI_MspInit+0xc8>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d146      	bne.n	8002526 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002498:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 80024a4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80024a8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024ac:	f107 0310 	add.w	r3, r7, #16
 80024b0:	4618      	mov	r0, r3
 80024b2:	f003 fbfb 	bl	8005cac <HAL_RCCEx_PeriphCLKConfig>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 80024bc:	f7ff f9e4 	bl	8001888 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002534 <HAL_SPI_MspInit+0xcc>)
 80024c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80024c6:	4a1b      	ldr	r2, [pc, #108]	@ (8002534 <HAL_SPI_MspInit+0xcc>)
 80024c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024cc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80024d0:	4b18      	ldr	r3, [pc, #96]	@ (8002534 <HAL_SPI_MspInit+0xcc>)
 80024d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80024d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024de:	4b15      	ldr	r3, [pc, #84]	@ (8002534 <HAL_SPI_MspInit+0xcc>)
 80024e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024e4:	4a13      	ldr	r2, [pc, #76]	@ (8002534 <HAL_SPI_MspInit+0xcc>)
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024ee:	4b11      	ldr	r3, [pc, #68]	@ (8002534 <HAL_SPI_MspInit+0xcc>)
 80024f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80024fc:	23c2      	movs	r3, #194	@ 0xc2
 80024fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002502:	2302      	movs	r3, #2
 8002504:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250e:	2300      	movs	r3, #0
 8002510:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002514:	2305      	movs	r3, #5
 8002516:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800251e:	4619      	mov	r1, r3
 8002520:	4805      	ldr	r0, [pc, #20]	@ (8002538 <HAL_SPI_MspInit+0xd0>)
 8002522:	f000 feb9 	bl	8003298 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002526:	bf00      	nop
 8002528:	37e8      	adds	r7, #232	@ 0xe8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40013000 	.word	0x40013000
 8002534:	46020c00 	.word	0x46020c00
 8002538:	42020000 	.word	0x42020000

0800253c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b0ba      	sub	sp, #232	@ 0xe8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002554:	f107 0310 	add.w	r3, r7, #16
 8002558:	22c0      	movs	r2, #192	@ 0xc0
 800255a:	2100      	movs	r1, #0
 800255c:	4618      	mov	r0, r3
 800255e:	f008 f8c3 	bl	800a6e8 <memset>
  if(huart->Instance==USART3)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a26      	ldr	r2, [pc, #152]	@ (8002600 <HAL_UART_MspInit+0xc4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d145      	bne.n	80025f8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800256c:	f04f 0204 	mov.w	r2, #4
 8002570:	f04f 0300 	mov.w	r3, #0
 8002574:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002578:	2300      	movs	r3, #0
 800257a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800257c:	f107 0310 	add.w	r3, r7, #16
 8002580:	4618      	mov	r0, r3
 8002582:	f003 fb93 	bl	8005cac <HAL_RCCEx_PeriphCLKConfig>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 800258c:	f7ff f97c 	bl	8001888 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002590:	4b1c      	ldr	r3, [pc, #112]	@ (8002604 <HAL_UART_MspInit+0xc8>)
 8002592:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002596:	4a1b      	ldr	r2, [pc, #108]	@ (8002604 <HAL_UART_MspInit+0xc8>)
 8002598:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800259c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80025a0:	4b18      	ldr	r3, [pc, #96]	@ (8002604 <HAL_UART_MspInit+0xc8>)
 80025a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80025a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ae:	4b15      	ldr	r3, [pc, #84]	@ (8002604 <HAL_UART_MspInit+0xc8>)
 80025b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025b4:	4a13      	ldr	r2, [pc, #76]	@ (8002604 <HAL_UART_MspInit+0xc8>)
 80025b6:	f043 0304 	orr.w	r3, r3, #4
 80025ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80025be:	4b11      	ldr	r3, [pc, #68]	@ (8002604 <HAL_UART_MspInit+0xc8>)
 80025c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025cc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80025d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d4:	2302      	movs	r3, #2
 80025d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e0:	2300      	movs	r3, #0
 80025e2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025e6:	2307      	movs	r3, #7
 80025e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80025f0:	4619      	mov	r1, r3
 80025f2:	4805      	ldr	r0, [pc, #20]	@ (8002608 <HAL_UART_MspInit+0xcc>)
 80025f4:	f000 fe50 	bl	8003298 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80025f8:	bf00      	nop
 80025fa:	37e8      	adds	r7, #232	@ 0xe8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40004800 	.word	0x40004800
 8002604:	46020c00 	.word	0x46020c00
 8002608:	42020800 	.word	0x42020800

0800260c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002610:	bf00      	nop
 8002612:	e7fd      	b.n	8002610 <NMI_Handler+0x4>

08002614 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002618:	bf00      	nop
 800261a:	e7fd      	b.n	8002618 <HardFault_Handler+0x4>

0800261c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002620:	bf00      	nop
 8002622:	e7fd      	b.n	8002620 <MemManage_Handler+0x4>

08002624 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002628:	bf00      	nop
 800262a:	e7fd      	b.n	8002628 <BusFault_Handler+0x4>

0800262c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002630:	bf00      	nop
 8002632:	e7fd      	b.n	8002630 <UsageFault_Handler+0x4>

08002634 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002664:	f000 fbaa 	bl	8002dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8002668:	f000 fd80 	bl	800316c <HAL_SYSTICK_IRQHandler>
  count++;
 800266c:	4b03      	ldr	r3, [pc, #12]	@ (800267c <SysTick_Handler+0x1c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	3301      	adds	r3, #1
 8002672:	4a02      	ldr	r2, [pc, #8]	@ (800267c <SysTick_Handler+0x1c>)
 8002674:	6013      	str	r3, [r2, #0]
  //printf("Do something\n");
  /* USER CODE END SysTick_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20003ca8 	.word	0x20003ca8

08002680 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8002684:	2000      	movs	r0, #0
 8002686:	f000 f9fd 	bl	8002a84 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}

0800268e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800268e:	b480      	push	{r7}
 8002690:	af00      	add	r7, sp, #0
  return 1;
 8002692:	2301      	movs	r3, #1
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <_kill>:

int _kill(int pid, int sig)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
 80026a6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026a8:	f008 f870 	bl	800a78c <__errno>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2216      	movs	r2, #22
 80026b0:	601a      	str	r2, [r3, #0]
  return -1;
 80026b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <_exit>:

void _exit (int status)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026c6:	f04f 31ff 	mov.w	r1, #4294967295
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff ffe7 	bl	800269e <_kill>
  while (1) {}    /* Make sure we hang here */
 80026d0:	bf00      	nop
 80026d2:	e7fd      	b.n	80026d0 <_exit+0x12>

080026d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	e00a      	b.n	80026fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026e6:	f3af 8000 	nop.w
 80026ea:	4601      	mov	r1, r0
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	1c5a      	adds	r2, r3, #1
 80026f0:	60ba      	str	r2, [r7, #8]
 80026f2:	b2ca      	uxtb	r2, r1
 80026f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	3301      	adds	r3, #1
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	429a      	cmp	r2, r3
 8002702:	dbf0      	blt.n	80026e6 <_read+0x12>
  }

  return len;
 8002704:	687b      	ldr	r3, [r7, #4]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b086      	sub	sp, #24
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	e009      	b.n	8002734 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	1c5a      	adds	r2, r3, #1
 8002724:	60ba      	str	r2, [r7, #8]
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f000 fa25 	bl	8002b78 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	3301      	adds	r3, #1
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	429a      	cmp	r2, r3
 800273a:	dbf1      	blt.n	8002720 <_write+0x12>
  }
  return len;
 800273c:	687b      	ldr	r3, [r7, #4]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <_close>:

int _close(int file)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800274e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800276e:	605a      	str	r2, [r3, #4]
  return 0;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <_isatty>:

int _isatty(int file)
{
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002786:	2301      	movs	r3, #1
}
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
	...

080027b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027b8:	4a14      	ldr	r2, [pc, #80]	@ (800280c <_sbrk+0x5c>)
 80027ba:	4b15      	ldr	r3, [pc, #84]	@ (8002810 <_sbrk+0x60>)
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027c4:	4b13      	ldr	r3, [pc, #76]	@ (8002814 <_sbrk+0x64>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d102      	bne.n	80027d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027cc:	4b11      	ldr	r3, [pc, #68]	@ (8002814 <_sbrk+0x64>)
 80027ce:	4a12      	ldr	r2, [pc, #72]	@ (8002818 <_sbrk+0x68>)
 80027d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027d2:	4b10      	ldr	r3, [pc, #64]	@ (8002814 <_sbrk+0x64>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d207      	bcs.n	80027f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027e0:	f007 ffd4 	bl	800a78c <__errno>
 80027e4:	4603      	mov	r3, r0
 80027e6:	220c      	movs	r2, #12
 80027e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027ea:	f04f 33ff 	mov.w	r3, #4294967295
 80027ee:	e009      	b.n	8002804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027f0:	4b08      	ldr	r3, [pc, #32]	@ (8002814 <_sbrk+0x64>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027f6:	4b07      	ldr	r3, [pc, #28]	@ (8002814 <_sbrk+0x64>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4413      	add	r3, r2
 80027fe:	4a05      	ldr	r2, [pc, #20]	@ (8002814 <_sbrk+0x64>)
 8002800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002802:	68fb      	ldr	r3, [r7, #12]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20040000 	.word	0x20040000
 8002810:	00000400 	.word	0x00000400
 8002814:	20003eb4 	.word	0x20003eb4
 8002818:	200040b0 	.word	0x200040b0

0800281c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002820:	4b18      	ldr	r3, [pc, #96]	@ (8002884 <SystemInit+0x68>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002826:	4a17      	ldr	r2, [pc, #92]	@ (8002884 <SystemInit+0x68>)
 8002828:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800282c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002830:	4b15      	ldr	r3, [pc, #84]	@ (8002888 <SystemInit+0x6c>)
 8002832:	2201      	movs	r2, #1
 8002834:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002836:	4b14      	ldr	r3, [pc, #80]	@ (8002888 <SystemInit+0x6c>)
 8002838:	2200      	movs	r2, #0
 800283a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800283c:	4b12      	ldr	r3, [pc, #72]	@ (8002888 <SystemInit+0x6c>)
 800283e:	2200      	movs	r2, #0
 8002840:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002842:	4b11      	ldr	r3, [pc, #68]	@ (8002888 <SystemInit+0x6c>)
 8002844:	2200      	movs	r2, #0
 8002846:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002848:	4b0f      	ldr	r3, [pc, #60]	@ (8002888 <SystemInit+0x6c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a0e      	ldr	r2, [pc, #56]	@ (8002888 <SystemInit+0x6c>)
 800284e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002852:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002856:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002858:	4b0b      	ldr	r3, [pc, #44]	@ (8002888 <SystemInit+0x6c>)
 800285a:	2200      	movs	r2, #0
 800285c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800285e:	4b0a      	ldr	r3, [pc, #40]	@ (8002888 <SystemInit+0x6c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a09      	ldr	r2, [pc, #36]	@ (8002888 <SystemInit+0x6c>)
 8002864:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002868:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800286a:	4b07      	ldr	r3, [pc, #28]	@ (8002888 <SystemInit+0x6c>)
 800286c:	2200      	movs	r2, #0
 800286e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002870:	4b04      	ldr	r3, [pc, #16]	@ (8002884 <SystemInit+0x68>)
 8002872:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002876:	609a      	str	r2, [r3, #8]
  #endif
}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	e000ed00 	.word	0xe000ed00
 8002888:	46020c00 	.word	0x46020c00

0800288c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800288c:	480d      	ldr	r0, [pc, #52]	@ (80028c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800288e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002890:	f7ff ffc4 	bl	800281c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002894:	480c      	ldr	r0, [pc, #48]	@ (80028c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002896:	490d      	ldr	r1, [pc, #52]	@ (80028cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002898:	4a0d      	ldr	r2, [pc, #52]	@ (80028d0 <LoopForever+0xe>)
  movs r3, #0
 800289a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800289c:	e002      	b.n	80028a4 <LoopCopyDataInit>

0800289e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800289e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028a2:	3304      	adds	r3, #4

080028a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028a8:	d3f9      	bcc.n	800289e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028aa:	4a0a      	ldr	r2, [pc, #40]	@ (80028d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028ac:	4c0a      	ldr	r4, [pc, #40]	@ (80028d8 <LoopForever+0x16>)
  movs r3, #0
 80028ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028b0:	e001      	b.n	80028b6 <LoopFillZerobss>

080028b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028b4:	3204      	adds	r2, #4

080028b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028b8:	d3fb      	bcc.n	80028b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80028ba:	f007 ff6d 	bl	800a798 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028be:	f7fe fb03 	bl	8000ec8 <main>

080028c2 <LoopForever>:

LoopForever:
    b LoopForever
 80028c2:	e7fe      	b.n	80028c2 <LoopForever>
  ldr   r0, =_estack
 80028c4:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80028c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028cc:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80028d0:	0800d400 	.word	0x0800d400
  ldr r2, =_sbss
 80028d4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80028d8:	200040ac 	.word	0x200040ac

080028dc <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028dc:	e7fe      	b.n	80028dc <ADC1_IRQHandler>
	...

080028e0 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08a      	sub	sp, #40	@ 0x28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <BSP_LED_Init+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80028f4:	f06f 0301 	mvn.w	r3, #1
 80028f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80028fa:	e023      	b.n	8002944 <BSP_LED_Init+0x64>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10e      	bne.n	8002920 <BSP_LED_Init+0x40>
    {
      LED2_GPIO_CLK_ENABLE();
 8002902:	4b13      	ldr	r3, [pc, #76]	@ (8002950 <BSP_LED_Init+0x70>)
 8002904:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002908:	4a11      	ldr	r2, [pc, #68]	@ (8002950 <BSP_LED_Init+0x70>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002912:	4b0f      	ldr	r3, [pc, #60]	@ (8002950 <BSP_LED_Init+0x70>)
 8002914:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	68fb      	ldr	r3, [r7, #12]

      LED3_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8002920:	2320      	movs	r3, #32
 8002922:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002924:	2301      	movs	r3, #1
 8002926:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292c:	2303      	movs	r3, #3
 800292e:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	4a08      	ldr	r2, [pc, #32]	@ (8002954 <BSP_LED_Init+0x74>)
 8002934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002938:	f107 0210 	add.w	r2, r7, #16
 800293c:	4611      	mov	r1, r2
 800293e:	4618      	mov	r0, r3
 8002940:	f000 fcaa 	bl	8003298 <HAL_GPIO_Init>
  }

  return ret;
 8002944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002946:	4618      	mov	r0, r3
 8002948:	3728      	adds	r7, #40	@ 0x28
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	46020c00 	.word	0x46020c00
 8002954:	20000008 	.word	0x20000008

08002958 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <BSP_LED_Toggle+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800296c:	f06f 0301 	mvn.w	r3, #1
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	e008      	b.n	8002986 <BSP_LED_Toggle+0x2e>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	4a06      	ldr	r2, [pc, #24]	@ (8002990 <BSP_LED_Toggle+0x38>)
 8002978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297c:	2220      	movs	r2, #32
 800297e:	4611      	mov	r1, r2
 8002980:	4618      	mov	r0, r3
 8002982:	f000 fe91 	bl	80036a8 <HAL_GPIO_TogglePin>
  }

  return ret;
 8002986:	68fb      	ldr	r3, [r7, #12]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20000008 	.word	0x20000008

08002994 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	460a      	mov	r2, r1
 800299e:	71fb      	strb	r3, [r7, #7]
 80029a0:	4613      	mov	r3, r2
 80029a2:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80029a4:	4b30      	ldr	r3, [pc, #192]	@ (8002a68 <BSP_PB_Init+0xd4>)
 80029a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029aa:	4a2f      	ldr	r2, [pc, #188]	@ (8002a68 <BSP_PB_Init+0xd4>)
 80029ac:	f043 0304 	orr.w	r3, r3, #4
 80029b0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80029b4:	4b2c      	ldr	r3, [pc, #176]	@ (8002a68 <BSP_PB_Init+0xd4>)
 80029b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	60bb      	str	r3, [r7, #8]
 80029c0:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80029c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029c6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80029c8:	2302      	movs	r3, #2
 80029ca:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80029cc:	2302      	movs	r3, #2
 80029ce:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80029d0:	79bb      	ldrb	r3, [r7, #6]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10c      	bne.n	80029f0 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80029d6:	2300      	movs	r3, #0
 80029d8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	4a23      	ldr	r2, [pc, #140]	@ (8002a6c <BSP_PB_Init+0xd8>)
 80029de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e2:	f107 020c 	add.w	r2, r7, #12
 80029e6:	4611      	mov	r1, r2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 fc55 	bl	8003298 <HAL_GPIO_Init>
 80029ee:	e036      	b.n	8002a5e <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80029f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002a70 <BSP_PB_Init+0xdc>)
 80029f2:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80029f4:	79fb      	ldrb	r3, [r7, #7]
 80029f6:	4a1d      	ldr	r2, [pc, #116]	@ (8002a6c <BSP_PB_Init+0xd8>)
 80029f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fc:	f107 020c 	add.w	r2, r7, #12
 8002a00:	4611      	mov	r1, r2
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 fc48 	bl	8003298 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002a08:	79fa      	ldrb	r2, [r7, #7]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	4413      	add	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4a18      	ldr	r2, [pc, #96]	@ (8002a74 <BSP_PB_Init+0xe0>)
 8002a14:	441a      	add	r2, r3
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	4917      	ldr	r1, [pc, #92]	@ (8002a78 <BSP_PB_Init+0xe4>)
 8002a1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4610      	mov	r0, r2
 8002a22:	f000 fbdc 	bl	80031de <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002a26:	79fa      	ldrb	r2, [r7, #7]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4a10      	ldr	r2, [pc, #64]	@ (8002a74 <BSP_PB_Init+0xe0>)
 8002a32:	1898      	adds	r0, r3, r2
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	4a11      	ldr	r2, [pc, #68]	@ (8002a7c <BSP_PB_Init+0xe8>)
 8002a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	2100      	movs	r1, #0
 8002a40:	f000 fba1 	bl	8003186 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002a44:	2018      	movs	r0, #24
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	4a0d      	ldr	r2, [pc, #52]	@ (8002a80 <BSP_PB_Init+0xec>)
 8002a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	4619      	mov	r1, r3
 8002a52:	f000 faaf 	bl	8002fb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002a56:	2318      	movs	r3, #24
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 fac5 	bl	8002fe8 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3720      	adds	r7, #32
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	46020c00 	.word	0x46020c00
 8002a6c:	2000000c 	.word	0x2000000c
 8002a70:	10110000 	.word	0x10110000
 8002a74:	20003eb8 	.word	0x20003eb8
 8002a78:	0800cfd4 	.word	0x0800cfd4
 8002a7c:	20000010 	.word	0x20000010
 8002a80:	20000014 	.word	0x20000014

08002a84 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002a8e:	79fa      	ldrb	r2, [r7, #7]
 8002a90:	4613      	mov	r3, r2
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4413      	add	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4a04      	ldr	r2, [pc, #16]	@ (8002aac <BSP_PB_IRQHandler+0x28>)
 8002a9a:	4413      	add	r3, r2
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 fbb3 	bl	8003208 <HAL_EXTI_IRQHandler>
}
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20003eb8 	.word	0x20003eb8

08002ab0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	6039      	str	r1, [r7, #0]
 8002aba:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002abc:	2300      	movs	r3, #0
 8002abe:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002ac6:	f06f 0301 	mvn.w	r3, #1
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	e018      	b.n	8002b00 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	2294      	movs	r2, #148	@ 0x94
 8002ad2:	fb02 f303 	mul.w	r3, r2, r3
 8002ad6:	4a0d      	ldr	r2, [pc, #52]	@ (8002b0c <BSP_COM_Init+0x5c>)
 8002ad8:	4413      	add	r3, r2
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 f870 	bl	8002bc0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	2294      	movs	r2, #148	@ 0x94
 8002ae4:	fb02 f303 	mul.w	r3, r2, r3
 8002ae8:	4a08      	ldr	r2, [pc, #32]	@ (8002b0c <BSP_COM_Init+0x5c>)
 8002aea:	4413      	add	r3, r2
 8002aec:	6839      	ldr	r1, [r7, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 f80e 	bl	8002b10 <MX_USART1_Init>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d002      	beq.n	8002b00 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002afa:	f06f 0303 	mvn.w	r3, #3
 8002afe:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002b00:	68fb      	ldr	r3, [r7, #12]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20003ec4 	.word	0x20003ec4

08002b10 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8002b1a:	4b16      	ldr	r3, [pc, #88]	@ (8002b74 <MX_USART1_Init+0x64>)
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	220c      	movs	r2, #12
 8002b2e:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	895b      	ldrh	r3, [r3, #10]
 8002b34:	461a      	mov	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	891b      	ldrh	r3, [r3, #8]
 8002b46:	461a      	mov	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	899b      	ldrh	r3, [r3, #12]
 8002b50:	461a      	mov	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002b5c:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f006 f989 	bl	8008e7c <HAL_UART_Init>
 8002b6a:	4603      	mov	r3, r0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	20000004 	.word	0x20000004

08002b78 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002b80:	4b09      	ldr	r3, [pc, #36]	@ (8002ba8 <__io_putchar+0x30>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	461a      	mov	r2, r3
 8002b86:	2394      	movs	r3, #148	@ 0x94
 8002b88:	fb02 f303 	mul.w	r3, r2, r3
 8002b8c:	4a07      	ldr	r2, [pc, #28]	@ (8002bac <__io_putchar+0x34>)
 8002b8e:	1898      	adds	r0, r3, r2
 8002b90:	1d39      	adds	r1, r7, #4
 8002b92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b96:	2201      	movs	r2, #1
 8002b98:	f006 f9c0 	bl	8008f1c <HAL_UART_Transmit>
  return ch;
 8002b9c:	687b      	ldr	r3, [r7, #4]
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20003f58 	.word	0x20003f58
 8002bac:	20003ec4 	.word	0x20003ec4

08002bb0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	f7fe fe53 	bl	8001860 <BSP_PB_Callback>
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
	...

08002bc0 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08a      	sub	sp, #40	@ 0x28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002bc8:	4b27      	ldr	r3, [pc, #156]	@ (8002c68 <COM1_MspInit+0xa8>)
 8002bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bce:	4a26      	ldr	r2, [pc, #152]	@ (8002c68 <COM1_MspInit+0xa8>)
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002bd8:	4b23      	ldr	r3, [pc, #140]	@ (8002c68 <COM1_MspInit+0xa8>)
 8002bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	613b      	str	r3, [r7, #16]
 8002be4:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8002be6:	4b20      	ldr	r3, [pc, #128]	@ (8002c68 <COM1_MspInit+0xa8>)
 8002be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bec:	4a1e      	ldr	r2, [pc, #120]	@ (8002c68 <COM1_MspInit+0xa8>)
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8002c68 <COM1_MspInit+0xa8>)
 8002bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002c04:	4b18      	ldr	r3, [pc, #96]	@ (8002c68 <COM1_MspInit+0xa8>)
 8002c06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002c0a:	4a17      	ldr	r2, [pc, #92]	@ (8002c68 <COM1_MspInit+0xa8>)
 8002c0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c10:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002c14:	4b14      	ldr	r3, [pc, #80]	@ (8002c68 <COM1_MspInit+0xa8>)
 8002c16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002c1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c1e:	60bb      	str	r3, [r7, #8]
 8002c20:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8002c22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c26:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002c30:	2301      	movs	r3, #1
 8002c32:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002c34:	2307      	movs	r3, #7
 8002c36:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002c38:	f107 0314 	add.w	r3, r7, #20
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	480b      	ldr	r0, [pc, #44]	@ (8002c6c <COM1_MspInit+0xac>)
 8002c40:	f000 fb2a 	bl	8003298 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8002c44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c48:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002c4e:	2307      	movs	r3, #7
 8002c50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8002c52:	f107 0314 	add.w	r3, r7, #20
 8002c56:	4619      	mov	r1, r3
 8002c58:	4804      	ldr	r0, [pc, #16]	@ (8002c6c <COM1_MspInit+0xac>)
 8002c5a:	f000 fb1d 	bl	8003298 <HAL_GPIO_Init>
}
 8002c5e:	bf00      	nop
 8002c60:	3728      	adds	r7, #40	@ 0x28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	46020c00 	.word	0x46020c00
 8002c6c:	42020000 	.word	0x42020000

08002c70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c74:	4b12      	ldr	r3, [pc, #72]	@ (8002cc0 <HAL_Init+0x50>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a11      	ldr	r2, [pc, #68]	@ (8002cc0 <HAL_Init+0x50>)
 8002c7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c80:	2003      	movs	r0, #3
 8002c82:	f000 f98c 	bl	8002f9e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002c86:	f002 fe2f 	bl	80058e8 <HAL_RCC_GetSysClockFreq>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc4 <HAL_Init+0x54>)
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	f003 030f 	and.w	r3, r3, #15
 8002c94:	490c      	ldr	r1, [pc, #48]	@ (8002cc8 <HAL_Init+0x58>)
 8002c96:	5ccb      	ldrb	r3, [r1, r3]
 8002c98:	fa22 f303 	lsr.w	r3, r2, r3
 8002c9c:	4a0b      	ldr	r2, [pc, #44]	@ (8002ccc <HAL_Init+0x5c>)
 8002c9e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002ca0:	2004      	movs	r0, #4
 8002ca2:	f000 f9d1 	bl	8003048 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ca6:	200f      	movs	r0, #15
 8002ca8:	f000 f812 	bl	8002cd0 <HAL_InitTick>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e002      	b.n	8002cbc <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002cb6:	f7ff fa3f 	bl	8002138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40022000 	.word	0x40022000
 8002cc4:	46020c00 	.word	0x46020c00
 8002cc8:	0800cf7c 	.word	0x0800cf7c
 8002ccc:	20000000 	.word	0x20000000

08002cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002cdc:	4b33      	ldr	r3, [pc, #204]	@ (8002dac <HAL_InitTick+0xdc>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e05c      	b.n	8002da2 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002ce8:	4b31      	ldr	r3, [pc, #196]	@ (8002db0 <HAL_InitTick+0xe0>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0304 	and.w	r3, r3, #4
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d10c      	bne.n	8002d0e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002cf4:	4b2f      	ldr	r3, [pc, #188]	@ (8002db4 <HAL_InitTick+0xe4>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4b2c      	ldr	r3, [pc, #176]	@ (8002dac <HAL_InitTick+0xdc>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	e037      	b.n	8002d7e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002d0e:	f000 f9f3 	bl	80030f8 <HAL_SYSTICK_GetCLKSourceConfig>
 8002d12:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d023      	beq.n	8002d62 <HAL_InitTick+0x92>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d82d      	bhi.n	8002d7c <HAL_InitTick+0xac>
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_InitTick+0x5e>
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d00d      	beq.n	8002d48 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002d2c:	e026      	b.n	8002d7c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002d2e:	4b21      	ldr	r3, [pc, #132]	@ (8002db4 <HAL_InitTick+0xe4>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	4b1e      	ldr	r3, [pc, #120]	@ (8002dac <HAL_InitTick+0xdc>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	4619      	mov	r1, r3
 8002d38:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002d3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d44:	60fb      	str	r3, [r7, #12]
        break;
 8002d46:	e01a      	b.n	8002d7e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002d48:	4b18      	ldr	r3, [pc, #96]	@ (8002dac <HAL_InitTick+0xdc>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d52:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d56:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5e:	60fb      	str	r3, [r7, #12]
        break;
 8002d60:	e00d      	b.n	8002d7e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002d62:	4b12      	ldr	r3, [pc, #72]	@ (8002dac <HAL_InitTick+0xdc>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d70:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d78:	60fb      	str	r3, [r7, #12]
        break;
 8002d7a:	e000      	b.n	8002d7e <HAL_InitTick+0xae>
        break;
 8002d7c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 f940 	bl	8003004 <HAL_SYSTICK_Config>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e009      	b.n	8002da2 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d8e:	2200      	movs	r2, #0
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	f04f 30ff 	mov.w	r0, #4294967295
 8002d96:	f000 f90d 	bl	8002fb4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002d9a:	4a07      	ldr	r2, [pc, #28]	@ (8002db8 <HAL_InitTick+0xe8>)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	2000001c 	.word	0x2000001c
 8002db0:	e000e010 	.word	0xe000e010
 8002db4:	20000000 	.word	0x20000000
 8002db8:	20000018 	.word	0x20000018

08002dbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002dc0:	4b06      	ldr	r3, [pc, #24]	@ (8002ddc <HAL_IncTick+0x20>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	4b06      	ldr	r3, [pc, #24]	@ (8002de0 <HAL_IncTick+0x24>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4413      	add	r3, r2
 8002dcc:	4a04      	ldr	r2, [pc, #16]	@ (8002de0 <HAL_IncTick+0x24>)
 8002dce:	6013      	str	r3, [r2, #0]
}
 8002dd0:	bf00      	nop
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	2000001c 	.word	0x2000001c
 8002de0:	20003f5c 	.word	0x20003f5c

08002de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return uwTick;
 8002de8:	4b03      	ldr	r3, [pc, #12]	@ (8002df8 <HAL_GetTick+0x14>)
 8002dea:	681b      	ldr	r3, [r3, #0]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	20003f5c 	.word	0x20003f5c

08002dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e04:	f7ff ffee 	bl	8002de4 <HAL_GetTick>
 8002e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e14:	d005      	beq.n	8002e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e16:	4b0a      	ldr	r3, [pc, #40]	@ (8002e40 <HAL_Delay+0x44>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4413      	add	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e22:	bf00      	nop
 8002e24:	f7ff ffde 	bl	8002de4 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d8f7      	bhi.n	8002e24 <HAL_Delay+0x28>
  {
  }
}
 8002e34:	bf00      	nop
 8002e36:	bf00      	nop
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	2000001c 	.word	0x2000001c

08002e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e54:	4b0c      	ldr	r3, [pc, #48]	@ (8002e88 <__NVIC_SetPriorityGrouping+0x44>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e60:	4013      	ands	r3, r2
 8002e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e76:	4a04      	ldr	r2, [pc, #16]	@ (8002e88 <__NVIC_SetPriorityGrouping+0x44>)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	60d3      	str	r3, [r2, #12]
}
 8002e7c:	bf00      	nop
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e90:	4b04      	ldr	r3, [pc, #16]	@ (8002ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	0a1b      	lsrs	r3, r3, #8
 8002e96:	f003 0307 	and.w	r3, r3, #7
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	e000ed00 	.word	0xe000ed00

08002ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	db0b      	blt.n	8002ed2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	f003 021f 	and.w	r2, r3, #31
 8002ec0:	4907      	ldr	r1, [pc, #28]	@ (8002ee0 <__NVIC_EnableIRQ+0x38>)
 8002ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	2001      	movs	r0, #1
 8002eca:	fa00 f202 	lsl.w	r2, r0, r2
 8002ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	e000e100 	.word	0xe000e100

08002ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	6039      	str	r1, [r7, #0]
 8002eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	db0a      	blt.n	8002f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	490c      	ldr	r1, [pc, #48]	@ (8002f30 <__NVIC_SetPriority+0x4c>)
 8002efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f02:	0112      	lsls	r2, r2, #4
 8002f04:	b2d2      	uxtb	r2, r2
 8002f06:	440b      	add	r3, r1
 8002f08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f0c:	e00a      	b.n	8002f24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	4908      	ldr	r1, [pc, #32]	@ (8002f34 <__NVIC_SetPriority+0x50>)
 8002f14:	79fb      	ldrb	r3, [r7, #7]
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	3b04      	subs	r3, #4
 8002f1c:	0112      	lsls	r2, r2, #4
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	440b      	add	r3, r1
 8002f22:	761a      	strb	r2, [r3, #24]
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	e000e100 	.word	0xe000e100
 8002f34:	e000ed00 	.word	0xe000ed00

08002f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b089      	sub	sp, #36	@ 0x24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	f1c3 0307 	rsb	r3, r3, #7
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	bf28      	it	cs
 8002f56:	2304      	movcs	r3, #4
 8002f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	2b06      	cmp	r3, #6
 8002f60:	d902      	bls.n	8002f68 <NVIC_EncodePriority+0x30>
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	3b03      	subs	r3, #3
 8002f66:	e000      	b.n	8002f6a <NVIC_EncodePriority+0x32>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43da      	mvns	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	401a      	ands	r2, r3
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f80:	f04f 31ff 	mov.w	r1, #4294967295
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8a:	43d9      	mvns	r1, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f90:	4313      	orrs	r3, r2
         );
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3724      	adds	r7, #36	@ 0x24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff ff4c 	bl	8002e44 <__NVIC_SetPriorityGrouping>
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
 8002fc0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fc2:	f7ff ff63 	bl	8002e8c <__NVIC_GetPriorityGrouping>
 8002fc6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	68b9      	ldr	r1, [r7, #8]
 8002fcc:	6978      	ldr	r0, [r7, #20]
 8002fce:	f7ff ffb3 	bl	8002f38 <NVIC_EncodePriority>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fd8:	4611      	mov	r1, r2
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff ff82 	bl	8002ee4 <__NVIC_SetPriority>
}
 8002fe0:	bf00      	nop
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff ff56 	bl	8002ea8 <__NVIC_EnableIRQ>
}
 8002ffc:	bf00      	nop
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3b01      	subs	r3, #1
 8003010:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003014:	d301      	bcc.n	800301a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8003016:	2301      	movs	r3, #1
 8003018:	e00d      	b.n	8003036 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800301a:	4a0a      	ldr	r2, [pc, #40]	@ (8003044 <HAL_SYSTICK_Config+0x40>)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3b01      	subs	r3, #1
 8003020:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8003022:	4b08      	ldr	r3, [pc, #32]	@ (8003044 <HAL_SYSTICK_Config+0x40>)
 8003024:	2200      	movs	r2, #0
 8003026:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8003028:	4b06      	ldr	r3, [pc, #24]	@ (8003044 <HAL_SYSTICK_Config+0x40>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a05      	ldr	r2, [pc, #20]	@ (8003044 <HAL_SYSTICK_Config+0x40>)
 800302e:	f043 0303 	orr.w	r3, r3, #3
 8003032:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	e000e010 	.word	0xe000e010

08003048 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b04      	cmp	r3, #4
 8003054:	d844      	bhi.n	80030e0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8003056:	a201      	add	r2, pc, #4	@ (adr r2, 800305c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305c:	0800307f 	.word	0x0800307f
 8003060:	0800309d 	.word	0x0800309d
 8003064:	080030bf 	.word	0x080030bf
 8003068:	080030e1 	.word	0x080030e1
 800306c:	08003071 	.word	0x08003071
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8003070:	4b1f      	ldr	r3, [pc, #124]	@ (80030f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a1e      	ldr	r2, [pc, #120]	@ (80030f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003076:	f043 0304 	orr.w	r3, r3, #4
 800307a:	6013      	str	r3, [r2, #0]
      break;
 800307c:	e031      	b.n	80030e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800307e:	4b1c      	ldr	r3, [pc, #112]	@ (80030f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a1b      	ldr	r2, [pc, #108]	@ (80030f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003084:	f023 0304 	bic.w	r3, r3, #4
 8003088:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800308a:	4b1a      	ldr	r3, [pc, #104]	@ (80030f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800308c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003090:	4a18      	ldr	r2, [pc, #96]	@ (80030f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003092:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003096:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800309a:	e022      	b.n	80030e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800309c:	4b14      	ldr	r3, [pc, #80]	@ (80030f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a13      	ldr	r2, [pc, #76]	@ (80030f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80030a2:	f023 0304 	bic.w	r3, r3, #4
 80030a6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80030a8:	4b12      	ldr	r3, [pc, #72]	@ (80030f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80030aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030ae:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80030b2:	4a10      	ldr	r2, [pc, #64]	@ (80030f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80030b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80030bc:	e011      	b.n	80030e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80030be:	4b0c      	ldr	r3, [pc, #48]	@ (80030f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a0b      	ldr	r2, [pc, #44]	@ (80030f0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80030c4:	f023 0304 	bic.w	r3, r3, #4
 80030c8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80030ca:	4b0a      	ldr	r3, [pc, #40]	@ (80030f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80030cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030d0:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80030d4:	4a07      	ldr	r2, [pc, #28]	@ (80030f4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80030d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80030de:	e000      	b.n	80030e2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80030e0:	bf00      	nop
  }
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	e000e010 	.word	0xe000e010
 80030f4:	46020c00 	.word	0x46020c00

080030f8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80030fe:	4b19      	ldr	r3, [pc, #100]	@ (8003164 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0304 	and.w	r3, r3, #4
 8003106:	2b00      	cmp	r3, #0
 8003108:	d002      	beq.n	8003110 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800310a:	2304      	movs	r3, #4
 800310c:	607b      	str	r3, [r7, #4]
 800310e:	e021      	b.n	8003154 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8003110:	4b15      	ldr	r3, [pc, #84]	@ (8003168 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8003112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003116:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800311a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003122:	d011      	beq.n	8003148 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800312a:	d810      	bhi.n	800314e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d004      	beq.n	800313c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003138:	d003      	beq.n	8003142 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800313a:	e008      	b.n	800314e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800313c:	2300      	movs	r3, #0
 800313e:	607b      	str	r3, [r7, #4]
        break;
 8003140:	e008      	b.n	8003154 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8003142:	2301      	movs	r3, #1
 8003144:	607b      	str	r3, [r7, #4]
        break;
 8003146:	e005      	b.n	8003154 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8003148:	2302      	movs	r3, #2
 800314a:	607b      	str	r3, [r7, #4]
        break;
 800314c:	e002      	b.n	8003154 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800314e:	2300      	movs	r3, #0
 8003150:	607b      	str	r3, [r7, #4]
        break;
 8003152:	bf00      	nop
    }
  }
  return systick_source;
 8003154:	687b      	ldr	r3, [r7, #4]
}
 8003156:	4618      	mov	r0, r3
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	e000e010 	.word	0xe000e010
 8003168:	46020c00 	.word	0x46020c00

0800316c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8003170:	f000 f802 	bl	8003178 <HAL_SYSTICK_Callback>
}
 8003174:	bf00      	nop
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8003186:	b480      	push	{r7}
 8003188:	b087      	sub	sp, #28
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	460b      	mov	r3, r1
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8003198:	7afb      	ldrb	r3, [r7, #11]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d011      	beq.n	80031c2 <HAL_EXTI_RegisterCallback+0x3c>
 800319e:	2b02      	cmp	r3, #2
 80031a0:	dc13      	bgt.n	80031ca <HAL_EXTI_RegisterCallback+0x44>
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d002      	beq.n	80031ac <HAL_EXTI_RegisterCallback+0x26>
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d007      	beq.n	80031ba <HAL_EXTI_RegisterCallback+0x34>
 80031aa:	e00e      	b.n	80031ca <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	609a      	str	r2, [r3, #8]
      break;
 80031b8:	e00a      	b.n	80031d0 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	605a      	str	r2, [r3, #4]
      break;
 80031c0:	e006      	b.n	80031d0 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	609a      	str	r2, [r3, #8]
      break;
 80031c8:	e002      	b.n	80031d0 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	75fb      	strb	r3, [r7, #23]
      break;
 80031ce:	bf00      	nop
  }

  return status;
 80031d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	371c      	adds	r7, #28
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e003      	b.n	80031fa <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80031f8:	2300      	movs	r3, #0
  }
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
	...

08003208 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	0c1b      	lsrs	r3, r3, #16
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 031f 	and.w	r3, r3, #31
 8003224:	2201      	movs	r2, #1
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	4b17      	ldr	r3, [pc, #92]	@ (8003290 <HAL_EXTI_IRQHandler+0x88>)
 8003232:	4413      	add	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4013      	ands	r3, r2
 800323e:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d009      	beq.n	800325a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	015a      	lsls	r2, r3, #5
 800325e:	4b0d      	ldr	r3, [pc, #52]	@ (8003294 <HAL_EXTI_IRQHandler+0x8c>)
 8003260:	4413      	add	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4013      	ands	r3, r2
 800326c:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d009      	beq.n	8003288 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d002      	beq.n	8003288 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	4798      	blx	r3
    }
  }
}
 8003288:	bf00      	nop
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	4602200c 	.word	0x4602200c
 8003294:	46022010 	.word	0x46022010

08003298 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003298:	b480      	push	{r7}
 800329a:	b089      	sub	sp, #36	@ 0x24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80032aa:	e1ba      	b.n	8003622 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	2101      	movs	r1, #1
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	fa01 f303 	lsl.w	r3, r1, r3
 80032b8:	4013      	ands	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 81aa 	beq.w	800361c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a55      	ldr	r2, [pc, #340]	@ (8003420 <HAL_GPIO_Init+0x188>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d15d      	bne.n	800338c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80032d6:	2201      	movs	r2, #1
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43db      	mvns	r3, r3
 80032e0:	69fa      	ldr	r2, [r7, #28]
 80032e2:	4013      	ands	r3, r2
 80032e4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 0201 	and.w	r2, r3, #1
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	69fa      	ldr	r2, [r7, #28]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69fa      	ldr	r2, [r7, #28]
 80032fe:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003300:	4a48      	ldr	r2, [pc, #288]	@ (8003424 <HAL_GPIO_Init+0x18c>)
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003308:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800330a:	4a46      	ldr	r2, [pc, #280]	@ (8003424 <HAL_GPIO_Init+0x18c>)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	4413      	add	r3, r2
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	08da      	lsrs	r2, r3, #3
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	3208      	adds	r2, #8
 800331e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003322:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	220f      	movs	r2, #15
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43db      	mvns	r3, r3
 8003334:	69fa      	ldr	r2, [r7, #28]
 8003336:	4013      	ands	r3, r2
 8003338:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	220b      	movs	r2, #11
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	69fa      	ldr	r2, [r7, #28]
 800334a:	4313      	orrs	r3, r2
 800334c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	08da      	lsrs	r2, r3, #3
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	3208      	adds	r2, #8
 8003356:	69f9      	ldr	r1, [r7, #28]
 8003358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	2203      	movs	r2, #3
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	43db      	mvns	r3, r3
 800336e:	69fa      	ldr	r2, [r7, #28]
 8003370:	4013      	ands	r3, r2
 8003372:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	2202      	movs	r2, #2
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	69fa      	ldr	r2, [r7, #28]
 8003380:	4313      	orrs	r3, r2
 8003382:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	69fa      	ldr	r2, [r7, #28]
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	e067      	b.n	800345c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b02      	cmp	r3, #2
 8003392:	d003      	beq.n	800339c <HAL_GPIO_Init+0x104>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b12      	cmp	r3, #18
 800339a:	d145      	bne.n	8003428 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	08da      	lsrs	r2, r3, #3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3208      	adds	r2, #8
 80033a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	220f      	movs	r2, #15
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	43db      	mvns	r3, r3
 80033ba:	69fa      	ldr	r2, [r7, #28]
 80033bc:	4013      	ands	r3, r2
 80033be:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	f003 020f 	and.w	r2, r3, #15
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	69fa      	ldr	r2, [r7, #28]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	08da      	lsrs	r2, r3, #3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	3208      	adds	r2, #8
 80033e2:	69f9      	ldr	r1, [r7, #28]
 80033e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	2203      	movs	r2, #3
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	43db      	mvns	r3, r3
 80033fa:	69fa      	ldr	r2, [r7, #28]
 80033fc:	4013      	ands	r3, r2
 80033fe:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 0203 	and.w	r2, r3, #3
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	69fa      	ldr	r2, [r7, #28]
 8003412:	4313      	orrs	r3, r2
 8003414:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	69fa      	ldr	r2, [r7, #28]
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	e01e      	b.n	800345c <HAL_GPIO_Init+0x1c4>
 800341e:	bf00      	nop
 8003420:	46020000 	.word	0x46020000
 8003424:	0800cfd8 	.word	0x0800cfd8
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	2203      	movs	r2, #3
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	69fa      	ldr	r2, [r7, #28]
 800343c:	4013      	ands	r3, r2
 800343e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 0203 	and.w	r2, r3, #3
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	69fa      	ldr	r2, [r7, #28]
 8003452:	4313      	orrs	r3, r2
 8003454:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	69fa      	ldr	r2, [r7, #28]
 800345a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d00b      	beq.n	800347c <HAL_GPIO_Init+0x1e4>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b02      	cmp	r3, #2
 800346a:	d007      	beq.n	800347c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003470:	2b11      	cmp	r3, #17
 8003472:	d003      	beq.n	800347c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b12      	cmp	r3, #18
 800347a:	d130      	bne.n	80034de <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	2203      	movs	r2, #3
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	43db      	mvns	r3, r3
 800348e:	69fa      	ldr	r2, [r7, #28]
 8003490:	4013      	ands	r3, r2
 8003492:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	68da      	ldr	r2, [r3, #12]
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	69fa      	ldr	r2, [r7, #28]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	69fa      	ldr	r2, [r7, #28]
 80034aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80034b2:	2201      	movs	r2, #1
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	43db      	mvns	r3, r3
 80034bc:	69fa      	ldr	r2, [r7, #28]
 80034be:	4013      	ands	r3, r2
 80034c0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	091b      	lsrs	r3, r3, #4
 80034c8:	f003 0201 	and.w	r2, r3, #1
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	69fa      	ldr	r2, [r7, #28]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	69fa      	ldr	r2, [r7, #28]
 80034dc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b03      	cmp	r3, #3
 80034e4:	d017      	beq.n	8003516 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	2203      	movs	r2, #3
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43db      	mvns	r3, r3
 80034f8:	69fa      	ldr	r2, [r7, #28]
 80034fa:	4013      	ands	r3, r2
 80034fc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	69fa      	ldr	r2, [r7, #28]
 800350c:	4313      	orrs	r3, r2
 800350e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	69fa      	ldr	r2, [r7, #28]
 8003514:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d07c      	beq.n	800361c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003522:	4a47      	ldr	r2, [pc, #284]	@ (8003640 <HAL_GPIO_Init+0x3a8>)
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	089b      	lsrs	r3, r3, #2
 8003528:	3318      	adds	r3, #24
 800352a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800352e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	220f      	movs	r2, #15
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	43db      	mvns	r3, r3
 8003540:	69fa      	ldr	r2, [r7, #28]
 8003542:	4013      	ands	r3, r2
 8003544:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	0a9a      	lsrs	r2, r3, #10
 800354a:	4b3e      	ldr	r3, [pc, #248]	@ (8003644 <HAL_GPIO_Init+0x3ac>)
 800354c:	4013      	ands	r3, r2
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	f002 0203 	and.w	r2, r2, #3
 8003554:	00d2      	lsls	r2, r2, #3
 8003556:	4093      	lsls	r3, r2
 8003558:	69fa      	ldr	r2, [r7, #28]
 800355a:	4313      	orrs	r3, r2
 800355c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800355e:	4938      	ldr	r1, [pc, #224]	@ (8003640 <HAL_GPIO_Init+0x3a8>)
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	089b      	lsrs	r3, r3, #2
 8003564:	3318      	adds	r3, #24
 8003566:	69fa      	ldr	r2, [r7, #28]
 8003568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800356c:	4b34      	ldr	r3, [pc, #208]	@ (8003640 <HAL_GPIO_Init+0x3a8>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	43db      	mvns	r3, r3
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	4013      	ands	r3, r2
 800357a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8003588:	69fa      	ldr	r2, [r7, #28]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4313      	orrs	r3, r2
 800358e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003590:	4a2b      	ldr	r2, [pc, #172]	@ (8003640 <HAL_GPIO_Init+0x3a8>)
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003596:	4b2a      	ldr	r3, [pc, #168]	@ (8003640 <HAL_GPIO_Init+0x3a8>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	43db      	mvns	r3, r3
 80035a0:	69fa      	ldr	r2, [r7, #28]
 80035a2:	4013      	ands	r3, r2
 80035a4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80035b2:	69fa      	ldr	r2, [r7, #28]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80035ba:	4a21      	ldr	r2, [pc, #132]	@ (8003640 <HAL_GPIO_Init+0x3a8>)
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80035c0:	4b1f      	ldr	r3, [pc, #124]	@ (8003640 <HAL_GPIO_Init+0x3a8>)
 80035c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035c6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	43db      	mvns	r3, r3
 80035cc:	69fa      	ldr	r2, [r7, #28]
 80035ce:	4013      	ands	r3, r2
 80035d0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80035de:	69fa      	ldr	r2, [r7, #28]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80035e6:	4a16      	ldr	r2, [pc, #88]	@ (8003640 <HAL_GPIO_Init+0x3a8>)
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80035ee:	4b14      	ldr	r3, [pc, #80]	@ (8003640 <HAL_GPIO_Init+0x3a8>)
 80035f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	43db      	mvns	r3, r3
 80035fa:	69fa      	ldr	r2, [r7, #28]
 80035fc:	4013      	ands	r3, r2
 80035fe:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800360c:	69fa      	ldr	r2, [r7, #28]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4313      	orrs	r3, r2
 8003612:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003614:	4a0a      	ldr	r2, [pc, #40]	@ (8003640 <HAL_GPIO_Init+0x3a8>)
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	3301      	adds	r3, #1
 8003620:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	fa22 f303 	lsr.w	r3, r2, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	f47f ae3d 	bne.w	80032ac <HAL_GPIO_Init+0x14>
  }
}
 8003632:	bf00      	nop
 8003634:	bf00      	nop
 8003636:	3724      	adds	r7, #36	@ 0x24
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	46022000 	.word	0x46022000
 8003644:	002f7f7f 	.word	0x002f7f7f

08003648 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	887b      	ldrh	r3, [r7, #2]
 800365a:	4013      	ands	r3, r2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003660:	2301      	movs	r3, #1
 8003662:	73fb      	strb	r3, [r7, #15]
 8003664:	e001      	b.n	800366a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003666:	2300      	movs	r3, #0
 8003668:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 800366a:	7bfb      	ldrb	r3, [r7, #15]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	460b      	mov	r3, r1
 8003682:	807b      	strh	r3, [r7, #2]
 8003684:	4613      	mov	r3, r2
 8003686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003688:	787b      	ldrb	r3, [r7, #1]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800368e:	887a      	ldrh	r2, [r7, #2]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003694:	e002      	b.n	800369c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8003696:	887a      	ldrh	r2, [r7, #2]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036ba:	887a      	ldrh	r2, [r7, #2]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4013      	ands	r3, r2
 80036c0:	041a      	lsls	r2, r3, #16
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	43d9      	mvns	r1, r3
 80036c6:	887b      	ldrh	r3, [r7, #2]
 80036c8:	400b      	ands	r3, r1
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	619a      	str	r2, [r3, #24]
}
 80036d0:	bf00      	nop
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e08d      	b.n	800380a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7fe fd32 	bl	800216c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2224      	movs	r2, #36	@ 0x24
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0201 	bic.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800372c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800373c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d107      	bne.n	8003756 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003752:	609a      	str	r2, [r3, #8]
 8003754:	e006      	b.n	8003764 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003762:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	2b02      	cmp	r3, #2
 800376a:	d108      	bne.n	800377e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800377a:	605a      	str	r2, [r3, #4]
 800377c:	e007      	b.n	800378e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800378c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6812      	ldr	r2, [r2, #0]
 8003798:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800379c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691a      	ldr	r2, [r3, #16]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	69d9      	ldr	r1, [r3, #28]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a1a      	ldr	r2, [r3, #32]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0201 	orr.w	r2, r2, #1
 80037ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2220      	movs	r2, #32
 80037f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af02      	add	r7, sp, #8
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	607a      	str	r2, [r7, #4]
 800381e:	461a      	mov	r2, r3
 8003820:	460b      	mov	r3, r1
 8003822:	817b      	strh	r3, [r7, #10]
 8003824:	4613      	mov	r3, r2
 8003826:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b20      	cmp	r3, #32
 8003832:	f040 80da 	bne.w	80039ea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800383c:	2b01      	cmp	r3, #1
 800383e:	d101      	bne.n	8003844 <HAL_I2C_Master_Transmit+0x30>
 8003840:	2302      	movs	r3, #2
 8003842:	e0d3      	b.n	80039ec <HAL_I2C_Master_Transmit+0x1d8>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800384c:	f7ff faca 	bl	8002de4 <HAL_GetTick>
 8003850:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	2319      	movs	r3, #25
 8003858:	2201      	movs	r2, #1
 800385a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 fb4e 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e0be      	b.n	80039ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2221      	movs	r2, #33	@ 0x21
 8003872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2210      	movs	r2, #16
 800387a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	893a      	ldrh	r2, [r7, #8]
 800388e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800389a:	b29b      	uxth	r3, r3
 800389c:	2bff      	cmp	r3, #255	@ 0xff
 800389e:	d90e      	bls.n	80038be <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	22ff      	movs	r2, #255	@ 0xff
 80038a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	8979      	ldrh	r1, [r7, #10]
 80038ae:	4b51      	ldr	r3, [pc, #324]	@ (80039f4 <HAL_I2C_Master_Transmit+0x1e0>)
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 fd72 	bl	80043a0 <I2C_TransferConfig>
 80038bc:	e06c      	b.n	8003998 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	8979      	ldrh	r1, [r7, #10]
 80038d0:	4b48      	ldr	r3, [pc, #288]	@ (80039f4 <HAL_I2C_Master_Transmit+0x1e0>)
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 fd61 	bl	80043a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80038de:	e05b      	b.n	8003998 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	6a39      	ldr	r1, [r7, #32]
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 fb64 	bl	8003fb2 <I2C_WaitOnTXISFlagUntilTimeout>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e07b      	b.n	80039ec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f8:	781a      	ldrb	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003904:	1c5a      	adds	r2, r3, #1
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800390e:	b29b      	uxth	r3, r3
 8003910:	3b01      	subs	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d034      	beq.n	8003998 <HAL_I2C_Master_Transmit+0x184>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003932:	2b00      	cmp	r3, #0
 8003934:	d130      	bne.n	8003998 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	2200      	movs	r2, #0
 800393e:	2180      	movs	r1, #128	@ 0x80
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 fadd 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e04d      	b.n	80039ec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003954:	b29b      	uxth	r3, r3
 8003956:	2bff      	cmp	r3, #255	@ 0xff
 8003958:	d90e      	bls.n	8003978 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	22ff      	movs	r2, #255	@ 0xff
 800395e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003964:	b2da      	uxtb	r2, r3
 8003966:	8979      	ldrh	r1, [r7, #10]
 8003968:	2300      	movs	r3, #0
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 fd15 	bl	80043a0 <I2C_TransferConfig>
 8003976:	e00f      	b.n	8003998 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003986:	b2da      	uxtb	r2, r3
 8003988:	8979      	ldrh	r1, [r7, #10]
 800398a:	2300      	movs	r3, #0
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 fd04 	bl	80043a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800399c:	b29b      	uxth	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d19e      	bne.n	80038e0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	6a39      	ldr	r1, [r7, #32]
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 fb4a 	bl	8004040 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e01a      	b.n	80039ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2220      	movs	r2, #32
 80039bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6859      	ldr	r1, [r3, #4]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	4b0b      	ldr	r3, [pc, #44]	@ (80039f8 <HAL_I2C_Master_Transmit+0x1e4>)
 80039ca:	400b      	ands	r3, r1
 80039cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	e000      	b.n	80039ec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80039ea:	2302      	movs	r3, #2
  }
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	80002000 	.word	0x80002000
 80039f8:	fe00e800 	.word	0xfe00e800

080039fc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	607a      	str	r2, [r7, #4]
 8003a06:	461a      	mov	r2, r3
 8003a08:	460b      	mov	r3, r1
 8003a0a:	817b      	strh	r3, [r7, #10]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b20      	cmp	r3, #32
 8003a1a:	f040 80db 	bne.w	8003bd4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d101      	bne.n	8003a2c <HAL_I2C_Master_Receive+0x30>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e0d4      	b.n	8003bd6 <HAL_I2C_Master_Receive+0x1da>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a34:	f7ff f9d6 	bl	8002de4 <HAL_GetTick>
 8003a38:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	2319      	movs	r3, #25
 8003a40:	2201      	movs	r2, #1
 8003a42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 fa5a 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e0bf      	b.n	8003bd6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2222      	movs	r2, #34	@ 0x22
 8003a5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2210      	movs	r2, #16
 8003a62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	893a      	ldrh	r2, [r7, #8]
 8003a76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	2bff      	cmp	r3, #255	@ 0xff
 8003a86:	d90e      	bls.n	8003aa6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	22ff      	movs	r2, #255	@ 0xff
 8003a8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	8979      	ldrh	r1, [r7, #10]
 8003a96:	4b52      	ldr	r3, [pc, #328]	@ (8003be0 <HAL_I2C_Master_Receive+0x1e4>)
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 fc7e 	bl	80043a0 <I2C_TransferConfig>
 8003aa4:	e06d      	b.n	8003b82 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	8979      	ldrh	r1, [r7, #10]
 8003ab8:	4b49      	ldr	r3, [pc, #292]	@ (8003be0 <HAL_I2C_Master_Receive+0x1e4>)
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 fc6d 	bl	80043a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003ac6:	e05c      	b.n	8003b82 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	6a39      	ldr	r1, [r7, #32]
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 fafb 	bl	80040c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e07c      	b.n	8003bd6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aee:	1c5a      	adds	r2, r3, #1
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d034      	beq.n	8003b82 <HAL_I2C_Master_Receive+0x186>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d130      	bne.n	8003b82 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	2200      	movs	r2, #0
 8003b28:	2180      	movs	r1, #128	@ 0x80
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f000 f9e8 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e04d      	b.n	8003bd6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	2bff      	cmp	r3, #255	@ 0xff
 8003b42:	d90e      	bls.n	8003b62 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	22ff      	movs	r2, #255	@ 0xff
 8003b48:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	8979      	ldrh	r1, [r7, #10]
 8003b52:	2300      	movs	r3, #0
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 fc20 	bl	80043a0 <I2C_TransferConfig>
 8003b60:	e00f      	b.n	8003b82 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	8979      	ldrh	r1, [r7, #10]
 8003b74:	2300      	movs	r3, #0
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 fc0f 	bl	80043a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d19d      	bne.n	8003ac8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	6a39      	ldr	r1, [r7, #32]
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 fa55 	bl	8004040 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e01a      	b.n	8003bd6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6859      	ldr	r1, [r3, #4]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8003be4 <HAL_I2C_Master_Receive+0x1e8>)
 8003bb4:	400b      	ands	r3, r1
 8003bb6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	e000      	b.n	8003bd6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003bd4:	2302      	movs	r3, #2
  }
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	80002400 	.word	0x80002400
 8003be4:	fe00e800 	.word	0xfe00e800

08003be8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	4608      	mov	r0, r1
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	817b      	strh	r3, [r7, #10]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	813b      	strh	r3, [r7, #8]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b20      	cmp	r3, #32
 8003c0c:	f040 80f9 	bne.w	8003e02 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <HAL_I2C_Mem_Write+0x34>
 8003c16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d105      	bne.n	8003c28 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c22:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0ed      	b.n	8003e04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d101      	bne.n	8003c36 <HAL_I2C_Mem_Write+0x4e>
 8003c32:	2302      	movs	r3, #2
 8003c34:	e0e6      	b.n	8003e04 <HAL_I2C_Mem_Write+0x21c>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c3e:	f7ff f8d1 	bl	8002de4 <HAL_GetTick>
 8003c42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	2319      	movs	r3, #25
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 f955 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e0d1      	b.n	8003e04 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2221      	movs	r2, #33	@ 0x21
 8003c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2240      	movs	r2, #64	@ 0x40
 8003c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a3a      	ldr	r2, [r7, #32]
 8003c7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003c80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c88:	88f8      	ldrh	r0, [r7, #6]
 8003c8a:	893a      	ldrh	r2, [r7, #8]
 8003c8c:	8979      	ldrh	r1, [r7, #10]
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	9301      	str	r3, [sp, #4]
 8003c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	4603      	mov	r3, r0
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 f8b9 	bl	8003e10 <I2C_RequestMemoryWrite>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d005      	beq.n	8003cb0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e0a9      	b.n	8003e04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2bff      	cmp	r3, #255	@ 0xff
 8003cb8:	d90e      	bls.n	8003cd8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	22ff      	movs	r2, #255	@ 0xff
 8003cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	8979      	ldrh	r1, [r7, #10]
 8003cc8:	2300      	movs	r3, #0
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 fb65 	bl	80043a0 <I2C_TransferConfig>
 8003cd6:	e00f      	b.n	8003cf8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	8979      	ldrh	r1, [r7, #10]
 8003cea:	2300      	movs	r3, #0
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 fb54 	bl	80043a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 f958 	bl	8003fb2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e07b      	b.n	8003e04 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d10:	781a      	ldrb	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d034      	beq.n	8003db0 <HAL_I2C_Mem_Write+0x1c8>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d130      	bne.n	8003db0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d54:	2200      	movs	r2, #0
 8003d56:	2180      	movs	r1, #128	@ 0x80
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f000 f8d1 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e04d      	b.n	8003e04 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	2bff      	cmp	r3, #255	@ 0xff
 8003d70:	d90e      	bls.n	8003d90 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	22ff      	movs	r2, #255	@ 0xff
 8003d76:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	8979      	ldrh	r1, [r7, #10]
 8003d80:	2300      	movs	r3, #0
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 fb09 	bl	80043a0 <I2C_TransferConfig>
 8003d8e:	e00f      	b.n	8003db0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	8979      	ldrh	r1, [r7, #10]
 8003da2:	2300      	movs	r3, #0
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 faf8 	bl	80043a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d19e      	bne.n	8003cf8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 f93e 	bl	8004040 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e01a      	b.n	8003e04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6859      	ldr	r1, [r3, #4]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	4b0a      	ldr	r3, [pc, #40]	@ (8003e0c <HAL_I2C_Mem_Write+0x224>)
 8003de2:	400b      	ands	r3, r1
 8003de4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	e000      	b.n	8003e04 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003e02:	2302      	movs	r3, #2
  }
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3718      	adds	r7, #24
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	fe00e800 	.word	0xfe00e800

08003e10 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af02      	add	r7, sp, #8
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	4608      	mov	r0, r1
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4603      	mov	r3, r0
 8003e20:	817b      	strh	r3, [r7, #10]
 8003e22:	460b      	mov	r3, r1
 8003e24:	813b      	strh	r3, [r7, #8]
 8003e26:	4613      	mov	r3, r2
 8003e28:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003e2a:	88fb      	ldrh	r3, [r7, #6]
 8003e2c:	b2da      	uxtb	r2, r3
 8003e2e:	8979      	ldrh	r1, [r7, #10]
 8003e30:	4b20      	ldr	r3, [pc, #128]	@ (8003eb4 <I2C_RequestMemoryWrite+0xa4>)
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 fab1 	bl	80043a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e3e:	69fa      	ldr	r2, [r7, #28]
 8003e40:	69b9      	ldr	r1, [r7, #24]
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 f8b5 	bl	8003fb2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e02c      	b.n	8003eac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e52:	88fb      	ldrh	r3, [r7, #6]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d105      	bne.n	8003e64 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e58:	893b      	ldrh	r3, [r7, #8]
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e62:	e015      	b.n	8003e90 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e64:	893b      	ldrh	r3, [r7, #8]
 8003e66:	0a1b      	lsrs	r3, r3, #8
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e72:	69fa      	ldr	r2, [r7, #28]
 8003e74:	69b9      	ldr	r1, [r7, #24]
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 f89b 	bl	8003fb2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e012      	b.n	8003eac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e86:	893b      	ldrh	r3, [r7, #8]
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	2200      	movs	r2, #0
 8003e98:	2180      	movs	r1, #128	@ 0x80
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 f830 	bl	8003f00 <I2C_WaitOnFlagUntilTimeout>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	80002000 	.word	0x80002000

08003eb8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d103      	bne.n	8003ed6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d007      	beq.n	8003ef4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699a      	ldr	r2, [r3, #24]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0201 	orr.w	r2, r2, #1
 8003ef2:	619a      	str	r2, [r3, #24]
  }
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f10:	e03b      	b.n	8003f8a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	6839      	ldr	r1, [r7, #0]
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 f962 	bl	80041e0 <I2C_IsErrorOccurred>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e041      	b.n	8003faa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2c:	d02d      	beq.n	8003f8a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f2e:	f7fe ff59 	bl	8002de4 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d302      	bcc.n	8003f44 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d122      	bne.n	8003f8a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	699a      	ldr	r2, [r3, #24]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	bf0c      	ite	eq
 8003f54:	2301      	moveq	r3, #1
 8003f56:	2300      	movne	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	79fb      	ldrb	r3, [r7, #7]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d113      	bne.n	8003f8a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f66:	f043 0220 	orr.w	r2, r3, #32
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e00f      	b.n	8003faa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	699a      	ldr	r2, [r3, #24]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	4013      	ands	r3, r2
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	bf0c      	ite	eq
 8003f9a:	2301      	moveq	r3, #1
 8003f9c:	2300      	movne	r3, #0
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	79fb      	ldrb	r3, [r7, #7]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d0b4      	beq.n	8003f12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b084      	sub	sp, #16
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	60f8      	str	r0, [r7, #12]
 8003fba:	60b9      	str	r1, [r7, #8]
 8003fbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fbe:	e033      	b.n	8004028 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	68b9      	ldr	r1, [r7, #8]
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 f90b 	bl	80041e0 <I2C_IsErrorOccurred>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e031      	b.n	8004038 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fda:	d025      	beq.n	8004028 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fdc:	f7fe ff02 	bl	8002de4 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d302      	bcc.n	8003ff2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d11a      	bne.n	8004028 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d013      	beq.n	8004028 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004004:	f043 0220 	orr.w	r2, r3, #32
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e007      	b.n	8004038 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b02      	cmp	r3, #2
 8004034:	d1c4      	bne.n	8003fc0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800404c:	e02f      	b.n	80040ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	68b9      	ldr	r1, [r7, #8]
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 f8c4 	bl	80041e0 <I2C_IsErrorOccurred>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e02d      	b.n	80040be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004062:	f7fe febf 	bl	8002de4 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	429a      	cmp	r2, r3
 8004070:	d302      	bcc.n	8004078 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d11a      	bne.n	80040ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b20      	cmp	r3, #32
 8004084:	d013      	beq.n	80040ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800408a:	f043 0220 	orr.w	r2, r3, #32
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2220      	movs	r2, #32
 8004096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e007      	b.n	80040be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	f003 0320 	and.w	r3, r3, #32
 80040b8:	2b20      	cmp	r3, #32
 80040ba:	d1c8      	bne.n	800404e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
	...

080040c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040d4:	2300      	movs	r3, #0
 80040d6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80040d8:	e071      	b.n	80041be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	68b9      	ldr	r1, [r7, #8]
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 f87e 	bl	80041e0 <I2C_IsErrorOccurred>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b20      	cmp	r3, #32
 80040fa:	d13b      	bne.n	8004174 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80040fc:	7dfb      	ldrb	r3, [r7, #23]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d138      	bne.n	8004174 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b04      	cmp	r3, #4
 800410e:	d105      	bne.n	800411c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004118:	2300      	movs	r3, #0
 800411a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	f003 0310 	and.w	r3, r3, #16
 8004126:	2b10      	cmp	r3, #16
 8004128:	d121      	bne.n	800416e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2210      	movs	r2, #16
 8004130:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2204      	movs	r2, #4
 8004136:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2220      	movs	r2, #32
 800413e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6859      	ldr	r1, [r3, #4]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	4b24      	ldr	r3, [pc, #144]	@ (80041dc <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800414c:	400b      	ands	r3, r1
 800414e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	75fb      	strb	r3, [r7, #23]
 800416c:	e002      	b.n	8004174 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004174:	f7fe fe36 	bl	8002de4 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	429a      	cmp	r2, r3
 8004182:	d302      	bcc.n	800418a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d119      	bne.n	80041be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800418a:	7dfb      	ldrb	r3, [r7, #23]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d116      	bne.n	80041be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b04      	cmp	r3, #4
 800419c:	d00f      	beq.n	80041be <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a2:	f043 0220 	orr.w	r2, r3, #32
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2220      	movs	r2, #32
 80041ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d002      	beq.n	80041d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80041cc:	7dfb      	ldrb	r3, [r7, #23]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d083      	beq.n	80040da <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80041d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	fe00e800 	.word	0xfe00e800

080041e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08a      	sub	sp, #40	@ 0x28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80041fa:	2300      	movs	r3, #0
 80041fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	f003 0310 	and.w	r3, r3, #16
 8004208:	2b00      	cmp	r3, #0
 800420a:	d068      	beq.n	80042de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2210      	movs	r2, #16
 8004212:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004214:	e049      	b.n	80042aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421c:	d045      	beq.n	80042aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800421e:	f7fe fde1 	bl	8002de4 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	429a      	cmp	r2, r3
 800422c:	d302      	bcc.n	8004234 <I2C_IsErrorOccurred+0x54>
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d13a      	bne.n	80042aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800423e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004246:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004252:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004256:	d121      	bne.n	800429c <I2C_IsErrorOccurred+0xbc>
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800425e:	d01d      	beq.n	800429c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004260:	7cfb      	ldrb	r3, [r7, #19]
 8004262:	2b20      	cmp	r3, #32
 8004264:	d01a      	beq.n	800429c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004274:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004276:	f7fe fdb5 	bl	8002de4 <HAL_GetTick>
 800427a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800427c:	e00e      	b.n	800429c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800427e:	f7fe fdb1 	bl	8002de4 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b19      	cmp	r3, #25
 800428a:	d907      	bls.n	800429c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	f043 0320 	orr.w	r3, r3, #32
 8004292:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800429a:	e006      	b.n	80042aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	f003 0320 	and.w	r3, r3, #32
 80042a6:	2b20      	cmp	r3, #32
 80042a8:	d1e9      	bne.n	800427e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b20      	cmp	r3, #32
 80042b6:	d003      	beq.n	80042c0 <I2C_IsErrorOccurred+0xe0>
 80042b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0aa      	beq.n	8004216 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80042c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d103      	bne.n	80042d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2220      	movs	r2, #32
 80042ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	f043 0304 	orr.w	r3, r3, #4
 80042d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00b      	beq.n	8004308 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	f043 0301 	orr.w	r3, r3, #1
 80042f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004300:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00b      	beq.n	800432a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	f043 0308 	orr.w	r3, r3, #8
 8004318:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004322:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00b      	beq.n	800434c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	f043 0302 	orr.w	r3, r3, #2
 800433a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004344:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800434c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004350:	2b00      	cmp	r3, #0
 8004352:	d01c      	beq.n	800438e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f7ff fdaf 	bl	8003eb8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6859      	ldr	r1, [r3, #4]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	4b0d      	ldr	r3, [pc, #52]	@ (800439c <I2C_IsErrorOccurred+0x1bc>)
 8004366:	400b      	ands	r3, r1
 8004368:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	431a      	orrs	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2220      	movs	r2, #32
 800437a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800438e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004392:	4618      	mov	r0, r3
 8004394:	3728      	adds	r7, #40	@ 0x28
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	fe00e800 	.word	0xfe00e800

080043a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	607b      	str	r3, [r7, #4]
 80043aa:	460b      	mov	r3, r1
 80043ac:	817b      	strh	r3, [r7, #10]
 80043ae:	4613      	mov	r3, r2
 80043b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043b2:	897b      	ldrh	r3, [r7, #10]
 80043b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80043b8:	7a7b      	ldrb	r3, [r7, #9]
 80043ba:	041b      	lsls	r3, r3, #16
 80043bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80043ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	0d5b      	lsrs	r3, r3, #21
 80043da:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80043de:	4b08      	ldr	r3, [pc, #32]	@ (8004400 <I2C_TransferConfig+0x60>)
 80043e0:	430b      	orrs	r3, r1
 80043e2:	43db      	mvns	r3, r3
 80043e4:	ea02 0103 	and.w	r1, r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80043f2:	bf00      	nop
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	03ff63ff 	.word	0x03ff63ff

08004404 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b20      	cmp	r3, #32
 8004418:	d138      	bne.n	800448c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004424:	2302      	movs	r3, #2
 8004426:	e032      	b.n	800448e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2224      	movs	r2, #36	@ 0x24
 8004434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0201 	bic.w	r2, r2, #1
 8004446:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004456:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6819      	ldr	r1, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004488:	2300      	movs	r3, #0
 800448a:	e000      	b.n	800448e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800448c:	2302      	movs	r3, #2
  }
}
 800448e:	4618      	mov	r0, r3
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800449a:	b480      	push	{r7}
 800449c:	b085      	sub	sp, #20
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b20      	cmp	r3, #32
 80044ae:	d139      	bne.n	8004524 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e033      	b.n	8004526 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2224      	movs	r2, #36	@ 0x24
 80044ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0201 	bic.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80044ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	021b      	lsls	r3, r3, #8
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0201 	orr.w	r2, r2, #1
 800450e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	e000      	b.n	8004526 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004524:	2302      	movs	r3, #2
  }
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
	...

08004534 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800453c:	2300      	movs	r3, #0
 800453e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8004540:	4b0b      	ldr	r3, [pc, #44]	@ (8004570 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	73fb      	strb	r3, [r7, #15]
 8004550:	e007      	b.n	8004562 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8004552:	4b07      	ldr	r3, [pc, #28]	@ (8004570 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f023 0204 	bic.w	r2, r3, #4
 800455a:	4905      	ldr	r1, [pc, #20]	@ (8004570 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4313      	orrs	r3, r2
 8004560:	600b      	str	r3, [r1, #0]
  }

  return status;
 8004562:	7bfb      	ldrb	r3, [r7, #15]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	40030400 	.word	0x40030400

08004574 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004578:	4b05      	ldr	r3, [pc, #20]	@ (8004590 <HAL_ICACHE_Enable+0x1c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a04      	ldr	r2, [pc, #16]	@ (8004590 <HAL_ICACHE_Enable+0x1c>)
 800457e:	f043 0301 	orr.w	r3, r3, #1
 8004582:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	40030400 	.word	0x40030400

08004594 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800459c:	4b39      	ldr	r3, [pc, #228]	@ (8004684 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800459e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045a4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d10b      	bne.n	80045c6 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045b4:	d905      	bls.n	80045c2 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80045b6:	4b33      	ldr	r3, [pc, #204]	@ (8004684 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	4a32      	ldr	r2, [pc, #200]	@ (8004684 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80045bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045c0:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	e057      	b.n	8004676 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045cc:	d90a      	bls.n	80045e4 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80045ce:	4b2d      	ldr	r3, [pc, #180]	@ (8004684 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4313      	orrs	r3, r2
 80045da:	4a2a      	ldr	r2, [pc, #168]	@ (8004684 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80045dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045e0:	60d3      	str	r3, [r2, #12]
 80045e2:	e007      	b.n	80045f4 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80045e4:	4b27      	ldr	r3, [pc, #156]	@ (8004684 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80045ec:	4925      	ldr	r1, [pc, #148]	@ (8004684 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80045f4:	4b24      	ldr	r3, [pc, #144]	@ (8004688 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a24      	ldr	r2, [pc, #144]	@ (800468c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80045fa:	fba2 2303 	umull	r2, r3, r2, r3
 80045fe:	099b      	lsrs	r3, r3, #6
 8004600:	2232      	movs	r2, #50	@ 0x32
 8004602:	fb02 f303 	mul.w	r3, r2, r3
 8004606:	4a21      	ldr	r2, [pc, #132]	@ (800468c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004608:	fba2 2303 	umull	r2, r3, r2, r3
 800460c:	099b      	lsrs	r3, r3, #6
 800460e:	3301      	adds	r3, #1
 8004610:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004612:	e002      	b.n	800461a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	3b01      	subs	r3, #1
 8004618:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800461a:	4b1a      	ldr	r3, [pc, #104]	@ (8004684 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d102      	bne.n	800462c <HAL_PWREx_ControlVoltageScaling+0x98>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1f3      	bne.n	8004614 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d01b      	beq.n	800466a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004632:	4b15      	ldr	r3, [pc, #84]	@ (8004688 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a15      	ldr	r2, [pc, #84]	@ (800468c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004638:	fba2 2303 	umull	r2, r3, r2, r3
 800463c:	099b      	lsrs	r3, r3, #6
 800463e:	2232      	movs	r2, #50	@ 0x32
 8004640:	fb02 f303 	mul.w	r3, r2, r3
 8004644:	4a11      	ldr	r2, [pc, #68]	@ (800468c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004646:	fba2 2303 	umull	r2, r3, r2, r3
 800464a:	099b      	lsrs	r3, r3, #6
 800464c:	3301      	adds	r3, #1
 800464e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004650:	e002      	b.n	8004658 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3b01      	subs	r3, #1
 8004656:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004658:	4b0a      	ldr	r3, [pc, #40]	@ (8004684 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800465a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800465c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d102      	bne.n	800466a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f3      	bne.n	8004652 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e000      	b.n	8004676 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	46020800 	.word	0x46020800
 8004688:	20000000 	.word	0x20000000
 800468c:	10624dd3 	.word	0x10624dd3

08004690 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004694:	4b04      	ldr	r3, [pc, #16]	@ (80046a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8004696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004698:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800469c:	4618      	mov	r0, r3
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	46020800 	.word	0x46020800

080046ac <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80046b4:	4b22      	ldr	r3, [pc, #136]	@ (8004740 <HAL_PWREx_ConfigSupply+0x94>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a22      	ldr	r2, [pc, #136]	@ (8004744 <HAL_PWREx_ConfigSupply+0x98>)
 80046ba:	fba2 2303 	umull	r2, r3, r2, r3
 80046be:	099b      	lsrs	r3, r3, #6
 80046c0:	2232      	movs	r2, #50	@ 0x32
 80046c2:	fb02 f303 	mul.w	r3, r2, r3
 80046c6:	4a1f      	ldr	r2, [pc, #124]	@ (8004744 <HAL_PWREx_ConfigSupply+0x98>)
 80046c8:	fba2 2303 	umull	r2, r3, r2, r3
 80046cc:	099b      	lsrs	r3, r3, #6
 80046ce:	3301      	adds	r3, #1
 80046d0:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d113      	bne.n	8004700 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80046d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004748 <HAL_PWREx_ConfigSupply+0x9c>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	4a1a      	ldr	r2, [pc, #104]	@ (8004748 <HAL_PWREx_ConfigSupply+0x9c>)
 80046de:	f023 0302 	bic.w	r3, r3, #2
 80046e2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80046e4:	e002      	b.n	80046ec <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	3b01      	subs	r3, #1
 80046ea:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80046ec:	4b16      	ldr	r3, [pc, #88]	@ (8004748 <HAL_PWREx_ConfigSupply+0x9c>)
 80046ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d116      	bne.n	8004726 <HAL_PWREx_ConfigSupply+0x7a>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f3      	bne.n	80046e6 <HAL_PWREx_ConfigSupply+0x3a>
 80046fe:	e012      	b.n	8004726 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004700:	4b11      	ldr	r3, [pc, #68]	@ (8004748 <HAL_PWREx_ConfigSupply+0x9c>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	4a10      	ldr	r2, [pc, #64]	@ (8004748 <HAL_PWREx_ConfigSupply+0x9c>)
 8004706:	f043 0302 	orr.w	r3, r3, #2
 800470a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800470c:	e002      	b.n	8004714 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	3b01      	subs	r3, #1
 8004712:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004714:	4b0c      	ldr	r3, [pc, #48]	@ (8004748 <HAL_PWREx_ConfigSupply+0x9c>)
 8004716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d102      	bne.n	8004726 <HAL_PWREx_ConfigSupply+0x7a>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1f3      	bne.n	800470e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e000      	b.n	8004732 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	20000000 	.word	0x20000000
 8004744:	10624dd3 	.word	0x10624dd3
 8004748:	46020800 	.word	0x46020800

0800474c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b08e      	sub	sp, #56	@ 0x38
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004754:	2300      	movs	r3, #0
 8004756:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d102      	bne.n	8004766 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	f000 bec8 	b.w	80054f6 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004766:	4b99      	ldr	r3, [pc, #612]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	f003 030c 	and.w	r3, r3, #12
 800476e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004770:	4b96      	ldr	r3, [pc, #600]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 8004772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004774:	f003 0303 	and.w	r3, r3, #3
 8004778:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0310 	and.w	r3, r3, #16
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 816c 	beq.w	8004a60 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478a:	2b00      	cmp	r3, #0
 800478c:	d007      	beq.n	800479e <HAL_RCC_OscConfig+0x52>
 800478e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004790:	2b0c      	cmp	r3, #12
 8004792:	f040 80de 	bne.w	8004952 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004798:	2b01      	cmp	r3, #1
 800479a:	f040 80da 	bne.w	8004952 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d102      	bne.n	80047ac <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	f000 bea5 	b.w	80054f6 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047b0:	4b86      	ldr	r3, [pc, #536]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d004      	beq.n	80047c6 <HAL_RCC_OscConfig+0x7a>
 80047bc:	4b83      	ldr	r3, [pc, #524]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80047c4:	e005      	b.n	80047d2 <HAL_RCC_OscConfig+0x86>
 80047c6:	4b81      	ldr	r3, [pc, #516]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 80047c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80047cc:	041b      	lsls	r3, r3, #16
 80047ce:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d255      	bcs.n	8004882 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80047d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10a      	bne.n	80047f2 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e0:	4618      	mov	r0, r3
 80047e2:	f001 f9dd 	bl	8005ba0 <RCC_SetFlashLatencyFromMSIRange>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	f000 be82 	b.w	80054f6 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80047f2:	4b76      	ldr	r3, [pc, #472]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	4a75      	ldr	r2, [pc, #468]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 80047f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80047fc:	6093      	str	r3, [r2, #8]
 80047fe:	4b73      	ldr	r3, [pc, #460]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480a:	4970      	ldr	r1, [pc, #448]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 800480c:	4313      	orrs	r3, r2
 800480e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004814:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004818:	d309      	bcc.n	800482e <HAL_RCC_OscConfig+0xe2>
 800481a:	4b6c      	ldr	r3, [pc, #432]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	f023 021f 	bic.w	r2, r3, #31
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	4969      	ldr	r1, [pc, #420]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 8004828:	4313      	orrs	r3, r2
 800482a:	60cb      	str	r3, [r1, #12]
 800482c:	e07e      	b.n	800492c <HAL_RCC_OscConfig+0x1e0>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004832:	2b00      	cmp	r3, #0
 8004834:	da0a      	bge.n	800484c <HAL_RCC_OscConfig+0x100>
 8004836:	4b65      	ldr	r3, [pc, #404]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	015b      	lsls	r3, r3, #5
 8004844:	4961      	ldr	r1, [pc, #388]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 8004846:	4313      	orrs	r3, r2
 8004848:	60cb      	str	r3, [r1, #12]
 800484a:	e06f      	b.n	800492c <HAL_RCC_OscConfig+0x1e0>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004850:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004854:	d30a      	bcc.n	800486c <HAL_RCC_OscConfig+0x120>
 8004856:	4b5d      	ldr	r3, [pc, #372]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	029b      	lsls	r3, r3, #10
 8004864:	4959      	ldr	r1, [pc, #356]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 8004866:	4313      	orrs	r3, r2
 8004868:	60cb      	str	r3, [r1, #12]
 800486a:	e05f      	b.n	800492c <HAL_RCC_OscConfig+0x1e0>
 800486c:	4b57      	ldr	r3, [pc, #348]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	03db      	lsls	r3, r3, #15
 800487a:	4954      	ldr	r1, [pc, #336]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 800487c:	4313      	orrs	r3, r2
 800487e:	60cb      	str	r3, [r1, #12]
 8004880:	e054      	b.n	800492c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004882:	4b52      	ldr	r3, [pc, #328]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	4a51      	ldr	r2, [pc, #324]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 8004888:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800488c:	6093      	str	r3, [r2, #8]
 800488e:	4b4f      	ldr	r3, [pc, #316]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489a:	494c      	ldr	r1, [pc, #304]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 800489c:	4313      	orrs	r3, r2
 800489e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80048a8:	d309      	bcc.n	80048be <HAL_RCC_OscConfig+0x172>
 80048aa:	4b48      	ldr	r3, [pc, #288]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f023 021f 	bic.w	r2, r3, #31
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	4945      	ldr	r1, [pc, #276]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60cb      	str	r3, [r1, #12]
 80048bc:	e028      	b.n	8004910 <HAL_RCC_OscConfig+0x1c4>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	da0a      	bge.n	80048dc <HAL_RCC_OscConfig+0x190>
 80048c6:	4b41      	ldr	r3, [pc, #260]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	015b      	lsls	r3, r3, #5
 80048d4:	493d      	ldr	r1, [pc, #244]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60cb      	str	r3, [r1, #12]
 80048da:	e019      	b.n	8004910 <HAL_RCC_OscConfig+0x1c4>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048e4:	d30a      	bcc.n	80048fc <HAL_RCC_OscConfig+0x1b0>
 80048e6:	4b39      	ldr	r3, [pc, #228]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	029b      	lsls	r3, r3, #10
 80048f4:	4935      	ldr	r1, [pc, #212]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60cb      	str	r3, [r1, #12]
 80048fa:	e009      	b.n	8004910 <HAL_RCC_OscConfig+0x1c4>
 80048fc:	4b33      	ldr	r3, [pc, #204]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	03db      	lsls	r3, r3, #15
 800490a:	4930      	ldr	r1, [pc, #192]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 800490c:	4313      	orrs	r3, r2
 800490e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10a      	bne.n	800492c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491a:	4618      	mov	r0, r3
 800491c:	f001 f940 	bl	8005ba0 <RCC_SetFlashLatencyFromMSIRange>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d002      	beq.n	800492c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	f000 bde5 	b.w	80054f6 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800492c:	f001 f8e2 	bl	8005af4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004930:	4b27      	ldr	r3, [pc, #156]	@ (80049d0 <HAL_RCC_OscConfig+0x284>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4618      	mov	r0, r3
 8004936:	f7fe f9cb 	bl	8002cd0 <HAL_InitTick>
 800493a:	4603      	mov	r3, r0
 800493c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8004940:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 808a 	beq.w	8004a5e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800494a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800494e:	f000 bdd2 	b.w	80054f6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d066      	beq.n	8004a28 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800495a:	4b1c      	ldr	r3, [pc, #112]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a1b      	ldr	r2, [pc, #108]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 8004960:	f043 0301 	orr.w	r3, r3, #1
 8004964:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004966:	f7fe fa3d 	bl	8002de4 <HAL_GetTick>
 800496a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800496c:	e009      	b.n	8004982 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800496e:	f7fe fa39 	bl	8002de4 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d902      	bls.n	8004982 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	f000 bdba 	b.w	80054f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004982:	4b12      	ldr	r3, [pc, #72]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0304 	and.w	r3, r3, #4
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0ef      	beq.n	800496e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800498e:	4b0f      	ldr	r3, [pc, #60]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	4a0e      	ldr	r2, [pc, #56]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 8004994:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004998:	6093      	str	r3, [r2, #8]
 800499a:	4b0c      	ldr	r3, [pc, #48]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a6:	4909      	ldr	r1, [pc, #36]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80049b4:	d30e      	bcc.n	80049d4 <HAL_RCC_OscConfig+0x288>
 80049b6:	4b05      	ldr	r3, [pc, #20]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f023 021f 	bic.w	r2, r3, #31
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	4902      	ldr	r1, [pc, #8]	@ (80049cc <HAL_RCC_OscConfig+0x280>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60cb      	str	r3, [r1, #12]
 80049c8:	e04a      	b.n	8004a60 <HAL_RCC_OscConfig+0x314>
 80049ca:	bf00      	nop
 80049cc:	46020c00 	.word	0x46020c00
 80049d0:	20000018 	.word	0x20000018
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d8:	2b00      	cmp	r3, #0
 80049da:	da0a      	bge.n	80049f2 <HAL_RCC_OscConfig+0x2a6>
 80049dc:	4b98      	ldr	r3, [pc, #608]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	015b      	lsls	r3, r3, #5
 80049ea:	4995      	ldr	r1, [pc, #596]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60cb      	str	r3, [r1, #12]
 80049f0:	e036      	b.n	8004a60 <HAL_RCC_OscConfig+0x314>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049fa:	d30a      	bcc.n	8004a12 <HAL_RCC_OscConfig+0x2c6>
 80049fc:	4b90      	ldr	r3, [pc, #576]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	029b      	lsls	r3, r3, #10
 8004a0a:	498d      	ldr	r1, [pc, #564]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	60cb      	str	r3, [r1, #12]
 8004a10:	e026      	b.n	8004a60 <HAL_RCC_OscConfig+0x314>
 8004a12:	4b8b      	ldr	r3, [pc, #556]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	03db      	lsls	r3, r3, #15
 8004a20:	4987      	ldr	r1, [pc, #540]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60cb      	str	r3, [r1, #12]
 8004a26:	e01b      	b.n	8004a60 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004a28:	4b85      	ldr	r3, [pc, #532]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a84      	ldr	r2, [pc, #528]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004a2e:	f023 0301 	bic.w	r3, r3, #1
 8004a32:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004a34:	f7fe f9d6 	bl	8002de4 <HAL_GetTick>
 8004a38:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004a3a:	e009      	b.n	8004a50 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a3c:	f7fe f9d2 	bl	8002de4 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d902      	bls.n	8004a50 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	f000 bd53 	b.w	80054f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004a50:	4b7b      	ldr	r3, [pc, #492]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1ef      	bne.n	8004a3c <HAL_RCC_OscConfig+0x2f0>
 8004a5c:	e000      	b.n	8004a60 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004a5e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 808b 	beq.w	8004b84 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d005      	beq.n	8004a80 <HAL_RCC_OscConfig+0x334>
 8004a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a76:	2b0c      	cmp	r3, #12
 8004a78:	d109      	bne.n	8004a8e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a7c:	2b03      	cmp	r3, #3
 8004a7e:	d106      	bne.n	8004a8e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d17d      	bne.n	8004b84 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	f000 bd34 	b.w	80054f6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a96:	d106      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x35a>
 8004a98:	4b69      	ldr	r3, [pc, #420]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a68      	ldr	r2, [pc, #416]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004a9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004aa2:	6013      	str	r3, [r2, #0]
 8004aa4:	e041      	b.n	8004b2a <HAL_RCC_OscConfig+0x3de>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004aae:	d112      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x38a>
 8004ab0:	4b63      	ldr	r3, [pc, #396]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a62      	ldr	r2, [pc, #392]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004ab6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004aba:	6013      	str	r3, [r2, #0]
 8004abc:	4b60      	ldr	r3, [pc, #384]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a5f      	ldr	r2, [pc, #380]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004ac2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004ac6:	6013      	str	r3, [r2, #0]
 8004ac8:	4b5d      	ldr	r3, [pc, #372]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a5c      	ldr	r2, [pc, #368]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004ace:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ad2:	6013      	str	r3, [r2, #0]
 8004ad4:	e029      	b.n	8004b2a <HAL_RCC_OscConfig+0x3de>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004ade:	d112      	bne.n	8004b06 <HAL_RCC_OscConfig+0x3ba>
 8004ae0:	4b57      	ldr	r3, [pc, #348]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a56      	ldr	r2, [pc, #344]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004ae6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004aea:	6013      	str	r3, [r2, #0]
 8004aec:	4b54      	ldr	r3, [pc, #336]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a53      	ldr	r2, [pc, #332]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004af2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004af6:	6013      	str	r3, [r2, #0]
 8004af8:	4b51      	ldr	r3, [pc, #324]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a50      	ldr	r2, [pc, #320]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004afe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	e011      	b.n	8004b2a <HAL_RCC_OscConfig+0x3de>
 8004b06:	4b4e      	ldr	r3, [pc, #312]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a4d      	ldr	r2, [pc, #308]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004b0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	4b4b      	ldr	r3, [pc, #300]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a4a      	ldr	r2, [pc, #296]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004b18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	4b48      	ldr	r3, [pc, #288]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a47      	ldr	r2, [pc, #284]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004b24:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004b28:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d014      	beq.n	8004b5c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8004b32:	f7fe f957 	bl	8002de4 <HAL_GetTick>
 8004b36:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b38:	e009      	b.n	8004b4e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b3a:	f7fe f953 	bl	8002de4 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b64      	cmp	r3, #100	@ 0x64
 8004b46:	d902      	bls.n	8004b4e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	f000 bcd4 	b.w	80054f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b4e:	4b3c      	ldr	r3, [pc, #240]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0ef      	beq.n	8004b3a <HAL_RCC_OscConfig+0x3ee>
 8004b5a:	e013      	b.n	8004b84 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004b5c:	f7fe f942 	bl	8002de4 <HAL_GetTick>
 8004b60:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b62:	e009      	b.n	8004b78 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b64:	f7fe f93e 	bl	8002de4 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b64      	cmp	r3, #100	@ 0x64
 8004b70:	d902      	bls.n	8004b78 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	f000 bcbf 	b.w	80054f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b78:	4b31      	ldr	r3, [pc, #196]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1ef      	bne.n	8004b64 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d05f      	beq.n	8004c50 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d005      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x456>
 8004b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b98:	2b0c      	cmp	r3, #12
 8004b9a:	d114      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d111      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d102      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	f000 bca3 	b.w	80054f6 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004bb0:	4b23      	ldr	r3, [pc, #140]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	041b      	lsls	r3, r3, #16
 8004bbe:	4920      	ldr	r1, [pc, #128]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004bc4:	e044      	b.n	8004c50 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d024      	beq.n	8004c18 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004bce:	4b1c      	ldr	r3, [pc, #112]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a1b      	ldr	r2, [pc, #108]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004bd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bd8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004bda:	f7fe f903 	bl	8002de4 <HAL_GetTick>
 8004bde:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004be0:	e009      	b.n	8004bf6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004be2:	f7fe f8ff 	bl	8002de4 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d902      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	f000 bc80 	b.w	80054f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bf6:	4b12      	ldr	r3, [pc, #72]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0ef      	beq.n	8004be2 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004c02:	4b0f      	ldr	r3, [pc, #60]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	041b      	lsls	r3, r3, #16
 8004c10:	490b      	ldr	r1, [pc, #44]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	610b      	str	r3, [r1, #16]
 8004c16:	e01b      	b.n	8004c50 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004c18:	4b09      	ldr	r3, [pc, #36]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a08      	ldr	r2, [pc, #32]	@ (8004c40 <HAL_RCC_OscConfig+0x4f4>)
 8004c1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c22:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004c24:	f7fe f8de 	bl	8002de4 <HAL_GetTick>
 8004c28:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c2a:	e00b      	b.n	8004c44 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c2c:	f7fe f8da 	bl	8002de4 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d904      	bls.n	8004c44 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	f000 bc5b 	b.w	80054f6 <HAL_RCC_OscConfig+0xdaa>
 8004c40:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c44:	4baf      	ldr	r3, [pc, #700]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1ed      	bne.n	8004c2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0308 	and.w	r3, r3, #8
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 80c8 	beq.w	8004dee <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c64:	4ba7      	ldr	r3, [pc, #668]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c6a:	f003 0304 	and.w	r3, r3, #4
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d111      	bne.n	8004c96 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c72:	4ba4      	ldr	r3, [pc, #656]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c78:	4aa2      	ldr	r2, [pc, #648]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004c7a:	f043 0304 	orr.w	r3, r3, #4
 8004c7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004c82:	4ba0      	ldr	r3, [pc, #640]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	617b      	str	r3, [r7, #20]
 8004c8e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004c90:	2301      	movs	r3, #1
 8004c92:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004c96:	4b9c      	ldr	r3, [pc, #624]	@ (8004f08 <HAL_RCC_OscConfig+0x7bc>)
 8004c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d119      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004ca2:	4b99      	ldr	r3, [pc, #612]	@ (8004f08 <HAL_RCC_OscConfig+0x7bc>)
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca6:	4a98      	ldr	r2, [pc, #608]	@ (8004f08 <HAL_RCC_OscConfig+0x7bc>)
 8004ca8:	f043 0301 	orr.w	r3, r3, #1
 8004cac:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cae:	f7fe f899 	bl	8002de4 <HAL_GetTick>
 8004cb2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004cb4:	e009      	b.n	8004cca <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cb6:	f7fe f895 	bl	8002de4 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d902      	bls.n	8004cca <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	f000 bc16 	b.w	80054f6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004cca:	4b8f      	ldr	r3, [pc, #572]	@ (8004f08 <HAL_RCC_OscConfig+0x7bc>)
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0ef      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d05f      	beq.n	8004d9e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004cde:	4b89      	ldr	r3, [pc, #548]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004ce0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ce4:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699a      	ldr	r2, [r3, #24]
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d037      	beq.n	8004d64 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
 8004cf6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d006      	beq.n	8004d0c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e3f4      	b.n	80054f6 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d01b      	beq.n	8004d4e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8004d16:	4b7b      	ldr	r3, [pc, #492]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004d18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d1c:	4a79      	ldr	r2, [pc, #484]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004d1e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004d22:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8004d26:	f7fe f85d 	bl	8002de4 <HAL_GetTick>
 8004d2a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004d2c:	e008      	b.n	8004d40 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d2e:	f7fe f859 	bl	8002de4 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b05      	cmp	r3, #5
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e3da      	b.n	80054f6 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004d40:	4b70      	ldr	r3, [pc, #448]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004d42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1ef      	bne.n	8004d2e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004d4e:	4b6d      	ldr	r3, [pc, #436]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004d50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d54:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	4969      	ldr	r1, [pc, #420]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004d64:	4b67      	ldr	r3, [pc, #412]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004d66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d6a:	4a66      	ldr	r2, [pc, #408]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004d6c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004d74:	f7fe f836 	bl	8002de4 <HAL_GetTick>
 8004d78:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d7c:	f7fe f832 	bl	8002de4 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b05      	cmp	r3, #5
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e3b3      	b.n	80054f6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004d8e:	4b5d      	ldr	r3, [pc, #372]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004d90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0ef      	beq.n	8004d7c <HAL_RCC_OscConfig+0x630>
 8004d9c:	e01b      	b.n	8004dd6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004d9e:	4b59      	ldr	r3, [pc, #356]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004da0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004da4:	4a57      	ldr	r2, [pc, #348]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004da6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004daa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004dae:	f7fe f819 	bl	8002de4 <HAL_GetTick>
 8004db2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004db4:	e008      	b.n	8004dc8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004db6:	f7fe f815 	bl	8002de4 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b05      	cmp	r3, #5
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e396      	b.n	80054f6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004dc8:	4b4e      	ldr	r3, [pc, #312]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004dca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004dce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1ef      	bne.n	8004db6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dd6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d107      	bne.n	8004dee <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dde:	4b49      	ldr	r3, [pc, #292]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004de4:	4a47      	ldr	r2, [pc, #284]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004de6:	f023 0304 	bic.w	r3, r3, #4
 8004dea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0304 	and.w	r3, r3, #4
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 8111 	beq.w	800501e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e02:	4b40      	ldr	r3, [pc, #256]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d111      	bne.n	8004e34 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e10:	4b3c      	ldr	r3, [pc, #240]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e16:	4a3b      	ldr	r2, [pc, #236]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004e18:	f043 0304 	orr.w	r3, r3, #4
 8004e1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004e20:	4b38      	ldr	r3, [pc, #224]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e26:	f003 0304 	and.w	r3, r3, #4
 8004e2a:	613b      	str	r3, [r7, #16]
 8004e2c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004e34:	4b34      	ldr	r3, [pc, #208]	@ (8004f08 <HAL_RCC_OscConfig+0x7bc>)
 8004e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d118      	bne.n	8004e72 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004e40:	4b31      	ldr	r3, [pc, #196]	@ (8004f08 <HAL_RCC_OscConfig+0x7bc>)
 8004e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e44:	4a30      	ldr	r2, [pc, #192]	@ (8004f08 <HAL_RCC_OscConfig+0x7bc>)
 8004e46:	f043 0301 	orr.w	r3, r3, #1
 8004e4a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e4c:	f7fd ffca 	bl	8002de4 <HAL_GetTick>
 8004e50:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e54:	f7fd ffc6 	bl	8002de4 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e347      	b.n	80054f6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004e66:	4b28      	ldr	r3, [pc, #160]	@ (8004f08 <HAL_RCC_OscConfig+0x7bc>)
 8004e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0f0      	beq.n	8004e54 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d01f      	beq.n	8004ebe <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 0304 	and.w	r3, r3, #4
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d010      	beq.n	8004eac <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004e8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e90:	4a1c      	ldr	r2, [pc, #112]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004e92:	f043 0304 	orr.w	r3, r3, #4
 8004e96:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004e9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ea0:	4a18      	ldr	r2, [pc, #96]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004ea2:	f043 0301 	orr.w	r3, r3, #1
 8004ea6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004eaa:	e018      	b.n	8004ede <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004eac:	4b15      	ldr	r3, [pc, #84]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004eae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004eb2:	4a14      	ldr	r2, [pc, #80]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004eb4:	f043 0301 	orr.w	r3, r3, #1
 8004eb8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004ebc:	e00f      	b.n	8004ede <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004ebe:	4b11      	ldr	r3, [pc, #68]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ec4:	4a0f      	ldr	r2, [pc, #60]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004ec6:	f023 0301 	bic.w	r3, r3, #1
 8004eca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004ece:	4b0d      	ldr	r3, [pc, #52]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004ed0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ed4:	4a0b      	ldr	r2, [pc, #44]	@ (8004f04 <HAL_RCC_OscConfig+0x7b8>)
 8004ed6:	f023 0304 	bic.w	r3, r3, #4
 8004eda:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d057      	beq.n	8004f96 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8004ee6:	f7fd ff7d 	bl	8002de4 <HAL_GetTick>
 8004eea:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eec:	e00e      	b.n	8004f0c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eee:	f7fd ff79 	bl	8002de4 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d905      	bls.n	8004f0c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e2f8      	b.n	80054f6 <HAL_RCC_OscConfig+0xdaa>
 8004f04:	46020c00 	.word	0x46020c00
 8004f08:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f0c:	4b9c      	ldr	r3, [pc, #624]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 8004f0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0e9      	beq.n	8004eee <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d01b      	beq.n	8004f5e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004f26:	4b96      	ldr	r3, [pc, #600]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 8004f28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f2c:	4a94      	ldr	r2, [pc, #592]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 8004f2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004f36:	e00a      	b.n	8004f4e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f38:	f7fd ff54 	bl	8002de4 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e2d3      	b.n	80054f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004f4e:	4b8c      	ldr	r3, [pc, #560]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 8004f50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d0ed      	beq.n	8004f38 <HAL_RCC_OscConfig+0x7ec>
 8004f5c:	e053      	b.n	8005006 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004f5e:	4b88      	ldr	r3, [pc, #544]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 8004f60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f64:	4a86      	ldr	r2, [pc, #536]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 8004f66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f6a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004f6e:	e00a      	b.n	8004f86 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f70:	f7fd ff38 	bl	8002de4 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e2b7      	b.n	80054f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004f86:	4b7e      	ldr	r3, [pc, #504]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 8004f88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1ed      	bne.n	8004f70 <HAL_RCC_OscConfig+0x824>
 8004f94:	e037      	b.n	8005006 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8004f96:	f7fd ff25 	bl	8002de4 <HAL_GetTick>
 8004f9a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f9c:	e00a      	b.n	8004fb4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f9e:	f7fd ff21 	bl	8002de4 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e2a0      	b.n	80054f6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fb4:	4b72      	ldr	r3, [pc, #456]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 8004fb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1ed      	bne.n	8004f9e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004fc2:	4b6f      	ldr	r3, [pc, #444]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 8004fc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d01a      	beq.n	8005006 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004fd0:	4b6b      	ldr	r3, [pc, #428]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 8004fd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fd6:	4a6a      	ldr	r2, [pc, #424]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 8004fd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fdc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004fe0:	e00a      	b.n	8004ff8 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fe2:	f7fd feff 	bl	8002de4 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e27e      	b.n	80054f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004ff8:	4b61      	ldr	r3, [pc, #388]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 8004ffa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ffe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1ed      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005006:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800500a:	2b01      	cmp	r3, #1
 800500c:	d107      	bne.n	800501e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800500e:	4b5c      	ldr	r3, [pc, #368]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 8005010:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005014:	4a5a      	ldr	r2, [pc, #360]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 8005016:	f023 0304 	bic.w	r3, r3, #4
 800501a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0320 	and.w	r3, r3, #32
 8005026:	2b00      	cmp	r3, #0
 8005028:	d036      	beq.n	8005098 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502e:	2b00      	cmp	r3, #0
 8005030:	d019      	beq.n	8005066 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8005032:	4b53      	ldr	r3, [pc, #332]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a52      	ldr	r2, [pc, #328]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 8005038:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800503c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800503e:	f7fd fed1 	bl	8002de4 <HAL_GetTick>
 8005042:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005044:	e008      	b.n	8005058 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005046:	f7fd fecd 	bl	8002de4 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d901      	bls.n	8005058 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e24e      	b.n	80054f6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005058:	4b49      	ldr	r3, [pc, #292]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d0f0      	beq.n	8005046 <HAL_RCC_OscConfig+0x8fa>
 8005064:	e018      	b.n	8005098 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8005066:	4b46      	ldr	r3, [pc, #280]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a45      	ldr	r2, [pc, #276]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 800506c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005070:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005072:	f7fd feb7 	bl	8002de4 <HAL_GetTick>
 8005076:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005078:	e008      	b.n	800508c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800507a:	f7fd feb3 	bl	8002de4 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d901      	bls.n	800508c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e234      	b.n	80054f6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800508c:	4b3c      	ldr	r3, [pc, #240]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1f0      	bne.n	800507a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d036      	beq.n	8005112 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d019      	beq.n	80050e0 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80050ac:	4b34      	ldr	r3, [pc, #208]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a33      	ldr	r2, [pc, #204]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 80050b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80050b6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80050b8:	f7fd fe94 	bl	8002de4 <HAL_GetTick>
 80050bc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80050be:	e008      	b.n	80050d2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80050c0:	f7fd fe90 	bl	8002de4 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e211      	b.n	80054f6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80050d2:	4b2b      	ldr	r3, [pc, #172]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d0f0      	beq.n	80050c0 <HAL_RCC_OscConfig+0x974>
 80050de:	e018      	b.n	8005112 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80050e0:	4b27      	ldr	r3, [pc, #156]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a26      	ldr	r2, [pc, #152]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 80050e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050ea:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80050ec:	f7fd fe7a 	bl	8002de4 <HAL_GetTick>
 80050f0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80050f4:	f7fd fe76 	bl	8002de4 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e1f7      	b.n	80054f6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005106:	4b1e      	ldr	r3, [pc, #120]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1f0      	bne.n	80050f4 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800511a:	2b00      	cmp	r3, #0
 800511c:	d07f      	beq.n	800521e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005122:	2b00      	cmp	r3, #0
 8005124:	d062      	beq.n	80051ec <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005126:	4b16      	ldr	r3, [pc, #88]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	4a15      	ldr	r2, [pc, #84]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 800512c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005130:	6093      	str	r3, [r2, #8]
 8005132:	4b13      	ldr	r3, [pc, #76]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800513e:	4910      	ldr	r1, [pc, #64]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 8005140:	4313      	orrs	r3, r2
 8005142:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005148:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800514c:	d309      	bcc.n	8005162 <HAL_RCC_OscConfig+0xa16>
 800514e:	4b0c      	ldr	r3, [pc, #48]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f023 021f 	bic.w	r2, r3, #31
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	4909      	ldr	r1, [pc, #36]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 800515c:	4313      	orrs	r3, r2
 800515e:	60cb      	str	r3, [r1, #12]
 8005160:	e02a      	b.n	80051b8 <HAL_RCC_OscConfig+0xa6c>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005166:	2b00      	cmp	r3, #0
 8005168:	da0c      	bge.n	8005184 <HAL_RCC_OscConfig+0xa38>
 800516a:	4b05      	ldr	r3, [pc, #20]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	015b      	lsls	r3, r3, #5
 8005178:	4901      	ldr	r1, [pc, #4]	@ (8005180 <HAL_RCC_OscConfig+0xa34>)
 800517a:	4313      	orrs	r3, r2
 800517c:	60cb      	str	r3, [r1, #12]
 800517e:	e01b      	b.n	80051b8 <HAL_RCC_OscConfig+0xa6c>
 8005180:	46020c00 	.word	0x46020c00
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005188:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800518c:	d30a      	bcc.n	80051a4 <HAL_RCC_OscConfig+0xa58>
 800518e:	4ba1      	ldr	r3, [pc, #644]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	029b      	lsls	r3, r3, #10
 800519c:	499d      	ldr	r1, [pc, #628]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	60cb      	str	r3, [r1, #12]
 80051a2:	e009      	b.n	80051b8 <HAL_RCC_OscConfig+0xa6c>
 80051a4:	4b9b      	ldr	r3, [pc, #620]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	03db      	lsls	r3, r3, #15
 80051b2:	4998      	ldr	r1, [pc, #608]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80051b8:	4b96      	ldr	r3, [pc, #600]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a95      	ldr	r2, [pc, #596]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 80051be:	f043 0310 	orr.w	r3, r3, #16
 80051c2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80051c4:	f7fd fe0e 	bl	8002de4 <HAL_GetTick>
 80051c8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80051cc:	f7fd fe0a 	bl	8002de4 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e18b      	b.n	80054f6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80051de:	4b8d      	ldr	r3, [pc, #564]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0320 	and.w	r3, r3, #32
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0f0      	beq.n	80051cc <HAL_RCC_OscConfig+0xa80>
 80051ea:	e018      	b.n	800521e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80051ec:	4b89      	ldr	r3, [pc, #548]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a88      	ldr	r2, [pc, #544]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 80051f2:	f023 0310 	bic.w	r3, r3, #16
 80051f6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80051f8:	f7fd fdf4 	bl	8002de4 <HAL_GetTick>
 80051fc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005200:	f7fd fdf0 	bl	8002de4 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e171      	b.n	80054f6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005212:	4b80      	ldr	r3, [pc, #512]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0320 	and.w	r3, r3, #32
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1f0      	bne.n	8005200 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 8166 	beq.w	80054f4 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005228:	2300      	movs	r3, #0
 800522a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800522e:	4b79      	ldr	r3, [pc, #484]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	f003 030c 	and.w	r3, r3, #12
 8005236:	2b0c      	cmp	r3, #12
 8005238:	f000 80f2 	beq.w	8005420 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005240:	2b02      	cmp	r3, #2
 8005242:	f040 80c5 	bne.w	80053d0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005246:	4b73      	ldr	r3, [pc, #460]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a72      	ldr	r2, [pc, #456]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 800524c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005250:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005252:	f7fd fdc7 	bl	8002de4 <HAL_GetTick>
 8005256:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005258:	e008      	b.n	800526c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800525a:	f7fd fdc3 	bl	8002de4 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d901      	bls.n	800526c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e144      	b.n	80054f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800526c:	4b69      	ldr	r3, [pc, #420]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1f0      	bne.n	800525a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005278:	4b66      	ldr	r3, [pc, #408]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 800527a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800527e:	f003 0304 	and.w	r3, r3, #4
 8005282:	2b00      	cmp	r3, #0
 8005284:	d111      	bne.n	80052aa <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8005286:	4b63      	ldr	r3, [pc, #396]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 8005288:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800528c:	4a61      	ldr	r2, [pc, #388]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 800528e:	f043 0304 	orr.w	r3, r3, #4
 8005292:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005296:	4b5f      	ldr	r3, [pc, #380]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 8005298:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800529c:	f003 0304 	and.w	r3, r3, #4
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80052a4:	2301      	movs	r3, #1
 80052a6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80052aa:	4b5b      	ldr	r3, [pc, #364]	@ (8005418 <HAL_RCC_OscConfig+0xccc>)
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80052b6:	d102      	bne.n	80052be <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80052b8:	2301      	movs	r3, #1
 80052ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80052be:	4b56      	ldr	r3, [pc, #344]	@ (8005418 <HAL_RCC_OscConfig+0xccc>)
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	4a55      	ldr	r2, [pc, #340]	@ (8005418 <HAL_RCC_OscConfig+0xccc>)
 80052c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052c8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80052ca:	4b52      	ldr	r3, [pc, #328]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 80052cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052d2:	f023 0303 	bic.w	r3, r3, #3
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80052de:	3a01      	subs	r2, #1
 80052e0:	0212      	lsls	r2, r2, #8
 80052e2:	4311      	orrs	r1, r2
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80052e8:	430a      	orrs	r2, r1
 80052ea:	494a      	ldr	r1, [pc, #296]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80052f0:	4b48      	ldr	r3, [pc, #288]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 80052f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052f4:	4b49      	ldr	r3, [pc, #292]	@ (800541c <HAL_RCC_OscConfig+0xcd0>)
 80052f6:	4013      	ands	r3, r2
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80052fc:	3a01      	subs	r2, #1
 80052fe:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005306:	3a01      	subs	r2, #1
 8005308:	0252      	lsls	r2, r2, #9
 800530a:	b292      	uxth	r2, r2
 800530c:	4311      	orrs	r1, r2
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005312:	3a01      	subs	r2, #1
 8005314:	0412      	lsls	r2, r2, #16
 8005316:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800531a:	4311      	orrs	r1, r2
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005320:	3a01      	subs	r2, #1
 8005322:	0612      	lsls	r2, r2, #24
 8005324:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005328:	430a      	orrs	r2, r1
 800532a:	493a      	ldr	r1, [pc, #232]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 800532c:	4313      	orrs	r3, r2
 800532e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005330:	4b38      	ldr	r3, [pc, #224]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 8005332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005334:	4a37      	ldr	r2, [pc, #220]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 8005336:	f023 0310 	bic.w	r3, r3, #16
 800533a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005340:	4a34      	ldr	r2, [pc, #208]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8005346:	4b33      	ldr	r3, [pc, #204]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 8005348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534a:	4a32      	ldr	r2, [pc, #200]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 800534c:	f043 0310 	orr.w	r3, r3, #16
 8005350:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8005352:	4b30      	ldr	r3, [pc, #192]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 8005354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005356:	f023 020c 	bic.w	r2, r3, #12
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800535e:	492d      	ldr	r1, [pc, #180]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 8005360:	4313      	orrs	r3, r2
 8005362:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8005364:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005368:	2b01      	cmp	r3, #1
 800536a:	d105      	bne.n	8005378 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800536c:	4b2a      	ldr	r3, [pc, #168]	@ (8005418 <HAL_RCC_OscConfig+0xccc>)
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	4a29      	ldr	r2, [pc, #164]	@ (8005418 <HAL_RCC_OscConfig+0xccc>)
 8005372:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005376:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005378:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800537c:	2b01      	cmp	r3, #1
 800537e:	d107      	bne.n	8005390 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8005380:	4b24      	ldr	r3, [pc, #144]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 8005382:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005386:	4a23      	ldr	r2, [pc, #140]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 8005388:	f023 0304 	bic.w	r3, r3, #4
 800538c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005390:	4b20      	ldr	r3, [pc, #128]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a1f      	ldr	r2, [pc, #124]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 8005396:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800539a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800539c:	f7fd fd22 	bl	8002de4 <HAL_GetTick>
 80053a0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053a4:	f7fd fd1e 	bl	8002de4 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e09f      	b.n	80054f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80053b6:	4b17      	ldr	r3, [pc, #92]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d0f0      	beq.n	80053a4 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80053c2:	4b14      	ldr	r3, [pc, #80]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 80053c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c6:	4a13      	ldr	r2, [pc, #76]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 80053c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053cc:	6293      	str	r3, [r2, #40]	@ 0x28
 80053ce:	e091      	b.n	80054f4 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80053d0:	4b10      	ldr	r3, [pc, #64]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a0f      	ldr	r2, [pc, #60]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 80053d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053da:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80053dc:	f7fd fd02 	bl	8002de4 <HAL_GetTick>
 80053e0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80053e2:	e008      	b.n	80053f6 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053e4:	f7fd fcfe 	bl	8002de4 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e07f      	b.n	80054f6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80053f6:	4b07      	ldr	r3, [pc, #28]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1f0      	bne.n	80053e4 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005402:	4b04      	ldr	r3, [pc, #16]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 8005404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005406:	4a03      	ldr	r2, [pc, #12]	@ (8005414 <HAL_RCC_OscConfig+0xcc8>)
 8005408:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800540c:	f023 0303 	bic.w	r3, r3, #3
 8005410:	6293      	str	r3, [r2, #40]	@ 0x28
 8005412:	e06f      	b.n	80054f4 <HAL_RCC_OscConfig+0xda8>
 8005414:	46020c00 	.word	0x46020c00
 8005418:	46020800 	.word	0x46020800
 800541c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005420:	4b37      	ldr	r3, [pc, #220]	@ (8005500 <HAL_RCC_OscConfig+0xdb4>)
 8005422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005424:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005426:	4b36      	ldr	r3, [pc, #216]	@ (8005500 <HAL_RCC_OscConfig+0xdb4>)
 8005428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800542a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005430:	2b01      	cmp	r3, #1
 8005432:	d039      	beq.n	80054a8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	f003 0203 	and.w	r2, r3, #3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800543e:	429a      	cmp	r2, r3
 8005440:	d132      	bne.n	80054a8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	0a1b      	lsrs	r3, r3, #8
 8005446:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005450:	429a      	cmp	r2, r3
 8005452:	d129      	bne.n	80054a8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800545e:	429a      	cmp	r2, r3
 8005460:	d122      	bne.n	80054a8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800546c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800546e:	429a      	cmp	r2, r3
 8005470:	d11a      	bne.n	80054a8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	0a5b      	lsrs	r3, r3, #9
 8005476:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800547e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005480:	429a      	cmp	r2, r3
 8005482:	d111      	bne.n	80054a8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	0c1b      	lsrs	r3, r3, #16
 8005488:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005490:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005492:	429a      	cmp	r2, r3
 8005494:	d108      	bne.n	80054a8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	0e1b      	lsrs	r3, r3, #24
 800549a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054a2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d001      	beq.n	80054ac <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e024      	b.n	80054f6 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80054ac:	4b14      	ldr	r3, [pc, #80]	@ (8005500 <HAL_RCC_OscConfig+0xdb4>)
 80054ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b0:	08db      	lsrs	r3, r3, #3
 80054b2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d01a      	beq.n	80054f4 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80054be:	4b10      	ldr	r3, [pc, #64]	@ (8005500 <HAL_RCC_OscConfig+0xdb4>)
 80054c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c2:	4a0f      	ldr	r2, [pc, #60]	@ (8005500 <HAL_RCC_OscConfig+0xdb4>)
 80054c4:	f023 0310 	bic.w	r3, r3, #16
 80054c8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ca:	f7fd fc8b 	bl	8002de4 <HAL_GetTick>
 80054ce:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80054d0:	bf00      	nop
 80054d2:	f7fd fc87 	bl	8002de4 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054da:	4293      	cmp	r3, r2
 80054dc:	d0f9      	beq.n	80054d2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054e2:	4a07      	ldr	r2, [pc, #28]	@ (8005500 <HAL_RCC_OscConfig+0xdb4>)
 80054e4:	00db      	lsls	r3, r3, #3
 80054e6:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80054e8:	4b05      	ldr	r3, [pc, #20]	@ (8005500 <HAL_RCC_OscConfig+0xdb4>)
 80054ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ec:	4a04      	ldr	r2, [pc, #16]	@ (8005500 <HAL_RCC_OscConfig+0xdb4>)
 80054ee:	f043 0310 	orr.w	r3, r3, #16
 80054f2:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3738      	adds	r7, #56	@ 0x38
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	46020c00 	.word	0x46020c00

08005504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e1d9      	b.n	80058cc <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005518:	4b9b      	ldr	r3, [pc, #620]	@ (8005788 <HAL_RCC_ClockConfig+0x284>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 030f 	and.w	r3, r3, #15
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	429a      	cmp	r2, r3
 8005524:	d910      	bls.n	8005548 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005526:	4b98      	ldr	r3, [pc, #608]	@ (8005788 <HAL_RCC_ClockConfig+0x284>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f023 020f 	bic.w	r2, r3, #15
 800552e:	4996      	ldr	r1, [pc, #600]	@ (8005788 <HAL_RCC_ClockConfig+0x284>)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	4313      	orrs	r3, r2
 8005534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005536:	4b94      	ldr	r3, [pc, #592]	@ (8005788 <HAL_RCC_ClockConfig+0x284>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	429a      	cmp	r2, r3
 8005542:	d001      	beq.n	8005548 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e1c1      	b.n	80058cc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0310 	and.w	r3, r3, #16
 8005550:	2b00      	cmp	r3, #0
 8005552:	d010      	beq.n	8005576 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	695a      	ldr	r2, [r3, #20]
 8005558:	4b8c      	ldr	r3, [pc, #560]	@ (800578c <HAL_RCC_ClockConfig+0x288>)
 800555a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005560:	429a      	cmp	r2, r3
 8005562:	d908      	bls.n	8005576 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005564:	4b89      	ldr	r3, [pc, #548]	@ (800578c <HAL_RCC_ClockConfig+0x288>)
 8005566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005568:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	4986      	ldr	r1, [pc, #536]	@ (800578c <HAL_RCC_ClockConfig+0x288>)
 8005572:	4313      	orrs	r3, r2
 8005574:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b00      	cmp	r3, #0
 8005580:	d012      	beq.n	80055a8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691a      	ldr	r2, [r3, #16]
 8005586:	4b81      	ldr	r3, [pc, #516]	@ (800578c <HAL_RCC_ClockConfig+0x288>)
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	091b      	lsrs	r3, r3, #4
 800558c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005590:	429a      	cmp	r2, r3
 8005592:	d909      	bls.n	80055a8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005594:	4b7d      	ldr	r3, [pc, #500]	@ (800578c <HAL_RCC_ClockConfig+0x288>)
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	011b      	lsls	r3, r3, #4
 80055a2:	497a      	ldr	r1, [pc, #488]	@ (800578c <HAL_RCC_ClockConfig+0x288>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d010      	beq.n	80055d6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68da      	ldr	r2, [r3, #12]
 80055b8:	4b74      	ldr	r3, [pc, #464]	@ (800578c <HAL_RCC_ClockConfig+0x288>)
 80055ba:	6a1b      	ldr	r3, [r3, #32]
 80055bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d908      	bls.n	80055d6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80055c4:	4b71      	ldr	r3, [pc, #452]	@ (800578c <HAL_RCC_ClockConfig+0x288>)
 80055c6:	6a1b      	ldr	r3, [r3, #32]
 80055c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	496e      	ldr	r1, [pc, #440]	@ (800578c <HAL_RCC_ClockConfig+0x288>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d010      	beq.n	8005604 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689a      	ldr	r2, [r3, #8]
 80055e6:	4b69      	ldr	r3, [pc, #420]	@ (800578c <HAL_RCC_ClockConfig+0x288>)
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	f003 030f 	and.w	r3, r3, #15
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d908      	bls.n	8005604 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80055f2:	4b66      	ldr	r3, [pc, #408]	@ (800578c <HAL_RCC_ClockConfig+0x288>)
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	f023 020f 	bic.w	r2, r3, #15
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	4963      	ldr	r1, [pc, #396]	@ (800578c <HAL_RCC_ClockConfig+0x288>)
 8005600:	4313      	orrs	r3, r2
 8005602:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 80d2 	beq.w	80057b6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005612:	2300      	movs	r3, #0
 8005614:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2b03      	cmp	r3, #3
 800561c:	d143      	bne.n	80056a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800561e:	4b5b      	ldr	r3, [pc, #364]	@ (800578c <HAL_RCC_ClockConfig+0x288>)
 8005620:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b00      	cmp	r3, #0
 800562a:	d110      	bne.n	800564e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800562c:	4b57      	ldr	r3, [pc, #348]	@ (800578c <HAL_RCC_ClockConfig+0x288>)
 800562e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005632:	4a56      	ldr	r2, [pc, #344]	@ (800578c <HAL_RCC_ClockConfig+0x288>)
 8005634:	f043 0304 	orr.w	r3, r3, #4
 8005638:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800563c:	4b53      	ldr	r3, [pc, #332]	@ (800578c <HAL_RCC_ClockConfig+0x288>)
 800563e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005642:	f003 0304 	and.w	r3, r3, #4
 8005646:	60bb      	str	r3, [r7, #8]
 8005648:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800564a:	2301      	movs	r3, #1
 800564c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800564e:	f7fd fbc9 	bl	8002de4 <HAL_GetTick>
 8005652:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005654:	4b4e      	ldr	r3, [pc, #312]	@ (8005790 <HAL_RCC_ClockConfig+0x28c>)
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00f      	beq.n	8005680 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005660:	e008      	b.n	8005674 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005662:	f7fd fbbf 	bl	8002de4 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d901      	bls.n	8005674 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e12b      	b.n	80058cc <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005674:	4b46      	ldr	r3, [pc, #280]	@ (8005790 <HAL_RCC_ClockConfig+0x28c>)
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d0f0      	beq.n	8005662 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005680:	7dfb      	ldrb	r3, [r7, #23]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d107      	bne.n	8005696 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005686:	4b41      	ldr	r3, [pc, #260]	@ (800578c <HAL_RCC_ClockConfig+0x288>)
 8005688:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800568c:	4a3f      	ldr	r2, [pc, #252]	@ (800578c <HAL_RCC_ClockConfig+0x288>)
 800568e:	f023 0304 	bic.w	r3, r3, #4
 8005692:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005696:	4b3d      	ldr	r3, [pc, #244]	@ (800578c <HAL_RCC_ClockConfig+0x288>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d121      	bne.n	80056e6 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e112      	b.n	80058cc <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d107      	bne.n	80056be <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056ae:	4b37      	ldr	r3, [pc, #220]	@ (800578c <HAL_RCC_ClockConfig+0x288>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d115      	bne.n	80056e6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e106      	b.n	80058cc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d107      	bne.n	80056d6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80056c6:	4b31      	ldr	r3, [pc, #196]	@ (800578c <HAL_RCC_ClockConfig+0x288>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0304 	and.w	r3, r3, #4
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d109      	bne.n	80056e6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e0fa      	b.n	80058cc <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056d6:	4b2d      	ldr	r3, [pc, #180]	@ (800578c <HAL_RCC_ClockConfig+0x288>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e0f2      	b.n	80058cc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80056e6:	4b29      	ldr	r3, [pc, #164]	@ (800578c <HAL_RCC_ClockConfig+0x288>)
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	f023 0203 	bic.w	r2, r3, #3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	4926      	ldr	r1, [pc, #152]	@ (800578c <HAL_RCC_ClockConfig+0x288>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80056f8:	f7fd fb74 	bl	8002de4 <HAL_GetTick>
 80056fc:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2b03      	cmp	r3, #3
 8005704:	d112      	bne.n	800572c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005706:	e00a      	b.n	800571e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005708:	f7fd fb6c 	bl	8002de4 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005716:	4293      	cmp	r3, r2
 8005718:	d901      	bls.n	800571e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e0d6      	b.n	80058cc <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800571e:	4b1b      	ldr	r3, [pc, #108]	@ (800578c <HAL_RCC_ClockConfig+0x288>)
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	f003 030c 	and.w	r3, r3, #12
 8005726:	2b0c      	cmp	r3, #12
 8005728:	d1ee      	bne.n	8005708 <HAL_RCC_ClockConfig+0x204>
 800572a:	e044      	b.n	80057b6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	2b02      	cmp	r3, #2
 8005732:	d112      	bne.n	800575a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005734:	e00a      	b.n	800574c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005736:	f7fd fb55 	bl	8002de4 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005744:	4293      	cmp	r3, r2
 8005746:	d901      	bls.n	800574c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e0bf      	b.n	80058cc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800574c:	4b0f      	ldr	r3, [pc, #60]	@ (800578c <HAL_RCC_ClockConfig+0x288>)
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	f003 030c 	and.w	r3, r3, #12
 8005754:	2b08      	cmp	r3, #8
 8005756:	d1ee      	bne.n	8005736 <HAL_RCC_ClockConfig+0x232>
 8005758:	e02d      	b.n	80057b6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d123      	bne.n	80057aa <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005762:	e00a      	b.n	800577a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005764:	f7fd fb3e 	bl	8002de4 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005772:	4293      	cmp	r3, r2
 8005774:	d901      	bls.n	800577a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e0a8      	b.n	80058cc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800577a:	4b04      	ldr	r3, [pc, #16]	@ (800578c <HAL_RCC_ClockConfig+0x288>)
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	f003 030c 	and.w	r3, r3, #12
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1ee      	bne.n	8005764 <HAL_RCC_ClockConfig+0x260>
 8005786:	e016      	b.n	80057b6 <HAL_RCC_ClockConfig+0x2b2>
 8005788:	40022000 	.word	0x40022000
 800578c:	46020c00 	.word	0x46020c00
 8005790:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005794:	f7fd fb26 	bl	8002de4 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e090      	b.n	80058cc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80057aa:	4b4a      	ldr	r3, [pc, #296]	@ (80058d4 <HAL_RCC_ClockConfig+0x3d0>)
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	f003 030c 	and.w	r3, r3, #12
 80057b2:	2b04      	cmp	r3, #4
 80057b4:	d1ee      	bne.n	8005794 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d010      	beq.n	80057e4 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	689a      	ldr	r2, [r3, #8]
 80057c6:	4b43      	ldr	r3, [pc, #268]	@ (80058d4 <HAL_RCC_ClockConfig+0x3d0>)
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	f003 030f 	and.w	r3, r3, #15
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d208      	bcs.n	80057e4 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80057d2:	4b40      	ldr	r3, [pc, #256]	@ (80058d4 <HAL_RCC_ClockConfig+0x3d0>)
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	f023 020f 	bic.w	r2, r3, #15
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	493d      	ldr	r1, [pc, #244]	@ (80058d4 <HAL_RCC_ClockConfig+0x3d0>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057e4:	4b3c      	ldr	r3, [pc, #240]	@ (80058d8 <HAL_RCC_ClockConfig+0x3d4>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 030f 	and.w	r3, r3, #15
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d210      	bcs.n	8005814 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057f2:	4b39      	ldr	r3, [pc, #228]	@ (80058d8 <HAL_RCC_ClockConfig+0x3d4>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f023 020f 	bic.w	r2, r3, #15
 80057fa:	4937      	ldr	r1, [pc, #220]	@ (80058d8 <HAL_RCC_ClockConfig+0x3d4>)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	4313      	orrs	r3, r2
 8005800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005802:	4b35      	ldr	r3, [pc, #212]	@ (80058d8 <HAL_RCC_ClockConfig+0x3d4>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	429a      	cmp	r2, r3
 800580e:	d001      	beq.n	8005814 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e05b      	b.n	80058cc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0304 	and.w	r3, r3, #4
 800581c:	2b00      	cmp	r3, #0
 800581e:	d010      	beq.n	8005842 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68da      	ldr	r2, [r3, #12]
 8005824:	4b2b      	ldr	r3, [pc, #172]	@ (80058d4 <HAL_RCC_ClockConfig+0x3d0>)
 8005826:	6a1b      	ldr	r3, [r3, #32]
 8005828:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800582c:	429a      	cmp	r2, r3
 800582e:	d208      	bcs.n	8005842 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005830:	4b28      	ldr	r3, [pc, #160]	@ (80058d4 <HAL_RCC_ClockConfig+0x3d0>)
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	4925      	ldr	r1, [pc, #148]	@ (80058d4 <HAL_RCC_ClockConfig+0x3d0>)
 800583e:	4313      	orrs	r3, r2
 8005840:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0308 	and.w	r3, r3, #8
 800584a:	2b00      	cmp	r3, #0
 800584c:	d012      	beq.n	8005874 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691a      	ldr	r2, [r3, #16]
 8005852:	4b20      	ldr	r3, [pc, #128]	@ (80058d4 <HAL_RCC_ClockConfig+0x3d0>)
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	091b      	lsrs	r3, r3, #4
 8005858:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800585c:	429a      	cmp	r2, r3
 800585e:	d209      	bcs.n	8005874 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005860:	4b1c      	ldr	r3, [pc, #112]	@ (80058d4 <HAL_RCC_ClockConfig+0x3d0>)
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	011b      	lsls	r3, r3, #4
 800586e:	4919      	ldr	r1, [pc, #100]	@ (80058d4 <HAL_RCC_ClockConfig+0x3d0>)
 8005870:	4313      	orrs	r3, r2
 8005872:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0310 	and.w	r3, r3, #16
 800587c:	2b00      	cmp	r3, #0
 800587e:	d010      	beq.n	80058a2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	695a      	ldr	r2, [r3, #20]
 8005884:	4b13      	ldr	r3, [pc, #76]	@ (80058d4 <HAL_RCC_ClockConfig+0x3d0>)
 8005886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005888:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800588c:	429a      	cmp	r2, r3
 800588e:	d208      	bcs.n	80058a2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005890:	4b10      	ldr	r3, [pc, #64]	@ (80058d4 <HAL_RCC_ClockConfig+0x3d0>)
 8005892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005894:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	490d      	ldr	r1, [pc, #52]	@ (80058d4 <HAL_RCC_ClockConfig+0x3d0>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80058a2:	f000 f821 	bl	80058e8 <HAL_RCC_GetSysClockFreq>
 80058a6:	4602      	mov	r2, r0
 80058a8:	4b0a      	ldr	r3, [pc, #40]	@ (80058d4 <HAL_RCC_ClockConfig+0x3d0>)
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	f003 030f 	and.w	r3, r3, #15
 80058b0:	490a      	ldr	r1, [pc, #40]	@ (80058dc <HAL_RCC_ClockConfig+0x3d8>)
 80058b2:	5ccb      	ldrb	r3, [r1, r3]
 80058b4:	fa22 f303 	lsr.w	r3, r2, r3
 80058b8:	4a09      	ldr	r2, [pc, #36]	@ (80058e0 <HAL_RCC_ClockConfig+0x3dc>)
 80058ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80058bc:	4b09      	ldr	r3, [pc, #36]	@ (80058e4 <HAL_RCC_ClockConfig+0x3e0>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7fd fa05 	bl	8002cd0 <HAL_InitTick>
 80058c6:	4603      	mov	r3, r0
 80058c8:	73fb      	strb	r3, [r7, #15]

  return status;
 80058ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3718      	adds	r7, #24
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	46020c00 	.word	0x46020c00
 80058d8:	40022000 	.word	0x40022000
 80058dc:	0800cf7c 	.word	0x0800cf7c
 80058e0:	20000000 	.word	0x20000000
 80058e4:	20000018 	.word	0x20000018

080058e8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b08b      	sub	sp, #44	@ 0x2c
 80058ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058f6:	4b78      	ldr	r3, [pc, #480]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	f003 030c 	and.w	r3, r3, #12
 80058fe:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005900:	4b75      	ldr	r3, [pc, #468]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005904:	f003 0303 	and.w	r3, r3, #3
 8005908:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d005      	beq.n	800591c <HAL_RCC_GetSysClockFreq+0x34>
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	2b0c      	cmp	r3, #12
 8005914:	d121      	bne.n	800595a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d11e      	bne.n	800595a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800591c:	4b6e      	ldr	r3, [pc, #440]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d107      	bne.n	8005938 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005928:	4b6b      	ldr	r3, [pc, #428]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800592a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800592e:	0b1b      	lsrs	r3, r3, #12
 8005930:	f003 030f 	and.w	r3, r3, #15
 8005934:	627b      	str	r3, [r7, #36]	@ 0x24
 8005936:	e005      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005938:	4b67      	ldr	r3, [pc, #412]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	0f1b      	lsrs	r3, r3, #28
 800593e:	f003 030f 	and.w	r3, r3, #15
 8005942:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005944:	4a65      	ldr	r2, [pc, #404]	@ (8005adc <HAL_RCC_GetSysClockFreq+0x1f4>)
 8005946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800594c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d110      	bne.n	8005976 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005956:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005958:	e00d      	b.n	8005976 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800595a:	4b5f      	ldr	r3, [pc, #380]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	f003 030c 	and.w	r3, r3, #12
 8005962:	2b04      	cmp	r3, #4
 8005964:	d102      	bne.n	800596c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005966:	4b5e      	ldr	r3, [pc, #376]	@ (8005ae0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005968:	623b      	str	r3, [r7, #32]
 800596a:	e004      	b.n	8005976 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	2b08      	cmp	r3, #8
 8005970:	d101      	bne.n	8005976 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005972:	4b5c      	ldr	r3, [pc, #368]	@ (8005ae4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005974:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	2b0c      	cmp	r3, #12
 800597a:	f040 80a5 	bne.w	8005ac8 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800597e:	4b56      	ldr	r3, [pc, #344]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005982:	f003 0303 	and.w	r3, r3, #3
 8005986:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005988:	4b53      	ldr	r3, [pc, #332]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800598a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800598c:	0a1b      	lsrs	r3, r3, #8
 800598e:	f003 030f 	and.w	r3, r3, #15
 8005992:	3301      	adds	r3, #1
 8005994:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005996:	4b50      	ldr	r3, [pc, #320]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599a:	091b      	lsrs	r3, r3, #4
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80059a2:	4b4d      	ldr	r3, [pc, #308]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80059a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a6:	08db      	lsrs	r3, r3, #3
 80059a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	fb02 f303 	mul.w	r3, r2, r3
 80059b2:	ee07 3a90 	vmov	s15, r3
 80059b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ba:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d003      	beq.n	80059cc <HAL_RCC_GetSysClockFreq+0xe4>
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	2b03      	cmp	r3, #3
 80059c8:	d022      	beq.n	8005a10 <HAL_RCC_GetSysClockFreq+0x128>
 80059ca:	e043      	b.n	8005a54 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	ee07 3a90 	vmov	s15, r3
 80059d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059d6:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8005ae8 <HAL_RCC_GetSysClockFreq+0x200>
 80059da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059de:	4b3e      	ldr	r3, [pc, #248]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80059e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059e6:	ee07 3a90 	vmov	s15, r3
 80059ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80059ee:	ed97 6a01 	vldr	s12, [r7, #4]
 80059f2:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005aec <HAL_RCC_GetSysClockFreq+0x204>
 80059f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80059fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80059fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a0e:	e046      	b.n	8005a9e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	ee07 3a90 	vmov	s15, r3
 8005a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a1a:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8005af0 <HAL_RCC_GetSysClockFreq+0x208>
 8005a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a22:	4b2d      	ldr	r3, [pc, #180]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a2a:	ee07 3a90 	vmov	s15, r3
 8005a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005a32:	ed97 6a01 	vldr	s12, [r7, #4]
 8005a36:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8005aec <HAL_RCC_GetSysClockFreq+0x204>
 8005a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005a42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a52:	e024      	b.n	8005a9e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a56:	ee07 3a90 	vmov	s15, r3
 8005a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	ee07 3a90 	vmov	s15, r3
 8005a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a74:	ee07 3a90 	vmov	s15, r3
 8005a78:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005a7c:	ed97 6a01 	vldr	s12, [r7, #4]
 8005a80:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8005aec <HAL_RCC_GetSysClockFreq+0x204>
 8005a84:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a88:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005a8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a90:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a9c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aa2:	0e1b      	lsrs	r3, r3, #24
 8005aa4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	ee07 3a90 	vmov	s15, r3
 8005ab2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ab6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005aba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005abe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ac2:	ee17 3a90 	vmov	r3, s15
 8005ac6:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	372c      	adds	r7, #44	@ 0x2c
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	46020c00 	.word	0x46020c00
 8005adc:	0800cf94 	.word	0x0800cf94
 8005ae0:	00f42400 	.word	0x00f42400
 8005ae4:	007a1200 	.word	0x007a1200
 8005ae8:	4b742400 	.word	0x4b742400
 8005aec:	46000000 	.word	0x46000000
 8005af0:	4af42400 	.word	0x4af42400

08005af4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005af8:	f7ff fef6 	bl	80058e8 <HAL_RCC_GetSysClockFreq>
 8005afc:	4602      	mov	r2, r0
 8005afe:	4b07      	ldr	r3, [pc, #28]	@ (8005b1c <HAL_RCC_GetHCLKFreq+0x28>)
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	f003 030f 	and.w	r3, r3, #15
 8005b06:	4906      	ldr	r1, [pc, #24]	@ (8005b20 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005b08:	5ccb      	ldrb	r3, [r1, r3]
 8005b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b0e:	4a05      	ldr	r2, [pc, #20]	@ (8005b24 <HAL_RCC_GetHCLKFreq+0x30>)
 8005b10:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005b12:	4b04      	ldr	r3, [pc, #16]	@ (8005b24 <HAL_RCC_GetHCLKFreq+0x30>)
 8005b14:	681b      	ldr	r3, [r3, #0]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	46020c00 	.word	0x46020c00
 8005b20:	0800cf7c 	.word	0x0800cf7c
 8005b24:	20000000 	.word	0x20000000

08005b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005b2c:	f7ff ffe2 	bl	8005af4 <HAL_RCC_GetHCLKFreq>
 8005b30:	4602      	mov	r2, r0
 8005b32:	4b05      	ldr	r3, [pc, #20]	@ (8005b48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	091b      	lsrs	r3, r3, #4
 8005b38:	f003 0307 	and.w	r3, r3, #7
 8005b3c:	4903      	ldr	r1, [pc, #12]	@ (8005b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b3e:	5ccb      	ldrb	r3, [r1, r3]
 8005b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	46020c00 	.word	0x46020c00
 8005b4c:	0800cf8c 	.word	0x0800cf8c

08005b50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005b54:	f7ff ffce 	bl	8005af4 <HAL_RCC_GetHCLKFreq>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	4b05      	ldr	r3, [pc, #20]	@ (8005b70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	0a1b      	lsrs	r3, r3, #8
 8005b60:	f003 0307 	and.w	r3, r3, #7
 8005b64:	4903      	ldr	r1, [pc, #12]	@ (8005b74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b66:	5ccb      	ldrb	r3, [r1, r3]
 8005b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	46020c00 	.word	0x46020c00
 8005b74:	0800cf8c 	.word	0x0800cf8c

08005b78 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005b7c:	f7ff ffba 	bl	8005af4 <HAL_RCC_GetHCLKFreq>
 8005b80:	4602      	mov	r2, r0
 8005b82:	4b05      	ldr	r3, [pc, #20]	@ (8005b98 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b86:	091b      	lsrs	r3, r3, #4
 8005b88:	f003 0307 	and.w	r3, r3, #7
 8005b8c:	4903      	ldr	r1, [pc, #12]	@ (8005b9c <HAL_RCC_GetPCLK3Freq+0x24>)
 8005b8e:	5ccb      	ldrb	r3, [r1, r3]
 8005b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	46020c00 	.word	0x46020c00
 8005b9c:	0800cf8c 	.word	0x0800cf8c

08005ba0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005ba8:	4b3e      	ldr	r3, [pc, #248]	@ (8005ca4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bae:	f003 0304 	and.w	r3, r3, #4
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005bb6:	f7fe fd6b 	bl	8004690 <HAL_PWREx_GetVoltageRange>
 8005bba:	6178      	str	r0, [r7, #20]
 8005bbc:	e019      	b.n	8005bf2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bbe:	4b39      	ldr	r3, [pc, #228]	@ (8005ca4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bc4:	4a37      	ldr	r2, [pc, #220]	@ (8005ca4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005bc6:	f043 0304 	orr.w	r3, r3, #4
 8005bca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005bce:	4b35      	ldr	r3, [pc, #212]	@ (8005ca4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005bd4:	f003 0304 	and.w	r3, r3, #4
 8005bd8:	60fb      	str	r3, [r7, #12]
 8005bda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005bdc:	f7fe fd58 	bl	8004690 <HAL_PWREx_GetVoltageRange>
 8005be0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005be2:	4b30      	ldr	r3, [pc, #192]	@ (8005ca4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005be8:	4a2e      	ldr	r2, [pc, #184]	@ (8005ca4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005bea:	f023 0304 	bic.w	r3, r3, #4
 8005bee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005bf8:	d003      	beq.n	8005c02 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c00:	d109      	bne.n	8005c16 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c08:	d202      	bcs.n	8005c10 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005c0e:	e033      	b.n	8005c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005c10:	2300      	movs	r3, #0
 8005c12:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005c14:	e030      	b.n	8005c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c1c:	d208      	bcs.n	8005c30 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c24:	d102      	bne.n	8005c2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005c26:	2303      	movs	r3, #3
 8005c28:	613b      	str	r3, [r7, #16]
 8005c2a:	e025      	b.n	8005c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e035      	b.n	8005c9c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c36:	d90f      	bls.n	8005c58 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d109      	bne.n	8005c52 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c44:	d902      	bls.n	8005c4c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005c46:	2300      	movs	r3, #0
 8005c48:	613b      	str	r3, [r7, #16]
 8005c4a:	e015      	b.n	8005c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	613b      	str	r3, [r7, #16]
 8005c50:	e012      	b.n	8005c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005c52:	2300      	movs	r3, #0
 8005c54:	613b      	str	r3, [r7, #16]
 8005c56:	e00f      	b.n	8005c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c5e:	d109      	bne.n	8005c74 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c66:	d102      	bne.n	8005c6e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005c68:	2301      	movs	r3, #1
 8005c6a:	613b      	str	r3, [r7, #16]
 8005c6c:	e004      	b.n	8005c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005c6e:	2302      	movs	r3, #2
 8005c70:	613b      	str	r3, [r7, #16]
 8005c72:	e001      	b.n	8005c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005c74:	2301      	movs	r3, #1
 8005c76:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c78:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f023 020f 	bic.w	r2, r3, #15
 8005c80:	4909      	ldr	r1, [pc, #36]	@ (8005ca8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005c88:	4b07      	ldr	r3, [pc, #28]	@ (8005ca8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 030f 	and.w	r3, r3, #15
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d001      	beq.n	8005c9a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e000      	b.n	8005c9c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	46020c00 	.word	0x46020c00
 8005ca8:	40022000 	.word	0x40022000

08005cac <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cb0:	b0b6      	sub	sp, #216	@ 0xd8
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005cb8:	2300      	movs	r3, #0
 8005cba:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ccc:	f002 0401 	and.w	r4, r2, #1
 8005cd0:	2500      	movs	r5, #0
 8005cd2:	ea54 0305 	orrs.w	r3, r4, r5
 8005cd6:	d00b      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005cd8:	4bc5      	ldr	r3, [pc, #788]	@ (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005cde:	f023 0103 	bic.w	r1, r3, #3
 8005ce2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ce6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ce8:	4ac1      	ldr	r2, [pc, #772]	@ (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005cea:	430b      	orrs	r3, r1
 8005cec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005cf0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf8:	f002 0804 	and.w	r8, r2, #4
 8005cfc:	f04f 0900 	mov.w	r9, #0
 8005d00:	ea58 0309 	orrs.w	r3, r8, r9
 8005d04:	d00b      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005d06:	4bba      	ldr	r3, [pc, #744]	@ (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d0c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005d10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d16:	4ab6      	ldr	r2, [pc, #728]	@ (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005d18:	430b      	orrs	r3, r1
 8005d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d26:	f002 0a08 	and.w	sl, r2, #8
 8005d2a:	f04f 0b00 	mov.w	fp, #0
 8005d2e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005d32:	d00b      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005d34:	4bae      	ldr	r3, [pc, #696]	@ (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d3a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005d3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d44:	4aaa      	ldr	r2, [pc, #680]	@ (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005d46:	430b      	orrs	r3, r1
 8005d48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d54:	f002 0310 	and.w	r3, r2, #16
 8005d58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005d62:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005d66:	460b      	mov	r3, r1
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	d00b      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005d6c:	4ba0      	ldr	r3, [pc, #640]	@ (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d72:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005d76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d7c:	4a9c      	ldr	r2, [pc, #624]	@ (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005d7e:	430b      	orrs	r3, r1
 8005d80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8c:	f002 0320 	and.w	r3, r2, #32
 8005d90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d94:	2300      	movs	r3, #0
 8005d96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d9a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005d9e:	460b      	mov	r3, r1
 8005da0:	4313      	orrs	r3, r2
 8005da2:	d00b      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005da4:	4b92      	ldr	r3, [pc, #584]	@ (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005da6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005daa:	f023 0107 	bic.w	r1, r3, #7
 8005dae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005db4:	4a8e      	ldr	r2, [pc, #568]	@ (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005db6:	430b      	orrs	r3, r1
 8005db8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005dbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc4:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005dc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005dcc:	2300      	movs	r3, #0
 8005dce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005dd2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	d00b      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005ddc:	4b84      	ldr	r3, [pc, #528]	@ (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005de2:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005de6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005dea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dec:	4a80      	ldr	r2, [pc, #512]	@ (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005dee:	430b      	orrs	r3, r1
 8005df0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005df4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005e00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e04:	2300      	movs	r3, #0
 8005e06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005e0a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005e0e:	460b      	mov	r3, r1
 8005e10:	4313      	orrs	r3, r2
 8005e12:	d00b      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005e14:	4b76      	ldr	r3, [pc, #472]	@ (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e24:	4a72      	ldr	r2, [pc, #456]	@ (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005e26:	430b      	orrs	r3, r1
 8005e28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e34:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005e38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e42:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005e46:	460b      	mov	r3, r1
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	d00b      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005e4c:	4b68      	ldr	r3, [pc, #416]	@ (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005e4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005e52:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005e56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e5c:	4a64      	ldr	r2, [pc, #400]	@ (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005e5e:	430b      	orrs	r3, r1
 8005e60:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005e70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e74:	2300      	movs	r3, #0
 8005e76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005e7a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005e7e:	460b      	mov	r3, r1
 8005e80:	4313      	orrs	r3, r2
 8005e82:	d00b      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005e84:	4b5a      	ldr	r3, [pc, #360]	@ (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e8a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8005e8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e94:	4a56      	ldr	r2, [pc, #344]	@ (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005e96:	430b      	orrs	r3, r1
 8005e98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005e9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea4:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8005ea8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005eac:	2300      	movs	r3, #0
 8005eae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005eb2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	d00b      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005ebc:	4b4c      	ldr	r3, [pc, #304]	@ (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005ebe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ec2:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005ec6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005eca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ecc:	4a48      	ldr	r2, [pc, #288]	@ (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005ece:	430b      	orrs	r3, r1
 8005ed0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005ed4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005edc:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005ee0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005eea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005eee:	460b      	mov	r3, r1
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	d00b      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005ef4:	4b3e      	ldr	r3, [pc, #248]	@ (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005efa:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005efe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005f02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f04:	4a3a      	ldr	r2, [pc, #232]	@ (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005f06:	430b      	orrs	r3, r1
 8005f08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8005f0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f14:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005f18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f1e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005f22:	460b      	mov	r3, r1
 8005f24:	4313      	orrs	r3, r2
 8005f26:	d00b      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8005f28:	4b31      	ldr	r3, [pc, #196]	@ (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005f2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f2e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005f32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005f36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f38:	4a2d      	ldr	r2, [pc, #180]	@ (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005f3a:	430b      	orrs	r3, r1
 8005f3c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005f40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f48:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005f4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f4e:	2300      	movs	r3, #0
 8005f50:	677b      	str	r3, [r7, #116]	@ 0x74
 8005f52:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005f56:	460b      	mov	r3, r1
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	d04f      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005f5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f64:	2b80      	cmp	r3, #128	@ 0x80
 8005f66:	d02d      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8005f68:	2b80      	cmp	r3, #128	@ 0x80
 8005f6a:	d827      	bhi.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005f6c:	2b60      	cmp	r3, #96	@ 0x60
 8005f6e:	d02b      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8005f70:	2b60      	cmp	r3, #96	@ 0x60
 8005f72:	d823      	bhi.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005f74:	2b40      	cmp	r3, #64	@ 0x40
 8005f76:	d006      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005f78:	2b40      	cmp	r3, #64	@ 0x40
 8005f7a:	d81f      	bhi.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d009      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8005f80:	2b20      	cmp	r3, #32
 8005f82:	d011      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005f84:	e01a      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005f86:	4b1a      	ldr	r3, [pc, #104]	@ (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f8a:	4a19      	ldr	r2, [pc, #100]	@ (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f90:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005f92:	e01a      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005f98:	3308      	adds	r3, #8
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f002 f91e 	bl	80081dc <RCCEx_PLL2_Config>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005fa6:	e010      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005fa8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005fac:	332c      	adds	r3, #44	@ 0x2c
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f002 f9ac 	bl	800830c <RCCEx_PLL3_Config>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005fba:	e006      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005fc2:	e002      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8005fc4:	bf00      	nop
 8005fc6:	e000      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8005fc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fca:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d110      	bne.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005fd2:	4b07      	ldr	r3, [pc, #28]	@ (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005fd4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005fd8:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8005fdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fe4:	4a02      	ldr	r2, [pc, #8]	@ (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005fe6:	430b      	orrs	r3, r1
 8005fe8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005fec:	e006      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x350>
 8005fee:	bf00      	nop
 8005ff0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff4:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005ff8:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005ffc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006004:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006008:	66bb      	str	r3, [r7, #104]	@ 0x68
 800600a:	2300      	movs	r3, #0
 800600c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800600e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006012:	460b      	mov	r3, r1
 8006014:	4313      	orrs	r3, r2
 8006016:	d046      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006018:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800601c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006020:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006024:	d028      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006026:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800602a:	d821      	bhi.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800602c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006030:	d022      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006032:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006036:	d81b      	bhi.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8006038:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800603c:	d01c      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800603e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006042:	d815      	bhi.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8006044:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006048:	d008      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800604a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800604e:	d80f      	bhi.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8006050:	2b00      	cmp	r3, #0
 8006052:	d011      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006054:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006058:	d00e      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800605a:	e009      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800605c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006060:	3308      	adds	r3, #8
 8006062:	4618      	mov	r0, r3
 8006064:	f002 f8ba 	bl	80081dc <RCCEx_PLL2_Config>
 8006068:	4603      	mov	r3, r0
 800606a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800606e:	e004      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8006076:	e000      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 8006078:	bf00      	nop
    }

    if (ret == HAL_OK)
 800607a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10d      	bne.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006082:	4bb6      	ldr	r3, [pc, #728]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006084:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006088:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800608c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006090:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006094:	4ab1      	ldr	r2, [pc, #708]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006096:	430b      	orrs	r3, r1
 8006098:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800609c:	e003      	b.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800609e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80060a2:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80060a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80060aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ae:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80060b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80060b4:	2300      	movs	r3, #0
 80060b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80060b8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80060bc:	460b      	mov	r3, r1
 80060be:	4313      	orrs	r3, r2
 80060c0:	d03e      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80060c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80060c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060ca:	2b04      	cmp	r3, #4
 80060cc:	d81d      	bhi.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 80060ce:	a201      	add	r2, pc, #4	@ (adr r2, 80060d4 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80060d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d4:	08006113 	.word	0x08006113
 80060d8:	080060e9 	.word	0x080060e9
 80060dc:	080060f7 	.word	0x080060f7
 80060e0:	08006113 	.word	0x08006113
 80060e4:	08006113 	.word	0x08006113
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80060e8:	4b9c      	ldr	r3, [pc, #624]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80060ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ec:	4a9b      	ldr	r2, [pc, #620]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80060ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060f2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80060f4:	e00e      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80060f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80060fa:	332c      	adds	r3, #44	@ 0x2c
 80060fc:	4618      	mov	r0, r3
 80060fe:	f002 f905 	bl	800830c <RCCEx_PLL3_Config>
 8006102:	4603      	mov	r3, r0
 8006104:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8006108:	e004      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8006110:	e000      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 8006112:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006114:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10d      	bne.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800611c:	4b8f      	ldr	r3, [pc, #572]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800611e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006122:	f023 0107 	bic.w	r1, r3, #7
 8006126:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800612a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800612e:	4a8b      	ldr	r2, [pc, #556]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006130:	430b      	orrs	r3, r1
 8006132:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006136:	e003      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006138:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800613c:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006140:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006148:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800614c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800614e:	2300      	movs	r3, #0
 8006150:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006152:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006156:	460b      	mov	r3, r1
 8006158:	4313      	orrs	r3, r2
 800615a:	d04a      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800615c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006164:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006168:	d028      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x510>
 800616a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800616e:	d821      	bhi.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8006170:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006174:	d024      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006176:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800617a:	d81b      	bhi.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800617c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006180:	d00e      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8006182:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006186:	d815      	bhi.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8006188:	2b00      	cmp	r3, #0
 800618a:	d01b      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800618c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006190:	d110      	bne.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006192:	4b72      	ldr	r3, [pc, #456]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006196:	4a71      	ldr	r2, [pc, #452]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800619c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800619e:	e012      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80061a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80061a4:	332c      	adds	r3, #44	@ 0x2c
 80061a6:	4618      	mov	r0, r3
 80061a8:	f002 f8b0 	bl	800830c <RCCEx_PLL3_Config>
 80061ac:	4603      	mov	r3, r0
 80061ae:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80061b2:	e008      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80061ba:	e004      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 80061bc:	bf00      	nop
 80061be:	e002      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 80061c0:	bf00      	nop
 80061c2:	e000      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 80061c4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80061c6:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10d      	bne.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80061ce:	4b63      	ldr	r3, [pc, #396]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80061d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80061d4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80061d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80061dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061e0:	4a5e      	ldr	r2, [pc, #376]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80061e2:	430b      	orrs	r3, r1
 80061e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80061e8:	e003      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ea:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80061ee:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80061f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80061fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006200:	2300      	movs	r3, #0
 8006202:	657b      	str	r3, [r7, #84]	@ 0x54
 8006204:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006208:	460b      	mov	r3, r1
 800620a:	4313      	orrs	r3, r2
 800620c:	f000 80ba 	beq.w	8006384 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006210:	2300      	movs	r3, #0
 8006212:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006216:	4b51      	ldr	r3, [pc, #324]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006218:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800621c:	f003 0304 	and.w	r3, r3, #4
 8006220:	2b00      	cmp	r3, #0
 8006222:	d113      	bne.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006224:	4b4d      	ldr	r3, [pc, #308]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006226:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800622a:	4a4c      	ldr	r2, [pc, #304]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800622c:	f043 0304 	orr.w	r3, r3, #4
 8006230:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006234:	4b49      	ldr	r3, [pc, #292]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006236:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800623a:	f003 0304 	and.w	r3, r3, #4
 800623e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006242:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
      pwrclkchanged = SET;
 8006246:	2301      	movs	r3, #1
 8006248:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800624c:	4b44      	ldr	r3, [pc, #272]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 800624e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006250:	4a43      	ldr	r2, [pc, #268]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8006252:	f043 0301 	orr.w	r3, r3, #1
 8006256:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006258:	f7fc fdc4 	bl	8002de4 <HAL_GetTick>
 800625c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006260:	e00b      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006262:	f7fc fdbf 	bl	8002de4 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	2b02      	cmp	r3, #2
 8006270:	d903      	bls.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8006278:	e005      	b.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800627a:	4b39      	ldr	r3, [pc, #228]	@ (8006360 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 800627c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b00      	cmp	r3, #0
 8006284:	d0ed      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 8006286:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d16a      	bne.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800628e:	4b33      	ldr	r3, [pc, #204]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006290:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006294:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006298:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800629c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d023      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x640>
 80062a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80062a8:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80062ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d01b      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062b4:	4b29      	ldr	r3, [pc, #164]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80062b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062c2:	4b26      	ldr	r3, [pc, #152]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80062c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062c8:	4a24      	ldr	r2, [pc, #144]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80062ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062d2:	4b22      	ldr	r3, [pc, #136]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80062d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062d8:	4a20      	ldr	r2, [pc, #128]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80062da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80062e2:	4a1e      	ldr	r2, [pc, #120]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80062e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80062ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d019      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f8:	f7fc fd74 	bl	8002de4 <HAL_GetTick>
 80062fc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006300:	e00d      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006302:	f7fc fd6f 	bl	8002de4 <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800630c:	1ad2      	subs	r2, r2, r3
 800630e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006312:	429a      	cmp	r2, r3
 8006314:	d903      	bls.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
            break;
 800631c:	e006      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800631e:	4b0f      	ldr	r3, [pc, #60]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006320:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	2b00      	cmp	r3, #0
 800632a:	d0ea      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 800632c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10d      	bne.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006334:	4b09      	ldr	r3, [pc, #36]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006336:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800633a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800633e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006342:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006346:	4a05      	ldr	r2, [pc, #20]	@ (800635c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8006348:	430b      	orrs	r3, r1
 800634a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800634e:	e00d      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006350:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006354:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
 8006358:	e008      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 800635a:	bf00      	nop
 800635c:	46020c00 	.word	0x46020c00
 8006360:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006364:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006368:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800636c:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 8006370:	2b01      	cmp	r3, #1
 8006372:	d107      	bne.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006374:	4bb2      	ldr	r3, [pc, #712]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006376:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800637a:	4ab1      	ldr	r2, [pc, #708]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800637c:	f023 0304 	bic.w	r3, r3, #4
 8006380:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006384:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006390:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006392:	2300      	movs	r3, #0
 8006394:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006396:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800639a:	460b      	mov	r3, r1
 800639c:	4313      	orrs	r3, r2
 800639e:	d042      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80063a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80063a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063a8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80063ac:	d022      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80063ae:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80063b2:	d81b      	bhi.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x740>
 80063b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063b8:	d011      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x732>
 80063ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063be:	d815      	bhi.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x740>
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d019      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80063c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063c8:	d110      	bne.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80063ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80063ce:	3308      	adds	r3, #8
 80063d0:	4618      	mov	r0, r3
 80063d2:	f001 ff03 	bl	80081dc <RCCEx_PLL2_Config>
 80063d6:	4603      	mov	r3, r0
 80063d8:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80063dc:	e00d      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063de:	4b98      	ldr	r3, [pc, #608]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80063e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e2:	4a97      	ldr	r2, [pc, #604]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80063e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063e8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80063ea:	e006      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80063f2:	e002      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 80063f4:	bf00      	nop
 80063f6:	e000      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 80063f8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80063fa:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10d      	bne.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006402:	4b8f      	ldr	r3, [pc, #572]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006408:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800640c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006410:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006414:	4a8a      	ldr	r2, [pc, #552]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006416:	430b      	orrs	r3, r1
 8006418:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800641c:	e003      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800641e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006422:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006426:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800642a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006432:	643b      	str	r3, [r7, #64]	@ 0x40
 8006434:	2300      	movs	r3, #0
 8006436:	647b      	str	r3, [r7, #68]	@ 0x44
 8006438:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800643c:	460b      	mov	r3, r1
 800643e:	4313      	orrs	r3, r2
 8006440:	d02d      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006442:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800644a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800644e:	d00b      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8006450:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006454:	d804      	bhi.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 8006456:	2b00      	cmp	r3, #0
 8006458:	d008      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800645a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800645e:	d007      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8006466:	e004      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8006468:	bf00      	nop
 800646a:	e002      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 800646c:	bf00      	nop
 800646e:	e000      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8006470:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006472:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10d      	bne.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800647a:	4b71      	ldr	r3, [pc, #452]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800647c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006480:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006484:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800648c:	4a6c      	ldr	r2, [pc, #432]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800648e:	430b      	orrs	r3, r1
 8006490:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006494:	e003      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006496:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800649a:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800649e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80064a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80064aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064ac:	2300      	movs	r3, #0
 80064ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064b0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80064b4:	460b      	mov	r3, r1
 80064b6:	4313      	orrs	r3, r2
 80064b8:	d00c      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80064ba:	4b61      	ldr	r3, [pc, #388]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80064bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80064c0:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 80064c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80064c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064cc:	4a5c      	ldr	r2, [pc, #368]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80064ce:	430b      	orrs	r3, r1
 80064d0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80064d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80064d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064dc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80064e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80064e2:	2300      	movs	r3, #0
 80064e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80064e6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80064ea:	460b      	mov	r3, r1
 80064ec:	4313      	orrs	r3, r2
 80064ee:	d019      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80064f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80064f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064fc:	d105      	bne.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80064fe:	4b50      	ldr	r3, [pc, #320]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006502:	4a4f      	ldr	r2, [pc, #316]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006508:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800650a:	4b4d      	ldr	r3, [pc, #308]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800650c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006510:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006514:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006518:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800651c:	4a48      	ldr	r2, [pc, #288]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800651e:	430b      	orrs	r3, r1
 8006520:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006524:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006530:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006532:	2300      	movs	r3, #0
 8006534:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006536:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800653a:	460b      	mov	r3, r1
 800653c:	4313      	orrs	r3, r2
 800653e:	d00c      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006540:	4b3f      	ldr	r3, [pc, #252]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006546:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800654a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800654e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006552:	493b      	ldr	r1, [pc, #236]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006554:	4313      	orrs	r3, r2
 8006556:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800655a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800655e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006562:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006566:	623b      	str	r3, [r7, #32]
 8006568:	2300      	movs	r3, #0
 800656a:	627b      	str	r3, [r7, #36]	@ 0x24
 800656c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006570:	460b      	mov	r3, r1
 8006572:	4313      	orrs	r3, r2
 8006574:	d00c      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006576:	4b32      	ldr	r3, [pc, #200]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800657c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006580:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006584:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006588:	492d      	ldr	r1, [pc, #180]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800658a:	4313      	orrs	r3, r2
 800658c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006590:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006598:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800659c:	61bb      	str	r3, [r7, #24]
 800659e:	2300      	movs	r3, #0
 80065a0:	61fb      	str	r3, [r7, #28]
 80065a2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80065a6:	460b      	mov	r3, r1
 80065a8:	4313      	orrs	r3, r2
 80065aa:	d00c      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80065ac:	4b24      	ldr	r3, [pc, #144]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80065ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80065b2:	f023 0218 	bic.w	r2, r3, #24
 80065b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80065ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80065be:	4920      	ldr	r1, [pc, #128]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80065c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80065ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ce:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80065d2:	613b      	str	r3, [r7, #16]
 80065d4:	2300      	movs	r3, #0
 80065d6:	617b      	str	r3, [r7, #20]
 80065d8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80065dc:	460b      	mov	r3, r1
 80065de:	4313      	orrs	r3, r2
 80065e0:	d034      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80065e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80065e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80065ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80065ee:	d105      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065f0:	4b13      	ldr	r3, [pc, #76]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80065f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f4:	4a12      	ldr	r2, [pc, #72]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80065f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065fa:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80065fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006600:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006604:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006608:	d108      	bne.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800660a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800660e:	3308      	adds	r3, #8
 8006610:	4618      	mov	r0, r3
 8006612:	f001 fde3 	bl	80081dc <RCCEx_PLL2_Config>
 8006616:	4603      	mov	r3, r0
 8006618:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    }
    if (ret == HAL_OK)
 800661c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10f      	bne.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006624:	4b06      	ldr	r3, [pc, #24]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006626:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800662a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800662e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006632:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006636:	4902      	ldr	r1, [pc, #8]	@ (8006640 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8006638:	4313      	orrs	r3, r2
 800663a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800663e:	e005      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8006640:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006644:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8006648:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800664c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006654:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006658:	60bb      	str	r3, [r7, #8]
 800665a:	2300      	movs	r3, #0
 800665c:	60fb      	str	r3, [r7, #12]
 800665e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006662:	460b      	mov	r3, r1
 8006664:	4313      	orrs	r3, r2
 8006666:	d03a      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006668:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800666c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006670:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006674:	d00e      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8006676:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800667a:	d815      	bhi.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 800667c:	2b00      	cmp	r3, #0
 800667e:	d017      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006680:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006684:	d110      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006686:	4b27      	ldr	r3, [pc, #156]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8006688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800668a:	4a26      	ldr	r2, [pc, #152]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 800668c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006690:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006692:	e00e      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006694:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006698:	3308      	adds	r3, #8
 800669a:	4618      	mov	r0, r3
 800669c:	f001 fd9e 	bl	80081dc <RCCEx_PLL2_Config>
 80066a0:	4603      	mov	r3, r0
 80066a2:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80066a6:	e004      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80066ae:	e000      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 80066b0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80066b2:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10d      	bne.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80066ba:	4b1a      	ldr	r3, [pc, #104]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80066bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066c0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80066c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80066c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066cc:	4915      	ldr	r1, [pc, #84]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80066d4:	e003      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d6:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80066da:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80066de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80066e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e6:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80066ea:	603b      	str	r3, [r7, #0]
 80066ec:	2300      	movs	r3, #0
 80066ee:	607b      	str	r3, [r7, #4]
 80066f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80066f4:	460b      	mov	r3, r1
 80066f6:	4313      	orrs	r3, r2
 80066f8:	d00c      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80066fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80066fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006700:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006704:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006708:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800670c:	4905      	ldr	r1, [pc, #20]	@ (8006724 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 800670e:	4313      	orrs	r3, r2
 8006710:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006714:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
}
 8006718:	4618      	mov	r0, r3
 800671a:	37d8      	adds	r7, #216	@ 0xd8
 800671c:	46bd      	mov	sp, r7
 800671e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006722:	bf00      	nop
 8006724:	46020c00 	.word	0x46020c00

08006728 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006728:	b480      	push	{r7}
 800672a:	b089      	sub	sp, #36	@ 0x24
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006730:	4ba6      	ldr	r3, [pc, #664]	@ (80069cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006738:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800673a:	4ba4      	ldr	r3, [pc, #656]	@ (80069cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800673c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800673e:	f003 0303 	and.w	r3, r3, #3
 8006742:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006744:	4ba1      	ldr	r3, [pc, #644]	@ (80069cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006748:	0a1b      	lsrs	r3, r3, #8
 800674a:	f003 030f 	and.w	r3, r3, #15
 800674e:	3301      	adds	r3, #1
 8006750:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006752:	4b9e      	ldr	r3, [pc, #632]	@ (80069cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006756:	091b      	lsrs	r3, r3, #4
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800675e:	4b9b      	ldr	r3, [pc, #620]	@ (80069cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006762:	08db      	lsrs	r3, r3, #3
 8006764:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	fb02 f303 	mul.w	r3, r2, r3
 800676e:	ee07 3a90 	vmov	s15, r3
 8006772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006776:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	2b03      	cmp	r3, #3
 800677e:	d062      	beq.n	8006846 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	2b03      	cmp	r3, #3
 8006784:	f200 8081 	bhi.w	800688a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d024      	beq.n	80067d8 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	2b02      	cmp	r3, #2
 8006792:	d17a      	bne.n	800688a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	ee07 3a90 	vmov	s15, r3
 800679a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800679e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80069d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80067a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067a6:	4b89      	ldr	r3, [pc, #548]	@ (80069cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80067a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ae:	ee07 3a90 	vmov	s15, r3
 80067b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80067b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80067ba:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80069d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80067be:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80067c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80067c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80067ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067d6:	e08f      	b.n	80068f8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80067d8:	4b7c      	ldr	r3, [pc, #496]	@ (80069cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d005      	beq.n	80067f0 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80067e4:	4b79      	ldr	r3, [pc, #484]	@ (80069cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	0f1b      	lsrs	r3, r3, #28
 80067ea:	f003 030f 	and.w	r3, r3, #15
 80067ee:	e006      	b.n	80067fe <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80067f0:	4b76      	ldr	r3, [pc, #472]	@ (80069cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80067f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80067f6:	041b      	lsls	r3, r3, #16
 80067f8:	0f1b      	lsrs	r3, r3, #28
 80067fa:	f003 030f 	and.w	r3, r3, #15
 80067fe:	4a76      	ldr	r2, [pc, #472]	@ (80069d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006804:	ee07 3a90 	vmov	s15, r3
 8006808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	ee07 3a90 	vmov	s15, r3
 8006812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	ee07 3a90 	vmov	s15, r3
 8006820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006824:	ed97 6a02 	vldr	s12, [r7, #8]
 8006828:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80069d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800682c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006830:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006834:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006838:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800683c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006840:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006844:	e058      	b.n	80068f8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	ee07 3a90 	vmov	s15, r3
 800684c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006850:	eddf 6a62 	vldr	s13, [pc, #392]	@ 80069dc <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
 8006854:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006858:	4b5c      	ldr	r3, [pc, #368]	@ (80069cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800685a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800685c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006860:	ee07 3a90 	vmov	s15, r3
 8006864:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006868:	ed97 6a02 	vldr	s12, [r7, #8]
 800686c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80069d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006870:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006874:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006878:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800687c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006884:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006888:	e036      	b.n	80068f8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800688a:	4b50      	ldr	r3, [pc, #320]	@ (80069cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d005      	beq.n	80068a2 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8006896:	4b4d      	ldr	r3, [pc, #308]	@ (80069cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	0f1b      	lsrs	r3, r3, #28
 800689c:	f003 030f 	and.w	r3, r3, #15
 80068a0:	e006      	b.n	80068b0 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80068a2:	4b4a      	ldr	r3, [pc, #296]	@ (80069cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80068a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80068a8:	041b      	lsls	r3, r3, #16
 80068aa:	0f1b      	lsrs	r3, r3, #28
 80068ac:	f003 030f 	and.w	r3, r3, #15
 80068b0:	4a49      	ldr	r2, [pc, #292]	@ (80069d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80068b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068b6:	ee07 3a90 	vmov	s15, r3
 80068ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	ee07 3a90 	vmov	s15, r3
 80068c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	ee07 3a90 	vmov	s15, r3
 80068d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80068da:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80069d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80068de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80068ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068f6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80068f8:	4b34      	ldr	r3, [pc, #208]	@ (80069cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80068fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d017      	beq.n	8006934 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006904:	4b31      	ldr	r3, [pc, #196]	@ (80069cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006908:	0a5b      	lsrs	r3, r3, #9
 800690a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800690e:	ee07 3a90 	vmov	s15, r3
 8006912:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006916:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800691a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800691e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006922:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006926:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800692a:	ee17 2a90 	vmov	r2, s15
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	601a      	str	r2, [r3, #0]
 8006932:	e002      	b.n	800693a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800693a:	4b24      	ldr	r3, [pc, #144]	@ (80069cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800693c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800693e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d017      	beq.n	8006976 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006946:	4b21      	ldr	r3, [pc, #132]	@ (80069cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800694a:	0c1b      	lsrs	r3, r3, #16
 800694c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006950:	ee07 3a90 	vmov	s15, r3
 8006954:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006958:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800695c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006960:	edd7 6a07 	vldr	s13, [r7, #28]
 8006964:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006968:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800696c:	ee17 2a90 	vmov	r2, s15
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	605a      	str	r2, [r3, #4]
 8006974:	e002      	b.n	800697c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800697c:	4b13      	ldr	r3, [pc, #76]	@ (80069cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800697e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006980:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d017      	beq.n	80069b8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006988:	4b10      	ldr	r3, [pc, #64]	@ (80069cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800698a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800698c:	0e1b      	lsrs	r3, r3, #24
 800698e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006992:	ee07 3a90 	vmov	s15, r3
 8006996:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800699a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800699e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80069a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80069a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069ae:	ee17 2a90 	vmov	r2, s15
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80069b6:	e002      	b.n	80069be <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	609a      	str	r2, [r3, #8]
}
 80069be:	bf00      	nop
 80069c0:	3724      	adds	r7, #36	@ 0x24
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	46020c00 	.word	0x46020c00
 80069d0:	4b742400 	.word	0x4b742400
 80069d4:	46000000 	.word	0x46000000
 80069d8:	0800cf94 	.word	0x0800cf94
 80069dc:	4af42400 	.word	0x4af42400

080069e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b089      	sub	sp, #36	@ 0x24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80069e8:	4ba6      	ldr	r3, [pc, #664]	@ (8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80069ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069f0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80069f2:	4ba4      	ldr	r3, [pc, #656]	@ (8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80069f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f6:	f003 0303 	and.w	r3, r3, #3
 80069fa:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80069fc:	4ba1      	ldr	r3, [pc, #644]	@ (8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80069fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a00:	0a1b      	lsrs	r3, r3, #8
 8006a02:	f003 030f 	and.w	r3, r3, #15
 8006a06:	3301      	adds	r3, #1
 8006a08:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006a0a:	4b9e      	ldr	r3, [pc, #632]	@ (8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0e:	091b      	lsrs	r3, r3, #4
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006a16:	4b9b      	ldr	r3, [pc, #620]	@ (8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a1a:	08db      	lsrs	r3, r3, #3
 8006a1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	fb02 f303 	mul.w	r3, r2, r3
 8006a26:	ee07 3a90 	vmov	s15, r3
 8006a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a2e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	2b03      	cmp	r3, #3
 8006a36:	d062      	beq.n	8006afe <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	2b03      	cmp	r3, #3
 8006a3c:	f200 8081 	bhi.w	8006b42 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d024      	beq.n	8006a90 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d17a      	bne.n	8006b42 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	ee07 3a90 	vmov	s15, r3
 8006a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a56:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006c88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a5e:	4b89      	ldr	r3, [pc, #548]	@ (8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a66:	ee07 3a90 	vmov	s15, r3
 8006a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a72:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006c8c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a8e:	e08f      	b.n	8006bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006a90:	4b7c      	ldr	r3, [pc, #496]	@ (8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d005      	beq.n	8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006a9c:	4b79      	ldr	r3, [pc, #484]	@ (8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	0f1b      	lsrs	r3, r3, #28
 8006aa2:	f003 030f 	and.w	r3, r3, #15
 8006aa6:	e006      	b.n	8006ab6 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8006aa8:	4b76      	ldr	r3, [pc, #472]	@ (8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006aaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006aae:	041b      	lsls	r3, r3, #16
 8006ab0:	0f1b      	lsrs	r3, r3, #28
 8006ab2:	f003 030f 	and.w	r3, r3, #15
 8006ab6:	4a76      	ldr	r2, [pc, #472]	@ (8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006abc:	ee07 3a90 	vmov	s15, r3
 8006ac0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	ee07 3a90 	vmov	s15, r3
 8006aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	ee07 3a90 	vmov	s15, r3
 8006ad8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006adc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ae0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006c8c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006ae4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ae8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006af0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006af8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006afc:	e058      	b.n	8006bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	ee07 3a90 	vmov	s15, r3
 8006b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b08:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8006c94 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
 8006b0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b10:	4b5c      	ldr	r3, [pc, #368]	@ (8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b18:	ee07 3a90 	vmov	s15, r3
 8006b1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b20:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b24:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006c8c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006b28:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006b2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b34:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b40:	e036      	b.n	8006bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006b42:	4b50      	ldr	r3, [pc, #320]	@ (8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d005      	beq.n	8006b5a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8006b4e:	4b4d      	ldr	r3, [pc, #308]	@ (8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	0f1b      	lsrs	r3, r3, #28
 8006b54:	f003 030f 	and.w	r3, r3, #15
 8006b58:	e006      	b.n	8006b68 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8006b5a:	4b4a      	ldr	r3, [pc, #296]	@ (8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006b5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b60:	041b      	lsls	r3, r3, #16
 8006b62:	0f1b      	lsrs	r3, r3, #28
 8006b64:	f003 030f 	and.w	r3, r3, #15
 8006b68:	4a49      	ldr	r2, [pc, #292]	@ (8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b6e:	ee07 3a90 	vmov	s15, r3
 8006b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	ee07 3a90 	vmov	s15, r3
 8006b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	ee07 3a90 	vmov	s15, r3
 8006b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b92:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006c8c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006baa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bae:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006bb0:	4b34      	ldr	r3, [pc, #208]	@ (8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d017      	beq.n	8006bec <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006bbc:	4b31      	ldr	r3, [pc, #196]	@ (8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bc0:	0a5b      	lsrs	r3, r3, #9
 8006bc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bc6:	ee07 3a90 	vmov	s15, r3
 8006bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006bce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bd2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006bd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006be2:	ee17 2a90 	vmov	r2, s15
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	601a      	str	r2, [r3, #0]
 8006bea:	e002      	b.n	8006bf2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006bf2:	4b24      	ldr	r3, [pc, #144]	@ (8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d017      	beq.n	8006c2e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006bfe:	4b21      	ldr	r3, [pc, #132]	@ (8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c02:	0c1b      	lsrs	r3, r3, #16
 8006c04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c08:	ee07 3a90 	vmov	s15, r3
 8006c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006c10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c14:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006c18:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c24:	ee17 2a90 	vmov	r2, s15
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	605a      	str	r2, [r3, #4]
 8006c2c:	e002      	b.n	8006c34 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006c34:	4b13      	ldr	r3, [pc, #76]	@ (8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d017      	beq.n	8006c70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006c40:	4b10      	ldr	r3, [pc, #64]	@ (8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c44:	0e1b      	lsrs	r3, r3, #24
 8006c46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c4a:	ee07 3a90 	vmov	s15, r3
 8006c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8006c52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c56:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006c5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c66:	ee17 2a90 	vmov	r2, s15
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006c6e:	e002      	b.n	8006c76 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	609a      	str	r2, [r3, #8]
}
 8006c76:	bf00      	nop
 8006c78:	3724      	adds	r7, #36	@ 0x24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	46020c00 	.word	0x46020c00
 8006c88:	4b742400 	.word	0x4b742400
 8006c8c:	46000000 	.word	0x46000000
 8006c90:	0800cf94 	.word	0x0800cf94
 8006c94:	4af42400 	.word	0x4af42400

08006c98 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b089      	sub	sp, #36	@ 0x24
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006ca0:	4ba6      	ldr	r3, [pc, #664]	@ (8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca8:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006caa:	4ba4      	ldr	r3, [pc, #656]	@ (8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cae:	f003 0303 	and.w	r3, r3, #3
 8006cb2:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006cb4:	4ba1      	ldr	r3, [pc, #644]	@ (8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cb8:	0a1b      	lsrs	r3, r3, #8
 8006cba:	f003 030f 	and.w	r3, r3, #15
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8006cc2:	4b9e      	ldr	r3, [pc, #632]	@ (8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc6:	091b      	lsrs	r3, r3, #4
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006cce:	4b9b      	ldr	r3, [pc, #620]	@ (8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006cd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cd2:	08db      	lsrs	r3, r3, #3
 8006cd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	fb02 f303 	mul.w	r3, r2, r3
 8006cde:	ee07 3a90 	vmov	s15, r3
 8006ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ce6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	2b03      	cmp	r3, #3
 8006cee:	d062      	beq.n	8006db6 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	2b03      	cmp	r3, #3
 8006cf4:	f200 8081 	bhi.w	8006dfa <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d024      	beq.n	8006d48 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d17a      	bne.n	8006dfa <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	ee07 3a90 	vmov	s15, r3
 8006d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d0e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006f40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8006d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d16:	4b89      	ldr	r3, [pc, #548]	@ (8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d1e:	ee07 3a90 	vmov	s15, r3
 8006d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d26:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d2a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d42:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8006d46:	e08f      	b.n	8006e68 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006d48:	4b7c      	ldr	r3, [pc, #496]	@ (8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d005      	beq.n	8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8006d54:	4b79      	ldr	r3, [pc, #484]	@ (8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	0f1b      	lsrs	r3, r3, #28
 8006d5a:	f003 030f 	and.w	r3, r3, #15
 8006d5e:	e006      	b.n	8006d6e <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8006d60:	4b76      	ldr	r3, [pc, #472]	@ (8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006d62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d66:	041b      	lsls	r3, r3, #16
 8006d68:	0f1b      	lsrs	r3, r3, #28
 8006d6a:	f003 030f 	and.w	r3, r3, #15
 8006d6e:	4a76      	ldr	r2, [pc, #472]	@ (8006f48 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d74:	ee07 3a90 	vmov	s15, r3
 8006d78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	ee07 3a90 	vmov	s15, r3
 8006d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	ee07 3a90 	vmov	s15, r3
 8006d90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d94:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d98:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006d9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006da0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006da4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006da8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006db0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006db4:	e058      	b.n	8006e68 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	ee07 3a90 	vmov	s15, r3
 8006dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dc0:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
 8006dc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dc8:	4b5c      	ldr	r3, [pc, #368]	@ (8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dd0:	ee07 3a90 	vmov	s15, r3
 8006dd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006dd8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ddc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006de0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006de4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006de8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dec:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006df4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006df8:	e036      	b.n	8006e68 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006dfa:	4b50      	ldr	r3, [pc, #320]	@ (8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d005      	beq.n	8006e12 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8006e06:	4b4d      	ldr	r3, [pc, #308]	@ (8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	0f1b      	lsrs	r3, r3, #28
 8006e0c:	f003 030f 	and.w	r3, r3, #15
 8006e10:	e006      	b.n	8006e20 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8006e12:	4b4a      	ldr	r3, [pc, #296]	@ (8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006e14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e18:	041b      	lsls	r3, r3, #16
 8006e1a:	0f1b      	lsrs	r3, r3, #28
 8006e1c:	f003 030f 	and.w	r3, r3, #15
 8006e20:	4a49      	ldr	r2, [pc, #292]	@ (8006f48 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e26:	ee07 3a90 	vmov	s15, r3
 8006e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	ee07 3a90 	vmov	s15, r3
 8006e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	ee07 3a90 	vmov	s15, r3
 8006e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e46:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e4a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006f44 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e66:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006e68:	4b34      	ldr	r3, [pc, #208]	@ (8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d017      	beq.n	8006ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006e74:	4b31      	ldr	r3, [pc, #196]	@ (8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e78:	0a5b      	lsrs	r3, r3, #9
 8006e7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e7e:	ee07 3a90 	vmov	s15, r3
 8006e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8006e86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e8a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006e8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e9a:	ee17 2a90 	vmov	r2, s15
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	601a      	str	r2, [r3, #0]
 8006ea2:	e002      	b.n	8006eaa <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006eaa:	4b24      	ldr	r3, [pc, #144]	@ (8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d017      	beq.n	8006ee6 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006eb6:	4b21      	ldr	r3, [pc, #132]	@ (8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eba:	0c1b      	lsrs	r3, r3, #16
 8006ebc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ec0:	ee07 3a90 	vmov	s15, r3
 8006ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006ec8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ecc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006ed0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ed4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ed8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006edc:	ee17 2a90 	vmov	r2, s15
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	605a      	str	r2, [r3, #4]
 8006ee4:	e002      	b.n	8006eec <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006eec:	4b13      	ldr	r3, [pc, #76]	@ (8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ef0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d017      	beq.n	8006f28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006ef8:	4b10      	ldr	r3, [pc, #64]	@ (8006f3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006efc:	0e1b      	lsrs	r3, r3, #24
 8006efe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f02:	ee07 3a90 	vmov	s15, r3
 8006f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8006f0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f0e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006f12:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f1e:	ee17 2a90 	vmov	r2, s15
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006f26:	e002      	b.n	8006f2e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	609a      	str	r2, [r3, #8]
}
 8006f2e:	bf00      	nop
 8006f30:	3724      	adds	r7, #36	@ 0x24
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	46020c00 	.word	0x46020c00
 8006f40:	4b742400 	.word	0x4b742400
 8006f44:	46000000 	.word	0x46000000
 8006f48:	0800cf94 	.word	0x0800cf94
 8006f4c:	4af42400 	.word	0x4af42400

08006f50 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b08e      	sub	sp, #56	@ 0x38
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006f5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f5e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8006f62:	430b      	orrs	r3, r1
 8006f64:	d145      	bne.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006f66:	4b9b      	ldr	r3, [pc, #620]	@ (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006f68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f70:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006f72:	4b98      	ldr	r3, [pc, #608]	@ (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006f74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f78:	f003 0302 	and.w	r3, r3, #2
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d108      	bne.n	8006f92 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f86:	d104      	bne.n	8006f92 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006f88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f8e:	f001 b916 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006f92:	4b90      	ldr	r3, [pc, #576]	@ (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006f94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fa0:	d114      	bne.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fa8:	d110      	bne.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006faa:	4b8a      	ldr	r3, [pc, #552]	@ (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006fac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fb8:	d103      	bne.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8006fba:	23fa      	movs	r3, #250	@ 0xfa
 8006fbc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006fbe:	f001 b8fe 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      else
      {
        frequency = LSI_VALUE;
 8006fc2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006fc6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006fc8:	f001 b8f9 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006fcc:	4b81      	ldr	r3, [pc, #516]	@ (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fd8:	d107      	bne.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8006fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fe0:	d103      	bne.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8006fe2:	4b7d      	ldr	r3, [pc, #500]	@ (80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006fe4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fe6:	f001 b8ea 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fee:	f001 b8e6 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006ff2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ff6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006ffa:	430b      	orrs	r3, r1
 8006ffc:	d151      	bne.n	80070a2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006ffe:	4b75      	ldr	r3, [pc, #468]	@ (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007000:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007004:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8007008:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800700a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700c:	2b80      	cmp	r3, #128	@ 0x80
 800700e:	d035      	beq.n	800707c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8007010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007012:	2b80      	cmp	r3, #128	@ 0x80
 8007014:	d841      	bhi.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007018:	2b60      	cmp	r3, #96	@ 0x60
 800701a:	d02a      	beq.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800701c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701e:	2b60      	cmp	r3, #96	@ 0x60
 8007020:	d83b      	bhi.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007024:	2b40      	cmp	r3, #64	@ 0x40
 8007026:	d009      	beq.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702a:	2b40      	cmp	r3, #64	@ 0x40
 800702c:	d835      	bhi.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800702e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00c      	beq.n	800704e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8007034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007036:	2b20      	cmp	r3, #32
 8007038:	d012      	beq.n	8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800703a:	e02e      	b.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800703c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007040:	4618      	mov	r0, r3
 8007042:	f7ff fb71 	bl	8006728 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007048:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800704a:	f001 b8b8 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800704e:	f107 0318 	add.w	r3, r7, #24
 8007052:	4618      	mov	r0, r3
 8007054:	f7ff fcc4 	bl	80069e0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800705c:	f001 b8af 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007060:	f107 030c 	add.w	r3, r7, #12
 8007064:	4618      	mov	r0, r3
 8007066:	f7ff fe17 	bl	8006c98 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800706e:	f001 b8a6 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007072:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007076:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007078:	f001 b8a1 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800707c:	4b55      	ldr	r3, [pc, #340]	@ (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007084:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007088:	d103      	bne.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800708a:	4b54      	ldr	r3, [pc, #336]	@ (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800708c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800708e:	f001 b896 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 8007092:	2300      	movs	r3, #0
 8007094:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007096:	f001 b892 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      default :
      {
        frequency = 0U;
 800709a:	2300      	movs	r3, #0
 800709c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800709e:	f001 b88e 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
        break;
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80070a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070a6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80070aa:	430b      	orrs	r3, r1
 80070ac:	d126      	bne.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80070ae:	4b49      	ldr	r3, [pc, #292]	@ (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80070b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80070b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070b8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80070ba:	4b46      	ldr	r3, [pc, #280]	@ (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070c6:	d106      	bne.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80070c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d103      	bne.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
    {
      frequency = HSI_VALUE;
 80070ce:	4b43      	ldr	r3, [pc, #268]	@ (80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80070d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80070d2:	f001 b874 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80070d6:	4b3f      	ldr	r3, [pc, #252]	@ (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070e2:	d107      	bne.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80070e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070ea:	d103      	bne.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
    {
      frequency = HSI_VALUE >> 1U;
 80070ec:	4b3c      	ldr	r3, [pc, #240]	@ (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80070ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80070f0:	f001 b865 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80070f4:	2300      	movs	r3, #0
 80070f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80070f8:	f001 b861 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80070fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007100:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8007104:	430b      	orrs	r3, r1
 8007106:	d171      	bne.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007108:	4b32      	ldr	r3, [pc, #200]	@ (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800710a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800710e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007112:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007116:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800711a:	d034      	beq.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800711c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007122:	d853      	bhi.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8007124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007126:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800712a:	d00b      	beq.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800712c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800712e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007132:	d84b      	bhi.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8007134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007136:	2b00      	cmp	r3, #0
 8007138:	d016      	beq.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 800713a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007140:	d009      	beq.n	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8007142:	e043      	b.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007144:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007148:	4618      	mov	r0, r3
 800714a:	f7ff faed 	bl	8006728 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800714e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007150:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007152:	f001 b834 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007156:	f107 0318 	add.w	r3, r7, #24
 800715a:	4618      	mov	r0, r3
 800715c:	f7ff fc40 	bl	80069e0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007164:	f001 b82b 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007168:	4b1a      	ldr	r3, [pc, #104]	@ (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007170:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007174:	d103      	bne.n	800717e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
        {
          frequency = HSI48_VALUE;
 8007176:	4b1b      	ldr	r3, [pc, #108]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007178:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800717a:	f001 b820 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 800717e:	2300      	movs	r3, #0
 8007180:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007182:	f001 b81c 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007186:	4b13      	ldr	r3, [pc, #76]	@ (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0320 	and.w	r3, r3, #32
 800718e:	2b20      	cmp	r3, #32
 8007190:	d118      	bne.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007192:	4b10      	ldr	r3, [pc, #64]	@ (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d005      	beq.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800719e:	4b0d      	ldr	r3, [pc, #52]	@ (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	0e1b      	lsrs	r3, r3, #24
 80071a4:	f003 030f 	and.w	r3, r3, #15
 80071a8:	e006      	b.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 80071aa:	4b0a      	ldr	r3, [pc, #40]	@ (80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80071ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80071b0:	041b      	lsls	r3, r3, #16
 80071b2:	0e1b      	lsrs	r3, r3, #24
 80071b4:	f003 030f 	and.w	r3, r3, #15
 80071b8:	4a0b      	ldr	r2, [pc, #44]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80071ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071be:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80071c0:	f000 bffd 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071c8:	f000 bff9 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      default :

        frequency = 0U;
 80071cc:	2300      	movs	r3, #0
 80071ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071d0:	f000 bff5 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 80071d4:	46020c00 	.word	0x46020c00
 80071d8:	0003d090 	.word	0x0003d090
 80071dc:	00f42400 	.word	0x00f42400
 80071e0:	007a1200 	.word	0x007a1200
 80071e4:	02dc6c00 	.word	0x02dc6c00
 80071e8:	0800cf94 	.word	0x0800cf94
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80071ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071f0:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80071f4:	430b      	orrs	r3, r1
 80071f6:	d17f      	bne.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80071f8:	4ba8      	ldr	r3, [pc, #672]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80071fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80071fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007202:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8007204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007206:	2b00      	cmp	r3, #0
 8007208:	d165      	bne.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800720a:	4ba4      	ldr	r3, [pc, #656]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800720c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007210:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007214:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8007216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007218:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800721c:	d034      	beq.n	8007288 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800721e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007220:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007224:	d853      	bhi.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8007226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007228:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800722c:	d00b      	beq.n	8007246 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 800722e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007230:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007234:	d84b      	bhi.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8007236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007238:	2b00      	cmp	r3, #0
 800723a:	d016      	beq.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 800723c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800723e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007242:	d009      	beq.n	8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8007244:	e043      	b.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007246:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800724a:	4618      	mov	r0, r3
 800724c:	f7ff fa6c 	bl	8006728 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007252:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007254:	f000 bfb3 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007258:	f107 0318 	add.w	r3, r7, #24
 800725c:	4618      	mov	r0, r3
 800725e:	f7ff fbbf 	bl	80069e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007266:	f000 bfaa 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800726a:	4b8c      	ldr	r3, [pc, #560]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007272:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007276:	d103      	bne.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          {
            frequency = HSI48_VALUE;
 8007278:	4b89      	ldr	r3, [pc, #548]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 800727a:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800727c:	f000 bf9f 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
            frequency = 0U;
 8007280:	2300      	movs	r3, #0
 8007282:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007284:	f000 bf9b 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007288:	4b84      	ldr	r3, [pc, #528]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0320 	and.w	r3, r3, #32
 8007290:	2b20      	cmp	r3, #32
 8007292:	d118      	bne.n	80072c6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007294:	4b81      	ldr	r3, [pc, #516]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800729c:	2b00      	cmp	r3, #0
 800729e:	d005      	beq.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 80072a0:	4b7e      	ldr	r3, [pc, #504]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	0e1b      	lsrs	r3, r3, #24
 80072a6:	f003 030f 	and.w	r3, r3, #15
 80072aa:	e006      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 80072ac:	4b7b      	ldr	r3, [pc, #492]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80072ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80072b2:	041b      	lsls	r3, r3, #16
 80072b4:	0e1b      	lsrs	r3, r3, #24
 80072b6:	f003 030f 	and.w	r3, r3, #15
 80072ba:	4a7a      	ldr	r2, [pc, #488]	@ (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80072bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072c0:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80072c2:	f000 bf7c 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
            frequency = 0U;
 80072c6:	2300      	movs	r3, #0
 80072c8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80072ca:	f000 bf78 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
        }
        default :
        {
          frequency = 0U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80072d2:	f000 bf74 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80072d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072dc:	d108      	bne.n	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7ff fa20 	bl	8006728 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80072e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ec:	f000 bf67 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else
    {
      frequency = 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80072f4:	f000 bf63 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80072f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072fc:	1e51      	subs	r1, r2, #1
 80072fe:	430b      	orrs	r3, r1
 8007300:	d136      	bne.n	8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007302:	4b66      	ldr	r3, [pc, #408]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007308:	f003 0303 	and.w	r3, r3, #3
 800730c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800730e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007310:	2b00      	cmp	r3, #0
 8007312:	d104      	bne.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007314:	f7fe fc1c 	bl	8005b50 <HAL_RCC_GetPCLK2Freq>
 8007318:	6378      	str	r0, [r7, #52]	@ 0x34
 800731a:	f000 bf50 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800731e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007320:	2b01      	cmp	r3, #1
 8007322:	d104      	bne.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007324:	f7fe fae0 	bl	80058e8 <HAL_RCC_GetSysClockFreq>
 8007328:	6378      	str	r0, [r7, #52]	@ 0x34
 800732a:	f000 bf48 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800732e:	4b5b      	ldr	r3, [pc, #364]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800733a:	d106      	bne.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 800733c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800733e:	2b02      	cmp	r3, #2
 8007340:	d103      	bne.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HSI_VALUE;
 8007342:	4b59      	ldr	r3, [pc, #356]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8007344:	637b      	str	r3, [r7, #52]	@ 0x34
 8007346:	f000 bf3a 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800734a:	4b54      	ldr	r3, [pc, #336]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800734c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007350:	f003 0302 	and.w	r3, r3, #2
 8007354:	2b02      	cmp	r3, #2
 8007356:	d107      	bne.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8007358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800735a:	2b03      	cmp	r3, #3
 800735c:	d104      	bne.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
    {
      frequency = LSE_VALUE;
 800735e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007362:	637b      	str	r3, [r7, #52]	@ 0x34
 8007364:	f000 bf2b 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007368:	2300      	movs	r3, #0
 800736a:	637b      	str	r3, [r7, #52]	@ 0x34
 800736c:	f000 bf27 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8007370:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007374:	1f11      	subs	r1, r2, #4
 8007376:	430b      	orrs	r3, r1
 8007378:	d136      	bne.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800737a:	4b48      	ldr	r3, [pc, #288]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800737c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007380:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007384:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007388:	2b00      	cmp	r3, #0
 800738a:	d104      	bne.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800738c:	f7fe fbcc 	bl	8005b28 <HAL_RCC_GetPCLK1Freq>
 8007390:	6378      	str	r0, [r7, #52]	@ 0x34
 8007392:	f000 bf14 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007398:	2b10      	cmp	r3, #16
 800739a:	d104      	bne.n	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800739c:	f7fe faa4 	bl	80058e8 <HAL_RCC_GetSysClockFreq>
 80073a0:	6378      	str	r0, [r7, #52]	@ 0x34
 80073a2:	f000 bf0c 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80073a6:	4b3d      	ldr	r3, [pc, #244]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073b2:	d106      	bne.n	80073c2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80073b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b6:	2b20      	cmp	r3, #32
 80073b8:	d103      	bne.n	80073c2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    {
      frequency = HSI_VALUE;
 80073ba:	4b3b      	ldr	r3, [pc, #236]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80073bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80073be:	f000 befe 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80073c2:	4b36      	ldr	r3, [pc, #216]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80073c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073c8:	f003 0302 	and.w	r3, r3, #2
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d107      	bne.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 80073d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d2:	2b30      	cmp	r3, #48	@ 0x30
 80073d4:	d104      	bne.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = LSE_VALUE;
 80073d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073da:	637b      	str	r3, [r7, #52]	@ 0x34
 80073dc:	f000 beef 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80073e0:	2300      	movs	r3, #0
 80073e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80073e4:	f000 beeb 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80073e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073ec:	f1a2 0108 	sub.w	r1, r2, #8
 80073f0:	430b      	orrs	r3, r1
 80073f2:	d136      	bne.n	8007462 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80073f4:	4b29      	ldr	r3, [pc, #164]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80073f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80073fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80073fe:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007402:	2b00      	cmp	r3, #0
 8007404:	d104      	bne.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007406:	f7fe fb8f 	bl	8005b28 <HAL_RCC_GetPCLK1Freq>
 800740a:	6378      	str	r0, [r7, #52]	@ 0x34
 800740c:	f000 bed7 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007412:	2b40      	cmp	r3, #64	@ 0x40
 8007414:	d104      	bne.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007416:	f7fe fa67 	bl	80058e8 <HAL_RCC_GetSysClockFreq>
 800741a:	6378      	str	r0, [r7, #52]	@ 0x34
 800741c:	f000 becf 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007420:	4b1e      	ldr	r3, [pc, #120]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007428:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800742c:	d106      	bne.n	800743c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800742e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007430:	2b80      	cmp	r3, #128	@ 0x80
 8007432:	d103      	bne.n	800743c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
    {
      frequency = HSI_VALUE;
 8007434:	4b1c      	ldr	r3, [pc, #112]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8007436:	637b      	str	r3, [r7, #52]	@ 0x34
 8007438:	f000 bec1 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800743c:	4b17      	ldr	r3, [pc, #92]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800743e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007442:	f003 0302 	and.w	r3, r3, #2
 8007446:	2b02      	cmp	r3, #2
 8007448:	d107      	bne.n	800745a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 800744a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744c:	2bc0      	cmp	r3, #192	@ 0xc0
 800744e:	d104      	bne.n	800745a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {
      frequency = LSE_VALUE;
 8007450:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007454:	637b      	str	r3, [r7, #52]	@ 0x34
 8007456:	f000 beb2 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800745a:	2300      	movs	r3, #0
 800745c:	637b      	str	r3, [r7, #52]	@ 0x34
 800745e:	f000 beae 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007462:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007466:	f1a2 0110 	sub.w	r1, r2, #16
 800746a:	430b      	orrs	r3, r1
 800746c:	d141      	bne.n	80074f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800746e:	4b0b      	ldr	r3, [pc, #44]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8007470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007474:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007478:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800747a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747c:	2b00      	cmp	r3, #0
 800747e:	d104      	bne.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007480:	f7fe fb52 	bl	8005b28 <HAL_RCC_GetPCLK1Freq>
 8007484:	6378      	str	r0, [r7, #52]	@ 0x34
 8007486:	f000 be9a 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800748a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007490:	d10c      	bne.n	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007492:	f7fe fa29 	bl	80058e8 <HAL_RCC_GetSysClockFreq>
 8007496:	6378      	str	r0, [r7, #52]	@ 0x34
 8007498:	f000 be91 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 800749c:	46020c00 	.word	0x46020c00
 80074a0:	02dc6c00 	.word	0x02dc6c00
 80074a4:	0800cf94 	.word	0x0800cf94
 80074a8:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80074ac:	4baa      	ldr	r3, [pc, #680]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074b8:	d107      	bne.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80074ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074c0:	d103      	bne.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 80074c2:	4ba6      	ldr	r3, [pc, #664]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80074c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80074c6:	f000 be7a 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80074ca:	4ba3      	ldr	r3, [pc, #652]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80074cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074d0:	f003 0302 	and.w	r3, r3, #2
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d108      	bne.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 80074d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074de:	d104      	bne.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
    {
      frequency = LSE_VALUE;
 80074e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80074e6:	f000 be6a 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80074ea:	2300      	movs	r3, #0
 80074ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80074ee:	f000 be66 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80074f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074f6:	f1a2 0120 	sub.w	r1, r2, #32
 80074fa:	430b      	orrs	r3, r1
 80074fc:	d158      	bne.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80074fe:	4b96      	ldr	r3, [pc, #600]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007500:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007504:	f003 0307 	and.w	r3, r3, #7
 8007508:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800750a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750c:	2b00      	cmp	r3, #0
 800750e:	d104      	bne.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007510:	f7fe fb32 	bl	8005b78 <HAL_RCC_GetPCLK3Freq>
 8007514:	6378      	str	r0, [r7, #52]	@ 0x34
 8007516:	f000 be52 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800751a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751c:	2b01      	cmp	r3, #1
 800751e:	d104      	bne.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007520:	f7fe f9e2 	bl	80058e8 <HAL_RCC_GetSysClockFreq>
 8007524:	6378      	str	r0, [r7, #52]	@ 0x34
 8007526:	f000 be4a 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800752a:	4b8b      	ldr	r3, [pc, #556]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007532:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007536:	d106      	bne.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8007538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800753a:	2b02      	cmp	r3, #2
 800753c:	d103      	bne.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      frequency = HSI_VALUE;
 800753e:	4b87      	ldr	r3, [pc, #540]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8007540:	637b      	str	r3, [r7, #52]	@ 0x34
 8007542:	f000 be3c 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007546:	4b84      	ldr	r3, [pc, #528]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007548:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800754c:	f003 0302 	and.w	r3, r3, #2
 8007550:	2b02      	cmp	r3, #2
 8007552:	d107      	bne.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007556:	2b03      	cmp	r3, #3
 8007558:	d104      	bne.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = LSE_VALUE;
 800755a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800755e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007560:	f000 be2d 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007564:	4b7c      	ldr	r3, [pc, #496]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0320 	and.w	r3, r3, #32
 800756c:	2b20      	cmp	r3, #32
 800756e:	d11b      	bne.n	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8007570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007572:	2b04      	cmp	r3, #4
 8007574:	d118      	bne.n	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007576:	4b78      	ldr	r3, [pc, #480]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d005      	beq.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
 8007582:	4b75      	ldr	r3, [pc, #468]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	0e1b      	lsrs	r3, r3, #24
 8007588:	f003 030f 	and.w	r3, r3, #15
 800758c:	e006      	b.n	800759c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800758e:	4b72      	ldr	r3, [pc, #456]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007590:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007594:	041b      	lsls	r3, r3, #16
 8007596:	0e1b      	lsrs	r3, r3, #24
 8007598:	f003 030f 	and.w	r3, r3, #15
 800759c:	4a70      	ldr	r2, [pc, #448]	@ (8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 800759e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80075a4:	f000 be0b 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80075a8:	2300      	movs	r3, #0
 80075aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80075ac:	f000 be07 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80075b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075b4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80075b8:	430b      	orrs	r3, r1
 80075ba:	d16c      	bne.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80075bc:	4b66      	ldr	r3, [pc, #408]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80075be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80075c2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80075c6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80075c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075ce:	d104      	bne.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80075d0:	f7fe f98a 	bl	80058e8 <HAL_RCC_GetSysClockFreq>
 80075d4:	6378      	str	r0, [r7, #52]	@ 0x34
 80075d6:	f000 bdf2 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80075da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075e0:	d108      	bne.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075e2:	f107 0318 	add.w	r3, r7, #24
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7ff f9fa 	bl	80069e0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80075ec:	6a3b      	ldr	r3, [r7, #32]
 80075ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80075f0:	f000 bde5 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80075f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d104      	bne.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80075fa:	f7fe fa7b 	bl	8005af4 <HAL_RCC_GetHCLKFreq>
 80075fe:	6378      	str	r0, [r7, #52]	@ 0x34
 8007600:	f000 bddd 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007606:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800760a:	d122      	bne.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800760c:	4b52      	ldr	r3, [pc, #328]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0320 	and.w	r3, r3, #32
 8007614:	2b20      	cmp	r3, #32
 8007616:	d118      	bne.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007618:	4b4f      	ldr	r3, [pc, #316]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d005      	beq.n	8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8007624:	4b4c      	ldr	r3, [pc, #304]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	0e1b      	lsrs	r3, r3, #24
 800762a:	f003 030f 	and.w	r3, r3, #15
 800762e:	e006      	b.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8007630:	4b49      	ldr	r3, [pc, #292]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007632:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007636:	041b      	lsls	r3, r3, #16
 8007638:	0e1b      	lsrs	r3, r3, #24
 800763a:	f003 030f 	and.w	r3, r3, #15
 800763e:	4a48      	ldr	r2, [pc, #288]	@ (8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8007640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007644:	637b      	str	r3, [r7, #52]	@ 0x34
 8007646:	f000 bdba 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      else
      {
        frequency = 0U;
 800764a:	2300      	movs	r3, #0
 800764c:	637b      	str	r3, [r7, #52]	@ 0x34
 800764e:	f000 bdb6 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007652:	4b41      	ldr	r3, [pc, #260]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800765a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800765e:	d107      	bne.n	8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8007660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007662:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007666:	d103      	bne.n	8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
    {
      frequency = HSE_VALUE;
 8007668:	4b3e      	ldr	r3, [pc, #248]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 800766a:	637b      	str	r3, [r7, #52]	@ 0x34
 800766c:	f000 bda7 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007670:	4b39      	ldr	r3, [pc, #228]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007678:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800767c:	d107      	bne.n	800768e <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 800767e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007680:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007684:	d103      	bne.n	800768e <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
    {
      frequency = HSI_VALUE;
 8007686:	4b35      	ldr	r3, [pc, #212]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8007688:	637b      	str	r3, [r7, #52]	@ 0x34
 800768a:	f000 bd98 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800768e:	2300      	movs	r3, #0
 8007690:	637b      	str	r3, [r7, #52]	@ 0x34
 8007692:	f000 bd94 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007696:	e9d7 2300 	ldrd	r2, r3, [r7]
 800769a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800769e:	430b      	orrs	r3, r1
 80076a0:	d162      	bne.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80076a2:	4b2d      	ldr	r3, [pc, #180]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80076a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80076a8:	f003 0307 	and.w	r3, r3, #7
 80076ac:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80076ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b0:	2b04      	cmp	r3, #4
 80076b2:	d84c      	bhi.n	800774e <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 80076b4:	a201      	add	r2, pc, #4	@ (adr r2, 80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 80076b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ba:	bf00      	nop
 80076bc:	080076f5 	.word	0x080076f5
 80076c0:	080076d1 	.word	0x080076d1
 80076c4:	080076e3 	.word	0x080076e3
 80076c8:	080076ff 	.word	0x080076ff
 80076cc:	08007709 	.word	0x08007709
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7ff f827 	bl	8006728 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80076da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076de:	f000 bd6e 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076e2:	f107 030c 	add.w	r3, r7, #12
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7ff fad6 	bl	8006c98 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076f0:	f000 bd65 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80076f4:	f7fe f9fe 	bl	8005af4 <HAL_RCC_GetHCLKFreq>
 80076f8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80076fa:	f000 bd60 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80076fe:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007702:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007704:	f000 bd5b 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007708:	4b13      	ldr	r3, [pc, #76]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0320 	and.w	r3, r3, #32
 8007710:	2b20      	cmp	r3, #32
 8007712:	d118      	bne.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007714:	4b10      	ldr	r3, [pc, #64]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d005      	beq.n	800772c <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8007720:	4b0d      	ldr	r3, [pc, #52]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	0e1b      	lsrs	r3, r3, #24
 8007726:	f003 030f 	and.w	r3, r3, #15
 800772a:	e006      	b.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 800772c:	4b0a      	ldr	r3, [pc, #40]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800772e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007732:	041b      	lsls	r3, r3, #16
 8007734:	0e1b      	lsrs	r3, r3, #24
 8007736:	f003 030f 	and.w	r3, r3, #15
 800773a:	4a09      	ldr	r2, [pc, #36]	@ (8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 800773c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007740:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007742:	f000 bd3c 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 8007746:	2300      	movs	r3, #0
 8007748:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800774a:	f000 bd38 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      default:

        frequency = 0U;
 800774e:	2300      	movs	r3, #0
 8007750:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007752:	f000 bd34 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8007756:	bf00      	nop
 8007758:	46020c00 	.word	0x46020c00
 800775c:	00f42400 	.word	0x00f42400
 8007760:	0800cf94 	.word	0x0800cf94
 8007764:	007a1200 	.word	0x007a1200
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800776c:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8007770:	430b      	orrs	r3, r1
 8007772:	d167      	bne.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007774:	4ba0      	ldr	r3, [pc, #640]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8007776:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800777a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800777e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007782:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007786:	d036      	beq.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 8007788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800778a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800778e:	d855      	bhi.n	800783c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8007790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007792:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007796:	d029      	beq.n	80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8007798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800779a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800779e:	d84d      	bhi.n	800783c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 80077a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077a6:	d013      	beq.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x880>
 80077a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077ae:	d845      	bhi.n	800783c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 80077b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d015      	beq.n	80077e2 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 80077b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077bc:	d13e      	bne.n	800783c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7fe ffb0 	bl	8006728 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80077c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077cc:	f000 bcf7 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077d0:	f107 030c 	add.w	r3, r7, #12
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7ff fa5f 	bl	8006c98 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077de:	f000 bcee 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80077e2:	f7fe f987 	bl	8005af4 <HAL_RCC_GetHCLKFreq>
 80077e6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80077e8:	f000 bce9 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80077ec:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80077f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077f2:	f000 bce4 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80077f6:	4b80      	ldr	r3, [pc, #512]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 0320 	and.w	r3, r3, #32
 80077fe:	2b20      	cmp	r3, #32
 8007800:	d118      	bne.n	8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007802:	4b7d      	ldr	r3, [pc, #500]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d005      	beq.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800780e:	4b7a      	ldr	r3, [pc, #488]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	0e1b      	lsrs	r3, r3, #24
 8007814:	f003 030f 	and.w	r3, r3, #15
 8007818:	e006      	b.n	8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 800781a:	4b77      	ldr	r3, [pc, #476]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800781c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007820:	041b      	lsls	r3, r3, #16
 8007822:	0e1b      	lsrs	r3, r3, #24
 8007824:	f003 030f 	and.w	r3, r3, #15
 8007828:	4a74      	ldr	r2, [pc, #464]	@ (80079fc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800782a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800782e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007830:	f000 bcc5 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 8007834:	2300      	movs	r3, #0
 8007836:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007838:	f000 bcc1 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      default:

        frequency = 0U;
 800783c:	2300      	movs	r3, #0
 800783e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007840:	f000 bcbd 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007844:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007848:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800784c:	430b      	orrs	r3, r1
 800784e:	d14c      	bne.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007850:	4b69      	ldr	r3, [pc, #420]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8007852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007856:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800785a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800785c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785e:	2b00      	cmp	r3, #0
 8007860:	d104      	bne.n	800786c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007862:	f7fe f961 	bl	8005b28 <HAL_RCC_GetPCLK1Freq>
 8007866:	6378      	str	r0, [r7, #52]	@ 0x34
 8007868:	f000 bca9 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800786c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800786e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007872:	d104      	bne.n	800787e <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007874:	f7fe f838 	bl	80058e8 <HAL_RCC_GetSysClockFreq>
 8007878:	6378      	str	r0, [r7, #52]	@ 0x34
 800787a:	f000 bca0 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800787e:	4b5e      	ldr	r3, [pc, #376]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800788a:	d107      	bne.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0x94c>
 800788c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007892:	d103      	bne.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0x94c>
    {
      frequency = HSI_VALUE;
 8007894:	4b5a      	ldr	r3, [pc, #360]	@ (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007896:	637b      	str	r3, [r7, #52]	@ 0x34
 8007898:	f000 bc91 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800789c:	4b56      	ldr	r3, [pc, #344]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0320 	and.w	r3, r3, #32
 80078a4:	2b20      	cmp	r3, #32
 80078a6:	d11c      	bne.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80078a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80078ae:	d118      	bne.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80078b0:	4b51      	ldr	r3, [pc, #324]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d005      	beq.n	80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 80078bc:	4b4e      	ldr	r3, [pc, #312]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	0e1b      	lsrs	r3, r3, #24
 80078c2:	f003 030f 	and.w	r3, r3, #15
 80078c6:	e006      	b.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 80078c8:	4b4b      	ldr	r3, [pc, #300]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80078ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80078ce:	041b      	lsls	r3, r3, #16
 80078d0:	0e1b      	lsrs	r3, r3, #24
 80078d2:	f003 030f 	and.w	r3, r3, #15
 80078d6:	4a49      	ldr	r2, [pc, #292]	@ (80079fc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80078d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80078de:	f000 bc6e 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80078e2:	2300      	movs	r3, #0
 80078e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80078e6:	f000 bc6a 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80078ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078ee:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80078f2:	430b      	orrs	r3, r1
 80078f4:	d14c      	bne.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80078f6:	4b40      	ldr	r3, [pc, #256]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80078f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078fc:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007900:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007904:	2b00      	cmp	r3, #0
 8007906:	d104      	bne.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007908:	f7fe f90e 	bl	8005b28 <HAL_RCC_GetPCLK1Freq>
 800790c:	6378      	str	r0, [r7, #52]	@ 0x34
 800790e:	f000 bc56 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007914:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007918:	d104      	bne.n	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800791a:	f7fd ffe5 	bl	80058e8 <HAL_RCC_GetSysClockFreq>
 800791e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007920:	f000 bc4d 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007924:	4b34      	ldr	r3, [pc, #208]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800792c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007930:	d107      	bne.n	8007942 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
 8007932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007934:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007938:	d103      	bne.n	8007942 <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
    {
      frequency = HSI_VALUE;
 800793a:	4b31      	ldr	r3, [pc, #196]	@ (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800793c:	637b      	str	r3, [r7, #52]	@ 0x34
 800793e:	f000 bc3e 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007942:	4b2d      	ldr	r3, [pc, #180]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 0320 	and.w	r3, r3, #32
 800794a:	2b20      	cmp	r3, #32
 800794c:	d11c      	bne.n	8007988 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 800794e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007950:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007954:	d118      	bne.n	8007988 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007956:	4b28      	ldr	r3, [pc, #160]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d005      	beq.n	800796e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8007962:	4b25      	ldr	r3, [pc, #148]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	0e1b      	lsrs	r3, r3, #24
 8007968:	f003 030f 	and.w	r3, r3, #15
 800796c:	e006      	b.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0xa2c>
 800796e:	4b22      	ldr	r3, [pc, #136]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8007970:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007974:	041b      	lsls	r3, r3, #16
 8007976:	0e1b      	lsrs	r3, r3, #24
 8007978:	f003 030f 	and.w	r3, r3, #15
 800797c:	4a1f      	ldr	r2, [pc, #124]	@ (80079fc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800797e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007982:	637b      	str	r3, [r7, #52]	@ 0x34
 8007984:	f000 bc1b 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007988:	2300      	movs	r3, #0
 800798a:	637b      	str	r3, [r7, #52]	@ 0x34
 800798c:	f000 bc17 	b.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007990:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007994:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007998:	430b      	orrs	r3, r1
 800799a:	d157      	bne.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800799c:	4b16      	ldr	r3, [pc, #88]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800799e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80079a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80079a6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80079a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80079ac:	d02a      	beq.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 80079ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b0:	2bc0      	cmp	r3, #192	@ 0xc0
 80079b2:	d848      	bhi.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 80079b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b6:	2b80      	cmp	r3, #128	@ 0x80
 80079b8:	d00d      	beq.n	80079d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 80079ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079bc:	2b80      	cmp	r3, #128	@ 0x80
 80079be:	d842      	bhi.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 80079c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d003      	beq.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0xa7e>
 80079c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c8:	2b40      	cmp	r3, #64	@ 0x40
 80079ca:	d011      	beq.n	80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
 80079cc:	e03b      	b.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80079ce:	f7fe f8d3 	bl	8005b78 <HAL_RCC_GetPCLK3Freq>
 80079d2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80079d4:	e3f3      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079d6:	4b08      	ldr	r3, [pc, #32]	@ (80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079e2:	d102      	bne.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0xa9a>
        {
          frequency = HSI_VALUE;
 80079e4:	4b06      	ldr	r3, [pc, #24]	@ (8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80079e6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80079e8:	e3e9      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 80079ea:	2300      	movs	r3, #0
 80079ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079ee:	e3e6      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80079f0:	f7fd ff7a 	bl	80058e8 <HAL_RCC_GetSysClockFreq>
 80079f4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80079f6:	e3e2      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 80079f8:	46020c00 	.word	0x46020c00
 80079fc:	0800cf94 	.word	0x0800cf94
 8007a00:	00f42400 	.word	0x00f42400
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007a04:	4ba3      	ldr	r3, [pc, #652]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 0320 	and.w	r3, r3, #32
 8007a0c:	2b20      	cmp	r3, #32
 8007a0e:	d117      	bne.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a10:	4ba0      	ldr	r3, [pc, #640]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d005      	beq.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
 8007a1c:	4b9d      	ldr	r3, [pc, #628]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	0e1b      	lsrs	r3, r3, #24
 8007a22:	f003 030f 	and.w	r3, r3, #15
 8007a26:	e006      	b.n	8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 8007a28:	4b9a      	ldr	r3, [pc, #616]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007a2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a2e:	041b      	lsls	r3, r3, #16
 8007a30:	0e1b      	lsrs	r3, r3, #24
 8007a32:	f003 030f 	and.w	r3, r3, #15
 8007a36:	4a98      	ldr	r2, [pc, #608]	@ (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8007a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a3c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a3e:	e3be      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 8007a40:	2300      	movs	r3, #0
 8007a42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a44:	e3bb      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      default:
      {
        frequency = 0U;
 8007a46:	2300      	movs	r3, #0
 8007a48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a4a:	e3b8      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8007a4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a50:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8007a54:	430b      	orrs	r3, r1
 8007a56:	d147      	bne.n	8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007a58:	4b8e      	ldr	r3, [pc, #568]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a5e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007a62:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d103      	bne.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007a6a:	f7fe f85d 	bl	8005b28 <HAL_RCC_GetPCLK1Freq>
 8007a6e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007a70:	e3a5      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a78:	d103      	bne.n	8007a82 <HAL_RCCEx_GetPeriphCLKFreq+0xb32>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007a7a:	f7fd ff35 	bl	80058e8 <HAL_RCC_GetSysClockFreq>
 8007a7e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007a80:	e39d      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007a82:	4b84      	ldr	r3, [pc, #528]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a8e:	d106      	bne.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
 8007a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a96:	d102      	bne.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
    {
      frequency = HSI_VALUE;
 8007a98:	4b80      	ldr	r3, [pc, #512]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>)
 8007a9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a9c:	e38f      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007a9e:	4b7d      	ldr	r3, [pc, #500]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 0320 	and.w	r3, r3, #32
 8007aa6:	2b20      	cmp	r3, #32
 8007aa8:	d11b      	bne.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8007aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aac:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007ab0:	d117      	bne.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ab2:	4b78      	ldr	r3, [pc, #480]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d005      	beq.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0xb7a>
 8007abe:	4b75      	ldr	r3, [pc, #468]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	0e1b      	lsrs	r3, r3, #24
 8007ac4:	f003 030f 	and.w	r3, r3, #15
 8007ac8:	e006      	b.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 8007aca:	4b72      	ldr	r3, [pc, #456]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007acc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007ad0:	041b      	lsls	r3, r3, #16
 8007ad2:	0e1b      	lsrs	r3, r3, #24
 8007ad4:	f003 030f 	and.w	r3, r3, #15
 8007ad8:	4a6f      	ldr	r2, [pc, #444]	@ (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8007ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ade:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ae0:	e36d      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ae6:	e36a      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007ae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007aec:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007af0:	430b      	orrs	r3, r1
 8007af2:	d164      	bne.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007af4:	4b67      	ldr	r3, [pc, #412]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007af6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007afa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007afe:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d120      	bne.n	8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0xbf8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007b06:	4b63      	ldr	r3, [pc, #396]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0320 	and.w	r3, r3, #32
 8007b0e:	2b20      	cmp	r3, #32
 8007b10:	d117      	bne.n	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b12:	4b60      	ldr	r3, [pc, #384]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d005      	beq.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0xbda>
 8007b1e:	4b5d      	ldr	r3, [pc, #372]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	0e1b      	lsrs	r3, r3, #24
 8007b24:	f003 030f 	and.w	r3, r3, #15
 8007b28:	e006      	b.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8007b2a:	4b5a      	ldr	r3, [pc, #360]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007b2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b30:	041b      	lsls	r3, r3, #16
 8007b32:	0e1b      	lsrs	r3, r3, #24
 8007b34:	f003 030f 	and.w	r3, r3, #15
 8007b38:	4a57      	ldr	r2, [pc, #348]	@ (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8007b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b40:	e33d      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      else
      {
        frequency = 0U;
 8007b42:	2300      	movs	r3, #0
 8007b44:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b46:	e33a      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007b48:	4b52      	ldr	r3, [pc, #328]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007b4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b56:	d112      	bne.n	8007b7e <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8007b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b5e:	d10e      	bne.n	8007b7e <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007b60:	4b4c      	ldr	r3, [pc, #304]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007b62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b6e:	d102      	bne.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0xc26>
      {
        frequency = LSI_VALUE / 128U;
 8007b70:	23fa      	movs	r3, #250	@ 0xfa
 8007b72:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007b74:	e323      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      else
      {
        frequency = LSI_VALUE;
 8007b76:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007b7a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007b7c:	e31f      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007b7e:	4b45      	ldr	r3, [pc, #276]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b8a:	d106      	bne.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0xc4a>
 8007b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b92:	d102      	bne.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0xc4a>
    {
      frequency = HSI_VALUE;
 8007b94:	4b41      	ldr	r3, [pc, #260]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>)
 8007b96:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b98:	e311      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8007b9a:	4b3e      	ldr	r3, [pc, #248]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007b9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ba0:	f003 0302 	and.w	r3, r3, #2
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d107      	bne.n	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
 8007ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007baa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bae:	d103      	bne.n	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
    {
      frequency = LSE_VALUE;
 8007bb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bb6:	e302      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bbc:	e2ff      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8007bbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bc2:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007bc6:	430b      	orrs	r3, r1
 8007bc8:	d16a      	bne.n	8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007bca:	4b32      	ldr	r3, [pc, #200]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007bcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007bd0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007bd4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d120      	bne.n	8007c1e <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007bdc:	4b2d      	ldr	r3, [pc, #180]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0320 	and.w	r3, r3, #32
 8007be4:	2b20      	cmp	r3, #32
 8007be6:	d117      	bne.n	8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0xcc8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007be8:	4b2a      	ldr	r3, [pc, #168]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d005      	beq.n	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
 8007bf4:	4b27      	ldr	r3, [pc, #156]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	0e1b      	lsrs	r3, r3, #24
 8007bfa:	f003 030f 	and.w	r3, r3, #15
 8007bfe:	e006      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 8007c00:	4b24      	ldr	r3, [pc, #144]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007c02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c06:	041b      	lsls	r3, r3, #16
 8007c08:	0e1b      	lsrs	r3, r3, #24
 8007c0a:	f003 030f 	and.w	r3, r3, #15
 8007c0e:	4a22      	ldr	r2, [pc, #136]	@ (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8007c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c14:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c16:	e2d2      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      else
      {
        frequency = 0U;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c1c:	e2cf      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007c20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c2c:	d112      	bne.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8007c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c34:	d10e      	bne.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007c36:	4b17      	ldr	r3, [pc, #92]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007c38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c44:	d102      	bne.n	8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
      {
        frequency = LSI_VALUE / 128U;
 8007c46:	23fa      	movs	r3, #250	@ 0xfa
 8007c48:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007c4a:	e2b8      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      else
      {
        frequency = LSI_VALUE;
 8007c4c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007c50:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007c52:	e2b4      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007c54:	4b0f      	ldr	r3, [pc, #60]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c60:	d106      	bne.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8007c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c68:	d102      	bne.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
    {
      frequency = HSI_VALUE;
 8007c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>)
 8007c6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c6e:	e2a6      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007c70:	4b08      	ldr	r3, [pc, #32]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007c72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c76:	f003 0302 	and.w	r3, r3, #2
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d107      	bne.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c84:	d103      	bne.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
    {
      frequency = LSE_VALUE;
 8007c86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c8c:	e297      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c92:	e294      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8007c94:	46020c00 	.word	0x46020c00
 8007c98:	0800cf94 	.word	0x0800cf94
 8007c9c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007ca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ca4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007ca8:	430b      	orrs	r3, r1
 8007caa:	d147      	bne.n	8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007cac:	4b9a      	ldr	r3, [pc, #616]	@ (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8007cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007cb2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007cb6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8007cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d103      	bne.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007cbe:	f7fd ff33 	bl	8005b28 <HAL_RCC_GetPCLK1Freq>
 8007cc2:	6378      	str	r0, [r7, #52]	@ 0x34
 8007cc4:	e27b      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8007cc6:	4b94      	ldr	r3, [pc, #592]	@ (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8007cc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ccc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cd4:	d112      	bne.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0xdac>
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007cdc:	d10e      	bne.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0xdac>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007cde:	4b8e      	ldr	r3, [pc, #568]	@ (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8007ce0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ce4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ce8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cec:	d102      	bne.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xda4>
      {
        frequency = LSI_VALUE / 128U;
 8007cee:	23fa      	movs	r3, #250	@ 0xfa
 8007cf0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007cf2:	e264      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      else
      {
        frequency = LSI_VALUE;
 8007cf4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007cf8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007cfa:	e260      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8007cfc:	4b86      	ldr	r3, [pc, #536]	@ (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d08:	d106      	bne.n	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0xdc8>
 8007d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d0c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007d10:	d102      	bne.n	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0xdc8>
    {
      frequency = HSI_VALUE;
 8007d12:	4b82      	ldr	r3, [pc, #520]	@ (8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8007d14:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d16:	e252      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8007d18:	4b7f      	ldr	r3, [pc, #508]	@ (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8007d1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d1e:	f003 0302 	and.w	r3, r3, #2
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d107      	bne.n	8007d36 <HAL_RCCEx_GetPeriphCLKFreq+0xde6>
 8007d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d28:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007d2c:	d103      	bne.n	8007d36 <HAL_RCCEx_GetPeriphCLKFreq+0xde6>
    {
      frequency = LSE_VALUE;
 8007d2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d32:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d34:	e243      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8007d36:	2300      	movs	r3, #0
 8007d38:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d3a:	e240      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8007d3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d40:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8007d44:	430b      	orrs	r3, r1
 8007d46:	d12d      	bne.n	8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007d48:	4b73      	ldr	r3, [pc, #460]	@ (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8007d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d4e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007d52:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007d54:	4b70      	ldr	r3, [pc, #448]	@ (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d60:	d105      	bne.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8007d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d102      	bne.n	8007d6e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = HSE_VALUE;
 8007d68:	4b6d      	ldr	r3, [pc, #436]	@ (8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8007d6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d6c:	e227      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d74:	d107      	bne.n	8007d86 <HAL_RCCEx_GetPeriphCLKFreq+0xe36>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fe fcd4 	bl	8006728 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d82:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d84:	e21b      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8007d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007d8c:	d107      	bne.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d8e:	f107 0318 	add.w	r3, r7, #24
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7fe fe24 	bl	80069e0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d9c:	e20f      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007da2:	e20c      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8007da4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007da8:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8007dac:	430b      	orrs	r3, r1
 8007dae:	d156      	bne.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007db0:	4b59      	ldr	r3, [pc, #356]	@ (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8007db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007db6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007dba:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dbe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007dc2:	d028      	beq.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0xec6>
 8007dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007dca:	d845      	bhi.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
 8007dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007dd2:	d013      	beq.n	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
 8007dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007dda:	d83d      	bhi.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
 8007ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d004      	beq.n	8007dec <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8007de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007de8:	d004      	beq.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0xea4>
 8007dea:	e035      	b.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8007dec:	f7fd feb0 	bl	8005b50 <HAL_RCC_GetPCLK2Freq>
 8007df0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007df2:	e1e4      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007df4:	f7fd fd78 	bl	80058e8 <HAL_RCC_GetSysClockFreq>
 8007df8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007dfa:	e1e0      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007dfc:	4b46      	ldr	r3, [pc, #280]	@ (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e08:	d102      	bne.n	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
        {
          frequency = HSI_VALUE;
 8007e0a:	4b44      	ldr	r3, [pc, #272]	@ (8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8007e0c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007e0e:	e1d6      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 8007e10:	2300      	movs	r3, #0
 8007e12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e14:	e1d3      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007e16:	4b40      	ldr	r3, [pc, #256]	@ (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 0320 	and.w	r3, r3, #32
 8007e1e:	2b20      	cmp	r3, #32
 8007e20:	d117      	bne.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e22:	4b3d      	ldr	r3, [pc, #244]	@ (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d005      	beq.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0xeea>
 8007e2e:	4b3a      	ldr	r3, [pc, #232]	@ (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	0e1b      	lsrs	r3, r3, #24
 8007e34:	f003 030f 	and.w	r3, r3, #15
 8007e38:	e006      	b.n	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8007e3a:	4b37      	ldr	r3, [pc, #220]	@ (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8007e3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e40:	041b      	lsls	r3, r3, #16
 8007e42:	0e1b      	lsrs	r3, r3, #24
 8007e44:	f003 030f 	and.w	r3, r3, #15
 8007e48:	4a36      	ldr	r2, [pc, #216]	@ (8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>)
 8007e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e4e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007e50:	e1b5      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 8007e52:	2300      	movs	r3, #0
 8007e54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e56:	e1b2      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      default:

        frequency = 0U;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e5c:	e1af      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007e5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e62:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8007e66:	430b      	orrs	r3, r1
 8007e68:	d15e      	bne.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007e6a:	4b2b      	ldr	r3, [pc, #172]	@ (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8007e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007e70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007e74:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e78:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007e7c:	d028      	beq.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8007e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007e84:	d845      	bhi.n	8007f12 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8007e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e8c:	d013      	beq.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xf66>
 8007e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e94:	d83d      	bhi.n	8007f12 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8007e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d004      	beq.n	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xf56>
 8007e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ea2:	d004      	beq.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0xf5e>
 8007ea4:	e035      	b.n	8007f12 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007ea6:	f7fd fe3f 	bl	8005b28 <HAL_RCC_GetPCLK1Freq>
 8007eaa:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007eac:	e187      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007eae:	f7fd fd1b 	bl	80058e8 <HAL_RCC_GetSysClockFreq>
 8007eb2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007eb4:	e183      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007eb6:	4b18      	ldr	r3, [pc, #96]	@ (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ebe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ec2:	d102      	bne.n	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
        {
          frequency = HSI_VALUE;
 8007ec4:	4b15      	ldr	r3, [pc, #84]	@ (8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8007ec6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007ec8:	e179      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ece:	e176      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007ed0:	4b11      	ldr	r3, [pc, #68]	@ (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 0320 	and.w	r3, r3, #32
 8007ed8:	2b20      	cmp	r3, #32
 8007eda:	d117      	bne.n	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0xfbc>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007edc:	4b0e      	ldr	r3, [pc, #56]	@ (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d005      	beq.n	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8007ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	0e1b      	lsrs	r3, r3, #24
 8007eee:	f003 030f 	and.w	r3, r3, #15
 8007ef2:	e006      	b.n	8007f02 <HAL_RCCEx_GetPeriphCLKFreq+0xfb2>
 8007ef4:	4b08      	ldr	r3, [pc, #32]	@ (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8007ef6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007efa:	041b      	lsls	r3, r3, #16
 8007efc:	0e1b      	lsrs	r3, r3, #24
 8007efe:	f003 030f 	and.w	r3, r3, #15
 8007f02:	4a08      	ldr	r2, [pc, #32]	@ (8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>)
 8007f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f08:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007f0a:	e158      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f10:	e155      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      default:

        frequency = 0U;
 8007f12:	2300      	movs	r3, #0
 8007f14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f16:	e152      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8007f18:	46020c00 	.word	0x46020c00
 8007f1c:	00f42400 	.word	0x00f42400
 8007f20:	007a1200 	.word	0x007a1200
 8007f24:	0800cf94 	.word	0x0800cf94
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f2c:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8007f30:	430b      	orrs	r3, r1
 8007f32:	d176      	bne.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x10d2>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007f34:	4ba4      	ldr	r3, [pc, #656]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8007f36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f3a:	f003 0318 	and.w	r3, r3, #24
 8007f3e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f42:	2b18      	cmp	r3, #24
 8007f44:	d86a      	bhi.n	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x10cc>
 8007f46:	a201      	add	r2, pc, #4	@ (adr r2, 8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0xffc>)
 8007f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4c:	08007fb1 	.word	0x08007fb1
 8007f50:	0800801d 	.word	0x0800801d
 8007f54:	0800801d 	.word	0x0800801d
 8007f58:	0800801d 	.word	0x0800801d
 8007f5c:	0800801d 	.word	0x0800801d
 8007f60:	0800801d 	.word	0x0800801d
 8007f64:	0800801d 	.word	0x0800801d
 8007f68:	0800801d 	.word	0x0800801d
 8007f6c:	08007fb9 	.word	0x08007fb9
 8007f70:	0800801d 	.word	0x0800801d
 8007f74:	0800801d 	.word	0x0800801d
 8007f78:	0800801d 	.word	0x0800801d
 8007f7c:	0800801d 	.word	0x0800801d
 8007f80:	0800801d 	.word	0x0800801d
 8007f84:	0800801d 	.word	0x0800801d
 8007f88:	0800801d 	.word	0x0800801d
 8007f8c:	08007fc1 	.word	0x08007fc1
 8007f90:	0800801d 	.word	0x0800801d
 8007f94:	0800801d 	.word	0x0800801d
 8007f98:	0800801d 	.word	0x0800801d
 8007f9c:	0800801d 	.word	0x0800801d
 8007fa0:	0800801d 	.word	0x0800801d
 8007fa4:	0800801d 	.word	0x0800801d
 8007fa8:	0800801d 	.word	0x0800801d
 8007fac:	08007fdb 	.word	0x08007fdb
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007fb0:	f7fd fde2 	bl	8005b78 <HAL_RCC_GetPCLK3Freq>
 8007fb4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007fb6:	e102      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007fb8:	f7fd fc96 	bl	80058e8 <HAL_RCC_GetSysClockFreq>
 8007fbc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007fbe:	e0fe      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007fc0:	4b81      	ldr	r3, [pc, #516]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fcc:	d102      	bne.n	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
        {
          frequency = HSI_VALUE;
 8007fce:	4b7f      	ldr	r3, [pc, #508]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 8007fd0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007fd2:	e0f4      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007fd8:	e0f1      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007fda:	4b7b      	ldr	r3, [pc, #492]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 0320 	and.w	r3, r3, #32
 8007fe2:	2b20      	cmp	r3, #32
 8007fe4:	d117      	bne.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0x10c6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007fe6:	4b78      	ldr	r3, [pc, #480]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d005      	beq.n	8007ffe <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
 8007ff2:	4b75      	ldr	r3, [pc, #468]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	0e1b      	lsrs	r3, r3, #24
 8007ff8:	f003 030f 	and.w	r3, r3, #15
 8007ffc:	e006      	b.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>
 8007ffe:	4b72      	ldr	r3, [pc, #456]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8008000:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008004:	041b      	lsls	r3, r3, #16
 8008006:	0e1b      	lsrs	r3, r3, #24
 8008008:	f003 030f 	and.w	r3, r3, #15
 800800c:	4a70      	ldr	r2, [pc, #448]	@ (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800800e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008012:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008014:	e0d3      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 8008016:	2300      	movs	r3, #0
 8008018:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800801a:	e0d0      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      default:

        frequency = 0U;
 800801c:	2300      	movs	r3, #0
 800801e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008020:	e0cd      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8008022:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008026:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800802a:	430b      	orrs	r3, r1
 800802c:	d155      	bne.n	80080da <HAL_RCCEx_GetPeriphCLKFreq+0x118a>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800802e:	4b66      	ldr	r3, [pc, #408]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8008030:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008034:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008038:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800803a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008040:	d013      	beq.n	800806a <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8008042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008044:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008048:	d844      	bhi.n	80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1184>
 800804a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800804c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008050:	d013      	beq.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x112a>
 8008052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008054:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008058:	d83c      	bhi.n	80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1184>
 800805a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805c:	2b00      	cmp	r3, #0
 800805e:	d014      	beq.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8008060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008062:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008066:	d014      	beq.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x1142>
 8008068:	e034      	b.n	80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1184>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800806a:	f107 0318 	add.w	r3, r7, #24
 800806e:	4618      	mov	r0, r3
 8008070:	f7fe fcb6 	bl	80069e0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008078:	e0a1      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800807a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800807e:	4618      	mov	r0, r3
 8008080:	f7fe fb52 	bl	8006728 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008086:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008088:	e099      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800808a:	f7fd fc2d 	bl	80058e8 <HAL_RCC_GetSysClockFreq>
 800808e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008090:	e095      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008092:	4b4d      	ldr	r3, [pc, #308]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 0320 	and.w	r3, r3, #32
 800809a:	2b20      	cmp	r3, #32
 800809c:	d117      	bne.n	80080ce <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800809e:	4b4a      	ldr	r3, [pc, #296]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d005      	beq.n	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1166>
 80080aa:	4b47      	ldr	r3, [pc, #284]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	0e1b      	lsrs	r3, r3, #24
 80080b0:	f003 030f 	and.w	r3, r3, #15
 80080b4:	e006      	b.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1174>
 80080b6:	4b44      	ldr	r3, [pc, #272]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 80080b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80080bc:	041b      	lsls	r3, r3, #16
 80080be:	0e1b      	lsrs	r3, r3, #24
 80080c0:	f003 030f 	and.w	r3, r3, #15
 80080c4:	4a42      	ldr	r2, [pc, #264]	@ (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80080c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080ca:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80080cc:	e077      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 80080ce:	2300      	movs	r3, #0
 80080d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080d2:	e074      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      default:

        frequency = 0U;
 80080d4:	2300      	movs	r3, #0
 80080d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080d8:	e071      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80080da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080de:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80080e2:	430b      	orrs	r3, r1
 80080e4:	d131      	bne.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80080e6:	4b38      	ldr	r3, [pc, #224]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 80080e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80080ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80080f0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80080f2:	4b35      	ldr	r3, [pc, #212]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 80080f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80080f8:	f003 0302 	and.w	r3, r3, #2
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d106      	bne.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8008100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008102:	2b00      	cmp	r3, #0
 8008104:	d103      	bne.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
    {
      frequency = LSE_VALUE;
 8008106:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800810a:	637b      	str	r3, [r7, #52]	@ 0x34
 800810c:	e057      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800810e:	4b2e      	ldr	r3, [pc, #184]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8008110:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008114:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008118:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800811c:	d112      	bne.n	8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x11f4>
 800811e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008120:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008124:	d10e      	bne.n	8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x11f4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008126:	4b28      	ldr	r3, [pc, #160]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8008128:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800812c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008130:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008134:	d102      	bne.n	800813c <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
      {
        frequency = LSI_VALUE / 128U;
 8008136:	23fa      	movs	r3, #250	@ 0xfa
 8008138:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800813a:	e040      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      else
      {
        frequency = LSI_VALUE;
 800813c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008140:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008142:	e03c      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8008144:	2300      	movs	r3, #0
 8008146:	637b      	str	r3, [r7, #52]	@ 0x34
 8008148:	e039      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800814a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800814e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008152:	430b      	orrs	r3, r1
 8008154:	d131      	bne.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0x126a>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008156:	4b1c      	ldr	r3, [pc, #112]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8008158:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800815c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008160:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008162:	4b19      	ldr	r3, [pc, #100]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800816a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800816e:	d105      	bne.n	800817c <HAL_RCCEx_GetPeriphCLKFreq+0x122c>
 8008170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008172:	2b00      	cmp	r3, #0
 8008174:	d102      	bne.n	800817c <HAL_RCCEx_GetPeriphCLKFreq+0x122c>
    {
      frequency = HSI48_VALUE;
 8008176:	4b17      	ldr	r3, [pc, #92]	@ (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008178:	637b      	str	r3, [r7, #52]	@ 0x34
 800817a:	e020      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800817c:	4b12      	ldr	r3, [pc, #72]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008184:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008188:	d106      	bne.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 800818a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800818c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008190:	d102      	bne.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
    {
      frequency = HSI48_VALUE >> 1U ;
 8008192:	4b11      	ldr	r3, [pc, #68]	@ (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008194:	637b      	str	r3, [r7, #52]	@ 0x34
 8008196:	e012      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8008198:	4b0b      	ldr	r3, [pc, #44]	@ (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081a4:	d106      	bne.n	80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>
 80081a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081ac:	d102      	bne.n	80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>
    {
      frequency = HSI_VALUE;
 80081ae:	4b07      	ldr	r3, [pc, #28]	@ (80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 80081b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80081b2:	e004      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80081b4:	2300      	movs	r3, #0
 80081b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80081b8:	e001      	b.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80081ba:	2300      	movs	r3, #0
 80081bc:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 80081be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3738      	adds	r7, #56	@ 0x38
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	46020c00 	.word	0x46020c00
 80081cc:	00f42400 	.word	0x00f42400
 80081d0:	0800cf94 	.word	0x0800cf94
 80081d4:	02dc6c00 	.word	0x02dc6c00
 80081d8:	016e3600 	.word	0x016e3600

080081dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80081e4:	4b47      	ldr	r3, [pc, #284]	@ (8008304 <RCCEx_PLL2_Config+0x128>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a46      	ldr	r2, [pc, #280]	@ (8008304 <RCCEx_PLL2_Config+0x128>)
 80081ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80081ee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80081f0:	f7fa fdf8 	bl	8002de4 <HAL_GetTick>
 80081f4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80081f6:	e008      	b.n	800820a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80081f8:	f7fa fdf4 	bl	8002de4 <HAL_GetTick>
 80081fc:	4602      	mov	r2, r0
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	2b02      	cmp	r3, #2
 8008204:	d901      	bls.n	800820a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008206:	2303      	movs	r3, #3
 8008208:	e077      	b.n	80082fa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800820a:	4b3e      	ldr	r3, [pc, #248]	@ (8008304 <RCCEx_PLL2_Config+0x128>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008212:	2b00      	cmp	r3, #0
 8008214:	d1f0      	bne.n	80081f8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008216:	4b3b      	ldr	r3, [pc, #236]	@ (8008304 <RCCEx_PLL2_Config+0x128>)
 8008218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800821a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800821e:	f023 0303 	bic.w	r3, r3, #3
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	6811      	ldr	r1, [r2, #0]
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	6852      	ldr	r2, [r2, #4]
 800822a:	3a01      	subs	r2, #1
 800822c:	0212      	lsls	r2, r2, #8
 800822e:	430a      	orrs	r2, r1
 8008230:	4934      	ldr	r1, [pc, #208]	@ (8008304 <RCCEx_PLL2_Config+0x128>)
 8008232:	4313      	orrs	r3, r2
 8008234:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8008236:	4b33      	ldr	r3, [pc, #204]	@ (8008304 <RCCEx_PLL2_Config+0x128>)
 8008238:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800823a:	4b33      	ldr	r3, [pc, #204]	@ (8008308 <RCCEx_PLL2_Config+0x12c>)
 800823c:	4013      	ands	r3, r2
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	6892      	ldr	r2, [r2, #8]
 8008242:	3a01      	subs	r2, #1
 8008244:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	68d2      	ldr	r2, [r2, #12]
 800824c:	3a01      	subs	r2, #1
 800824e:	0252      	lsls	r2, r2, #9
 8008250:	b292      	uxth	r2, r2
 8008252:	4311      	orrs	r1, r2
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	6912      	ldr	r2, [r2, #16]
 8008258:	3a01      	subs	r2, #1
 800825a:	0412      	lsls	r2, r2, #16
 800825c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008260:	4311      	orrs	r1, r2
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	6952      	ldr	r2, [r2, #20]
 8008266:	3a01      	subs	r2, #1
 8008268:	0612      	lsls	r2, r2, #24
 800826a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800826e:	430a      	orrs	r2, r1
 8008270:	4924      	ldr	r1, [pc, #144]	@ (8008304 <RCCEx_PLL2_Config+0x128>)
 8008272:	4313      	orrs	r3, r2
 8008274:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008276:	4b23      	ldr	r3, [pc, #140]	@ (8008304 <RCCEx_PLL2_Config+0x128>)
 8008278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800827a:	f023 020c 	bic.w	r2, r3, #12
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	4920      	ldr	r1, [pc, #128]	@ (8008304 <RCCEx_PLL2_Config+0x128>)
 8008284:	4313      	orrs	r3, r2
 8008286:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008288:	4b1e      	ldr	r3, [pc, #120]	@ (8008304 <RCCEx_PLL2_Config+0x128>)
 800828a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a1b      	ldr	r3, [r3, #32]
 8008290:	491c      	ldr	r1, [pc, #112]	@ (8008304 <RCCEx_PLL2_Config+0x128>)
 8008292:	4313      	orrs	r3, r2
 8008294:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8008296:	4b1b      	ldr	r3, [pc, #108]	@ (8008304 <RCCEx_PLL2_Config+0x128>)
 8008298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800829a:	4a1a      	ldr	r2, [pc, #104]	@ (8008304 <RCCEx_PLL2_Config+0x128>)
 800829c:	f023 0310 	bic.w	r3, r3, #16
 80082a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80082a2:	4b18      	ldr	r3, [pc, #96]	@ (8008304 <RCCEx_PLL2_Config+0x128>)
 80082a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80082aa:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	69d2      	ldr	r2, [r2, #28]
 80082b2:	00d2      	lsls	r2, r2, #3
 80082b4:	4913      	ldr	r1, [pc, #76]	@ (8008304 <RCCEx_PLL2_Config+0x128>)
 80082b6:	4313      	orrs	r3, r2
 80082b8:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80082ba:	4b12      	ldr	r3, [pc, #72]	@ (8008304 <RCCEx_PLL2_Config+0x128>)
 80082bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082be:	4a11      	ldr	r2, [pc, #68]	@ (8008304 <RCCEx_PLL2_Config+0x128>)
 80082c0:	f043 0310 	orr.w	r3, r3, #16
 80082c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80082c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008304 <RCCEx_PLL2_Config+0x128>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a0e      	ldr	r2, [pc, #56]	@ (8008304 <RCCEx_PLL2_Config+0x128>)
 80082cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80082d0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80082d2:	f7fa fd87 	bl	8002de4 <HAL_GetTick>
 80082d6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80082d8:	e008      	b.n	80082ec <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80082da:	f7fa fd83 	bl	8002de4 <HAL_GetTick>
 80082de:	4602      	mov	r2, r0
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	1ad3      	subs	r3, r2, r3
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d901      	bls.n	80082ec <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80082e8:	2303      	movs	r3, #3
 80082ea:	e006      	b.n	80082fa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80082ec:	4b05      	ldr	r3, [pc, #20]	@ (8008304 <RCCEx_PLL2_Config+0x128>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d0f0      	beq.n	80082da <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80082f8:	2300      	movs	r3, #0

}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	46020c00 	.word	0x46020c00
 8008308:	80800000 	.word	0x80800000

0800830c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008314:	4b47      	ldr	r3, [pc, #284]	@ (8008434 <RCCEx_PLL3_Config+0x128>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a46      	ldr	r2, [pc, #280]	@ (8008434 <RCCEx_PLL3_Config+0x128>)
 800831a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800831e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008320:	f7fa fd60 	bl	8002de4 <HAL_GetTick>
 8008324:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008326:	e008      	b.n	800833a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008328:	f7fa fd5c 	bl	8002de4 <HAL_GetTick>
 800832c:	4602      	mov	r2, r0
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	2b02      	cmp	r3, #2
 8008334:	d901      	bls.n	800833a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e077      	b.n	800842a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800833a:	4b3e      	ldr	r3, [pc, #248]	@ (8008434 <RCCEx_PLL3_Config+0x128>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008342:	2b00      	cmp	r3, #0
 8008344:	d1f0      	bne.n	8008328 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008346:	4b3b      	ldr	r3, [pc, #236]	@ (8008434 <RCCEx_PLL3_Config+0x128>)
 8008348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800834a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800834e:	f023 0303 	bic.w	r3, r3, #3
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	6811      	ldr	r1, [r2, #0]
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	6852      	ldr	r2, [r2, #4]
 800835a:	3a01      	subs	r2, #1
 800835c:	0212      	lsls	r2, r2, #8
 800835e:	430a      	orrs	r2, r1
 8008360:	4934      	ldr	r1, [pc, #208]	@ (8008434 <RCCEx_PLL3_Config+0x128>)
 8008362:	4313      	orrs	r3, r2
 8008364:	630b      	str	r3, [r1, #48]	@ 0x30
 8008366:	4b33      	ldr	r3, [pc, #204]	@ (8008434 <RCCEx_PLL3_Config+0x128>)
 8008368:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800836a:	4b33      	ldr	r3, [pc, #204]	@ (8008438 <RCCEx_PLL3_Config+0x12c>)
 800836c:	4013      	ands	r3, r2
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	6892      	ldr	r2, [r2, #8]
 8008372:	3a01      	subs	r2, #1
 8008374:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	68d2      	ldr	r2, [r2, #12]
 800837c:	3a01      	subs	r2, #1
 800837e:	0252      	lsls	r2, r2, #9
 8008380:	b292      	uxth	r2, r2
 8008382:	4311      	orrs	r1, r2
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	6912      	ldr	r2, [r2, #16]
 8008388:	3a01      	subs	r2, #1
 800838a:	0412      	lsls	r2, r2, #16
 800838c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008390:	4311      	orrs	r1, r2
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	6952      	ldr	r2, [r2, #20]
 8008396:	3a01      	subs	r2, #1
 8008398:	0612      	lsls	r2, r2, #24
 800839a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800839e:	430a      	orrs	r2, r1
 80083a0:	4924      	ldr	r1, [pc, #144]	@ (8008434 <RCCEx_PLL3_Config+0x128>)
 80083a2:	4313      	orrs	r3, r2
 80083a4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80083a6:	4b23      	ldr	r3, [pc, #140]	@ (8008434 <RCCEx_PLL3_Config+0x128>)
 80083a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083aa:	f023 020c 	bic.w	r2, r3, #12
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	699b      	ldr	r3, [r3, #24]
 80083b2:	4920      	ldr	r1, [pc, #128]	@ (8008434 <RCCEx_PLL3_Config+0x128>)
 80083b4:	4313      	orrs	r3, r2
 80083b6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80083b8:	4b1e      	ldr	r3, [pc, #120]	@ (8008434 <RCCEx_PLL3_Config+0x128>)
 80083ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a1b      	ldr	r3, [r3, #32]
 80083c0:	491c      	ldr	r1, [pc, #112]	@ (8008434 <RCCEx_PLL3_Config+0x128>)
 80083c2:	4313      	orrs	r3, r2
 80083c4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80083c6:	4b1b      	ldr	r3, [pc, #108]	@ (8008434 <RCCEx_PLL3_Config+0x128>)
 80083c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ca:	4a1a      	ldr	r2, [pc, #104]	@ (8008434 <RCCEx_PLL3_Config+0x128>)
 80083cc:	f023 0310 	bic.w	r3, r3, #16
 80083d0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80083d2:	4b18      	ldr	r3, [pc, #96]	@ (8008434 <RCCEx_PLL3_Config+0x128>)
 80083d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80083da:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	69d2      	ldr	r2, [r2, #28]
 80083e2:	00d2      	lsls	r2, r2, #3
 80083e4:	4913      	ldr	r1, [pc, #76]	@ (8008434 <RCCEx_PLL3_Config+0x128>)
 80083e6:	4313      	orrs	r3, r2
 80083e8:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80083ea:	4b12      	ldr	r3, [pc, #72]	@ (8008434 <RCCEx_PLL3_Config+0x128>)
 80083ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ee:	4a11      	ldr	r2, [pc, #68]	@ (8008434 <RCCEx_PLL3_Config+0x128>)
 80083f0:	f043 0310 	orr.w	r3, r3, #16
 80083f4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80083f6:	4b0f      	ldr	r3, [pc, #60]	@ (8008434 <RCCEx_PLL3_Config+0x128>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a0e      	ldr	r2, [pc, #56]	@ (8008434 <RCCEx_PLL3_Config+0x128>)
 80083fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008400:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008402:	f7fa fcef 	bl	8002de4 <HAL_GetTick>
 8008406:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008408:	e008      	b.n	800841c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800840a:	f7fa fceb 	bl	8002de4 <HAL_GetTick>
 800840e:	4602      	mov	r2, r0
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	1ad3      	subs	r3, r2, r3
 8008414:	2b02      	cmp	r3, #2
 8008416:	d901      	bls.n	800841c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008418:	2303      	movs	r3, #3
 800841a:	e006      	b.n	800842a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800841c:	4b05      	ldr	r3, [pc, #20]	@ (8008434 <RCCEx_PLL3_Config+0x128>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d0f0      	beq.n	800840a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	46020c00 	.word	0x46020c00
 8008438:	80800000 	.word	0x80800000

0800843c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d071      	beq.n	8008532 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008454:	b2db      	uxtb	r3, r3
 8008456:	2b00      	cmp	r3, #0
 8008458:	d106      	bne.n	8008468 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f7f9 ff8a 	bl	800237c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2202      	movs	r2, #2
 800846c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008470:	4b32      	ldr	r3, [pc, #200]	@ (800853c <HAL_RTC_Init+0x100>)
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	f003 0310 	and.w	r3, r3, #16
 8008478:	2b10      	cmp	r3, #16
 800847a:	d051      	beq.n	8008520 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800847c:	4b2f      	ldr	r3, [pc, #188]	@ (800853c <HAL_RTC_Init+0x100>)
 800847e:	22ca      	movs	r2, #202	@ 0xca
 8008480:	625a      	str	r2, [r3, #36]	@ 0x24
 8008482:	4b2e      	ldr	r3, [pc, #184]	@ (800853c <HAL_RTC_Init+0x100>)
 8008484:	2253      	movs	r2, #83	@ 0x53
 8008486:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fa6d 	bl	8008968 <RTC_EnterInitMode>
 800848e:	4603      	mov	r3, r0
 8008490:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8008492:	7bfb      	ldrb	r3, [r7, #15]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d13f      	bne.n	8008518 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008498:	4b28      	ldr	r3, [pc, #160]	@ (800853c <HAL_RTC_Init+0x100>)
 800849a:	699b      	ldr	r3, [r3, #24]
 800849c:	4a27      	ldr	r2, [pc, #156]	@ (800853c <HAL_RTC_Init+0x100>)
 800849e:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 80084a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084a6:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80084a8:	4b24      	ldr	r3, [pc, #144]	@ (800853c <HAL_RTC_Init+0x100>)
 80084aa:	699a      	ldr	r2, [r3, #24]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6859      	ldr	r1, [r3, #4]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	4319      	orrs	r1, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	699b      	ldr	r3, [r3, #24]
 80084ba:	430b      	orrs	r3, r1
 80084bc:	491f      	ldr	r1, [pc, #124]	@ (800853c <HAL_RTC_Init+0x100>)
 80084be:	4313      	orrs	r3, r2
 80084c0:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	68da      	ldr	r2, [r3, #12]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	041b      	lsls	r3, r3, #16
 80084cc:	491b      	ldr	r1, [pc, #108]	@ (800853c <HAL_RTC_Init+0x100>)
 80084ce:	4313      	orrs	r3, r2
 80084d0:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80084d2:	4b1a      	ldr	r3, [pc, #104]	@ (800853c <HAL_RTC_Init+0x100>)
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084e2:	430b      	orrs	r3, r1
 80084e4:	4915      	ldr	r1, [pc, #84]	@ (800853c <HAL_RTC_Init+0x100>)
 80084e6:	4313      	orrs	r3, r2
 80084e8:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fa78 	bl	80089e0 <RTC_ExitInitMode>
 80084f0:	4603      	mov	r3, r0
 80084f2:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 80084f4:	7bfb      	ldrb	r3, [r7, #15]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10e      	bne.n	8008518 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80084fa:	4b10      	ldr	r3, [pc, #64]	@ (800853c <HAL_RTC_Init+0x100>)
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a19      	ldr	r1, [r3, #32]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	69db      	ldr	r3, [r3, #28]
 800850a:	4319      	orrs	r1, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	695b      	ldr	r3, [r3, #20]
 8008510:	430b      	orrs	r3, r1
 8008512:	490a      	ldr	r1, [pc, #40]	@ (800853c <HAL_RTC_Init+0x100>)
 8008514:	4313      	orrs	r3, r2
 8008516:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008518:	4b08      	ldr	r3, [pc, #32]	@ (800853c <HAL_RTC_Init+0x100>)
 800851a:	22ff      	movs	r2, #255	@ 0xff
 800851c:	625a      	str	r2, [r3, #36]	@ 0x24
 800851e:	e001      	b.n	8008524 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8008520:	2300      	movs	r3, #0
 8008522:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008524:	7bfb      	ldrb	r3, [r7, #15]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d103      	bne.n	8008532 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2201      	movs	r2, #1
 800852e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8008532:	7bfb      	ldrb	r3, [r7, #15]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	46007800 	.word	0x46007800

08008540 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008540:	b590      	push	{r4, r7, lr}
 8008542:	b087      	sub	sp, #28
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008552:	2b01      	cmp	r3, #1
 8008554:	d101      	bne.n	800855a <HAL_RTC_SetTime+0x1a>
 8008556:	2302      	movs	r3, #2
 8008558:	e088      	b.n	800866c <HAL_RTC_SetTime+0x12c>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2201      	movs	r2, #1
 800855e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2202      	movs	r2, #2
 8008566:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800856a:	4b42      	ldr	r3, [pc, #264]	@ (8008674 <HAL_RTC_SetTime+0x134>)
 800856c:	22ca      	movs	r2, #202	@ 0xca
 800856e:	625a      	str	r2, [r3, #36]	@ 0x24
 8008570:	4b40      	ldr	r3, [pc, #256]	@ (8008674 <HAL_RTC_SetTime+0x134>)
 8008572:	2253      	movs	r2, #83	@ 0x53
 8008574:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f000 f9f6 	bl	8008968 <RTC_EnterInitMode>
 800857c:	4603      	mov	r3, r0
 800857e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008580:	7cfb      	ldrb	r3, [r7, #19]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d163      	bne.n	800864e <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8008586:	4b3b      	ldr	r3, [pc, #236]	@ (8008674 <HAL_RTC_SetTime+0x134>)
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800858e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008592:	d057      	beq.n	8008644 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d125      	bne.n	80085e6 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800859a:	4b36      	ldr	r3, [pc, #216]	@ (8008674 <HAL_RTC_SetTime+0x134>)
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d102      	bne.n	80085ac <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	2200      	movs	r2, #0
 80085aa:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	4618      	mov	r0, r3
 80085b2:	f000 fa53 	bl	8008a5c <RTC_ByteToBcd2>
 80085b6:	4603      	mov	r3, r0
 80085b8:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	785b      	ldrb	r3, [r3, #1]
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 fa4c 	bl	8008a5c <RTC_ByteToBcd2>
 80085c4:	4603      	mov	r3, r0
 80085c6:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80085c8:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	789b      	ldrb	r3, [r3, #2]
 80085ce:	4618      	mov	r0, r3
 80085d0:	f000 fa44 	bl	8008a5c <RTC_ByteToBcd2>
 80085d4:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80085d6:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	78db      	ldrb	r3, [r3, #3]
 80085de:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80085e0:	4313      	orrs	r3, r2
 80085e2:	617b      	str	r3, [r7, #20]
 80085e4:	e017      	b.n	8008616 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80085e6:	4b23      	ldr	r3, [pc, #140]	@ (8008674 <HAL_RTC_SetTime+0x134>)
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d102      	bne.n	80085f8 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	2200      	movs	r2, #0
 80085f6:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	785b      	ldrb	r3, [r3, #1]
 8008602:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008604:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800860a:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	78db      	ldrb	r3, [r3, #3]
 8008610:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008612:	4313      	orrs	r3, r2
 8008614:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8008616:	4a17      	ldr	r2, [pc, #92]	@ (8008674 <HAL_RTC_SetTime+0x134>)
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800861e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8008622:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8008624:	4b13      	ldr	r3, [pc, #76]	@ (8008674 <HAL_RTC_SetTime+0x134>)
 8008626:	699b      	ldr	r3, [r3, #24]
 8008628:	4a12      	ldr	r2, [pc, #72]	@ (8008674 <HAL_RTC_SetTime+0x134>)
 800862a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800862e:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8008630:	4b10      	ldr	r3, [pc, #64]	@ (8008674 <HAL_RTC_SetTime+0x134>)
 8008632:	699a      	ldr	r2, [r3, #24]
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	68d9      	ldr	r1, [r3, #12]
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	430b      	orrs	r3, r1
 800863e:	490d      	ldr	r1, [pc, #52]	@ (8008674 <HAL_RTC_SetTime+0x134>)
 8008640:	4313      	orrs	r3, r2
 8008642:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008644:	68f8      	ldr	r0, [r7, #12]
 8008646:	f000 f9cb 	bl	80089e0 <RTC_ExitInitMode>
 800864a:	4603      	mov	r3, r0
 800864c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800864e:	4b09      	ldr	r3, [pc, #36]	@ (8008674 <HAL_RTC_SetTime+0x134>)
 8008650:	22ff      	movs	r2, #255	@ 0xff
 8008652:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8008654:	7cfb      	ldrb	r3, [r7, #19]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d103      	bne.n	8008662 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2201      	movs	r2, #1
 800865e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2200      	movs	r2, #0
 8008666:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800866a:	7cfb      	ldrb	r3, [r7, #19]
}
 800866c:	4618      	mov	r0, r3
 800866e:	371c      	adds	r7, #28
 8008670:	46bd      	mov	sp, r7
 8008672:	bd90      	pop	{r4, r7, pc}
 8008674:	46007800 	.word	0x46007800

08008678 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b086      	sub	sp, #24
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8008684:	4b34      	ldr	r3, [pc, #208]	@ (8008758 <HAL_RTC_GetTime+0xe0>)
 8008686:	689a      	ldr	r2, [r3, #8]
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	605a      	str	r2, [r3, #4]


  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800868c:	4b32      	ldr	r3, [pc, #200]	@ (8008758 <HAL_RTC_GetTime+0xe0>)
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008694:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008698:	d04a      	beq.n	8008730 <HAL_RTC_GetTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800869a:	4b2f      	ldr	r3, [pc, #188]	@ (8008758 <HAL_RTC_GetTime+0xe0>)
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 80086a6:	4b2c      	ldr	r3, [pc, #176]	@ (8008758 <HAL_RTC_GetTime+0xe0>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80086ae:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80086b2:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	0c1b      	lsrs	r3, r3, #16
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80086be:	b2da      	uxtb	r2, r3
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	0a1b      	lsrs	r3, r3, #8
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086ce:	b2da      	uxtb	r2, r3
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086dc:	b2da      	uxtb	r2, r3
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	0d9b      	lsrs	r3, r3, #22
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	f003 0301 	and.w	r3, r3, #1
 80086ec:	b2da      	uxtb	r2, r3
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d12a      	bne.n	800874e <HAL_RTC_GetTime+0xd6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	4618      	mov	r0, r3
 80086fe:	f000 f9cd 	bl	8008a9c <RTC_Bcd2ToByte>
 8008702:	4603      	mov	r3, r0
 8008704:	461a      	mov	r2, r3
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	785b      	ldrb	r3, [r3, #1]
 800870e:	4618      	mov	r0, r3
 8008710:	f000 f9c4 	bl	8008a9c <RTC_Bcd2ToByte>
 8008714:	4603      	mov	r3, r0
 8008716:	461a      	mov	r2, r3
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	789b      	ldrb	r3, [r3, #2]
 8008720:	4618      	mov	r0, r3
 8008722:	f000 f9bb 	bl	8008a9c <RTC_Bcd2ToByte>
 8008726:	4603      	mov	r3, r0
 8008728:	461a      	mov	r2, r3
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	709a      	strb	r2, [r3, #2]
 800872e:	e00e      	b.n	800874e <HAL_RTC_GetTime+0xd6>
    }
  }
  else
  {
    /* Initialize structure fields */
    sTime->Hours = 0U;
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	2200      	movs	r2, #0
 8008734:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = 0U;
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	2200      	movs	r2, #0
 800873a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = 0U;
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	2200      	movs	r2, #0
 8008740:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = 0U;
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	2200      	movs	r2, #0
 8008746:	70da      	strb	r2, [r3, #3]
    sTime->SecondFraction = 0U;
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	2200      	movs	r2, #0
 800874c:	609a      	str	r2, [r3, #8]
  }

  return HAL_OK;
 800874e:	2300      	movs	r3, #0
}
 8008750:	4618      	mov	r0, r3
 8008752:	3718      	adds	r7, #24
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	46007800 	.word	0x46007800

0800875c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800875c:	b590      	push	{r4, r7, lr}
 800875e:	b087      	sub	sp, #28
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800876e:	2b01      	cmp	r3, #1
 8008770:	d101      	bne.n	8008776 <HAL_RTC_SetDate+0x1a>
 8008772:	2302      	movs	r3, #2
 8008774:	e071      	b.n	800885a <HAL_RTC_SetDate+0xfe>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2202      	movs	r2, #2
 8008782:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10e      	bne.n	80087aa <HAL_RTC_SetDate+0x4e>
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	785b      	ldrb	r3, [r3, #1]
 8008790:	f003 0310 	and.w	r3, r3, #16
 8008794:	2b00      	cmp	r3, #0
 8008796:	d008      	beq.n	80087aa <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	785b      	ldrb	r3, [r3, #1]
 800879c:	f023 0310 	bic.w	r3, r3, #16
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	330a      	adds	r3, #10
 80087a4:	b2da      	uxtb	r2, r3
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d11c      	bne.n	80087ea <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	78db      	ldrb	r3, [r3, #3]
 80087b4:	4618      	mov	r0, r3
 80087b6:	f000 f951 	bl	8008a5c <RTC_ByteToBcd2>
 80087ba:	4603      	mov	r3, r0
 80087bc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	785b      	ldrb	r3, [r3, #1]
 80087c2:	4618      	mov	r0, r3
 80087c4:	f000 f94a 	bl	8008a5c <RTC_ByteToBcd2>
 80087c8:	4603      	mov	r3, r0
 80087ca:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80087cc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	789b      	ldrb	r3, [r3, #2]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 f942 	bl	8008a5c <RTC_ByteToBcd2>
 80087d8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80087da:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80087e4:	4313      	orrs	r3, r2
 80087e6:	617b      	str	r3, [r7, #20]
 80087e8:	e00e      	b.n	8008808 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	78db      	ldrb	r3, [r3, #3]
 80087ee:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	785b      	ldrb	r3, [r3, #1]
 80087f4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80087f6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80087fc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008804:	4313      	orrs	r3, r2
 8008806:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008808:	4b16      	ldr	r3, [pc, #88]	@ (8008864 <HAL_RTC_SetDate+0x108>)
 800880a:	22ca      	movs	r2, #202	@ 0xca
 800880c:	625a      	str	r2, [r3, #36]	@ 0x24
 800880e:	4b15      	ldr	r3, [pc, #84]	@ (8008864 <HAL_RTC_SetDate+0x108>)
 8008810:	2253      	movs	r2, #83	@ 0x53
 8008812:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	f000 f8a7 	bl	8008968 <RTC_EnterInitMode>
 800881a:	4603      	mov	r3, r0
 800881c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800881e:	7cfb      	ldrb	r3, [r7, #19]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d10b      	bne.n	800883c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8008824:	4a0f      	ldr	r2, [pc, #60]	@ (8008864 <HAL_RTC_SetDate+0x108>)
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800882c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008830:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008832:	68f8      	ldr	r0, [r7, #12]
 8008834:	f000 f8d4 	bl	80089e0 <RTC_ExitInitMode>
 8008838:	4603      	mov	r3, r0
 800883a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800883c:	4b09      	ldr	r3, [pc, #36]	@ (8008864 <HAL_RTC_SetDate+0x108>)
 800883e:	22ff      	movs	r2, #255	@ 0xff
 8008840:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8008842:	7cfb      	ldrb	r3, [r7, #19]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d103      	bne.n	8008850 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8008858:	7cfb      	ldrb	r3, [r7, #19]
}
 800885a:	4618      	mov	r0, r3
 800885c:	371c      	adds	r7, #28
 800885e:	46bd      	mov	sp, r7
 8008860:	bd90      	pop	{r4, r7, pc}
 8008862:	bf00      	nop
 8008864:	46007800 	.word	0x46007800

08008868 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b086      	sub	sp, #24
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8008874:	4b22      	ldr	r3, [pc, #136]	@ (8008900 <HAL_RTC_GetDate+0x98>)
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800887c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008880:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	0c1b      	lsrs	r3, r3, #16
 8008886:	b2da      	uxtb	r2, r3
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	0a1b      	lsrs	r3, r3, #8
 8008890:	b2db      	uxtb	r3, r3
 8008892:	f003 031f 	and.w	r3, r3, #31
 8008896:	b2da      	uxtb	r2, r3
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088a4:	b2da      	uxtb	r2, r3
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	0b5b      	lsrs	r3, r3, #13
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	f003 0307 	and.w	r3, r3, #7
 80088b4:	b2da      	uxtb	r2, r3
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d11a      	bne.n	80088f6 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	78db      	ldrb	r3, [r3, #3]
 80088c4:	4618      	mov	r0, r3
 80088c6:	f000 f8e9 	bl	8008a9c <RTC_Bcd2ToByte>
 80088ca:	4603      	mov	r3, r0
 80088cc:	461a      	mov	r2, r3
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	785b      	ldrb	r3, [r3, #1]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f000 f8e0 	bl	8008a9c <RTC_Bcd2ToByte>
 80088dc:	4603      	mov	r3, r0
 80088de:	461a      	mov	r2, r3
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	789b      	ldrb	r3, [r3, #2]
 80088e8:	4618      	mov	r0, r3
 80088ea:	f000 f8d7 	bl	8008a9c <RTC_Bcd2ToByte>
 80088ee:	4603      	mov	r3, r0
 80088f0:	461a      	mov	r2, r3
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80088f6:	2300      	movs	r3, #0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3718      	adds	r7, #24
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	46007800 	.word	0x46007800

08008904 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800890c:	4b15      	ldr	r3, [pc, #84]	@ (8008964 <HAL_RTC_WaitForSynchro+0x60>)
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	4a14      	ldr	r2, [pc, #80]	@ (8008964 <HAL_RTC_WaitForSynchro+0x60>)
 8008912:	f023 0320 	bic.w	r3, r3, #32
 8008916:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8008918:	f7fa fa64 	bl	8002de4 <HAL_GetTick>
 800891c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800891e:	e013      	b.n	8008948 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008920:	f7fa fa60 	bl	8002de4 <HAL_GetTick>
 8008924:	4602      	mov	r2, r0
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	1ad3      	subs	r3, r2, r3
 800892a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800892e:	d90b      	bls.n	8008948 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008930:	4b0c      	ldr	r3, [pc, #48]	@ (8008964 <HAL_RTC_WaitForSynchro+0x60>)
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	f003 0320 	and.w	r3, r3, #32
 8008938:	2b00      	cmp	r3, #0
 800893a:	d10c      	bne.n	8008956 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2203      	movs	r2, #3
 8008940:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 8008944:	2303      	movs	r3, #3
 8008946:	e008      	b.n	800895a <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008948:	4b06      	ldr	r3, [pc, #24]	@ (8008964 <HAL_RTC_WaitForSynchro+0x60>)
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	f003 0320 	and.w	r3, r3, #32
 8008950:	2b00      	cmp	r3, #0
 8008952:	d0e5      	beq.n	8008920 <HAL_RTC_WaitForSynchro+0x1c>
 8008954:	e000      	b.n	8008958 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 8008956:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	46007800 	.word	0x46007800

08008968 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008970:	2300      	movs	r3, #0
 8008972:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008974:	4b19      	ldr	r3, [pc, #100]	@ (80089dc <RTC_EnterInitMode+0x74>)
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800897c:	2b00      	cmp	r3, #0
 800897e:	d128      	bne.n	80089d2 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008980:	4b16      	ldr	r3, [pc, #88]	@ (80089dc <RTC_EnterInitMode+0x74>)
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	4a15      	ldr	r2, [pc, #84]	@ (80089dc <RTC_EnterInitMode+0x74>)
 8008986:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800898a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800898c:	f7fa fa2a 	bl	8002de4 <HAL_GetTick>
 8008990:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008992:	e013      	b.n	80089bc <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008994:	f7fa fa26 	bl	8002de4 <HAL_GetTick>
 8008998:	4602      	mov	r2, r0
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80089a2:	d90b      	bls.n	80089bc <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80089a4:	4b0d      	ldr	r3, [pc, #52]	@ (80089dc <RTC_EnterInitMode+0x74>)
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d10f      	bne.n	80089d0 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 80089b0:	2303      	movs	r3, #3
 80089b2:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2203      	movs	r2, #3
 80089b8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80089bc:	4b07      	ldr	r3, [pc, #28]	@ (80089dc <RTC_EnterInitMode+0x74>)
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d104      	bne.n	80089d2 <RTC_EnterInitMode+0x6a>
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
 80089ca:	2b03      	cmp	r3, #3
 80089cc:	d1e2      	bne.n	8008994 <RTC_EnterInitMode+0x2c>
 80089ce:	e000      	b.n	80089d2 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 80089d0:	bf00      	nop
        }
      }
    }
  }

  return status;
 80089d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	46007800 	.word	0x46007800

080089e0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089e8:	2300      	movs	r3, #0
 80089ea:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80089ec:	4b1a      	ldr	r3, [pc, #104]	@ (8008a58 <RTC_ExitInitMode+0x78>)
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	4a19      	ldr	r2, [pc, #100]	@ (8008a58 <RTC_ExitInitMode+0x78>)
 80089f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089f6:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80089f8:	4b17      	ldr	r3, [pc, #92]	@ (8008a58 <RTC_ExitInitMode+0x78>)
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	f003 0320 	and.w	r3, r3, #32
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10c      	bne.n	8008a1e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f7ff ff7d 	bl	8008904 <HAL_RTC_WaitForSynchro>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d01e      	beq.n	8008a4e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2203      	movs	r2, #3
 8008a14:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8008a18:	2303      	movs	r3, #3
 8008a1a:	73fb      	strb	r3, [r7, #15]
 8008a1c:	e017      	b.n	8008a4e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8008a58 <RTC_ExitInitMode+0x78>)
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	4a0d      	ldr	r2, [pc, #52]	@ (8008a58 <RTC_ExitInitMode+0x78>)
 8008a24:	f023 0320 	bic.w	r3, r3, #32
 8008a28:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f7ff ff6a 	bl	8008904 <HAL_RTC_WaitForSynchro>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d005      	beq.n	8008a42 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2203      	movs	r2, #3
 8008a3a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008a42:	4b05      	ldr	r3, [pc, #20]	@ (8008a58 <RTC_ExitInitMode+0x78>)
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	4a04      	ldr	r2, [pc, #16]	@ (8008a58 <RTC_ExitInitMode+0x78>)
 8008a48:	f043 0320 	orr.w	r3, r3, #32
 8008a4c:	6193      	str	r3, [r2, #24]
  }
  return status;
 8008a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3710      	adds	r7, #16
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	46007800 	.word	0x46007800

08008a5c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	4603      	mov	r3, r0
 8008a64:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008a66:	2300      	movs	r3, #0
 8008a68:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8008a6a:	79fb      	ldrb	r3, [r7, #7]
 8008a6c:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8008a6e:	e005      	b.n	8008a7c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	3301      	adds	r3, #1
 8008a74:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8008a76:	7afb      	ldrb	r3, [r7, #11]
 8008a78:	3b0a      	subs	r3, #10
 8008a7a:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8008a7c:	7afb      	ldrb	r3, [r7, #11]
 8008a7e:	2b09      	cmp	r3, #9
 8008a80:	d8f6      	bhi.n	8008a70 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	011b      	lsls	r3, r3, #4
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	7afb      	ldrb	r3, [r7, #11]
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	b2db      	uxtb	r3, r3
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3714      	adds	r7, #20
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8008aa6:	79fb      	ldrb	r3, [r7, #7]
 8008aa8:	091b      	lsrs	r3, r3, #4
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	461a      	mov	r2, r3
 8008aae:	4613      	mov	r3, r2
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	4413      	add	r3, r2
 8008ab4:	005b      	lsls	r3, r3, #1
 8008ab6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	b2da      	uxtb	r2, r3
 8008abc:	79fb      	ldrb	r3, [r7, #7]
 8008abe:	f003 030f 	and.w	r3, r3, #15
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	4413      	add	r3, r2
 8008ac6:	b2db      	uxtb	r3, r3
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3714      	adds	r7, #20
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d101      	bne.n	8008aec <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8008ae8:	2302      	movs	r3, #2
 8008aea:	e01e      	b.n	8008b2a <HAL_RTCEx_SetCalibrationOutPut+0x56>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2202      	movs	r2, #2
 8008af8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d


  /* Configure the RTC_CR register */
  MODIFY_REG(RTC->CR, RTC_CR_COSEL, CalibOutput);
 8008afc:	4b0e      	ldr	r3, [pc, #56]	@ (8008b38 <HAL_RTCEx_SetCalibrationOutPut+0x64>)
 8008afe:	699b      	ldr	r3, [r3, #24]
 8008b00:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008b04:	490c      	ldr	r1, [pc, #48]	@ (8008b38 <HAL_RTCEx_SetCalibrationOutPut+0x64>)
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	618b      	str	r3, [r1, #24]

  /* Enable calibration output */
  SET_BIT(RTC->CR, RTC_CR_COE);
 8008b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8008b38 <HAL_RTCEx_SetCalibrationOutPut+0x64>)
 8008b0e:	699b      	ldr	r3, [r3, #24]
 8008b10:	4a09      	ldr	r2, [pc, #36]	@ (8008b38 <HAL_RTCEx_SetCalibrationOutPut+0x64>)
 8008b12:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008b16:	6193      	str	r3, [r2, #24]


  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	370c      	adds	r7, #12
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	46007800 	.word	0x46007800

08008b3c <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	4910      	ldr	r1, [pc, #64]	@ (8008b90 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8008b50:	4313      	orrs	r3, r2
 8008b52:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	689a      	ldr	r2, [r3, #8]
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	431a      	orrs	r2, r3
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	490c      	ldr	r1, [pc, #48]	@ (8008b94 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8008b64:	4313      	orrs	r3, r2
 8008b66:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 8008b68:	4b0a      	ldr	r3, [pc, #40]	@ (8008b94 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8008b6a:	6a1b      	ldr	r3, [r3, #32]
 8008b6c:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	6919      	ldr	r1, [r3, #16]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	695b      	ldr	r3, [r3, #20]
 8008b78:	041b      	lsls	r3, r3, #16
 8008b7a:	430b      	orrs	r3, r1
 8008b7c:	4905      	ldr	r1, [pc, #20]	@ (8008b94 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	370c      	adds	r7, #12
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr
 8008b90:	46007800 	.word	0x46007800
 8008b94:	46007c00 	.word	0x46007c00

08008b98 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d101      	bne.n	8008baa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e0fb      	b.n	8008da2 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a7f      	ldr	r2, [pc, #508]	@ (8008dac <HAL_SPI_Init+0x214>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d004      	beq.n	8008bbe <HAL_SPI_Init+0x26>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a7d      	ldr	r2, [pc, #500]	@ (8008db0 <HAL_SPI_Init+0x218>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	e000      	b.n	8008bc0 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8008bbe:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a78      	ldr	r2, [pc, #480]	@ (8008dac <HAL_SPI_Init+0x214>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d004      	beq.n	8008bda <HAL_SPI_Init+0x42>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a76      	ldr	r2, [pc, #472]	@ (8008db0 <HAL_SPI_Init+0x218>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d105      	bne.n	8008be6 <HAL_SPI_Init+0x4e>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	2b0f      	cmp	r3, #15
 8008be0:	d901      	bls.n	8008be6 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e0dd      	b.n	8008da2 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f8ec 	bl	8008dc4 <SPI_GetPacketSize>
 8008bec:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a6e      	ldr	r2, [pc, #440]	@ (8008dac <HAL_SPI_Init+0x214>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d004      	beq.n	8008c02 <HAL_SPI_Init+0x6a>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a6c      	ldr	r2, [pc, #432]	@ (8008db0 <HAL_SPI_Init+0x218>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d102      	bne.n	8008c08 <HAL_SPI_Init+0x70>
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2b08      	cmp	r3, #8
 8008c06:	d816      	bhi.n	8008c36 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008c0c:	4a69      	ldr	r2, [pc, #420]	@ (8008db4 <HAL_SPI_Init+0x21c>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d00e      	beq.n	8008c30 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a68      	ldr	r2, [pc, #416]	@ (8008db8 <HAL_SPI_Init+0x220>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d009      	beq.n	8008c30 <HAL_SPI_Init+0x98>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a66      	ldr	r2, [pc, #408]	@ (8008dbc <HAL_SPI_Init+0x224>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d004      	beq.n	8008c30 <HAL_SPI_Init+0x98>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a65      	ldr	r2, [pc, #404]	@ (8008dc0 <HAL_SPI_Init+0x228>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d104      	bne.n	8008c3a <HAL_SPI_Init+0xa2>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2b10      	cmp	r3, #16
 8008c34:	d901      	bls.n	8008c3a <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	e0b3      	b.n	8008da2 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d106      	bne.n	8008c54 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f7f9 fc0a 	bl	8002468 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2202      	movs	r2, #2
 8008c58:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f022 0201 	bic.w	r2, r2, #1
 8008c6a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008c76:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	699b      	ldr	r3, [r3, #24]
 8008c7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008c80:	d119      	bne.n	8008cb6 <HAL_SPI_Init+0x11e>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008c8a:	d103      	bne.n	8008c94 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d008      	beq.n	8008ca6 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d10c      	bne.n	8008cb6 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008ca0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ca4:	d107      	bne.n	8008cb6 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008cb4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00f      	beq.n	8008ce2 <HAL_SPI_Init+0x14a>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	2b06      	cmp	r3, #6
 8008cc8:	d90b      	bls.n	8008ce2 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	430a      	orrs	r2, r1
 8008cde:	601a      	str	r2, [r3, #0]
 8008ce0:	e007      	b.n	8008cf2 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008cf0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	69da      	ldr	r2, [r3, #28]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cfa:	431a      	orrs	r2, r3
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	431a      	orrs	r2, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d04:	ea42 0103 	orr.w	r1, r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	68da      	ldr	r2, [r3, #12]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	430a      	orrs	r2, r1
 8008d12:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d1c:	431a      	orrs	r2, r3
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d22:	431a      	orrs	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	699b      	ldr	r3, [r3, #24]
 8008d28:	431a      	orrs	r2, r3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	691b      	ldr	r3, [r3, #16]
 8008d2e:	431a      	orrs	r2, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	695b      	ldr	r3, [r3, #20]
 8008d34:	431a      	orrs	r2, r3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	431a      	orrs	r2, r3
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	431a      	orrs	r2, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d46:	431a      	orrs	r2, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	431a      	orrs	r2, r3
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d52:	431a      	orrs	r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d58:	431a      	orrs	r2, r3
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d5e:	ea42 0103 	orr.w	r1, r2, r3
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	430a      	orrs	r2, r1
 8008d6c:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00a      	beq.n	8008d90 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	430a      	orrs	r2, r1
 8008d8e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	46002000 	.word	0x46002000
 8008db0:	56002000 	.word	0x56002000
 8008db4:	40013000 	.word	0x40013000
 8008db8:	50013000 	.word	0x50013000
 8008dbc:	40003800 	.word	0x40003800
 8008dc0:	50003800 	.word	0x50003800

08008dc4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b085      	sub	sp, #20
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dd0:	095b      	lsrs	r3, r3, #5
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	3307      	adds	r3, #7
 8008de2:	08db      	lsrs	r3, r3, #3
 8008de4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	fb02 f303 	mul.w	r3, r2, r3
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3714      	adds	r7, #20
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr

08008dfa <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8008dfa:	b480      	push	{r7}
 8008dfc:	b083      	sub	sp, #12
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
 8008e02:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d12e      	bne.n	8008e6e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d101      	bne.n	8008e1e <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8008e1a:	2302      	movs	r3, #2
 8008e1c:	e028      	b.n	8008e70 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2201      	movs	r2, #1
 8008e22:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2202      	movs	r2, #2
 8008e2a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f022 0201 	bic.w	r2, r2, #1
 8008e3c:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8008e4a:	ea42 0103 	orr.w	r1, r2, r3
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	689a      	ldr	r2, [r3, #8]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	430a      	orrs	r2, r1
 8008e58:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	e000      	b.n	8008e70 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
  }
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	370c      	adds	r7, #12
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d101      	bne.n	8008e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e042      	b.n	8008f14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d106      	bne.n	8008ea6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f7f9 fb4b 	bl	800253c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2224      	movs	r2, #36	@ 0x24
 8008eaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f022 0201 	bic.w	r2, r2, #1
 8008ebc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d002      	beq.n	8008ecc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 fa4e 	bl	8009368 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 f8b3 	bl	8009038 <UART_SetConfig>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d101      	bne.n	8008edc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e01b      	b.n	8008f14 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	685a      	ldr	r2, [r3, #4]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008eea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	689a      	ldr	r2, [r3, #8]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008efa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f042 0201 	orr.w	r2, r2, #1
 8008f0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 facd 	bl	80094ac <UART_CheckIdleState>
 8008f12:	4603      	mov	r3, r0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3708      	adds	r7, #8
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b08a      	sub	sp, #40	@ 0x28
 8008f20:	af02      	add	r7, sp, #8
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	603b      	str	r3, [r7, #0]
 8008f28:	4613      	mov	r3, r2
 8008f2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f32:	2b20      	cmp	r3, #32
 8008f34:	d17b      	bne.n	800902e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d002      	beq.n	8008f42 <HAL_UART_Transmit+0x26>
 8008f3c:	88fb      	ldrh	r3, [r7, #6]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d101      	bne.n	8008f46 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008f42:	2301      	movs	r3, #1
 8008f44:	e074      	b.n	8009030 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2221      	movs	r2, #33	@ 0x21
 8008f52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f56:	f7f9 ff45 	bl	8002de4 <HAL_GetTick>
 8008f5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	88fa      	ldrh	r2, [r7, #6]
 8008f60:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	88fa      	ldrh	r2, [r7, #6]
 8008f68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f74:	d108      	bne.n	8008f88 <HAL_UART_Transmit+0x6c>
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d104      	bne.n	8008f88 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	61bb      	str	r3, [r7, #24]
 8008f86:	e003      	b.n	8008f90 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008f90:	e030      	b.n	8008ff4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	9300      	str	r3, [sp, #0]
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	2180      	movs	r1, #128	@ 0x80
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f000 fb2f 	bl	8009600 <UART_WaitOnFlagUntilTimeout>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d005      	beq.n	8008fb4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2220      	movs	r2, #32
 8008fac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	e03d      	b.n	8009030 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d10b      	bne.n	8008fd2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	881b      	ldrh	r3, [r3, #0]
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008fc8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	3302      	adds	r3, #2
 8008fce:	61bb      	str	r3, [r7, #24]
 8008fd0:	e007      	b.n	8008fe2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008fd2:	69fb      	ldr	r3, [r7, #28]
 8008fd4:	781a      	ldrb	r2, [r3, #0]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	3b01      	subs	r3, #1
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d1c8      	bne.n	8008f92 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	9300      	str	r3, [sp, #0]
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	2200      	movs	r2, #0
 8009008:	2140      	movs	r1, #64	@ 0x40
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f000 faf8 	bl	8009600 <UART_WaitOnFlagUntilTimeout>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d005      	beq.n	8009022 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2220      	movs	r2, #32
 800901a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800901e:	2303      	movs	r3, #3
 8009020:	e006      	b.n	8009030 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2220      	movs	r2, #32
 8009026:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800902a:	2300      	movs	r3, #0
 800902c:	e000      	b.n	8009030 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800902e:	2302      	movs	r3, #2
  }
}
 8009030:	4618      	mov	r0, r3
 8009032:	3720      	adds	r7, #32
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800903c:	b094      	sub	sp, #80	@ 0x50
 800903e:	af00      	add	r7, sp, #0
 8009040:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009042:	2300      	movs	r3, #0
 8009044:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	4b9b      	ldr	r3, [pc, #620]	@ (80092bc <UART_SetConfig+0x284>)
 800904e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009052:	689a      	ldr	r2, [r3, #8]
 8009054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009056:	691b      	ldr	r3, [r3, #16]
 8009058:	431a      	orrs	r2, r3
 800905a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800905c:	695b      	ldr	r3, [r3, #20]
 800905e:	431a      	orrs	r2, r3
 8009060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009062:	69db      	ldr	r3, [r3, #28]
 8009064:	4313      	orrs	r3, r2
 8009066:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4994      	ldr	r1, [pc, #592]	@ (80092c0 <UART_SetConfig+0x288>)
 8009070:	4019      	ands	r1, r3
 8009072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009078:	430b      	orrs	r3, r1
 800907a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800907c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009088:	68d9      	ldr	r1, [r3, #12]
 800908a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	ea40 0301 	orr.w	r3, r0, r1
 8009092:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009096:	699b      	ldr	r3, [r3, #24]
 8009098:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800909a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	4b87      	ldr	r3, [pc, #540]	@ (80092bc <UART_SetConfig+0x284>)
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d009      	beq.n	80090b8 <UART_SetConfig+0x80>
 80090a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	4b86      	ldr	r3, [pc, #536]	@ (80092c4 <UART_SetConfig+0x28c>)
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d004      	beq.n	80090b8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80090ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090b0:	6a1a      	ldr	r2, [r3, #32]
 80090b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090b4:	4313      	orrs	r3, r2
 80090b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80090c2:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80090c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090cc:	430b      	orrs	r3, r1
 80090ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80090d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d6:	f023 000f 	bic.w	r0, r3, #15
 80090da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090dc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80090de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	ea40 0301 	orr.w	r3, r0, r1
 80090e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	4b76      	ldr	r3, [pc, #472]	@ (80092c8 <UART_SetConfig+0x290>)
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d102      	bne.n	80090f8 <UART_SetConfig+0xc0>
 80090f2:	2301      	movs	r3, #1
 80090f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090f6:	e021      	b.n	800913c <UART_SetConfig+0x104>
 80090f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	4b73      	ldr	r3, [pc, #460]	@ (80092cc <UART_SetConfig+0x294>)
 80090fe:	429a      	cmp	r2, r3
 8009100:	d102      	bne.n	8009108 <UART_SetConfig+0xd0>
 8009102:	2304      	movs	r3, #4
 8009104:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009106:	e019      	b.n	800913c <UART_SetConfig+0x104>
 8009108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	4b70      	ldr	r3, [pc, #448]	@ (80092d0 <UART_SetConfig+0x298>)
 800910e:	429a      	cmp	r2, r3
 8009110:	d102      	bne.n	8009118 <UART_SetConfig+0xe0>
 8009112:	2308      	movs	r3, #8
 8009114:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009116:	e011      	b.n	800913c <UART_SetConfig+0x104>
 8009118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	4b6d      	ldr	r3, [pc, #436]	@ (80092d4 <UART_SetConfig+0x29c>)
 800911e:	429a      	cmp	r2, r3
 8009120:	d102      	bne.n	8009128 <UART_SetConfig+0xf0>
 8009122:	2310      	movs	r3, #16
 8009124:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009126:	e009      	b.n	800913c <UART_SetConfig+0x104>
 8009128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	4b63      	ldr	r3, [pc, #396]	@ (80092bc <UART_SetConfig+0x284>)
 800912e:	429a      	cmp	r2, r3
 8009130:	d102      	bne.n	8009138 <UART_SetConfig+0x100>
 8009132:	2320      	movs	r3, #32
 8009134:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009136:	e001      	b.n	800913c <UART_SetConfig+0x104>
 8009138:	2300      	movs	r3, #0
 800913a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800913c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	4b5e      	ldr	r3, [pc, #376]	@ (80092bc <UART_SetConfig+0x284>)
 8009142:	429a      	cmp	r2, r3
 8009144:	d004      	beq.n	8009150 <UART_SetConfig+0x118>
 8009146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	4b5e      	ldr	r3, [pc, #376]	@ (80092c4 <UART_SetConfig+0x28c>)
 800914c:	429a      	cmp	r2, r3
 800914e:	d172      	bne.n	8009236 <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009150:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009152:	2200      	movs	r2, #0
 8009154:	623b      	str	r3, [r7, #32]
 8009156:	627a      	str	r2, [r7, #36]	@ 0x24
 8009158:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800915c:	f7fd fef8 	bl	8006f50 <HAL_RCCEx_GetPeriphCLKFreq>
 8009160:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8009162:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009164:	2b00      	cmp	r3, #0
 8009166:	f000 80e7 	beq.w	8009338 <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800916a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800916c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800916e:	4a5a      	ldr	r2, [pc, #360]	@ (80092d8 <UART_SetConfig+0x2a0>)
 8009170:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009174:	461a      	mov	r2, r3
 8009176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009178:	fbb3 f3f2 	udiv	r3, r3, r2
 800917c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800917e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009180:	685a      	ldr	r2, [r3, #4]
 8009182:	4613      	mov	r3, r2
 8009184:	005b      	lsls	r3, r3, #1
 8009186:	4413      	add	r3, r2
 8009188:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800918a:	429a      	cmp	r2, r3
 800918c:	d305      	bcc.n	800919a <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800918e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009194:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009196:	429a      	cmp	r2, r3
 8009198:	d903      	bls.n	80091a2 <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80091a0:	e048      	b.n	8009234 <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091a4:	2200      	movs	r2, #0
 80091a6:	61bb      	str	r3, [r7, #24]
 80091a8:	61fa      	str	r2, [r7, #28]
 80091aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ae:	4a4a      	ldr	r2, [pc, #296]	@ (80092d8 <UART_SetConfig+0x2a0>)
 80091b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	2200      	movs	r2, #0
 80091b8:	613b      	str	r3, [r7, #16]
 80091ba:	617a      	str	r2, [r7, #20]
 80091bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80091c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80091c4:	f7f7 fcf4 	bl	8000bb0 <__aeabi_uldivmod>
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	4610      	mov	r0, r2
 80091ce:	4619      	mov	r1, r3
 80091d0:	f04f 0200 	mov.w	r2, #0
 80091d4:	f04f 0300 	mov.w	r3, #0
 80091d8:	020b      	lsls	r3, r1, #8
 80091da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80091de:	0202      	lsls	r2, r0, #8
 80091e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091e2:	6849      	ldr	r1, [r1, #4]
 80091e4:	0849      	lsrs	r1, r1, #1
 80091e6:	2000      	movs	r0, #0
 80091e8:	460c      	mov	r4, r1
 80091ea:	4605      	mov	r5, r0
 80091ec:	eb12 0804 	adds.w	r8, r2, r4
 80091f0:	eb43 0905 	adc.w	r9, r3, r5
 80091f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	60bb      	str	r3, [r7, #8]
 80091fc:	60fa      	str	r2, [r7, #12]
 80091fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009202:	4640      	mov	r0, r8
 8009204:	4649      	mov	r1, r9
 8009206:	f7f7 fcd3 	bl	8000bb0 <__aeabi_uldivmod>
 800920a:	4602      	mov	r2, r0
 800920c:	460b      	mov	r3, r1
 800920e:	4613      	mov	r3, r2
 8009210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009214:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009218:	d308      	bcc.n	800922c <UART_SetConfig+0x1f4>
 800921a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800921c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009220:	d204      	bcs.n	800922c <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 8009222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009228:	60da      	str	r2, [r3, #12]
 800922a:	e003      	b.n	8009234 <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8009232:	e081      	b.n	8009338 <UART_SetConfig+0x300>
 8009234:	e080      	b.n	8009338 <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009238:	69db      	ldr	r3, [r3, #28]
 800923a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800923e:	d14d      	bne.n	80092dc <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009240:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009242:	2200      	movs	r2, #0
 8009244:	603b      	str	r3, [r7, #0]
 8009246:	607a      	str	r2, [r7, #4]
 8009248:	e9d7 0100 	ldrd	r0, r1, [r7]
 800924c:	f7fd fe80 	bl	8006f50 <HAL_RCCEx_GetPeriphCLKFreq>
 8009250:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009252:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009254:	2b00      	cmp	r3, #0
 8009256:	d06f      	beq.n	8009338 <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800925a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800925c:	4a1e      	ldr	r2, [pc, #120]	@ (80092d8 <UART_SetConfig+0x2a0>)
 800925e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009262:	461a      	mov	r2, r3
 8009264:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009266:	fbb3 f3f2 	udiv	r3, r3, r2
 800926a:	005a      	lsls	r2, r3, #1
 800926c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	085b      	lsrs	r3, r3, #1
 8009272:	441a      	add	r2, r3
 8009274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	fbb2 f3f3 	udiv	r3, r2, r3
 800927c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800927e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009280:	2b0f      	cmp	r3, #15
 8009282:	d916      	bls.n	80092b2 <UART_SetConfig+0x27a>
 8009284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009286:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800928a:	d212      	bcs.n	80092b2 <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800928c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800928e:	b29b      	uxth	r3, r3
 8009290:	f023 030f 	bic.w	r3, r3, #15
 8009294:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009298:	085b      	lsrs	r3, r3, #1
 800929a:	b29b      	uxth	r3, r3
 800929c:	f003 0307 	and.w	r3, r3, #7
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80092a4:	4313      	orrs	r3, r2
 80092a6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80092a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80092ae:	60da      	str	r2, [r3, #12]
 80092b0:	e042      	b.n	8009338 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80092b8:	e03e      	b.n	8009338 <UART_SetConfig+0x300>
 80092ba:	bf00      	nop
 80092bc:	46002400 	.word	0x46002400
 80092c0:	cfff69f3 	.word	0xcfff69f3
 80092c4:	56002400 	.word	0x56002400
 80092c8:	40013800 	.word	0x40013800
 80092cc:	40004800 	.word	0x40004800
 80092d0:	40004c00 	.word	0x40004c00
 80092d4:	40005000 	.word	0x40005000
 80092d8:	0800d058 	.word	0x0800d058
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80092dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092de:	2200      	movs	r2, #0
 80092e0:	469a      	mov	sl, r3
 80092e2:	4693      	mov	fp, r2
 80092e4:	4650      	mov	r0, sl
 80092e6:	4659      	mov	r1, fp
 80092e8:	f7fd fe32 	bl	8006f50 <HAL_RCCEx_GetPeriphCLKFreq>
 80092ec:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80092ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d021      	beq.n	8009338 <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092f8:	4a1a      	ldr	r2, [pc, #104]	@ (8009364 <UART_SetConfig+0x32c>)
 80092fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092fe:	461a      	mov	r2, r3
 8009300:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009302:	fbb3 f2f2 	udiv	r2, r3, r2
 8009306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	085b      	lsrs	r3, r3, #1
 800930c:	441a      	add	r2, r3
 800930e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	fbb2 f3f3 	udiv	r3, r2, r3
 8009316:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800931a:	2b0f      	cmp	r3, #15
 800931c:	d909      	bls.n	8009332 <UART_SetConfig+0x2fa>
 800931e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009324:	d205      	bcs.n	8009332 <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009328:	b29a      	uxth	r2, r3
 800932a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	60da      	str	r2, [r3, #12]
 8009330:	e002      	b.n	8009338 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 8009332:	2301      	movs	r3, #1
 8009334:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800933a:	2201      	movs	r2, #1
 800933c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009342:	2201      	movs	r2, #1
 8009344:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800934a:	2200      	movs	r2, #0
 800934c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800934e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009350:	2200      	movs	r2, #0
 8009352:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009354:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009358:	4618      	mov	r0, r3
 800935a:	3750      	adds	r7, #80	@ 0x50
 800935c:	46bd      	mov	sp, r7
 800935e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009362:	bf00      	nop
 8009364:	0800d058 	.word	0x0800d058

08009368 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009368:	b480      	push	{r7}
 800936a:	b083      	sub	sp, #12
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009374:	f003 0308 	and.w	r3, r3, #8
 8009378:	2b00      	cmp	r3, #0
 800937a:	d00a      	beq.n	8009392 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	430a      	orrs	r2, r1
 8009390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009396:	f003 0301 	and.w	r3, r3, #1
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00a      	beq.n	80093b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	430a      	orrs	r2, r1
 80093b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093b8:	f003 0302 	and.w	r3, r3, #2
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d00a      	beq.n	80093d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	430a      	orrs	r2, r1
 80093d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093da:	f003 0304 	and.w	r3, r3, #4
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d00a      	beq.n	80093f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	430a      	orrs	r2, r1
 80093f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093fc:	f003 0310 	and.w	r3, r3, #16
 8009400:	2b00      	cmp	r3, #0
 8009402:	d00a      	beq.n	800941a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	430a      	orrs	r2, r1
 8009418:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800941e:	f003 0320 	and.w	r3, r3, #32
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00a      	beq.n	800943c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	430a      	orrs	r2, r1
 800943a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009444:	2b00      	cmp	r3, #0
 8009446:	d01a      	beq.n	800947e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	430a      	orrs	r2, r1
 800945c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009462:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009466:	d10a      	bne.n	800947e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	430a      	orrs	r2, r1
 800947c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00a      	beq.n	80094a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	430a      	orrs	r2, r1
 800949e:	605a      	str	r2, [r3, #4]
  }
}
 80094a0:	bf00      	nop
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b098      	sub	sp, #96	@ 0x60
 80094b0:	af02      	add	r7, sp, #8
 80094b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80094bc:	f7f9 fc92 	bl	8002de4 <HAL_GetTick>
 80094c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f003 0308 	and.w	r3, r3, #8
 80094cc:	2b08      	cmp	r3, #8
 80094ce:	d12f      	bne.n	8009530 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80094d4:	9300      	str	r3, [sp, #0]
 80094d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094d8:	2200      	movs	r2, #0
 80094da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 f88e 	bl	8009600 <UART_WaitOnFlagUntilTimeout>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d022      	beq.n	8009530 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f2:	e853 3f00 	ldrex	r3, [r3]
 80094f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	461a      	mov	r2, r3
 8009506:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009508:	647b      	str	r3, [r7, #68]	@ 0x44
 800950a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800950e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009510:	e841 2300 	strex	r3, r2, [r1]
 8009514:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009518:	2b00      	cmp	r3, #0
 800951a:	d1e6      	bne.n	80094ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2220      	movs	r2, #32
 8009520:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800952c:	2303      	movs	r3, #3
 800952e:	e063      	b.n	80095f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f003 0304 	and.w	r3, r3, #4
 800953a:	2b04      	cmp	r3, #4
 800953c:	d149      	bne.n	80095d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800953e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009542:	9300      	str	r3, [sp, #0]
 8009544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009546:	2200      	movs	r2, #0
 8009548:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 f857 	bl	8009600 <UART_WaitOnFlagUntilTimeout>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d03c      	beq.n	80095d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009560:	e853 3f00 	ldrex	r3, [r3]
 8009564:	623b      	str	r3, [r7, #32]
   return(result);
 8009566:	6a3b      	ldr	r3, [r7, #32]
 8009568:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800956c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	461a      	mov	r2, r3
 8009574:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009576:	633b      	str	r3, [r7, #48]	@ 0x30
 8009578:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800957c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800957e:	e841 2300 	strex	r3, r2, [r1]
 8009582:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009586:	2b00      	cmp	r3, #0
 8009588:	d1e6      	bne.n	8009558 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	3308      	adds	r3, #8
 8009590:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	e853 3f00 	ldrex	r3, [r3]
 8009598:	60fb      	str	r3, [r7, #12]
   return(result);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f023 0301 	bic.w	r3, r3, #1
 80095a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	3308      	adds	r3, #8
 80095a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80095aa:	61fa      	str	r2, [r7, #28]
 80095ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ae:	69b9      	ldr	r1, [r7, #24]
 80095b0:	69fa      	ldr	r2, [r7, #28]
 80095b2:	e841 2300 	strex	r3, r2, [r1]
 80095b6:	617b      	str	r3, [r7, #20]
   return(result);
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d1e5      	bne.n	800958a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2220      	movs	r2, #32
 80095c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095ce:	2303      	movs	r3, #3
 80095d0:	e012      	b.n	80095f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2220      	movs	r2, #32
 80095d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2220      	movs	r2, #32
 80095de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2200      	movs	r2, #0
 80095f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3758      	adds	r7, #88	@ 0x58
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	603b      	str	r3, [r7, #0]
 800960c:	4613      	mov	r3, r2
 800960e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009610:	e04f      	b.n	80096b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009618:	d04b      	beq.n	80096b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800961a:	f7f9 fbe3 	bl	8002de4 <HAL_GetTick>
 800961e:	4602      	mov	r2, r0
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	1ad3      	subs	r3, r2, r3
 8009624:	69ba      	ldr	r2, [r7, #24]
 8009626:	429a      	cmp	r2, r3
 8009628:	d302      	bcc.n	8009630 <UART_WaitOnFlagUntilTimeout+0x30>
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d101      	bne.n	8009634 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009630:	2303      	movs	r3, #3
 8009632:	e04e      	b.n	80096d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f003 0304 	and.w	r3, r3, #4
 800963e:	2b00      	cmp	r3, #0
 8009640:	d037      	beq.n	80096b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	2b80      	cmp	r3, #128	@ 0x80
 8009646:	d034      	beq.n	80096b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	2b40      	cmp	r3, #64	@ 0x40
 800964c:	d031      	beq.n	80096b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	69db      	ldr	r3, [r3, #28]
 8009654:	f003 0308 	and.w	r3, r3, #8
 8009658:	2b08      	cmp	r3, #8
 800965a:	d110      	bne.n	800967e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2208      	movs	r2, #8
 8009662:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f000 f838 	bl	80096da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2208      	movs	r2, #8
 800966e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2200      	movs	r2, #0
 8009676:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	e029      	b.n	80096d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	69db      	ldr	r3, [r3, #28]
 8009684:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009688:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800968c:	d111      	bne.n	80096b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009696:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f000 f81e 	bl	80096da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2220      	movs	r2, #32
 80096a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2200      	movs	r2, #0
 80096aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80096ae:	2303      	movs	r3, #3
 80096b0:	e00f      	b.n	80096d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	69da      	ldr	r2, [r3, #28]
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	4013      	ands	r3, r2
 80096bc:	68ba      	ldr	r2, [r7, #8]
 80096be:	429a      	cmp	r2, r3
 80096c0:	bf0c      	ite	eq
 80096c2:	2301      	moveq	r3, #1
 80096c4:	2300      	movne	r3, #0
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	461a      	mov	r2, r3
 80096ca:	79fb      	ldrb	r3, [r7, #7]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d0a0      	beq.n	8009612 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80096da:	b480      	push	{r7}
 80096dc:	b095      	sub	sp, #84	@ 0x54
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096ea:	e853 3f00 	ldrex	r3, [r3]
 80096ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80096f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	461a      	mov	r2, r3
 80096fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009700:	643b      	str	r3, [r7, #64]	@ 0x40
 8009702:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009704:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009706:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009708:	e841 2300 	strex	r3, r2, [r1]
 800970c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800970e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009710:	2b00      	cmp	r3, #0
 8009712:	d1e6      	bne.n	80096e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	3308      	adds	r3, #8
 800971a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800971c:	6a3b      	ldr	r3, [r7, #32]
 800971e:	e853 3f00 	ldrex	r3, [r3]
 8009722:	61fb      	str	r3, [r7, #28]
   return(result);
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800972a:	f023 0301 	bic.w	r3, r3, #1
 800972e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	3308      	adds	r3, #8
 8009736:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009738:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800973a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800973e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009740:	e841 2300 	strex	r3, r2, [r1]
 8009744:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009748:	2b00      	cmp	r3, #0
 800974a:	d1e3      	bne.n	8009714 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009750:	2b01      	cmp	r3, #1
 8009752:	d118      	bne.n	8009786 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	e853 3f00 	ldrex	r3, [r3]
 8009760:	60bb      	str	r3, [r7, #8]
   return(result);
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	f023 0310 	bic.w	r3, r3, #16
 8009768:	647b      	str	r3, [r7, #68]	@ 0x44
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	461a      	mov	r2, r3
 8009770:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009772:	61bb      	str	r3, [r7, #24]
 8009774:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009776:	6979      	ldr	r1, [r7, #20]
 8009778:	69ba      	ldr	r2, [r7, #24]
 800977a:	e841 2300 	strex	r3, r2, [r1]
 800977e:	613b      	str	r3, [r7, #16]
   return(result);
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d1e6      	bne.n	8009754 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2220      	movs	r2, #32
 800978a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800979a:	bf00      	nop
 800979c:	3754      	adds	r7, #84	@ 0x54
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr

080097a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80097a6:	b480      	push	{r7}
 80097a8:	b085      	sub	sp, #20
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d101      	bne.n	80097bc <HAL_UARTEx_DisableFifoMode+0x16>
 80097b8:	2302      	movs	r3, #2
 80097ba:	e027      	b.n	800980c <HAL_UARTEx_DisableFifoMode+0x66>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2201      	movs	r2, #1
 80097c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2224      	movs	r2, #36	@ 0x24
 80097c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f022 0201 	bic.w	r2, r2, #1
 80097e2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80097ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2220      	movs	r2, #32
 80097fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800980a:	2300      	movs	r3, #0
}
 800980c:	4618      	mov	r0, r3
 800980e:	3714      	adds	r7, #20
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009828:	2b01      	cmp	r3, #1
 800982a:	d101      	bne.n	8009830 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800982c:	2302      	movs	r3, #2
 800982e:	e02d      	b.n	800988c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2224      	movs	r2, #36	@ 0x24
 800983c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f022 0201 	bic.w	r2, r2, #1
 8009856:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	683a      	ldr	r2, [r7, #0]
 8009868:	430a      	orrs	r2, r1
 800986a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 f84f 	bl	8009910 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2220      	movs	r2, #32
 800987e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800988a:	2300      	movs	r3, #0
}
 800988c:	4618      	mov	r0, r3
 800988e:	3710      	adds	r7, #16
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d101      	bne.n	80098ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80098a8:	2302      	movs	r3, #2
 80098aa:	e02d      	b.n	8009908 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2224      	movs	r2, #36	@ 0x24
 80098b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f022 0201 	bic.w	r2, r2, #1
 80098d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	683a      	ldr	r2, [r7, #0]
 80098e4:	430a      	orrs	r2, r1
 80098e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 f811 	bl	8009910 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2220      	movs	r2, #32
 80098fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2200      	movs	r2, #0
 8009902:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009906:	2300      	movs	r3, #0
}
 8009908:	4618      	mov	r0, r3
 800990a:	3710      	adds	r7, #16
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009910:	b480      	push	{r7}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800991c:	2b00      	cmp	r3, #0
 800991e:	d108      	bne.n	8009932 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2201      	movs	r2, #1
 8009924:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009930:	e031      	b.n	8009996 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009932:	2308      	movs	r3, #8
 8009934:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009936:	2308      	movs	r3, #8
 8009938:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	0e5b      	lsrs	r3, r3, #25
 8009942:	b2db      	uxtb	r3, r3
 8009944:	f003 0307 	and.w	r3, r3, #7
 8009948:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	0f5b      	lsrs	r3, r3, #29
 8009952:	b2db      	uxtb	r3, r3
 8009954:	f003 0307 	and.w	r3, r3, #7
 8009958:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800995a:	7bbb      	ldrb	r3, [r7, #14]
 800995c:	7b3a      	ldrb	r2, [r7, #12]
 800995e:	4911      	ldr	r1, [pc, #68]	@ (80099a4 <UARTEx_SetNbDataToProcess+0x94>)
 8009960:	5c8a      	ldrb	r2, [r1, r2]
 8009962:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009966:	7b3a      	ldrb	r2, [r7, #12]
 8009968:	490f      	ldr	r1, [pc, #60]	@ (80099a8 <UARTEx_SetNbDataToProcess+0x98>)
 800996a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800996c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009970:	b29a      	uxth	r2, r3
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009978:	7bfb      	ldrb	r3, [r7, #15]
 800997a:	7b7a      	ldrb	r2, [r7, #13]
 800997c:	4909      	ldr	r1, [pc, #36]	@ (80099a4 <UARTEx_SetNbDataToProcess+0x94>)
 800997e:	5c8a      	ldrb	r2, [r1, r2]
 8009980:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009984:	7b7a      	ldrb	r2, [r7, #13]
 8009986:	4908      	ldr	r1, [pc, #32]	@ (80099a8 <UARTEx_SetNbDataToProcess+0x98>)
 8009988:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800998a:	fb93 f3f2 	sdiv	r3, r3, r2
 800998e:	b29a      	uxth	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009996:	bf00      	nop
 8009998:	3714      	adds	r7, #20
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr
 80099a2:	bf00      	nop
 80099a4:	0800d070 	.word	0x0800d070
 80099a8:	0800d078 	.word	0x0800d078

080099ac <__cvt>:
 80099ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099b0:	ec57 6b10 	vmov	r6, r7, d0
 80099b4:	2f00      	cmp	r7, #0
 80099b6:	460c      	mov	r4, r1
 80099b8:	4619      	mov	r1, r3
 80099ba:	463b      	mov	r3, r7
 80099bc:	bfb4      	ite	lt
 80099be:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80099c2:	2300      	movge	r3, #0
 80099c4:	4691      	mov	r9, r2
 80099c6:	bfbf      	itttt	lt
 80099c8:	4632      	movlt	r2, r6
 80099ca:	461f      	movlt	r7, r3
 80099cc:	232d      	movlt	r3, #45	@ 0x2d
 80099ce:	4616      	movlt	r6, r2
 80099d0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80099d4:	700b      	strb	r3, [r1, #0]
 80099d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099d8:	f023 0820 	bic.w	r8, r3, #32
 80099dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80099e0:	d005      	beq.n	80099ee <__cvt+0x42>
 80099e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80099e6:	d100      	bne.n	80099ea <__cvt+0x3e>
 80099e8:	3401      	adds	r4, #1
 80099ea:	2102      	movs	r1, #2
 80099ec:	e000      	b.n	80099f0 <__cvt+0x44>
 80099ee:	2103      	movs	r1, #3
 80099f0:	ab03      	add	r3, sp, #12
 80099f2:	4622      	mov	r2, r4
 80099f4:	9301      	str	r3, [sp, #4]
 80099f6:	ab02      	add	r3, sp, #8
 80099f8:	ec47 6b10 	vmov	d0, r6, r7
 80099fc:	9300      	str	r3, [sp, #0]
 80099fe:	4653      	mov	r3, sl
 8009a00:	f000 ff9a 	bl	800a938 <_dtoa_r>
 8009a04:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009a08:	4605      	mov	r5, r0
 8009a0a:	d119      	bne.n	8009a40 <__cvt+0x94>
 8009a0c:	f019 0f01 	tst.w	r9, #1
 8009a10:	d00e      	beq.n	8009a30 <__cvt+0x84>
 8009a12:	eb00 0904 	add.w	r9, r0, r4
 8009a16:	2200      	movs	r2, #0
 8009a18:	2300      	movs	r3, #0
 8009a1a:	4630      	mov	r0, r6
 8009a1c:	4639      	mov	r1, r7
 8009a1e:	f7f7 f857 	bl	8000ad0 <__aeabi_dcmpeq>
 8009a22:	b108      	cbz	r0, 8009a28 <__cvt+0x7c>
 8009a24:	f8cd 900c 	str.w	r9, [sp, #12]
 8009a28:	2230      	movs	r2, #48	@ 0x30
 8009a2a:	9b03      	ldr	r3, [sp, #12]
 8009a2c:	454b      	cmp	r3, r9
 8009a2e:	d31e      	bcc.n	8009a6e <__cvt+0xc2>
 8009a30:	9b03      	ldr	r3, [sp, #12]
 8009a32:	4628      	mov	r0, r5
 8009a34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a36:	1b5b      	subs	r3, r3, r5
 8009a38:	6013      	str	r3, [r2, #0]
 8009a3a:	b004      	add	sp, #16
 8009a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a40:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a44:	eb00 0904 	add.w	r9, r0, r4
 8009a48:	d1e5      	bne.n	8009a16 <__cvt+0x6a>
 8009a4a:	7803      	ldrb	r3, [r0, #0]
 8009a4c:	2b30      	cmp	r3, #48	@ 0x30
 8009a4e:	d10a      	bne.n	8009a66 <__cvt+0xba>
 8009a50:	2200      	movs	r2, #0
 8009a52:	2300      	movs	r3, #0
 8009a54:	4630      	mov	r0, r6
 8009a56:	4639      	mov	r1, r7
 8009a58:	f7f7 f83a 	bl	8000ad0 <__aeabi_dcmpeq>
 8009a5c:	b918      	cbnz	r0, 8009a66 <__cvt+0xba>
 8009a5e:	f1c4 0401 	rsb	r4, r4, #1
 8009a62:	f8ca 4000 	str.w	r4, [sl]
 8009a66:	f8da 3000 	ldr.w	r3, [sl]
 8009a6a:	4499      	add	r9, r3
 8009a6c:	e7d3      	b.n	8009a16 <__cvt+0x6a>
 8009a6e:	1c59      	adds	r1, r3, #1
 8009a70:	9103      	str	r1, [sp, #12]
 8009a72:	701a      	strb	r2, [r3, #0]
 8009a74:	e7d9      	b.n	8009a2a <__cvt+0x7e>

08009a76 <__exponent>:
 8009a76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a78:	2900      	cmp	r1, #0
 8009a7a:	7002      	strb	r2, [r0, #0]
 8009a7c:	bfba      	itte	lt
 8009a7e:	4249      	neglt	r1, r1
 8009a80:	232d      	movlt	r3, #45	@ 0x2d
 8009a82:	232b      	movge	r3, #43	@ 0x2b
 8009a84:	2909      	cmp	r1, #9
 8009a86:	7043      	strb	r3, [r0, #1]
 8009a88:	dd28      	ble.n	8009adc <__exponent+0x66>
 8009a8a:	f10d 0307 	add.w	r3, sp, #7
 8009a8e:	270a      	movs	r7, #10
 8009a90:	461d      	mov	r5, r3
 8009a92:	461a      	mov	r2, r3
 8009a94:	3b01      	subs	r3, #1
 8009a96:	fbb1 f6f7 	udiv	r6, r1, r7
 8009a9a:	fb07 1416 	mls	r4, r7, r6, r1
 8009a9e:	3430      	adds	r4, #48	@ 0x30
 8009aa0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009aa4:	460c      	mov	r4, r1
 8009aa6:	4631      	mov	r1, r6
 8009aa8:	2c63      	cmp	r4, #99	@ 0x63
 8009aaa:	dcf2      	bgt.n	8009a92 <__exponent+0x1c>
 8009aac:	3130      	adds	r1, #48	@ 0x30
 8009aae:	1e94      	subs	r4, r2, #2
 8009ab0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009ab4:	1c41      	adds	r1, r0, #1
 8009ab6:	4623      	mov	r3, r4
 8009ab8:	42ab      	cmp	r3, r5
 8009aba:	d30a      	bcc.n	8009ad2 <__exponent+0x5c>
 8009abc:	f10d 0309 	add.w	r3, sp, #9
 8009ac0:	1a9b      	subs	r3, r3, r2
 8009ac2:	42ac      	cmp	r4, r5
 8009ac4:	bf88      	it	hi
 8009ac6:	2300      	movhi	r3, #0
 8009ac8:	3302      	adds	r3, #2
 8009aca:	4403      	add	r3, r0
 8009acc:	1a18      	subs	r0, r3, r0
 8009ace:	b003      	add	sp, #12
 8009ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ad2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009ad6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009ada:	e7ed      	b.n	8009ab8 <__exponent+0x42>
 8009adc:	2330      	movs	r3, #48	@ 0x30
 8009ade:	3130      	adds	r1, #48	@ 0x30
 8009ae0:	7083      	strb	r3, [r0, #2]
 8009ae2:	1d03      	adds	r3, r0, #4
 8009ae4:	70c1      	strb	r1, [r0, #3]
 8009ae6:	e7f1      	b.n	8009acc <__exponent+0x56>

08009ae8 <_printf_float>:
 8009ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aec:	b08d      	sub	sp, #52	@ 0x34
 8009aee:	460c      	mov	r4, r1
 8009af0:	4616      	mov	r6, r2
 8009af2:	461f      	mov	r7, r3
 8009af4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009af8:	4605      	mov	r5, r0
 8009afa:	f000 fdfd 	bl	800a6f8 <_localeconv_r>
 8009afe:	6803      	ldr	r3, [r0, #0]
 8009b00:	4618      	mov	r0, r3
 8009b02:	9304      	str	r3, [sp, #16]
 8009b04:	f7f6 fbb8 	bl	8000278 <strlen>
 8009b08:	2300      	movs	r3, #0
 8009b0a:	9005      	str	r0, [sp, #20]
 8009b0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b0e:	f8d8 3000 	ldr.w	r3, [r8]
 8009b12:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009b16:	3307      	adds	r3, #7
 8009b18:	f8d4 b000 	ldr.w	fp, [r4]
 8009b1c:	f023 0307 	bic.w	r3, r3, #7
 8009b20:	f103 0208 	add.w	r2, r3, #8
 8009b24:	f8c8 2000 	str.w	r2, [r8]
 8009b28:	f04f 32ff 	mov.w	r2, #4294967295
 8009b2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b30:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009b34:	f8cd 8018 	str.w	r8, [sp, #24]
 8009b38:	9307      	str	r3, [sp, #28]
 8009b3a:	4b9d      	ldr	r3, [pc, #628]	@ (8009db0 <_printf_float+0x2c8>)
 8009b3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b40:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009b44:	f7f6 fff6 	bl	8000b34 <__aeabi_dcmpun>
 8009b48:	bb70      	cbnz	r0, 8009ba8 <_printf_float+0xc0>
 8009b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b4e:	4b98      	ldr	r3, [pc, #608]	@ (8009db0 <_printf_float+0x2c8>)
 8009b50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b54:	f7f6 ffd0 	bl	8000af8 <__aeabi_dcmple>
 8009b58:	bb30      	cbnz	r0, 8009ba8 <_printf_float+0xc0>
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	4640      	mov	r0, r8
 8009b60:	4649      	mov	r1, r9
 8009b62:	f7f6 ffbf 	bl	8000ae4 <__aeabi_dcmplt>
 8009b66:	b110      	cbz	r0, 8009b6e <_printf_float+0x86>
 8009b68:	232d      	movs	r3, #45	@ 0x2d
 8009b6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b6e:	4a91      	ldr	r2, [pc, #580]	@ (8009db4 <_printf_float+0x2cc>)
 8009b70:	4b91      	ldr	r3, [pc, #580]	@ (8009db8 <_printf_float+0x2d0>)
 8009b72:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009b76:	bf94      	ite	ls
 8009b78:	4690      	movls	r8, r2
 8009b7a:	4698      	movhi	r8, r3
 8009b7c:	2303      	movs	r3, #3
 8009b7e:	f04f 0900 	mov.w	r9, #0
 8009b82:	6123      	str	r3, [r4, #16]
 8009b84:	f02b 0304 	bic.w	r3, fp, #4
 8009b88:	6023      	str	r3, [r4, #0]
 8009b8a:	4633      	mov	r3, r6
 8009b8c:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009b8e:	4621      	mov	r1, r4
 8009b90:	4628      	mov	r0, r5
 8009b92:	9700      	str	r7, [sp, #0]
 8009b94:	f000 f9d2 	bl	8009f3c <_printf_common>
 8009b98:	3001      	adds	r0, #1
 8009b9a:	f040 808d 	bne.w	8009cb8 <_printf_float+0x1d0>
 8009b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba2:	b00d      	add	sp, #52	@ 0x34
 8009ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba8:	4642      	mov	r2, r8
 8009baa:	464b      	mov	r3, r9
 8009bac:	4640      	mov	r0, r8
 8009bae:	4649      	mov	r1, r9
 8009bb0:	f7f6 ffc0 	bl	8000b34 <__aeabi_dcmpun>
 8009bb4:	b140      	cbz	r0, 8009bc8 <_printf_float+0xe0>
 8009bb6:	464b      	mov	r3, r9
 8009bb8:	4a80      	ldr	r2, [pc, #512]	@ (8009dbc <_printf_float+0x2d4>)
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	bfbc      	itt	lt
 8009bbe:	232d      	movlt	r3, #45	@ 0x2d
 8009bc0:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009bc4:	4b7e      	ldr	r3, [pc, #504]	@ (8009dc0 <_printf_float+0x2d8>)
 8009bc6:	e7d4      	b.n	8009b72 <_printf_float+0x8a>
 8009bc8:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009bcc:	6863      	ldr	r3, [r4, #4]
 8009bce:	9206      	str	r2, [sp, #24]
 8009bd0:	1c5a      	adds	r2, r3, #1
 8009bd2:	d13b      	bne.n	8009c4c <_printf_float+0x164>
 8009bd4:	2306      	movs	r3, #6
 8009bd6:	6063      	str	r3, [r4, #4]
 8009bd8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009bdc:	2300      	movs	r3, #0
 8009bde:	4628      	mov	r0, r5
 8009be0:	6022      	str	r2, [r4, #0]
 8009be2:	9303      	str	r3, [sp, #12]
 8009be4:	ab0a      	add	r3, sp, #40	@ 0x28
 8009be6:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009bea:	ab09      	add	r3, sp, #36	@ 0x24
 8009bec:	ec49 8b10 	vmov	d0, r8, r9
 8009bf0:	9300      	str	r3, [sp, #0]
 8009bf2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009bf6:	6861      	ldr	r1, [r4, #4]
 8009bf8:	f7ff fed8 	bl	80099ac <__cvt>
 8009bfc:	9b06      	ldr	r3, [sp, #24]
 8009bfe:	4680      	mov	r8, r0
 8009c00:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c02:	2b47      	cmp	r3, #71	@ 0x47
 8009c04:	d129      	bne.n	8009c5a <_printf_float+0x172>
 8009c06:	1cc8      	adds	r0, r1, #3
 8009c08:	db02      	blt.n	8009c10 <_printf_float+0x128>
 8009c0a:	6863      	ldr	r3, [r4, #4]
 8009c0c:	4299      	cmp	r1, r3
 8009c0e:	dd41      	ble.n	8009c94 <_printf_float+0x1ac>
 8009c10:	f1aa 0a02 	sub.w	sl, sl, #2
 8009c14:	fa5f fa8a 	uxtb.w	sl, sl
 8009c18:	3901      	subs	r1, #1
 8009c1a:	4652      	mov	r2, sl
 8009c1c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009c20:	9109      	str	r1, [sp, #36]	@ 0x24
 8009c22:	f7ff ff28 	bl	8009a76 <__exponent>
 8009c26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c28:	4681      	mov	r9, r0
 8009c2a:	1813      	adds	r3, r2, r0
 8009c2c:	2a01      	cmp	r2, #1
 8009c2e:	6123      	str	r3, [r4, #16]
 8009c30:	dc02      	bgt.n	8009c38 <_printf_float+0x150>
 8009c32:	6822      	ldr	r2, [r4, #0]
 8009c34:	07d2      	lsls	r2, r2, #31
 8009c36:	d501      	bpl.n	8009c3c <_printf_float+0x154>
 8009c38:	3301      	adds	r3, #1
 8009c3a:	6123      	str	r3, [r4, #16]
 8009c3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d0a2      	beq.n	8009b8a <_printf_float+0xa2>
 8009c44:	232d      	movs	r3, #45	@ 0x2d
 8009c46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c4a:	e79e      	b.n	8009b8a <_printf_float+0xa2>
 8009c4c:	9a06      	ldr	r2, [sp, #24]
 8009c4e:	2a47      	cmp	r2, #71	@ 0x47
 8009c50:	d1c2      	bne.n	8009bd8 <_printf_float+0xf0>
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d1c0      	bne.n	8009bd8 <_printf_float+0xf0>
 8009c56:	2301      	movs	r3, #1
 8009c58:	e7bd      	b.n	8009bd6 <_printf_float+0xee>
 8009c5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009c5e:	d9db      	bls.n	8009c18 <_printf_float+0x130>
 8009c60:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009c64:	d118      	bne.n	8009c98 <_printf_float+0x1b0>
 8009c66:	2900      	cmp	r1, #0
 8009c68:	6863      	ldr	r3, [r4, #4]
 8009c6a:	dd0b      	ble.n	8009c84 <_printf_float+0x19c>
 8009c6c:	6121      	str	r1, [r4, #16]
 8009c6e:	b913      	cbnz	r3, 8009c76 <_printf_float+0x18e>
 8009c70:	6822      	ldr	r2, [r4, #0]
 8009c72:	07d0      	lsls	r0, r2, #31
 8009c74:	d502      	bpl.n	8009c7c <_printf_float+0x194>
 8009c76:	3301      	adds	r3, #1
 8009c78:	440b      	add	r3, r1
 8009c7a:	6123      	str	r3, [r4, #16]
 8009c7c:	f04f 0900 	mov.w	r9, #0
 8009c80:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009c82:	e7db      	b.n	8009c3c <_printf_float+0x154>
 8009c84:	b913      	cbnz	r3, 8009c8c <_printf_float+0x1a4>
 8009c86:	6822      	ldr	r2, [r4, #0]
 8009c88:	07d2      	lsls	r2, r2, #31
 8009c8a:	d501      	bpl.n	8009c90 <_printf_float+0x1a8>
 8009c8c:	3302      	adds	r3, #2
 8009c8e:	e7f4      	b.n	8009c7a <_printf_float+0x192>
 8009c90:	2301      	movs	r3, #1
 8009c92:	e7f2      	b.n	8009c7a <_printf_float+0x192>
 8009c94:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009c98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c9a:	4299      	cmp	r1, r3
 8009c9c:	db05      	blt.n	8009caa <_printf_float+0x1c2>
 8009c9e:	6823      	ldr	r3, [r4, #0]
 8009ca0:	6121      	str	r1, [r4, #16]
 8009ca2:	07d8      	lsls	r0, r3, #31
 8009ca4:	d5ea      	bpl.n	8009c7c <_printf_float+0x194>
 8009ca6:	1c4b      	adds	r3, r1, #1
 8009ca8:	e7e7      	b.n	8009c7a <_printf_float+0x192>
 8009caa:	2900      	cmp	r1, #0
 8009cac:	bfd4      	ite	le
 8009cae:	f1c1 0202 	rsble	r2, r1, #2
 8009cb2:	2201      	movgt	r2, #1
 8009cb4:	4413      	add	r3, r2
 8009cb6:	e7e0      	b.n	8009c7a <_printf_float+0x192>
 8009cb8:	6823      	ldr	r3, [r4, #0]
 8009cba:	055a      	lsls	r2, r3, #21
 8009cbc:	d407      	bmi.n	8009cce <_printf_float+0x1e6>
 8009cbe:	6923      	ldr	r3, [r4, #16]
 8009cc0:	4642      	mov	r2, r8
 8009cc2:	4631      	mov	r1, r6
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	47b8      	blx	r7
 8009cc8:	3001      	adds	r0, #1
 8009cca:	d12b      	bne.n	8009d24 <_printf_float+0x23c>
 8009ccc:	e767      	b.n	8009b9e <_printf_float+0xb6>
 8009cce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009cd2:	f240 80dd 	bls.w	8009e90 <_printf_float+0x3a8>
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	2300      	movs	r3, #0
 8009cda:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009cde:	f7f6 fef7 	bl	8000ad0 <__aeabi_dcmpeq>
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	d033      	beq.n	8009d4e <_printf_float+0x266>
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	4a36      	ldr	r2, [pc, #216]	@ (8009dc4 <_printf_float+0x2dc>)
 8009cea:	4631      	mov	r1, r6
 8009cec:	4628      	mov	r0, r5
 8009cee:	47b8      	blx	r7
 8009cf0:	3001      	adds	r0, #1
 8009cf2:	f43f af54 	beq.w	8009b9e <_printf_float+0xb6>
 8009cf6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009cfa:	4543      	cmp	r3, r8
 8009cfc:	db02      	blt.n	8009d04 <_printf_float+0x21c>
 8009cfe:	6823      	ldr	r3, [r4, #0]
 8009d00:	07d8      	lsls	r0, r3, #31
 8009d02:	d50f      	bpl.n	8009d24 <_printf_float+0x23c>
 8009d04:	4631      	mov	r1, r6
 8009d06:	4628      	mov	r0, r5
 8009d08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d0c:	47b8      	blx	r7
 8009d0e:	3001      	adds	r0, #1
 8009d10:	f43f af45 	beq.w	8009b9e <_printf_float+0xb6>
 8009d14:	f04f 0900 	mov.w	r9, #0
 8009d18:	f108 38ff 	add.w	r8, r8, #4294967295
 8009d1c:	f104 0a1a 	add.w	sl, r4, #26
 8009d20:	45c8      	cmp	r8, r9
 8009d22:	dc09      	bgt.n	8009d38 <_printf_float+0x250>
 8009d24:	6823      	ldr	r3, [r4, #0]
 8009d26:	079b      	lsls	r3, r3, #30
 8009d28:	f100 8103 	bmi.w	8009f32 <_printf_float+0x44a>
 8009d2c:	68e0      	ldr	r0, [r4, #12]
 8009d2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d30:	4298      	cmp	r0, r3
 8009d32:	bfb8      	it	lt
 8009d34:	4618      	movlt	r0, r3
 8009d36:	e734      	b.n	8009ba2 <_printf_float+0xba>
 8009d38:	2301      	movs	r3, #1
 8009d3a:	4652      	mov	r2, sl
 8009d3c:	4631      	mov	r1, r6
 8009d3e:	4628      	mov	r0, r5
 8009d40:	47b8      	blx	r7
 8009d42:	3001      	adds	r0, #1
 8009d44:	f43f af2b 	beq.w	8009b9e <_printf_float+0xb6>
 8009d48:	f109 0901 	add.w	r9, r9, #1
 8009d4c:	e7e8      	b.n	8009d20 <_printf_float+0x238>
 8009d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	dc39      	bgt.n	8009dc8 <_printf_float+0x2e0>
 8009d54:	2301      	movs	r3, #1
 8009d56:	4a1b      	ldr	r2, [pc, #108]	@ (8009dc4 <_printf_float+0x2dc>)
 8009d58:	4631      	mov	r1, r6
 8009d5a:	4628      	mov	r0, r5
 8009d5c:	47b8      	blx	r7
 8009d5e:	3001      	adds	r0, #1
 8009d60:	f43f af1d 	beq.w	8009b9e <_printf_float+0xb6>
 8009d64:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009d68:	ea59 0303 	orrs.w	r3, r9, r3
 8009d6c:	d102      	bne.n	8009d74 <_printf_float+0x28c>
 8009d6e:	6823      	ldr	r3, [r4, #0]
 8009d70:	07d9      	lsls	r1, r3, #31
 8009d72:	d5d7      	bpl.n	8009d24 <_printf_float+0x23c>
 8009d74:	4631      	mov	r1, r6
 8009d76:	4628      	mov	r0, r5
 8009d78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d7c:	47b8      	blx	r7
 8009d7e:	3001      	adds	r0, #1
 8009d80:	f43f af0d 	beq.w	8009b9e <_printf_float+0xb6>
 8009d84:	f04f 0a00 	mov.w	sl, #0
 8009d88:	f104 0b1a 	add.w	fp, r4, #26
 8009d8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d8e:	425b      	negs	r3, r3
 8009d90:	4553      	cmp	r3, sl
 8009d92:	dc01      	bgt.n	8009d98 <_printf_float+0x2b0>
 8009d94:	464b      	mov	r3, r9
 8009d96:	e793      	b.n	8009cc0 <_printf_float+0x1d8>
 8009d98:	2301      	movs	r3, #1
 8009d9a:	465a      	mov	r2, fp
 8009d9c:	4631      	mov	r1, r6
 8009d9e:	4628      	mov	r0, r5
 8009da0:	47b8      	blx	r7
 8009da2:	3001      	adds	r0, #1
 8009da4:	f43f aefb 	beq.w	8009b9e <_printf_float+0xb6>
 8009da8:	f10a 0a01 	add.w	sl, sl, #1
 8009dac:	e7ee      	b.n	8009d8c <_printf_float+0x2a4>
 8009dae:	bf00      	nop
 8009db0:	7fefffff 	.word	0x7fefffff
 8009db4:	0800d080 	.word	0x0800d080
 8009db8:	0800d084 	.word	0x0800d084
 8009dbc:	0800d088 	.word	0x0800d088
 8009dc0:	0800d08c 	.word	0x0800d08c
 8009dc4:	0800d090 	.word	0x0800d090
 8009dc8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009dca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009dce:	4553      	cmp	r3, sl
 8009dd0:	bfa8      	it	ge
 8009dd2:	4653      	movge	r3, sl
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	4699      	mov	r9, r3
 8009dd8:	dc36      	bgt.n	8009e48 <_printf_float+0x360>
 8009dda:	f04f 0b00 	mov.w	fp, #0
 8009dde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009de2:	f104 021a 	add.w	r2, r4, #26
 8009de6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009de8:	9306      	str	r3, [sp, #24]
 8009dea:	eba3 0309 	sub.w	r3, r3, r9
 8009dee:	455b      	cmp	r3, fp
 8009df0:	dc31      	bgt.n	8009e56 <_printf_float+0x36e>
 8009df2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009df4:	459a      	cmp	sl, r3
 8009df6:	dc3a      	bgt.n	8009e6e <_printf_float+0x386>
 8009df8:	6823      	ldr	r3, [r4, #0]
 8009dfa:	07da      	lsls	r2, r3, #31
 8009dfc:	d437      	bmi.n	8009e6e <_printf_float+0x386>
 8009dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e00:	ebaa 0903 	sub.w	r9, sl, r3
 8009e04:	9b06      	ldr	r3, [sp, #24]
 8009e06:	ebaa 0303 	sub.w	r3, sl, r3
 8009e0a:	4599      	cmp	r9, r3
 8009e0c:	bfa8      	it	ge
 8009e0e:	4699      	movge	r9, r3
 8009e10:	f1b9 0f00 	cmp.w	r9, #0
 8009e14:	dc33      	bgt.n	8009e7e <_printf_float+0x396>
 8009e16:	f04f 0800 	mov.w	r8, #0
 8009e1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e1e:	f104 0b1a 	add.w	fp, r4, #26
 8009e22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e24:	ebaa 0303 	sub.w	r3, sl, r3
 8009e28:	eba3 0309 	sub.w	r3, r3, r9
 8009e2c:	4543      	cmp	r3, r8
 8009e2e:	f77f af79 	ble.w	8009d24 <_printf_float+0x23c>
 8009e32:	2301      	movs	r3, #1
 8009e34:	465a      	mov	r2, fp
 8009e36:	4631      	mov	r1, r6
 8009e38:	4628      	mov	r0, r5
 8009e3a:	47b8      	blx	r7
 8009e3c:	3001      	adds	r0, #1
 8009e3e:	f43f aeae 	beq.w	8009b9e <_printf_float+0xb6>
 8009e42:	f108 0801 	add.w	r8, r8, #1
 8009e46:	e7ec      	b.n	8009e22 <_printf_float+0x33a>
 8009e48:	4642      	mov	r2, r8
 8009e4a:	4631      	mov	r1, r6
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	47b8      	blx	r7
 8009e50:	3001      	adds	r0, #1
 8009e52:	d1c2      	bne.n	8009dda <_printf_float+0x2f2>
 8009e54:	e6a3      	b.n	8009b9e <_printf_float+0xb6>
 8009e56:	2301      	movs	r3, #1
 8009e58:	4631      	mov	r1, r6
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	9206      	str	r2, [sp, #24]
 8009e5e:	47b8      	blx	r7
 8009e60:	3001      	adds	r0, #1
 8009e62:	f43f ae9c 	beq.w	8009b9e <_printf_float+0xb6>
 8009e66:	f10b 0b01 	add.w	fp, fp, #1
 8009e6a:	9a06      	ldr	r2, [sp, #24]
 8009e6c:	e7bb      	b.n	8009de6 <_printf_float+0x2fe>
 8009e6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e72:	4631      	mov	r1, r6
 8009e74:	4628      	mov	r0, r5
 8009e76:	47b8      	blx	r7
 8009e78:	3001      	adds	r0, #1
 8009e7a:	d1c0      	bne.n	8009dfe <_printf_float+0x316>
 8009e7c:	e68f      	b.n	8009b9e <_printf_float+0xb6>
 8009e7e:	9a06      	ldr	r2, [sp, #24]
 8009e80:	464b      	mov	r3, r9
 8009e82:	4631      	mov	r1, r6
 8009e84:	4628      	mov	r0, r5
 8009e86:	4442      	add	r2, r8
 8009e88:	47b8      	blx	r7
 8009e8a:	3001      	adds	r0, #1
 8009e8c:	d1c3      	bne.n	8009e16 <_printf_float+0x32e>
 8009e8e:	e686      	b.n	8009b9e <_printf_float+0xb6>
 8009e90:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009e94:	f1ba 0f01 	cmp.w	sl, #1
 8009e98:	dc01      	bgt.n	8009e9e <_printf_float+0x3b6>
 8009e9a:	07db      	lsls	r3, r3, #31
 8009e9c:	d536      	bpl.n	8009f0c <_printf_float+0x424>
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	4642      	mov	r2, r8
 8009ea2:	4631      	mov	r1, r6
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	47b8      	blx	r7
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	f43f ae78 	beq.w	8009b9e <_printf_float+0xb6>
 8009eae:	4631      	mov	r1, r6
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009eb6:	47b8      	blx	r7
 8009eb8:	3001      	adds	r0, #1
 8009eba:	f43f ae70 	beq.w	8009b9e <_printf_float+0xb6>
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ec6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009eca:	f7f6 fe01 	bl	8000ad0 <__aeabi_dcmpeq>
 8009ece:	b9c0      	cbnz	r0, 8009f02 <_printf_float+0x41a>
 8009ed0:	4653      	mov	r3, sl
 8009ed2:	f108 0201 	add.w	r2, r8, #1
 8009ed6:	4631      	mov	r1, r6
 8009ed8:	4628      	mov	r0, r5
 8009eda:	47b8      	blx	r7
 8009edc:	3001      	adds	r0, #1
 8009ede:	d10c      	bne.n	8009efa <_printf_float+0x412>
 8009ee0:	e65d      	b.n	8009b9e <_printf_float+0xb6>
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	465a      	mov	r2, fp
 8009ee6:	4631      	mov	r1, r6
 8009ee8:	4628      	mov	r0, r5
 8009eea:	47b8      	blx	r7
 8009eec:	3001      	adds	r0, #1
 8009eee:	f43f ae56 	beq.w	8009b9e <_printf_float+0xb6>
 8009ef2:	f108 0801 	add.w	r8, r8, #1
 8009ef6:	45d0      	cmp	r8, sl
 8009ef8:	dbf3      	blt.n	8009ee2 <_printf_float+0x3fa>
 8009efa:	464b      	mov	r3, r9
 8009efc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009f00:	e6df      	b.n	8009cc2 <_printf_float+0x1da>
 8009f02:	f04f 0800 	mov.w	r8, #0
 8009f06:	f104 0b1a 	add.w	fp, r4, #26
 8009f0a:	e7f4      	b.n	8009ef6 <_printf_float+0x40e>
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	4642      	mov	r2, r8
 8009f10:	e7e1      	b.n	8009ed6 <_printf_float+0x3ee>
 8009f12:	2301      	movs	r3, #1
 8009f14:	464a      	mov	r2, r9
 8009f16:	4631      	mov	r1, r6
 8009f18:	4628      	mov	r0, r5
 8009f1a:	47b8      	blx	r7
 8009f1c:	3001      	adds	r0, #1
 8009f1e:	f43f ae3e 	beq.w	8009b9e <_printf_float+0xb6>
 8009f22:	f108 0801 	add.w	r8, r8, #1
 8009f26:	68e3      	ldr	r3, [r4, #12]
 8009f28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f2a:	1a5b      	subs	r3, r3, r1
 8009f2c:	4543      	cmp	r3, r8
 8009f2e:	dcf0      	bgt.n	8009f12 <_printf_float+0x42a>
 8009f30:	e6fc      	b.n	8009d2c <_printf_float+0x244>
 8009f32:	f04f 0800 	mov.w	r8, #0
 8009f36:	f104 0919 	add.w	r9, r4, #25
 8009f3a:	e7f4      	b.n	8009f26 <_printf_float+0x43e>

08009f3c <_printf_common>:
 8009f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f40:	4616      	mov	r6, r2
 8009f42:	4698      	mov	r8, r3
 8009f44:	688a      	ldr	r2, [r1, #8]
 8009f46:	4607      	mov	r7, r0
 8009f48:	690b      	ldr	r3, [r1, #16]
 8009f4a:	460c      	mov	r4, r1
 8009f4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f50:	4293      	cmp	r3, r2
 8009f52:	bfb8      	it	lt
 8009f54:	4613      	movlt	r3, r2
 8009f56:	6033      	str	r3, [r6, #0]
 8009f58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009f5c:	b10a      	cbz	r2, 8009f62 <_printf_common+0x26>
 8009f5e:	3301      	adds	r3, #1
 8009f60:	6033      	str	r3, [r6, #0]
 8009f62:	6823      	ldr	r3, [r4, #0]
 8009f64:	0699      	lsls	r1, r3, #26
 8009f66:	bf42      	ittt	mi
 8009f68:	6833      	ldrmi	r3, [r6, #0]
 8009f6a:	3302      	addmi	r3, #2
 8009f6c:	6033      	strmi	r3, [r6, #0]
 8009f6e:	6825      	ldr	r5, [r4, #0]
 8009f70:	f015 0506 	ands.w	r5, r5, #6
 8009f74:	d106      	bne.n	8009f84 <_printf_common+0x48>
 8009f76:	f104 0a19 	add.w	sl, r4, #25
 8009f7a:	68e3      	ldr	r3, [r4, #12]
 8009f7c:	6832      	ldr	r2, [r6, #0]
 8009f7e:	1a9b      	subs	r3, r3, r2
 8009f80:	42ab      	cmp	r3, r5
 8009f82:	dc2b      	bgt.n	8009fdc <_printf_common+0xa0>
 8009f84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f88:	6822      	ldr	r2, [r4, #0]
 8009f8a:	3b00      	subs	r3, #0
 8009f8c:	bf18      	it	ne
 8009f8e:	2301      	movne	r3, #1
 8009f90:	0692      	lsls	r2, r2, #26
 8009f92:	d430      	bmi.n	8009ff6 <_printf_common+0xba>
 8009f94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f98:	4641      	mov	r1, r8
 8009f9a:	4638      	mov	r0, r7
 8009f9c:	47c8      	blx	r9
 8009f9e:	3001      	adds	r0, #1
 8009fa0:	d023      	beq.n	8009fea <_printf_common+0xae>
 8009fa2:	6823      	ldr	r3, [r4, #0]
 8009fa4:	341a      	adds	r4, #26
 8009fa6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009faa:	f003 0306 	and.w	r3, r3, #6
 8009fae:	2b04      	cmp	r3, #4
 8009fb0:	bf0a      	itet	eq
 8009fb2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8009fb6:	2500      	movne	r5, #0
 8009fb8:	6833      	ldreq	r3, [r6, #0]
 8009fba:	f04f 0600 	mov.w	r6, #0
 8009fbe:	bf08      	it	eq
 8009fc0:	1aed      	subeq	r5, r5, r3
 8009fc2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009fc6:	bf08      	it	eq
 8009fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	bfc4      	itt	gt
 8009fd0:	1a9b      	subgt	r3, r3, r2
 8009fd2:	18ed      	addgt	r5, r5, r3
 8009fd4:	42b5      	cmp	r5, r6
 8009fd6:	d11a      	bne.n	800a00e <_printf_common+0xd2>
 8009fd8:	2000      	movs	r0, #0
 8009fda:	e008      	b.n	8009fee <_printf_common+0xb2>
 8009fdc:	2301      	movs	r3, #1
 8009fde:	4652      	mov	r2, sl
 8009fe0:	4641      	mov	r1, r8
 8009fe2:	4638      	mov	r0, r7
 8009fe4:	47c8      	blx	r9
 8009fe6:	3001      	adds	r0, #1
 8009fe8:	d103      	bne.n	8009ff2 <_printf_common+0xb6>
 8009fea:	f04f 30ff 	mov.w	r0, #4294967295
 8009fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ff2:	3501      	adds	r5, #1
 8009ff4:	e7c1      	b.n	8009f7a <_printf_common+0x3e>
 8009ff6:	18e1      	adds	r1, r4, r3
 8009ff8:	1c5a      	adds	r2, r3, #1
 8009ffa:	2030      	movs	r0, #48	@ 0x30
 8009ffc:	3302      	adds	r3, #2
 8009ffe:	4422      	add	r2, r4
 800a000:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a004:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a008:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a00c:	e7c2      	b.n	8009f94 <_printf_common+0x58>
 800a00e:	2301      	movs	r3, #1
 800a010:	4622      	mov	r2, r4
 800a012:	4641      	mov	r1, r8
 800a014:	4638      	mov	r0, r7
 800a016:	47c8      	blx	r9
 800a018:	3001      	adds	r0, #1
 800a01a:	d0e6      	beq.n	8009fea <_printf_common+0xae>
 800a01c:	3601      	adds	r6, #1
 800a01e:	e7d9      	b.n	8009fd4 <_printf_common+0x98>

0800a020 <_printf_i>:
 800a020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a024:	7e0f      	ldrb	r7, [r1, #24]
 800a026:	4691      	mov	r9, r2
 800a028:	4680      	mov	r8, r0
 800a02a:	460c      	mov	r4, r1
 800a02c:	2f78      	cmp	r7, #120	@ 0x78
 800a02e:	469a      	mov	sl, r3
 800a030:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a032:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a036:	d807      	bhi.n	800a048 <_printf_i+0x28>
 800a038:	2f62      	cmp	r7, #98	@ 0x62
 800a03a:	d80a      	bhi.n	800a052 <_printf_i+0x32>
 800a03c:	2f00      	cmp	r7, #0
 800a03e:	f000 80d2 	beq.w	800a1e6 <_printf_i+0x1c6>
 800a042:	2f58      	cmp	r7, #88	@ 0x58
 800a044:	f000 80b9 	beq.w	800a1ba <_printf_i+0x19a>
 800a048:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a04c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a050:	e03a      	b.n	800a0c8 <_printf_i+0xa8>
 800a052:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a056:	2b15      	cmp	r3, #21
 800a058:	d8f6      	bhi.n	800a048 <_printf_i+0x28>
 800a05a:	a101      	add	r1, pc, #4	@ (adr r1, 800a060 <_printf_i+0x40>)
 800a05c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a060:	0800a0b9 	.word	0x0800a0b9
 800a064:	0800a0cd 	.word	0x0800a0cd
 800a068:	0800a049 	.word	0x0800a049
 800a06c:	0800a049 	.word	0x0800a049
 800a070:	0800a049 	.word	0x0800a049
 800a074:	0800a049 	.word	0x0800a049
 800a078:	0800a0cd 	.word	0x0800a0cd
 800a07c:	0800a049 	.word	0x0800a049
 800a080:	0800a049 	.word	0x0800a049
 800a084:	0800a049 	.word	0x0800a049
 800a088:	0800a049 	.word	0x0800a049
 800a08c:	0800a1cd 	.word	0x0800a1cd
 800a090:	0800a0f7 	.word	0x0800a0f7
 800a094:	0800a187 	.word	0x0800a187
 800a098:	0800a049 	.word	0x0800a049
 800a09c:	0800a049 	.word	0x0800a049
 800a0a0:	0800a1ef 	.word	0x0800a1ef
 800a0a4:	0800a049 	.word	0x0800a049
 800a0a8:	0800a0f7 	.word	0x0800a0f7
 800a0ac:	0800a049 	.word	0x0800a049
 800a0b0:	0800a049 	.word	0x0800a049
 800a0b4:	0800a18f 	.word	0x0800a18f
 800a0b8:	6833      	ldr	r3, [r6, #0]
 800a0ba:	1d1a      	adds	r2, r3, #4
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	6032      	str	r2, [r6, #0]
 800a0c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a0c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e09d      	b.n	800a208 <_printf_i+0x1e8>
 800a0cc:	6833      	ldr	r3, [r6, #0]
 800a0ce:	6820      	ldr	r0, [r4, #0]
 800a0d0:	1d19      	adds	r1, r3, #4
 800a0d2:	6031      	str	r1, [r6, #0]
 800a0d4:	0606      	lsls	r6, r0, #24
 800a0d6:	d501      	bpl.n	800a0dc <_printf_i+0xbc>
 800a0d8:	681d      	ldr	r5, [r3, #0]
 800a0da:	e003      	b.n	800a0e4 <_printf_i+0xc4>
 800a0dc:	0645      	lsls	r5, r0, #25
 800a0de:	d5fb      	bpl.n	800a0d8 <_printf_i+0xb8>
 800a0e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a0e4:	2d00      	cmp	r5, #0
 800a0e6:	da03      	bge.n	800a0f0 <_printf_i+0xd0>
 800a0e8:	232d      	movs	r3, #45	@ 0x2d
 800a0ea:	426d      	negs	r5, r5
 800a0ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0f0:	4859      	ldr	r0, [pc, #356]	@ (800a258 <_printf_i+0x238>)
 800a0f2:	230a      	movs	r3, #10
 800a0f4:	e011      	b.n	800a11a <_printf_i+0xfa>
 800a0f6:	6821      	ldr	r1, [r4, #0]
 800a0f8:	6833      	ldr	r3, [r6, #0]
 800a0fa:	0608      	lsls	r0, r1, #24
 800a0fc:	f853 5b04 	ldr.w	r5, [r3], #4
 800a100:	d402      	bmi.n	800a108 <_printf_i+0xe8>
 800a102:	0649      	lsls	r1, r1, #25
 800a104:	bf48      	it	mi
 800a106:	b2ad      	uxthmi	r5, r5
 800a108:	2f6f      	cmp	r7, #111	@ 0x6f
 800a10a:	6033      	str	r3, [r6, #0]
 800a10c:	4852      	ldr	r0, [pc, #328]	@ (800a258 <_printf_i+0x238>)
 800a10e:	bf14      	ite	ne
 800a110:	230a      	movne	r3, #10
 800a112:	2308      	moveq	r3, #8
 800a114:	2100      	movs	r1, #0
 800a116:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a11a:	6866      	ldr	r6, [r4, #4]
 800a11c:	2e00      	cmp	r6, #0
 800a11e:	60a6      	str	r6, [r4, #8]
 800a120:	bfa2      	ittt	ge
 800a122:	6821      	ldrge	r1, [r4, #0]
 800a124:	f021 0104 	bicge.w	r1, r1, #4
 800a128:	6021      	strge	r1, [r4, #0]
 800a12a:	b90d      	cbnz	r5, 800a130 <_printf_i+0x110>
 800a12c:	2e00      	cmp	r6, #0
 800a12e:	d04b      	beq.n	800a1c8 <_printf_i+0x1a8>
 800a130:	4616      	mov	r6, r2
 800a132:	fbb5 f1f3 	udiv	r1, r5, r3
 800a136:	fb03 5711 	mls	r7, r3, r1, r5
 800a13a:	5dc7      	ldrb	r7, [r0, r7]
 800a13c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a140:	462f      	mov	r7, r5
 800a142:	460d      	mov	r5, r1
 800a144:	42bb      	cmp	r3, r7
 800a146:	d9f4      	bls.n	800a132 <_printf_i+0x112>
 800a148:	2b08      	cmp	r3, #8
 800a14a:	d10b      	bne.n	800a164 <_printf_i+0x144>
 800a14c:	6823      	ldr	r3, [r4, #0]
 800a14e:	07df      	lsls	r7, r3, #31
 800a150:	d508      	bpl.n	800a164 <_printf_i+0x144>
 800a152:	6923      	ldr	r3, [r4, #16]
 800a154:	6861      	ldr	r1, [r4, #4]
 800a156:	4299      	cmp	r1, r3
 800a158:	bfde      	ittt	le
 800a15a:	2330      	movle	r3, #48	@ 0x30
 800a15c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a160:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a164:	1b92      	subs	r2, r2, r6
 800a166:	6122      	str	r2, [r4, #16]
 800a168:	464b      	mov	r3, r9
 800a16a:	aa03      	add	r2, sp, #12
 800a16c:	4621      	mov	r1, r4
 800a16e:	4640      	mov	r0, r8
 800a170:	f8cd a000 	str.w	sl, [sp]
 800a174:	f7ff fee2 	bl	8009f3c <_printf_common>
 800a178:	3001      	adds	r0, #1
 800a17a:	d14a      	bne.n	800a212 <_printf_i+0x1f2>
 800a17c:	f04f 30ff 	mov.w	r0, #4294967295
 800a180:	b004      	add	sp, #16
 800a182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a186:	6823      	ldr	r3, [r4, #0]
 800a188:	f043 0320 	orr.w	r3, r3, #32
 800a18c:	6023      	str	r3, [r4, #0]
 800a18e:	2778      	movs	r7, #120	@ 0x78
 800a190:	4832      	ldr	r0, [pc, #200]	@ (800a25c <_printf_i+0x23c>)
 800a192:	6823      	ldr	r3, [r4, #0]
 800a194:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a198:	061f      	lsls	r7, r3, #24
 800a19a:	6831      	ldr	r1, [r6, #0]
 800a19c:	f851 5b04 	ldr.w	r5, [r1], #4
 800a1a0:	d402      	bmi.n	800a1a8 <_printf_i+0x188>
 800a1a2:	065f      	lsls	r7, r3, #25
 800a1a4:	bf48      	it	mi
 800a1a6:	b2ad      	uxthmi	r5, r5
 800a1a8:	6031      	str	r1, [r6, #0]
 800a1aa:	07d9      	lsls	r1, r3, #31
 800a1ac:	bf44      	itt	mi
 800a1ae:	f043 0320 	orrmi.w	r3, r3, #32
 800a1b2:	6023      	strmi	r3, [r4, #0]
 800a1b4:	b11d      	cbz	r5, 800a1be <_printf_i+0x19e>
 800a1b6:	2310      	movs	r3, #16
 800a1b8:	e7ac      	b.n	800a114 <_printf_i+0xf4>
 800a1ba:	4827      	ldr	r0, [pc, #156]	@ (800a258 <_printf_i+0x238>)
 800a1bc:	e7e9      	b.n	800a192 <_printf_i+0x172>
 800a1be:	6823      	ldr	r3, [r4, #0]
 800a1c0:	f023 0320 	bic.w	r3, r3, #32
 800a1c4:	6023      	str	r3, [r4, #0]
 800a1c6:	e7f6      	b.n	800a1b6 <_printf_i+0x196>
 800a1c8:	4616      	mov	r6, r2
 800a1ca:	e7bd      	b.n	800a148 <_printf_i+0x128>
 800a1cc:	6833      	ldr	r3, [r6, #0]
 800a1ce:	6825      	ldr	r5, [r4, #0]
 800a1d0:	1d18      	adds	r0, r3, #4
 800a1d2:	6961      	ldr	r1, [r4, #20]
 800a1d4:	6030      	str	r0, [r6, #0]
 800a1d6:	062e      	lsls	r6, r5, #24
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	d501      	bpl.n	800a1e0 <_printf_i+0x1c0>
 800a1dc:	6019      	str	r1, [r3, #0]
 800a1de:	e002      	b.n	800a1e6 <_printf_i+0x1c6>
 800a1e0:	0668      	lsls	r0, r5, #25
 800a1e2:	d5fb      	bpl.n	800a1dc <_printf_i+0x1bc>
 800a1e4:	8019      	strh	r1, [r3, #0]
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	4616      	mov	r6, r2
 800a1ea:	6123      	str	r3, [r4, #16]
 800a1ec:	e7bc      	b.n	800a168 <_printf_i+0x148>
 800a1ee:	6833      	ldr	r3, [r6, #0]
 800a1f0:	2100      	movs	r1, #0
 800a1f2:	1d1a      	adds	r2, r3, #4
 800a1f4:	6032      	str	r2, [r6, #0]
 800a1f6:	681e      	ldr	r6, [r3, #0]
 800a1f8:	6862      	ldr	r2, [r4, #4]
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	f000 faf3 	bl	800a7e6 <memchr>
 800a200:	b108      	cbz	r0, 800a206 <_printf_i+0x1e6>
 800a202:	1b80      	subs	r0, r0, r6
 800a204:	6060      	str	r0, [r4, #4]
 800a206:	6863      	ldr	r3, [r4, #4]
 800a208:	6123      	str	r3, [r4, #16]
 800a20a:	2300      	movs	r3, #0
 800a20c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a210:	e7aa      	b.n	800a168 <_printf_i+0x148>
 800a212:	6923      	ldr	r3, [r4, #16]
 800a214:	4632      	mov	r2, r6
 800a216:	4649      	mov	r1, r9
 800a218:	4640      	mov	r0, r8
 800a21a:	47d0      	blx	sl
 800a21c:	3001      	adds	r0, #1
 800a21e:	d0ad      	beq.n	800a17c <_printf_i+0x15c>
 800a220:	6823      	ldr	r3, [r4, #0]
 800a222:	079b      	lsls	r3, r3, #30
 800a224:	d413      	bmi.n	800a24e <_printf_i+0x22e>
 800a226:	68e0      	ldr	r0, [r4, #12]
 800a228:	9b03      	ldr	r3, [sp, #12]
 800a22a:	4298      	cmp	r0, r3
 800a22c:	bfb8      	it	lt
 800a22e:	4618      	movlt	r0, r3
 800a230:	e7a6      	b.n	800a180 <_printf_i+0x160>
 800a232:	2301      	movs	r3, #1
 800a234:	4632      	mov	r2, r6
 800a236:	4649      	mov	r1, r9
 800a238:	4640      	mov	r0, r8
 800a23a:	47d0      	blx	sl
 800a23c:	3001      	adds	r0, #1
 800a23e:	d09d      	beq.n	800a17c <_printf_i+0x15c>
 800a240:	3501      	adds	r5, #1
 800a242:	68e3      	ldr	r3, [r4, #12]
 800a244:	9903      	ldr	r1, [sp, #12]
 800a246:	1a5b      	subs	r3, r3, r1
 800a248:	42ab      	cmp	r3, r5
 800a24a:	dcf2      	bgt.n	800a232 <_printf_i+0x212>
 800a24c:	e7eb      	b.n	800a226 <_printf_i+0x206>
 800a24e:	2500      	movs	r5, #0
 800a250:	f104 0619 	add.w	r6, r4, #25
 800a254:	e7f5      	b.n	800a242 <_printf_i+0x222>
 800a256:	bf00      	nop
 800a258:	0800d092 	.word	0x0800d092
 800a25c:	0800d0a3 	.word	0x0800d0a3

0800a260 <std>:
 800a260:	2300      	movs	r3, #0
 800a262:	b510      	push	{r4, lr}
 800a264:	4604      	mov	r4, r0
 800a266:	6083      	str	r3, [r0, #8]
 800a268:	8181      	strh	r1, [r0, #12]
 800a26a:	4619      	mov	r1, r3
 800a26c:	6643      	str	r3, [r0, #100]	@ 0x64
 800a26e:	81c2      	strh	r2, [r0, #14]
 800a270:	2208      	movs	r2, #8
 800a272:	6183      	str	r3, [r0, #24]
 800a274:	e9c0 3300 	strd	r3, r3, [r0]
 800a278:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a27c:	305c      	adds	r0, #92	@ 0x5c
 800a27e:	f000 fa33 	bl	800a6e8 <memset>
 800a282:	4b0d      	ldr	r3, [pc, #52]	@ (800a2b8 <std+0x58>)
 800a284:	6224      	str	r4, [r4, #32]
 800a286:	6263      	str	r3, [r4, #36]	@ 0x24
 800a288:	4b0c      	ldr	r3, [pc, #48]	@ (800a2bc <std+0x5c>)
 800a28a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a28c:	4b0c      	ldr	r3, [pc, #48]	@ (800a2c0 <std+0x60>)
 800a28e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a290:	4b0c      	ldr	r3, [pc, #48]	@ (800a2c4 <std+0x64>)
 800a292:	6323      	str	r3, [r4, #48]	@ 0x30
 800a294:	4b0c      	ldr	r3, [pc, #48]	@ (800a2c8 <std+0x68>)
 800a296:	429c      	cmp	r4, r3
 800a298:	d006      	beq.n	800a2a8 <std+0x48>
 800a29a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a29e:	4294      	cmp	r4, r2
 800a2a0:	d002      	beq.n	800a2a8 <std+0x48>
 800a2a2:	33d0      	adds	r3, #208	@ 0xd0
 800a2a4:	429c      	cmp	r4, r3
 800a2a6:	d105      	bne.n	800a2b4 <std+0x54>
 800a2a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2b0:	f000 ba96 	b.w	800a7e0 <__retarget_lock_init_recursive>
 800a2b4:	bd10      	pop	{r4, pc}
 800a2b6:	bf00      	nop
 800a2b8:	0800a505 	.word	0x0800a505
 800a2bc:	0800a527 	.word	0x0800a527
 800a2c0:	0800a55f 	.word	0x0800a55f
 800a2c4:	0800a583 	.word	0x0800a583
 800a2c8:	20003f60 	.word	0x20003f60

0800a2cc <stdio_exit_handler>:
 800a2cc:	4a02      	ldr	r2, [pc, #8]	@ (800a2d8 <stdio_exit_handler+0xc>)
 800a2ce:	4903      	ldr	r1, [pc, #12]	@ (800a2dc <stdio_exit_handler+0x10>)
 800a2d0:	4803      	ldr	r0, [pc, #12]	@ (800a2e0 <stdio_exit_handler+0x14>)
 800a2d2:	f000 b869 	b.w	800a3a8 <_fwalk_sglue>
 800a2d6:	bf00      	nop
 800a2d8:	20000020 	.word	0x20000020
 800a2dc:	0800c40d 	.word	0x0800c40d
 800a2e0:	20000030 	.word	0x20000030

0800a2e4 <cleanup_stdio>:
 800a2e4:	6841      	ldr	r1, [r0, #4]
 800a2e6:	4b0c      	ldr	r3, [pc, #48]	@ (800a318 <cleanup_stdio+0x34>)
 800a2e8:	4299      	cmp	r1, r3
 800a2ea:	b510      	push	{r4, lr}
 800a2ec:	4604      	mov	r4, r0
 800a2ee:	d001      	beq.n	800a2f4 <cleanup_stdio+0x10>
 800a2f0:	f002 f88c 	bl	800c40c <_fflush_r>
 800a2f4:	68a1      	ldr	r1, [r4, #8]
 800a2f6:	4b09      	ldr	r3, [pc, #36]	@ (800a31c <cleanup_stdio+0x38>)
 800a2f8:	4299      	cmp	r1, r3
 800a2fa:	d002      	beq.n	800a302 <cleanup_stdio+0x1e>
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	f002 f885 	bl	800c40c <_fflush_r>
 800a302:	68e1      	ldr	r1, [r4, #12]
 800a304:	4b06      	ldr	r3, [pc, #24]	@ (800a320 <cleanup_stdio+0x3c>)
 800a306:	4299      	cmp	r1, r3
 800a308:	d004      	beq.n	800a314 <cleanup_stdio+0x30>
 800a30a:	4620      	mov	r0, r4
 800a30c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a310:	f002 b87c 	b.w	800c40c <_fflush_r>
 800a314:	bd10      	pop	{r4, pc}
 800a316:	bf00      	nop
 800a318:	20003f60 	.word	0x20003f60
 800a31c:	20003fc8 	.word	0x20003fc8
 800a320:	20004030 	.word	0x20004030

0800a324 <global_stdio_init.part.0>:
 800a324:	b510      	push	{r4, lr}
 800a326:	4b0b      	ldr	r3, [pc, #44]	@ (800a354 <global_stdio_init.part.0+0x30>)
 800a328:	2104      	movs	r1, #4
 800a32a:	4c0b      	ldr	r4, [pc, #44]	@ (800a358 <global_stdio_init.part.0+0x34>)
 800a32c:	4a0b      	ldr	r2, [pc, #44]	@ (800a35c <global_stdio_init.part.0+0x38>)
 800a32e:	4620      	mov	r0, r4
 800a330:	601a      	str	r2, [r3, #0]
 800a332:	2200      	movs	r2, #0
 800a334:	f7ff ff94 	bl	800a260 <std>
 800a338:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a33c:	2201      	movs	r2, #1
 800a33e:	2109      	movs	r1, #9
 800a340:	f7ff ff8e 	bl	800a260 <std>
 800a344:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a348:	2202      	movs	r2, #2
 800a34a:	2112      	movs	r1, #18
 800a34c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a350:	f7ff bf86 	b.w	800a260 <std>
 800a354:	20004098 	.word	0x20004098
 800a358:	20003f60 	.word	0x20003f60
 800a35c:	0800a2cd 	.word	0x0800a2cd

0800a360 <__sfp_lock_acquire>:
 800a360:	4801      	ldr	r0, [pc, #4]	@ (800a368 <__sfp_lock_acquire+0x8>)
 800a362:	f000 ba3e 	b.w	800a7e2 <__retarget_lock_acquire_recursive>
 800a366:	bf00      	nop
 800a368:	200040a1 	.word	0x200040a1

0800a36c <__sfp_lock_release>:
 800a36c:	4801      	ldr	r0, [pc, #4]	@ (800a374 <__sfp_lock_release+0x8>)
 800a36e:	f000 ba39 	b.w	800a7e4 <__retarget_lock_release_recursive>
 800a372:	bf00      	nop
 800a374:	200040a1 	.word	0x200040a1

0800a378 <__sinit>:
 800a378:	b510      	push	{r4, lr}
 800a37a:	4604      	mov	r4, r0
 800a37c:	f7ff fff0 	bl	800a360 <__sfp_lock_acquire>
 800a380:	6a23      	ldr	r3, [r4, #32]
 800a382:	b11b      	cbz	r3, 800a38c <__sinit+0x14>
 800a384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a388:	f7ff bff0 	b.w	800a36c <__sfp_lock_release>
 800a38c:	4b04      	ldr	r3, [pc, #16]	@ (800a3a0 <__sinit+0x28>)
 800a38e:	6223      	str	r3, [r4, #32]
 800a390:	4b04      	ldr	r3, [pc, #16]	@ (800a3a4 <__sinit+0x2c>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d1f5      	bne.n	800a384 <__sinit+0xc>
 800a398:	f7ff ffc4 	bl	800a324 <global_stdio_init.part.0>
 800a39c:	e7f2      	b.n	800a384 <__sinit+0xc>
 800a39e:	bf00      	nop
 800a3a0:	0800a2e5 	.word	0x0800a2e5
 800a3a4:	20004098 	.word	0x20004098

0800a3a8 <_fwalk_sglue>:
 800a3a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3ac:	4607      	mov	r7, r0
 800a3ae:	4688      	mov	r8, r1
 800a3b0:	4614      	mov	r4, r2
 800a3b2:	2600      	movs	r6, #0
 800a3b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3b8:	f1b9 0901 	subs.w	r9, r9, #1
 800a3bc:	d505      	bpl.n	800a3ca <_fwalk_sglue+0x22>
 800a3be:	6824      	ldr	r4, [r4, #0]
 800a3c0:	2c00      	cmp	r4, #0
 800a3c2:	d1f7      	bne.n	800a3b4 <_fwalk_sglue+0xc>
 800a3c4:	4630      	mov	r0, r6
 800a3c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3ca:	89ab      	ldrh	r3, [r5, #12]
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d907      	bls.n	800a3e0 <_fwalk_sglue+0x38>
 800a3d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	d003      	beq.n	800a3e0 <_fwalk_sglue+0x38>
 800a3d8:	4629      	mov	r1, r5
 800a3da:	4638      	mov	r0, r7
 800a3dc:	47c0      	blx	r8
 800a3de:	4306      	orrs	r6, r0
 800a3e0:	3568      	adds	r5, #104	@ 0x68
 800a3e2:	e7e9      	b.n	800a3b8 <_fwalk_sglue+0x10>

0800a3e4 <iprintf>:
 800a3e4:	b40f      	push	{r0, r1, r2, r3}
 800a3e6:	b507      	push	{r0, r1, r2, lr}
 800a3e8:	4906      	ldr	r1, [pc, #24]	@ (800a404 <iprintf+0x20>)
 800a3ea:	ab04      	add	r3, sp, #16
 800a3ec:	6808      	ldr	r0, [r1, #0]
 800a3ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3f2:	6881      	ldr	r1, [r0, #8]
 800a3f4:	9301      	str	r3, [sp, #4]
 800a3f6:	f001 fe6d 	bl	800c0d4 <_vfiprintf_r>
 800a3fa:	b003      	add	sp, #12
 800a3fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a400:	b004      	add	sp, #16
 800a402:	4770      	bx	lr
 800a404:	2000002c 	.word	0x2000002c

0800a408 <_puts_r>:
 800a408:	6a03      	ldr	r3, [r0, #32]
 800a40a:	b570      	push	{r4, r5, r6, lr}
 800a40c:	4605      	mov	r5, r0
 800a40e:	460e      	mov	r6, r1
 800a410:	6884      	ldr	r4, [r0, #8]
 800a412:	b90b      	cbnz	r3, 800a418 <_puts_r+0x10>
 800a414:	f7ff ffb0 	bl	800a378 <__sinit>
 800a418:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a41a:	07db      	lsls	r3, r3, #31
 800a41c:	d405      	bmi.n	800a42a <_puts_r+0x22>
 800a41e:	89a3      	ldrh	r3, [r4, #12]
 800a420:	0598      	lsls	r0, r3, #22
 800a422:	d402      	bmi.n	800a42a <_puts_r+0x22>
 800a424:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a426:	f000 f9dc 	bl	800a7e2 <__retarget_lock_acquire_recursive>
 800a42a:	89a3      	ldrh	r3, [r4, #12]
 800a42c:	0719      	lsls	r1, r3, #28
 800a42e:	d502      	bpl.n	800a436 <_puts_r+0x2e>
 800a430:	6923      	ldr	r3, [r4, #16]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d135      	bne.n	800a4a2 <_puts_r+0x9a>
 800a436:	4621      	mov	r1, r4
 800a438:	4628      	mov	r0, r5
 800a43a:	f000 f8e5 	bl	800a608 <__swsetup_r>
 800a43e:	b380      	cbz	r0, 800a4a2 <_puts_r+0x9a>
 800a440:	f04f 35ff 	mov.w	r5, #4294967295
 800a444:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a446:	07da      	lsls	r2, r3, #31
 800a448:	d405      	bmi.n	800a456 <_puts_r+0x4e>
 800a44a:	89a3      	ldrh	r3, [r4, #12]
 800a44c:	059b      	lsls	r3, r3, #22
 800a44e:	d402      	bmi.n	800a456 <_puts_r+0x4e>
 800a450:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a452:	f000 f9c7 	bl	800a7e4 <__retarget_lock_release_recursive>
 800a456:	4628      	mov	r0, r5
 800a458:	bd70      	pop	{r4, r5, r6, pc}
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	da04      	bge.n	800a468 <_puts_r+0x60>
 800a45e:	69a2      	ldr	r2, [r4, #24]
 800a460:	429a      	cmp	r2, r3
 800a462:	dc17      	bgt.n	800a494 <_puts_r+0x8c>
 800a464:	290a      	cmp	r1, #10
 800a466:	d015      	beq.n	800a494 <_puts_r+0x8c>
 800a468:	6823      	ldr	r3, [r4, #0]
 800a46a:	1c5a      	adds	r2, r3, #1
 800a46c:	6022      	str	r2, [r4, #0]
 800a46e:	7019      	strb	r1, [r3, #0]
 800a470:	68a3      	ldr	r3, [r4, #8]
 800a472:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a476:	3b01      	subs	r3, #1
 800a478:	60a3      	str	r3, [r4, #8]
 800a47a:	2900      	cmp	r1, #0
 800a47c:	d1ed      	bne.n	800a45a <_puts_r+0x52>
 800a47e:	2b00      	cmp	r3, #0
 800a480:	da11      	bge.n	800a4a6 <_puts_r+0x9e>
 800a482:	4622      	mov	r2, r4
 800a484:	210a      	movs	r1, #10
 800a486:	4628      	mov	r0, r5
 800a488:	f000 f87f 	bl	800a58a <__swbuf_r>
 800a48c:	3001      	adds	r0, #1
 800a48e:	d0d7      	beq.n	800a440 <_puts_r+0x38>
 800a490:	250a      	movs	r5, #10
 800a492:	e7d7      	b.n	800a444 <_puts_r+0x3c>
 800a494:	4622      	mov	r2, r4
 800a496:	4628      	mov	r0, r5
 800a498:	f000 f877 	bl	800a58a <__swbuf_r>
 800a49c:	3001      	adds	r0, #1
 800a49e:	d1e7      	bne.n	800a470 <_puts_r+0x68>
 800a4a0:	e7ce      	b.n	800a440 <_puts_r+0x38>
 800a4a2:	3e01      	subs	r6, #1
 800a4a4:	e7e4      	b.n	800a470 <_puts_r+0x68>
 800a4a6:	6823      	ldr	r3, [r4, #0]
 800a4a8:	1c5a      	adds	r2, r3, #1
 800a4aa:	6022      	str	r2, [r4, #0]
 800a4ac:	220a      	movs	r2, #10
 800a4ae:	701a      	strb	r2, [r3, #0]
 800a4b0:	e7ee      	b.n	800a490 <_puts_r+0x88>
	...

0800a4b4 <puts>:
 800a4b4:	4b02      	ldr	r3, [pc, #8]	@ (800a4c0 <puts+0xc>)
 800a4b6:	4601      	mov	r1, r0
 800a4b8:	6818      	ldr	r0, [r3, #0]
 800a4ba:	f7ff bfa5 	b.w	800a408 <_puts_r>
 800a4be:	bf00      	nop
 800a4c0:	2000002c 	.word	0x2000002c

0800a4c4 <siprintf>:
 800a4c4:	b40e      	push	{r1, r2, r3}
 800a4c6:	b500      	push	{lr}
 800a4c8:	b09c      	sub	sp, #112	@ 0x70
 800a4ca:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a4ce:	ab1d      	add	r3, sp, #116	@ 0x74
 800a4d0:	9002      	str	r0, [sp, #8]
 800a4d2:	9006      	str	r0, [sp, #24]
 800a4d4:	9107      	str	r1, [sp, #28]
 800a4d6:	9104      	str	r1, [sp, #16]
 800a4d8:	4808      	ldr	r0, [pc, #32]	@ (800a4fc <siprintf+0x38>)
 800a4da:	4909      	ldr	r1, [pc, #36]	@ (800a500 <siprintf+0x3c>)
 800a4dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4e0:	9105      	str	r1, [sp, #20]
 800a4e2:	a902      	add	r1, sp, #8
 800a4e4:	6800      	ldr	r0, [r0, #0]
 800a4e6:	9301      	str	r3, [sp, #4]
 800a4e8:	f001 fcce 	bl	800be88 <_svfiprintf_r>
 800a4ec:	9b02      	ldr	r3, [sp, #8]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	701a      	strb	r2, [r3, #0]
 800a4f2:	b01c      	add	sp, #112	@ 0x70
 800a4f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4f8:	b003      	add	sp, #12
 800a4fa:	4770      	bx	lr
 800a4fc:	2000002c 	.word	0x2000002c
 800a500:	ffff0208 	.word	0xffff0208

0800a504 <__sread>:
 800a504:	b510      	push	{r4, lr}
 800a506:	460c      	mov	r4, r1
 800a508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a50c:	f000 f91a 	bl	800a744 <_read_r>
 800a510:	2800      	cmp	r0, #0
 800a512:	bfab      	itete	ge
 800a514:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a516:	89a3      	ldrhlt	r3, [r4, #12]
 800a518:	181b      	addge	r3, r3, r0
 800a51a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a51e:	bfac      	ite	ge
 800a520:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a522:	81a3      	strhlt	r3, [r4, #12]
 800a524:	bd10      	pop	{r4, pc}

0800a526 <__swrite>:
 800a526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a52a:	461f      	mov	r7, r3
 800a52c:	898b      	ldrh	r3, [r1, #12]
 800a52e:	4605      	mov	r5, r0
 800a530:	460c      	mov	r4, r1
 800a532:	05db      	lsls	r3, r3, #23
 800a534:	4616      	mov	r6, r2
 800a536:	d505      	bpl.n	800a544 <__swrite+0x1e>
 800a538:	2302      	movs	r3, #2
 800a53a:	2200      	movs	r2, #0
 800a53c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a540:	f000 f8ee 	bl	800a720 <_lseek_r>
 800a544:	89a3      	ldrh	r3, [r4, #12]
 800a546:	4632      	mov	r2, r6
 800a548:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a54c:	4628      	mov	r0, r5
 800a54e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a552:	81a3      	strh	r3, [r4, #12]
 800a554:	463b      	mov	r3, r7
 800a556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a55a:	f000 b905 	b.w	800a768 <_write_r>

0800a55e <__sseek>:
 800a55e:	b510      	push	{r4, lr}
 800a560:	460c      	mov	r4, r1
 800a562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a566:	f000 f8db 	bl	800a720 <_lseek_r>
 800a56a:	1c43      	adds	r3, r0, #1
 800a56c:	89a3      	ldrh	r3, [r4, #12]
 800a56e:	bf15      	itete	ne
 800a570:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a572:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a576:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a57a:	81a3      	strheq	r3, [r4, #12]
 800a57c:	bf18      	it	ne
 800a57e:	81a3      	strhne	r3, [r4, #12]
 800a580:	bd10      	pop	{r4, pc}

0800a582 <__sclose>:
 800a582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a586:	f000 b8bb 	b.w	800a700 <_close_r>

0800a58a <__swbuf_r>:
 800a58a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a58c:	460e      	mov	r6, r1
 800a58e:	4614      	mov	r4, r2
 800a590:	4605      	mov	r5, r0
 800a592:	b118      	cbz	r0, 800a59c <__swbuf_r+0x12>
 800a594:	6a03      	ldr	r3, [r0, #32]
 800a596:	b90b      	cbnz	r3, 800a59c <__swbuf_r+0x12>
 800a598:	f7ff feee 	bl	800a378 <__sinit>
 800a59c:	69a3      	ldr	r3, [r4, #24]
 800a59e:	60a3      	str	r3, [r4, #8]
 800a5a0:	89a3      	ldrh	r3, [r4, #12]
 800a5a2:	071a      	lsls	r2, r3, #28
 800a5a4:	d501      	bpl.n	800a5aa <__swbuf_r+0x20>
 800a5a6:	6923      	ldr	r3, [r4, #16]
 800a5a8:	b943      	cbnz	r3, 800a5bc <__swbuf_r+0x32>
 800a5aa:	4621      	mov	r1, r4
 800a5ac:	4628      	mov	r0, r5
 800a5ae:	f000 f82b 	bl	800a608 <__swsetup_r>
 800a5b2:	b118      	cbz	r0, 800a5bc <__swbuf_r+0x32>
 800a5b4:	f04f 37ff 	mov.w	r7, #4294967295
 800a5b8:	4638      	mov	r0, r7
 800a5ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5bc:	6823      	ldr	r3, [r4, #0]
 800a5be:	b2f6      	uxtb	r6, r6
 800a5c0:	6922      	ldr	r2, [r4, #16]
 800a5c2:	4637      	mov	r7, r6
 800a5c4:	1a98      	subs	r0, r3, r2
 800a5c6:	6963      	ldr	r3, [r4, #20]
 800a5c8:	4283      	cmp	r3, r0
 800a5ca:	dc05      	bgt.n	800a5d8 <__swbuf_r+0x4e>
 800a5cc:	4621      	mov	r1, r4
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	f001 ff1c 	bl	800c40c <_fflush_r>
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	d1ed      	bne.n	800a5b4 <__swbuf_r+0x2a>
 800a5d8:	68a3      	ldr	r3, [r4, #8]
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	60a3      	str	r3, [r4, #8]
 800a5de:	6823      	ldr	r3, [r4, #0]
 800a5e0:	1c5a      	adds	r2, r3, #1
 800a5e2:	6022      	str	r2, [r4, #0]
 800a5e4:	701e      	strb	r6, [r3, #0]
 800a5e6:	1c43      	adds	r3, r0, #1
 800a5e8:	6962      	ldr	r2, [r4, #20]
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d004      	beq.n	800a5f8 <__swbuf_r+0x6e>
 800a5ee:	89a3      	ldrh	r3, [r4, #12]
 800a5f0:	07db      	lsls	r3, r3, #31
 800a5f2:	d5e1      	bpl.n	800a5b8 <__swbuf_r+0x2e>
 800a5f4:	2e0a      	cmp	r6, #10
 800a5f6:	d1df      	bne.n	800a5b8 <__swbuf_r+0x2e>
 800a5f8:	4621      	mov	r1, r4
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	f001 ff06 	bl	800c40c <_fflush_r>
 800a600:	2800      	cmp	r0, #0
 800a602:	d0d9      	beq.n	800a5b8 <__swbuf_r+0x2e>
 800a604:	e7d6      	b.n	800a5b4 <__swbuf_r+0x2a>
	...

0800a608 <__swsetup_r>:
 800a608:	b538      	push	{r3, r4, r5, lr}
 800a60a:	4b29      	ldr	r3, [pc, #164]	@ (800a6b0 <__swsetup_r+0xa8>)
 800a60c:	4605      	mov	r5, r0
 800a60e:	460c      	mov	r4, r1
 800a610:	6818      	ldr	r0, [r3, #0]
 800a612:	b118      	cbz	r0, 800a61c <__swsetup_r+0x14>
 800a614:	6a03      	ldr	r3, [r0, #32]
 800a616:	b90b      	cbnz	r3, 800a61c <__swsetup_r+0x14>
 800a618:	f7ff feae 	bl	800a378 <__sinit>
 800a61c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a620:	0719      	lsls	r1, r3, #28
 800a622:	d422      	bmi.n	800a66a <__swsetup_r+0x62>
 800a624:	06da      	lsls	r2, r3, #27
 800a626:	d407      	bmi.n	800a638 <__swsetup_r+0x30>
 800a628:	2209      	movs	r2, #9
 800a62a:	602a      	str	r2, [r5, #0]
 800a62c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a630:	f04f 30ff 	mov.w	r0, #4294967295
 800a634:	81a3      	strh	r3, [r4, #12]
 800a636:	e033      	b.n	800a6a0 <__swsetup_r+0x98>
 800a638:	0758      	lsls	r0, r3, #29
 800a63a:	d512      	bpl.n	800a662 <__swsetup_r+0x5a>
 800a63c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a63e:	b141      	cbz	r1, 800a652 <__swsetup_r+0x4a>
 800a640:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a644:	4299      	cmp	r1, r3
 800a646:	d002      	beq.n	800a64e <__swsetup_r+0x46>
 800a648:	4628      	mov	r0, r5
 800a64a:	f000 ff39 	bl	800b4c0 <_free_r>
 800a64e:	2300      	movs	r3, #0
 800a650:	6363      	str	r3, [r4, #52]	@ 0x34
 800a652:	89a3      	ldrh	r3, [r4, #12]
 800a654:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a658:	81a3      	strh	r3, [r4, #12]
 800a65a:	2300      	movs	r3, #0
 800a65c:	6063      	str	r3, [r4, #4]
 800a65e:	6923      	ldr	r3, [r4, #16]
 800a660:	6023      	str	r3, [r4, #0]
 800a662:	89a3      	ldrh	r3, [r4, #12]
 800a664:	f043 0308 	orr.w	r3, r3, #8
 800a668:	81a3      	strh	r3, [r4, #12]
 800a66a:	6923      	ldr	r3, [r4, #16]
 800a66c:	b94b      	cbnz	r3, 800a682 <__swsetup_r+0x7a>
 800a66e:	89a3      	ldrh	r3, [r4, #12]
 800a670:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a674:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a678:	d003      	beq.n	800a682 <__swsetup_r+0x7a>
 800a67a:	4621      	mov	r1, r4
 800a67c:	4628      	mov	r0, r5
 800a67e:	f001 ff12 	bl	800c4a6 <__smakebuf_r>
 800a682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a686:	f013 0201 	ands.w	r2, r3, #1
 800a68a:	d00a      	beq.n	800a6a2 <__swsetup_r+0x9a>
 800a68c:	2200      	movs	r2, #0
 800a68e:	60a2      	str	r2, [r4, #8]
 800a690:	6962      	ldr	r2, [r4, #20]
 800a692:	4252      	negs	r2, r2
 800a694:	61a2      	str	r2, [r4, #24]
 800a696:	6922      	ldr	r2, [r4, #16]
 800a698:	b942      	cbnz	r2, 800a6ac <__swsetup_r+0xa4>
 800a69a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a69e:	d1c5      	bne.n	800a62c <__swsetup_r+0x24>
 800a6a0:	bd38      	pop	{r3, r4, r5, pc}
 800a6a2:	0799      	lsls	r1, r3, #30
 800a6a4:	bf58      	it	pl
 800a6a6:	6962      	ldrpl	r2, [r4, #20]
 800a6a8:	60a2      	str	r2, [r4, #8]
 800a6aa:	e7f4      	b.n	800a696 <__swsetup_r+0x8e>
 800a6ac:	2000      	movs	r0, #0
 800a6ae:	e7f7      	b.n	800a6a0 <__swsetup_r+0x98>
 800a6b0:	2000002c 	.word	0x2000002c

0800a6b4 <memmove>:
 800a6b4:	4288      	cmp	r0, r1
 800a6b6:	b510      	push	{r4, lr}
 800a6b8:	eb01 0402 	add.w	r4, r1, r2
 800a6bc:	d902      	bls.n	800a6c4 <memmove+0x10>
 800a6be:	4284      	cmp	r4, r0
 800a6c0:	4623      	mov	r3, r4
 800a6c2:	d807      	bhi.n	800a6d4 <memmove+0x20>
 800a6c4:	1e43      	subs	r3, r0, #1
 800a6c6:	42a1      	cmp	r1, r4
 800a6c8:	d008      	beq.n	800a6dc <memmove+0x28>
 800a6ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6d2:	e7f8      	b.n	800a6c6 <memmove+0x12>
 800a6d4:	4402      	add	r2, r0
 800a6d6:	4601      	mov	r1, r0
 800a6d8:	428a      	cmp	r2, r1
 800a6da:	d100      	bne.n	800a6de <memmove+0x2a>
 800a6dc:	bd10      	pop	{r4, pc}
 800a6de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6e6:	e7f7      	b.n	800a6d8 <memmove+0x24>

0800a6e8 <memset>:
 800a6e8:	4402      	add	r2, r0
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d100      	bne.n	800a6f2 <memset+0xa>
 800a6f0:	4770      	bx	lr
 800a6f2:	f803 1b01 	strb.w	r1, [r3], #1
 800a6f6:	e7f9      	b.n	800a6ec <memset+0x4>

0800a6f8 <_localeconv_r>:
 800a6f8:	4800      	ldr	r0, [pc, #0]	@ (800a6fc <_localeconv_r+0x4>)
 800a6fa:	4770      	bx	lr
 800a6fc:	2000016c 	.word	0x2000016c

0800a700 <_close_r>:
 800a700:	b538      	push	{r3, r4, r5, lr}
 800a702:	2300      	movs	r3, #0
 800a704:	4d05      	ldr	r5, [pc, #20]	@ (800a71c <_close_r+0x1c>)
 800a706:	4604      	mov	r4, r0
 800a708:	4608      	mov	r0, r1
 800a70a:	602b      	str	r3, [r5, #0]
 800a70c:	f7f8 f81b 	bl	8002746 <_close>
 800a710:	1c43      	adds	r3, r0, #1
 800a712:	d102      	bne.n	800a71a <_close_r+0x1a>
 800a714:	682b      	ldr	r3, [r5, #0]
 800a716:	b103      	cbz	r3, 800a71a <_close_r+0x1a>
 800a718:	6023      	str	r3, [r4, #0]
 800a71a:	bd38      	pop	{r3, r4, r5, pc}
 800a71c:	2000409c 	.word	0x2000409c

0800a720 <_lseek_r>:
 800a720:	b538      	push	{r3, r4, r5, lr}
 800a722:	4604      	mov	r4, r0
 800a724:	4d06      	ldr	r5, [pc, #24]	@ (800a740 <_lseek_r+0x20>)
 800a726:	4608      	mov	r0, r1
 800a728:	4611      	mov	r1, r2
 800a72a:	2200      	movs	r2, #0
 800a72c:	602a      	str	r2, [r5, #0]
 800a72e:	461a      	mov	r2, r3
 800a730:	f7f8 f830 	bl	8002794 <_lseek>
 800a734:	1c43      	adds	r3, r0, #1
 800a736:	d102      	bne.n	800a73e <_lseek_r+0x1e>
 800a738:	682b      	ldr	r3, [r5, #0]
 800a73a:	b103      	cbz	r3, 800a73e <_lseek_r+0x1e>
 800a73c:	6023      	str	r3, [r4, #0]
 800a73e:	bd38      	pop	{r3, r4, r5, pc}
 800a740:	2000409c 	.word	0x2000409c

0800a744 <_read_r>:
 800a744:	b538      	push	{r3, r4, r5, lr}
 800a746:	4604      	mov	r4, r0
 800a748:	4d06      	ldr	r5, [pc, #24]	@ (800a764 <_read_r+0x20>)
 800a74a:	4608      	mov	r0, r1
 800a74c:	4611      	mov	r1, r2
 800a74e:	2200      	movs	r2, #0
 800a750:	602a      	str	r2, [r5, #0]
 800a752:	461a      	mov	r2, r3
 800a754:	f7f7 ffbe 	bl	80026d4 <_read>
 800a758:	1c43      	adds	r3, r0, #1
 800a75a:	d102      	bne.n	800a762 <_read_r+0x1e>
 800a75c:	682b      	ldr	r3, [r5, #0]
 800a75e:	b103      	cbz	r3, 800a762 <_read_r+0x1e>
 800a760:	6023      	str	r3, [r4, #0]
 800a762:	bd38      	pop	{r3, r4, r5, pc}
 800a764:	2000409c 	.word	0x2000409c

0800a768 <_write_r>:
 800a768:	b538      	push	{r3, r4, r5, lr}
 800a76a:	4604      	mov	r4, r0
 800a76c:	4d06      	ldr	r5, [pc, #24]	@ (800a788 <_write_r+0x20>)
 800a76e:	4608      	mov	r0, r1
 800a770:	4611      	mov	r1, r2
 800a772:	2200      	movs	r2, #0
 800a774:	602a      	str	r2, [r5, #0]
 800a776:	461a      	mov	r2, r3
 800a778:	f7f7 ffc9 	bl	800270e <_write>
 800a77c:	1c43      	adds	r3, r0, #1
 800a77e:	d102      	bne.n	800a786 <_write_r+0x1e>
 800a780:	682b      	ldr	r3, [r5, #0]
 800a782:	b103      	cbz	r3, 800a786 <_write_r+0x1e>
 800a784:	6023      	str	r3, [r4, #0]
 800a786:	bd38      	pop	{r3, r4, r5, pc}
 800a788:	2000409c 	.word	0x2000409c

0800a78c <__errno>:
 800a78c:	4b01      	ldr	r3, [pc, #4]	@ (800a794 <__errno+0x8>)
 800a78e:	6818      	ldr	r0, [r3, #0]
 800a790:	4770      	bx	lr
 800a792:	bf00      	nop
 800a794:	2000002c 	.word	0x2000002c

0800a798 <__libc_init_array>:
 800a798:	b570      	push	{r4, r5, r6, lr}
 800a79a:	4d0d      	ldr	r5, [pc, #52]	@ (800a7d0 <__libc_init_array+0x38>)
 800a79c:	2600      	movs	r6, #0
 800a79e:	4c0d      	ldr	r4, [pc, #52]	@ (800a7d4 <__libc_init_array+0x3c>)
 800a7a0:	1b64      	subs	r4, r4, r5
 800a7a2:	10a4      	asrs	r4, r4, #2
 800a7a4:	42a6      	cmp	r6, r4
 800a7a6:	d109      	bne.n	800a7bc <__libc_init_array+0x24>
 800a7a8:	4d0b      	ldr	r5, [pc, #44]	@ (800a7d8 <__libc_init_array+0x40>)
 800a7aa:	2600      	movs	r6, #0
 800a7ac:	4c0b      	ldr	r4, [pc, #44]	@ (800a7dc <__libc_init_array+0x44>)
 800a7ae:	f001 ffcf 	bl	800c750 <_init>
 800a7b2:	1b64      	subs	r4, r4, r5
 800a7b4:	10a4      	asrs	r4, r4, #2
 800a7b6:	42a6      	cmp	r6, r4
 800a7b8:	d105      	bne.n	800a7c6 <__libc_init_array+0x2e>
 800a7ba:	bd70      	pop	{r4, r5, r6, pc}
 800a7bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7c0:	3601      	adds	r6, #1
 800a7c2:	4798      	blx	r3
 800a7c4:	e7ee      	b.n	800a7a4 <__libc_init_array+0xc>
 800a7c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7ca:	3601      	adds	r6, #1
 800a7cc:	4798      	blx	r3
 800a7ce:	e7f2      	b.n	800a7b6 <__libc_init_array+0x1e>
 800a7d0:	0800d3f8 	.word	0x0800d3f8
 800a7d4:	0800d3f8 	.word	0x0800d3f8
 800a7d8:	0800d3f8 	.word	0x0800d3f8
 800a7dc:	0800d3fc 	.word	0x0800d3fc

0800a7e0 <__retarget_lock_init_recursive>:
 800a7e0:	4770      	bx	lr

0800a7e2 <__retarget_lock_acquire_recursive>:
 800a7e2:	4770      	bx	lr

0800a7e4 <__retarget_lock_release_recursive>:
 800a7e4:	4770      	bx	lr

0800a7e6 <memchr>:
 800a7e6:	b2c9      	uxtb	r1, r1
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	4402      	add	r2, r0
 800a7ec:	b510      	push	{r4, lr}
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	d101      	bne.n	800a7f8 <memchr+0x12>
 800a7f4:	2000      	movs	r0, #0
 800a7f6:	e003      	b.n	800a800 <memchr+0x1a>
 800a7f8:	7804      	ldrb	r4, [r0, #0]
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	428c      	cmp	r4, r1
 800a7fe:	d1f6      	bne.n	800a7ee <memchr+0x8>
 800a800:	bd10      	pop	{r4, pc}

0800a802 <memcpy>:
 800a802:	440a      	add	r2, r1
 800a804:	1e43      	subs	r3, r0, #1
 800a806:	4291      	cmp	r1, r2
 800a808:	d100      	bne.n	800a80c <memcpy+0xa>
 800a80a:	4770      	bx	lr
 800a80c:	b510      	push	{r4, lr}
 800a80e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a812:	4291      	cmp	r1, r2
 800a814:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a818:	d1f9      	bne.n	800a80e <memcpy+0xc>
 800a81a:	bd10      	pop	{r4, pc}

0800a81c <quorem>:
 800a81c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a820:	6903      	ldr	r3, [r0, #16]
 800a822:	4607      	mov	r7, r0
 800a824:	690c      	ldr	r4, [r1, #16]
 800a826:	42a3      	cmp	r3, r4
 800a828:	f2c0 8083 	blt.w	800a932 <quorem+0x116>
 800a82c:	3c01      	subs	r4, #1
 800a82e:	f100 0514 	add.w	r5, r0, #20
 800a832:	f101 0814 	add.w	r8, r1, #20
 800a836:	00a3      	lsls	r3, r4, #2
 800a838:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a83c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a840:	9300      	str	r3, [sp, #0]
 800a842:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a846:	9301      	str	r3, [sp, #4]
 800a848:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a84c:	3301      	adds	r3, #1
 800a84e:	429a      	cmp	r2, r3
 800a850:	fbb2 f6f3 	udiv	r6, r2, r3
 800a854:	d331      	bcc.n	800a8ba <quorem+0x9e>
 800a856:	f04f 0a00 	mov.w	sl, #0
 800a85a:	46c4      	mov	ip, r8
 800a85c:	46ae      	mov	lr, r5
 800a85e:	46d3      	mov	fp, sl
 800a860:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a864:	b298      	uxth	r0, r3
 800a866:	45e1      	cmp	r9, ip
 800a868:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800a86c:	fb06 a000 	mla	r0, r6, r0, sl
 800a870:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800a874:	b280      	uxth	r0, r0
 800a876:	fb06 2303 	mla	r3, r6, r3, r2
 800a87a:	f8de 2000 	ldr.w	r2, [lr]
 800a87e:	b292      	uxth	r2, r2
 800a880:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a884:	eba2 0200 	sub.w	r2, r2, r0
 800a888:	b29b      	uxth	r3, r3
 800a88a:	f8de 0000 	ldr.w	r0, [lr]
 800a88e:	445a      	add	r2, fp
 800a890:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a894:	b292      	uxth	r2, r2
 800a896:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a89a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a89e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a8a2:	f84e 2b04 	str.w	r2, [lr], #4
 800a8a6:	d2db      	bcs.n	800a860 <quorem+0x44>
 800a8a8:	9b00      	ldr	r3, [sp, #0]
 800a8aa:	58eb      	ldr	r3, [r5, r3]
 800a8ac:	b92b      	cbnz	r3, 800a8ba <quorem+0x9e>
 800a8ae:	9b01      	ldr	r3, [sp, #4]
 800a8b0:	3b04      	subs	r3, #4
 800a8b2:	429d      	cmp	r5, r3
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	d330      	bcc.n	800a91a <quorem+0xfe>
 800a8b8:	613c      	str	r4, [r7, #16]
 800a8ba:	4638      	mov	r0, r7
 800a8bc:	f001 f97c 	bl	800bbb8 <__mcmp>
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	db26      	blt.n	800a912 <quorem+0xf6>
 800a8c4:	4629      	mov	r1, r5
 800a8c6:	2000      	movs	r0, #0
 800a8c8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a8cc:	f8d1 c000 	ldr.w	ip, [r1]
 800a8d0:	fa1f fe82 	uxth.w	lr, r2
 800a8d4:	45c1      	cmp	r9, r8
 800a8d6:	fa1f f38c 	uxth.w	r3, ip
 800a8da:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800a8de:	eba3 030e 	sub.w	r3, r3, lr
 800a8e2:	4403      	add	r3, r0
 800a8e4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a8ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a8f6:	f841 3b04 	str.w	r3, [r1], #4
 800a8fa:	d2e5      	bcs.n	800a8c8 <quorem+0xac>
 800a8fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a900:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a904:	b922      	cbnz	r2, 800a910 <quorem+0xf4>
 800a906:	3b04      	subs	r3, #4
 800a908:	429d      	cmp	r5, r3
 800a90a:	461a      	mov	r2, r3
 800a90c:	d30b      	bcc.n	800a926 <quorem+0x10a>
 800a90e:	613c      	str	r4, [r7, #16]
 800a910:	3601      	adds	r6, #1
 800a912:	4630      	mov	r0, r6
 800a914:	b003      	add	sp, #12
 800a916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a91a:	6812      	ldr	r2, [r2, #0]
 800a91c:	3b04      	subs	r3, #4
 800a91e:	2a00      	cmp	r2, #0
 800a920:	d1ca      	bne.n	800a8b8 <quorem+0x9c>
 800a922:	3c01      	subs	r4, #1
 800a924:	e7c5      	b.n	800a8b2 <quorem+0x96>
 800a926:	6812      	ldr	r2, [r2, #0]
 800a928:	3b04      	subs	r3, #4
 800a92a:	2a00      	cmp	r2, #0
 800a92c:	d1ef      	bne.n	800a90e <quorem+0xf2>
 800a92e:	3c01      	subs	r4, #1
 800a930:	e7ea      	b.n	800a908 <quorem+0xec>
 800a932:	2000      	movs	r0, #0
 800a934:	e7ee      	b.n	800a914 <quorem+0xf8>
	...

0800a938 <_dtoa_r>:
 800a938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a93c:	69c7      	ldr	r7, [r0, #28]
 800a93e:	b099      	sub	sp, #100	@ 0x64
 800a940:	4683      	mov	fp, r0
 800a942:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a944:	9109      	str	r1, [sp, #36]	@ 0x24
 800a946:	920e      	str	r2, [sp, #56]	@ 0x38
 800a948:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a94a:	ec55 4b10 	vmov	r4, r5, d0
 800a94e:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a952:	b97f      	cbnz	r7, 800a974 <_dtoa_r+0x3c>
 800a954:	2010      	movs	r0, #16
 800a956:	f000 fdfd 	bl	800b554 <malloc>
 800a95a:	4602      	mov	r2, r0
 800a95c:	f8cb 001c 	str.w	r0, [fp, #28]
 800a960:	b920      	cbnz	r0, 800a96c <_dtoa_r+0x34>
 800a962:	4ba7      	ldr	r3, [pc, #668]	@ (800ac00 <_dtoa_r+0x2c8>)
 800a964:	21ef      	movs	r1, #239	@ 0xef
 800a966:	48a7      	ldr	r0, [pc, #668]	@ (800ac04 <_dtoa_r+0x2cc>)
 800a968:	f001 fe0c 	bl	800c584 <__assert_func>
 800a96c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a970:	6007      	str	r7, [r0, #0]
 800a972:	60c7      	str	r7, [r0, #12]
 800a974:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a978:	6819      	ldr	r1, [r3, #0]
 800a97a:	b159      	cbz	r1, 800a994 <_dtoa_r+0x5c>
 800a97c:	685a      	ldr	r2, [r3, #4]
 800a97e:	2301      	movs	r3, #1
 800a980:	4658      	mov	r0, fp
 800a982:	4093      	lsls	r3, r2
 800a984:	604a      	str	r2, [r1, #4]
 800a986:	608b      	str	r3, [r1, #8]
 800a988:	f000 feda 	bl	800b740 <_Bfree>
 800a98c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a990:	2200      	movs	r2, #0
 800a992:	601a      	str	r2, [r3, #0]
 800a994:	1e2b      	subs	r3, r5, #0
 800a996:	bfb7      	itett	lt
 800a998:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a99c:	2300      	movge	r3, #0
 800a99e:	2201      	movlt	r2, #1
 800a9a0:	9303      	strlt	r3, [sp, #12]
 800a9a2:	bfa8      	it	ge
 800a9a4:	6033      	strge	r3, [r6, #0]
 800a9a6:	9f03      	ldr	r7, [sp, #12]
 800a9a8:	4b97      	ldr	r3, [pc, #604]	@ (800ac08 <_dtoa_r+0x2d0>)
 800a9aa:	bfb8      	it	lt
 800a9ac:	6032      	strlt	r2, [r6, #0]
 800a9ae:	43bb      	bics	r3, r7
 800a9b0:	d112      	bne.n	800a9d8 <_dtoa_r+0xa0>
 800a9b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a9b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a9b8:	6013      	str	r3, [r2, #0]
 800a9ba:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a9be:	4323      	orrs	r3, r4
 800a9c0:	f000 854c 	beq.w	800b45c <_dtoa_r+0xb24>
 800a9c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a9c6:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ac1c <_dtoa_r+0x2e4>
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	f000 854e 	beq.w	800b46c <_dtoa_r+0xb34>
 800a9d0:	f10a 0303 	add.w	r3, sl, #3
 800a9d4:	f000 bd48 	b.w	800b468 <_dtoa_r+0xb30>
 800a9d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	2300      	movs	r3, #0
 800a9e0:	ec51 0b17 	vmov	r0, r1, d7
 800a9e4:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a9e8:	f7f6 f872 	bl	8000ad0 <__aeabi_dcmpeq>
 800a9ec:	4680      	mov	r8, r0
 800a9ee:	b158      	cbz	r0, 800aa08 <_dtoa_r+0xd0>
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a9f4:	6013      	str	r3, [r2, #0]
 800a9f6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a9f8:	b113      	cbz	r3, 800aa00 <_dtoa_r+0xc8>
 800a9fa:	4b84      	ldr	r3, [pc, #528]	@ (800ac0c <_dtoa_r+0x2d4>)
 800a9fc:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a9fe:	6013      	str	r3, [r2, #0]
 800aa00:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800ac20 <_dtoa_r+0x2e8>
 800aa04:	f000 bd32 	b.w	800b46c <_dtoa_r+0xb34>
 800aa08:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800aa0c:	aa16      	add	r2, sp, #88	@ 0x58
 800aa0e:	a917      	add	r1, sp, #92	@ 0x5c
 800aa10:	4658      	mov	r0, fp
 800aa12:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aa16:	f001 f983 	bl	800bd20 <__d2b>
 800aa1a:	4681      	mov	r9, r0
 800aa1c:	2e00      	cmp	r6, #0
 800aa1e:	d075      	beq.n	800ab0c <_dtoa_r+0x1d4>
 800aa20:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa22:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800aa26:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800aa2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa2e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800aa32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa36:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	4b74      	ldr	r3, [pc, #464]	@ (800ac10 <_dtoa_r+0x2d8>)
 800aa40:	f7f5 fc26 	bl	8000290 <__aeabi_dsub>
 800aa44:	a368      	add	r3, pc, #416	@ (adr r3, 800abe8 <_dtoa_r+0x2b0>)
 800aa46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4a:	f7f5 fdd9 	bl	8000600 <__aeabi_dmul>
 800aa4e:	a368      	add	r3, pc, #416	@ (adr r3, 800abf0 <_dtoa_r+0x2b8>)
 800aa50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa54:	f7f5 fc1e 	bl	8000294 <__adddf3>
 800aa58:	4604      	mov	r4, r0
 800aa5a:	460d      	mov	r5, r1
 800aa5c:	4630      	mov	r0, r6
 800aa5e:	f7f5 fd65 	bl	800052c <__aeabi_i2d>
 800aa62:	a365      	add	r3, pc, #404	@ (adr r3, 800abf8 <_dtoa_r+0x2c0>)
 800aa64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa68:	f7f5 fdca 	bl	8000600 <__aeabi_dmul>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	460b      	mov	r3, r1
 800aa70:	4620      	mov	r0, r4
 800aa72:	4629      	mov	r1, r5
 800aa74:	f7f5 fc0e 	bl	8000294 <__adddf3>
 800aa78:	4604      	mov	r4, r0
 800aa7a:	460d      	mov	r5, r1
 800aa7c:	f7f6 f870 	bl	8000b60 <__aeabi_d2iz>
 800aa80:	2200      	movs	r2, #0
 800aa82:	4607      	mov	r7, r0
 800aa84:	2300      	movs	r3, #0
 800aa86:	4620      	mov	r0, r4
 800aa88:	4629      	mov	r1, r5
 800aa8a:	f7f6 f82b 	bl	8000ae4 <__aeabi_dcmplt>
 800aa8e:	b140      	cbz	r0, 800aaa2 <_dtoa_r+0x16a>
 800aa90:	4638      	mov	r0, r7
 800aa92:	f7f5 fd4b 	bl	800052c <__aeabi_i2d>
 800aa96:	4622      	mov	r2, r4
 800aa98:	462b      	mov	r3, r5
 800aa9a:	f7f6 f819 	bl	8000ad0 <__aeabi_dcmpeq>
 800aa9e:	b900      	cbnz	r0, 800aaa2 <_dtoa_r+0x16a>
 800aaa0:	3f01      	subs	r7, #1
 800aaa2:	2f16      	cmp	r7, #22
 800aaa4:	d851      	bhi.n	800ab4a <_dtoa_r+0x212>
 800aaa6:	4b5b      	ldr	r3, [pc, #364]	@ (800ac14 <_dtoa_r+0x2dc>)
 800aaa8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aaac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab4:	f7f6 f816 	bl	8000ae4 <__aeabi_dcmplt>
 800aab8:	2800      	cmp	r0, #0
 800aaba:	d048      	beq.n	800ab4e <_dtoa_r+0x216>
 800aabc:	3f01      	subs	r7, #1
 800aabe:	2300      	movs	r3, #0
 800aac0:	9312      	str	r3, [sp, #72]	@ 0x48
 800aac2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aac4:	1b9b      	subs	r3, r3, r6
 800aac6:	1e5a      	subs	r2, r3, #1
 800aac8:	bf46      	itte	mi
 800aaca:	f1c3 0801 	rsbmi	r8, r3, #1
 800aace:	2300      	movmi	r3, #0
 800aad0:	f04f 0800 	movpl.w	r8, #0
 800aad4:	9208      	str	r2, [sp, #32]
 800aad6:	bf48      	it	mi
 800aad8:	9308      	strmi	r3, [sp, #32]
 800aada:	2f00      	cmp	r7, #0
 800aadc:	db39      	blt.n	800ab52 <_dtoa_r+0x21a>
 800aade:	9b08      	ldr	r3, [sp, #32]
 800aae0:	970f      	str	r7, [sp, #60]	@ 0x3c
 800aae2:	443b      	add	r3, r7
 800aae4:	9308      	str	r3, [sp, #32]
 800aae6:	2300      	movs	r3, #0
 800aae8:	930a      	str	r3, [sp, #40]	@ 0x28
 800aaea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaec:	2b09      	cmp	r3, #9
 800aaee:	d864      	bhi.n	800abba <_dtoa_r+0x282>
 800aaf0:	2b05      	cmp	r3, #5
 800aaf2:	bfc5      	ittet	gt
 800aaf4:	3b04      	subgt	r3, #4
 800aaf6:	2400      	movgt	r4, #0
 800aaf8:	2401      	movle	r4, #1
 800aafa:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800aafc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aafe:	3b02      	subs	r3, #2
 800ab00:	2b03      	cmp	r3, #3
 800ab02:	d865      	bhi.n	800abd0 <_dtoa_r+0x298>
 800ab04:	e8df f003 	tbb	[pc, r3]
 800ab08:	5737392c 	.word	0x5737392c
 800ab0c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ab10:	441e      	add	r6, r3
 800ab12:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ab16:	2b20      	cmp	r3, #32
 800ab18:	bfc9      	itett	gt
 800ab1a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ab1e:	f1c3 0320 	rsble	r3, r3, #32
 800ab22:	409f      	lslgt	r7, r3
 800ab24:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ab28:	bfd8      	it	le
 800ab2a:	fa04 f003 	lslle.w	r0, r4, r3
 800ab2e:	f106 36ff 	add.w	r6, r6, #4294967295
 800ab32:	bfc4      	itt	gt
 800ab34:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ab38:	ea47 0003 	orrgt.w	r0, r7, r3
 800ab3c:	f7f5 fce6 	bl	800050c <__aeabi_ui2d>
 800ab40:	2201      	movs	r2, #1
 800ab42:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ab46:	9214      	str	r2, [sp, #80]	@ 0x50
 800ab48:	e777      	b.n	800aa3a <_dtoa_r+0x102>
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e7b8      	b.n	800aac0 <_dtoa_r+0x188>
 800ab4e:	9012      	str	r0, [sp, #72]	@ 0x48
 800ab50:	e7b7      	b.n	800aac2 <_dtoa_r+0x18a>
 800ab52:	427b      	negs	r3, r7
 800ab54:	eba8 0807 	sub.w	r8, r8, r7
 800ab58:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ab5e:	e7c4      	b.n	800aaea <_dtoa_r+0x1b2>
 800ab60:	2300      	movs	r3, #0
 800ab62:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	dc35      	bgt.n	800abd6 <_dtoa_r+0x29e>
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	9300      	str	r3, [sp, #0]
 800ab70:	9307      	str	r3, [sp, #28]
 800ab72:	920e      	str	r2, [sp, #56]	@ 0x38
 800ab74:	e00b      	b.n	800ab8e <_dtoa_r+0x256>
 800ab76:	2301      	movs	r3, #1
 800ab78:	e7f3      	b.n	800ab62 <_dtoa_r+0x22a>
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab80:	18fb      	adds	r3, r7, r3
 800ab82:	9300      	str	r3, [sp, #0]
 800ab84:	3301      	adds	r3, #1
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	9307      	str	r3, [sp, #28]
 800ab8a:	bfb8      	it	lt
 800ab8c:	2301      	movlt	r3, #1
 800ab8e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ab92:	2100      	movs	r1, #0
 800ab94:	2204      	movs	r2, #4
 800ab96:	f102 0514 	add.w	r5, r2, #20
 800ab9a:	429d      	cmp	r5, r3
 800ab9c:	d91f      	bls.n	800abde <_dtoa_r+0x2a6>
 800ab9e:	6041      	str	r1, [r0, #4]
 800aba0:	4658      	mov	r0, fp
 800aba2:	f000 fd8d 	bl	800b6c0 <_Balloc>
 800aba6:	4682      	mov	sl, r0
 800aba8:	2800      	cmp	r0, #0
 800abaa:	d13b      	bne.n	800ac24 <_dtoa_r+0x2ec>
 800abac:	4b1a      	ldr	r3, [pc, #104]	@ (800ac18 <_dtoa_r+0x2e0>)
 800abae:	4602      	mov	r2, r0
 800abb0:	f240 11af 	movw	r1, #431	@ 0x1af
 800abb4:	e6d7      	b.n	800a966 <_dtoa_r+0x2e>
 800abb6:	2301      	movs	r3, #1
 800abb8:	e7e0      	b.n	800ab7c <_dtoa_r+0x244>
 800abba:	2401      	movs	r4, #1
 800abbc:	2300      	movs	r3, #0
 800abbe:	940b      	str	r4, [sp, #44]	@ 0x2c
 800abc0:	9309      	str	r3, [sp, #36]	@ 0x24
 800abc2:	f04f 33ff 	mov.w	r3, #4294967295
 800abc6:	2200      	movs	r2, #0
 800abc8:	9300      	str	r3, [sp, #0]
 800abca:	9307      	str	r3, [sp, #28]
 800abcc:	2312      	movs	r3, #18
 800abce:	e7d0      	b.n	800ab72 <_dtoa_r+0x23a>
 800abd0:	2301      	movs	r3, #1
 800abd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800abd4:	e7f5      	b.n	800abc2 <_dtoa_r+0x28a>
 800abd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abd8:	9300      	str	r3, [sp, #0]
 800abda:	9307      	str	r3, [sp, #28]
 800abdc:	e7d7      	b.n	800ab8e <_dtoa_r+0x256>
 800abde:	3101      	adds	r1, #1
 800abe0:	0052      	lsls	r2, r2, #1
 800abe2:	e7d8      	b.n	800ab96 <_dtoa_r+0x25e>
 800abe4:	f3af 8000 	nop.w
 800abe8:	636f4361 	.word	0x636f4361
 800abec:	3fd287a7 	.word	0x3fd287a7
 800abf0:	8b60c8b3 	.word	0x8b60c8b3
 800abf4:	3fc68a28 	.word	0x3fc68a28
 800abf8:	509f79fb 	.word	0x509f79fb
 800abfc:	3fd34413 	.word	0x3fd34413
 800ac00:	0800d0c1 	.word	0x0800d0c1
 800ac04:	0800d0d8 	.word	0x0800d0d8
 800ac08:	7ff00000 	.word	0x7ff00000
 800ac0c:	0800d091 	.word	0x0800d091
 800ac10:	3ff80000 	.word	0x3ff80000
 800ac14:	0800d1d0 	.word	0x0800d1d0
 800ac18:	0800d130 	.word	0x0800d130
 800ac1c:	0800d0bd 	.word	0x0800d0bd
 800ac20:	0800d090 	.word	0x0800d090
 800ac24:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ac28:	6018      	str	r0, [r3, #0]
 800ac2a:	9b07      	ldr	r3, [sp, #28]
 800ac2c:	2b0e      	cmp	r3, #14
 800ac2e:	f200 80a4 	bhi.w	800ad7a <_dtoa_r+0x442>
 800ac32:	2c00      	cmp	r4, #0
 800ac34:	f000 80a1 	beq.w	800ad7a <_dtoa_r+0x442>
 800ac38:	2f00      	cmp	r7, #0
 800ac3a:	dd33      	ble.n	800aca4 <_dtoa_r+0x36c>
 800ac3c:	f007 020f 	and.w	r2, r7, #15
 800ac40:	4bac      	ldr	r3, [pc, #688]	@ (800aef4 <_dtoa_r+0x5bc>)
 800ac42:	05f8      	lsls	r0, r7, #23
 800ac44:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ac48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac4c:	ed93 7b00 	vldr	d7, [r3]
 800ac50:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ac54:	d516      	bpl.n	800ac84 <_dtoa_r+0x34c>
 800ac56:	4ba8      	ldr	r3, [pc, #672]	@ (800aef8 <_dtoa_r+0x5c0>)
 800ac58:	f004 040f 	and.w	r4, r4, #15
 800ac5c:	2603      	movs	r6, #3
 800ac5e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac66:	f7f5 fdf5 	bl	8000854 <__aeabi_ddiv>
 800ac6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac6e:	4da2      	ldr	r5, [pc, #648]	@ (800aef8 <_dtoa_r+0x5c0>)
 800ac70:	b954      	cbnz	r4, 800ac88 <_dtoa_r+0x350>
 800ac72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac7a:	f7f5 fdeb 	bl	8000854 <__aeabi_ddiv>
 800ac7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac82:	e028      	b.n	800acd6 <_dtoa_r+0x39e>
 800ac84:	2602      	movs	r6, #2
 800ac86:	e7f2      	b.n	800ac6e <_dtoa_r+0x336>
 800ac88:	07e1      	lsls	r1, r4, #31
 800ac8a:	d508      	bpl.n	800ac9e <_dtoa_r+0x366>
 800ac8c:	3601      	adds	r6, #1
 800ac8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac92:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ac96:	f7f5 fcb3 	bl	8000600 <__aeabi_dmul>
 800ac9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac9e:	1064      	asrs	r4, r4, #1
 800aca0:	3508      	adds	r5, #8
 800aca2:	e7e5      	b.n	800ac70 <_dtoa_r+0x338>
 800aca4:	f000 80d2 	beq.w	800ae4c <_dtoa_r+0x514>
 800aca8:	427c      	negs	r4, r7
 800acaa:	4b92      	ldr	r3, [pc, #584]	@ (800aef4 <_dtoa_r+0x5bc>)
 800acac:	4d92      	ldr	r5, [pc, #584]	@ (800aef8 <_dtoa_r+0x5c0>)
 800acae:	2602      	movs	r6, #2
 800acb0:	f004 020f 	and.w	r2, r4, #15
 800acb4:	1124      	asrs	r4, r4, #4
 800acb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800acbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc2:	f7f5 fc9d 	bl	8000600 <__aeabi_dmul>
 800acc6:	2300      	movs	r3, #0
 800acc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800accc:	2c00      	cmp	r4, #0
 800acce:	f040 80b2 	bne.w	800ae36 <_dtoa_r+0x4fe>
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d1d3      	bne.n	800ac7e <_dtoa_r+0x346>
 800acd6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800acd8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	f000 80b7 	beq.w	800ae50 <_dtoa_r+0x518>
 800ace2:	2200      	movs	r2, #0
 800ace4:	4b85      	ldr	r3, [pc, #532]	@ (800aefc <_dtoa_r+0x5c4>)
 800ace6:	4620      	mov	r0, r4
 800ace8:	4629      	mov	r1, r5
 800acea:	f7f5 fefb 	bl	8000ae4 <__aeabi_dcmplt>
 800acee:	2800      	cmp	r0, #0
 800acf0:	f000 80ae 	beq.w	800ae50 <_dtoa_r+0x518>
 800acf4:	9b07      	ldr	r3, [sp, #28]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f000 80aa 	beq.w	800ae50 <_dtoa_r+0x518>
 800acfc:	9b00      	ldr	r3, [sp, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	dd37      	ble.n	800ad72 <_dtoa_r+0x43a>
 800ad02:	1e7b      	subs	r3, r7, #1
 800ad04:	4620      	mov	r0, r4
 800ad06:	2200      	movs	r2, #0
 800ad08:	4629      	mov	r1, r5
 800ad0a:	9304      	str	r3, [sp, #16]
 800ad0c:	3601      	adds	r6, #1
 800ad0e:	4b7c      	ldr	r3, [pc, #496]	@ (800af00 <_dtoa_r+0x5c8>)
 800ad10:	f7f5 fc76 	bl	8000600 <__aeabi_dmul>
 800ad14:	9c00      	ldr	r4, [sp, #0]
 800ad16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad1a:	4630      	mov	r0, r6
 800ad1c:	f7f5 fc06 	bl	800052c <__aeabi_i2d>
 800ad20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad24:	f7f5 fc6c 	bl	8000600 <__aeabi_dmul>
 800ad28:	2200      	movs	r2, #0
 800ad2a:	4b76      	ldr	r3, [pc, #472]	@ (800af04 <_dtoa_r+0x5cc>)
 800ad2c:	f7f5 fab2 	bl	8000294 <__adddf3>
 800ad30:	4605      	mov	r5, r0
 800ad32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ad36:	2c00      	cmp	r4, #0
 800ad38:	f040 808d 	bne.w	800ae56 <_dtoa_r+0x51e>
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	4b72      	ldr	r3, [pc, #456]	@ (800af08 <_dtoa_r+0x5d0>)
 800ad40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad44:	f7f5 faa4 	bl	8000290 <__aeabi_dsub>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	460b      	mov	r3, r1
 800ad4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad50:	462a      	mov	r2, r5
 800ad52:	4633      	mov	r3, r6
 800ad54:	f7f5 fee4 	bl	8000b20 <__aeabi_dcmpgt>
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	f040 828b 	bne.w	800b274 <_dtoa_r+0x93c>
 800ad5e:	462a      	mov	r2, r5
 800ad60:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ad64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad68:	f7f5 febc 	bl	8000ae4 <__aeabi_dcmplt>
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	f040 8128 	bne.w	800afc2 <_dtoa_r+0x68a>
 800ad72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ad76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ad7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	f2c0 815a 	blt.w	800b036 <_dtoa_r+0x6fe>
 800ad82:	2f0e      	cmp	r7, #14
 800ad84:	f300 8157 	bgt.w	800b036 <_dtoa_r+0x6fe>
 800ad88:	4b5a      	ldr	r3, [pc, #360]	@ (800aef4 <_dtoa_r+0x5bc>)
 800ad8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ad8e:	ed93 7b00 	vldr	d7, [r3]
 800ad92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	ed8d 7b00 	vstr	d7, [sp]
 800ad9a:	da03      	bge.n	800ada4 <_dtoa_r+0x46c>
 800ad9c:	9b07      	ldr	r3, [sp, #28]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	f340 8101 	ble.w	800afa6 <_dtoa_r+0x66e>
 800ada4:	4656      	mov	r6, sl
 800ada6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800adaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adae:	4620      	mov	r0, r4
 800adb0:	4629      	mov	r1, r5
 800adb2:	f7f5 fd4f 	bl	8000854 <__aeabi_ddiv>
 800adb6:	f7f5 fed3 	bl	8000b60 <__aeabi_d2iz>
 800adba:	4680      	mov	r8, r0
 800adbc:	f7f5 fbb6 	bl	800052c <__aeabi_i2d>
 800adc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adc4:	f7f5 fc1c 	bl	8000600 <__aeabi_dmul>
 800adc8:	4602      	mov	r2, r0
 800adca:	4620      	mov	r0, r4
 800adcc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800add0:	460b      	mov	r3, r1
 800add2:	4629      	mov	r1, r5
 800add4:	f7f5 fa5c 	bl	8000290 <__aeabi_dsub>
 800add8:	9d07      	ldr	r5, [sp, #28]
 800adda:	f806 4b01 	strb.w	r4, [r6], #1
 800adde:	eba6 040a 	sub.w	r4, r6, sl
 800ade2:	4602      	mov	r2, r0
 800ade4:	460b      	mov	r3, r1
 800ade6:	42a5      	cmp	r5, r4
 800ade8:	f040 8117 	bne.w	800b01a <_dtoa_r+0x6e2>
 800adec:	f7f5 fa52 	bl	8000294 <__adddf3>
 800adf0:	4604      	mov	r4, r0
 800adf2:	460d      	mov	r5, r1
 800adf4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800adf8:	f7f5 fe92 	bl	8000b20 <__aeabi_dcmpgt>
 800adfc:	2800      	cmp	r0, #0
 800adfe:	f040 80f9 	bne.w	800aff4 <_dtoa_r+0x6bc>
 800ae02:	4620      	mov	r0, r4
 800ae04:	4629      	mov	r1, r5
 800ae06:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae0a:	f7f5 fe61 	bl	8000ad0 <__aeabi_dcmpeq>
 800ae0e:	b118      	cbz	r0, 800ae18 <_dtoa_r+0x4e0>
 800ae10:	f018 0f01 	tst.w	r8, #1
 800ae14:	f040 80ee 	bne.w	800aff4 <_dtoa_r+0x6bc>
 800ae18:	4649      	mov	r1, r9
 800ae1a:	4658      	mov	r0, fp
 800ae1c:	f000 fc90 	bl	800b740 <_Bfree>
 800ae20:	2300      	movs	r3, #0
 800ae22:	3701      	adds	r7, #1
 800ae24:	7033      	strb	r3, [r6, #0]
 800ae26:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ae28:	601f      	str	r7, [r3, #0]
 800ae2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f000 831d 	beq.w	800b46c <_dtoa_r+0xb34>
 800ae32:	601e      	str	r6, [r3, #0]
 800ae34:	e31a      	b.n	800b46c <_dtoa_r+0xb34>
 800ae36:	07e2      	lsls	r2, r4, #31
 800ae38:	d505      	bpl.n	800ae46 <_dtoa_r+0x50e>
 800ae3a:	3601      	adds	r6, #1
 800ae3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae40:	f7f5 fbde 	bl	8000600 <__aeabi_dmul>
 800ae44:	2301      	movs	r3, #1
 800ae46:	1064      	asrs	r4, r4, #1
 800ae48:	3508      	adds	r5, #8
 800ae4a:	e73f      	b.n	800accc <_dtoa_r+0x394>
 800ae4c:	2602      	movs	r6, #2
 800ae4e:	e742      	b.n	800acd6 <_dtoa_r+0x39e>
 800ae50:	9c07      	ldr	r4, [sp, #28]
 800ae52:	9704      	str	r7, [sp, #16]
 800ae54:	e761      	b.n	800ad1a <_dtoa_r+0x3e2>
 800ae56:	4b27      	ldr	r3, [pc, #156]	@ (800aef4 <_dtoa_r+0x5bc>)
 800ae58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ae5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ae5e:	4454      	add	r4, sl
 800ae60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ae64:	2900      	cmp	r1, #0
 800ae66:	d053      	beq.n	800af10 <_dtoa_r+0x5d8>
 800ae68:	2000      	movs	r0, #0
 800ae6a:	4928      	ldr	r1, [pc, #160]	@ (800af0c <_dtoa_r+0x5d4>)
 800ae6c:	f7f5 fcf2 	bl	8000854 <__aeabi_ddiv>
 800ae70:	4633      	mov	r3, r6
 800ae72:	4656      	mov	r6, sl
 800ae74:	462a      	mov	r2, r5
 800ae76:	f7f5 fa0b 	bl	8000290 <__aeabi_dsub>
 800ae7a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ae7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae82:	f7f5 fe6d 	bl	8000b60 <__aeabi_d2iz>
 800ae86:	4605      	mov	r5, r0
 800ae88:	f7f5 fb50 	bl	800052c <__aeabi_i2d>
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	460b      	mov	r3, r1
 800ae90:	3530      	adds	r5, #48	@ 0x30
 800ae92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae96:	f7f5 f9fb 	bl	8000290 <__aeabi_dsub>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	f806 5b01 	strb.w	r5, [r6], #1
 800aea2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aea6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aeaa:	f7f5 fe1b 	bl	8000ae4 <__aeabi_dcmplt>
 800aeae:	2800      	cmp	r0, #0
 800aeb0:	d171      	bne.n	800af96 <_dtoa_r+0x65e>
 800aeb2:	2000      	movs	r0, #0
 800aeb4:	4911      	ldr	r1, [pc, #68]	@ (800aefc <_dtoa_r+0x5c4>)
 800aeb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aeba:	f7f5 f9e9 	bl	8000290 <__aeabi_dsub>
 800aebe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800aec2:	f7f5 fe0f 	bl	8000ae4 <__aeabi_dcmplt>
 800aec6:	2800      	cmp	r0, #0
 800aec8:	f040 8095 	bne.w	800aff6 <_dtoa_r+0x6be>
 800aecc:	42a6      	cmp	r6, r4
 800aece:	f43f af50 	beq.w	800ad72 <_dtoa_r+0x43a>
 800aed2:	2200      	movs	r2, #0
 800aed4:	4b0a      	ldr	r3, [pc, #40]	@ (800af00 <_dtoa_r+0x5c8>)
 800aed6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aeda:	f7f5 fb91 	bl	8000600 <__aeabi_dmul>
 800aede:	2200      	movs	r2, #0
 800aee0:	4b07      	ldr	r3, [pc, #28]	@ (800af00 <_dtoa_r+0x5c8>)
 800aee2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800aee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aeea:	f7f5 fb89 	bl	8000600 <__aeabi_dmul>
 800aeee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aef2:	e7c4      	b.n	800ae7e <_dtoa_r+0x546>
 800aef4:	0800d1d0 	.word	0x0800d1d0
 800aef8:	0800d1a8 	.word	0x0800d1a8
 800aefc:	3ff00000 	.word	0x3ff00000
 800af00:	40240000 	.word	0x40240000
 800af04:	401c0000 	.word	0x401c0000
 800af08:	40140000 	.word	0x40140000
 800af0c:	3fe00000 	.word	0x3fe00000
 800af10:	4631      	mov	r1, r6
 800af12:	4656      	mov	r6, sl
 800af14:	4628      	mov	r0, r5
 800af16:	f7f5 fb73 	bl	8000600 <__aeabi_dmul>
 800af1a:	9415      	str	r4, [sp, #84]	@ 0x54
 800af1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800af20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af24:	f7f5 fe1c 	bl	8000b60 <__aeabi_d2iz>
 800af28:	4605      	mov	r5, r0
 800af2a:	f7f5 faff 	bl	800052c <__aeabi_i2d>
 800af2e:	4602      	mov	r2, r0
 800af30:	3530      	adds	r5, #48	@ 0x30
 800af32:	460b      	mov	r3, r1
 800af34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af38:	f7f5 f9aa 	bl	8000290 <__aeabi_dsub>
 800af3c:	f806 5b01 	strb.w	r5, [r6], #1
 800af40:	4602      	mov	r2, r0
 800af42:	460b      	mov	r3, r1
 800af44:	42a6      	cmp	r6, r4
 800af46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af4a:	f04f 0200 	mov.w	r2, #0
 800af4e:	d124      	bne.n	800af9a <_dtoa_r+0x662>
 800af50:	4bac      	ldr	r3, [pc, #688]	@ (800b204 <_dtoa_r+0x8cc>)
 800af52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800af56:	f7f5 f99d 	bl	8000294 <__adddf3>
 800af5a:	4602      	mov	r2, r0
 800af5c:	460b      	mov	r3, r1
 800af5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af62:	f7f5 fddd 	bl	8000b20 <__aeabi_dcmpgt>
 800af66:	2800      	cmp	r0, #0
 800af68:	d145      	bne.n	800aff6 <_dtoa_r+0x6be>
 800af6a:	2000      	movs	r0, #0
 800af6c:	49a5      	ldr	r1, [pc, #660]	@ (800b204 <_dtoa_r+0x8cc>)
 800af6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800af72:	f7f5 f98d 	bl	8000290 <__aeabi_dsub>
 800af76:	4602      	mov	r2, r0
 800af78:	460b      	mov	r3, r1
 800af7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af7e:	f7f5 fdb1 	bl	8000ae4 <__aeabi_dcmplt>
 800af82:	2800      	cmp	r0, #0
 800af84:	f43f aef5 	beq.w	800ad72 <_dtoa_r+0x43a>
 800af88:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800af8a:	1e73      	subs	r3, r6, #1
 800af8c:	9315      	str	r3, [sp, #84]	@ 0x54
 800af8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800af92:	2b30      	cmp	r3, #48	@ 0x30
 800af94:	d0f8      	beq.n	800af88 <_dtoa_r+0x650>
 800af96:	9f04      	ldr	r7, [sp, #16]
 800af98:	e73e      	b.n	800ae18 <_dtoa_r+0x4e0>
 800af9a:	4b9b      	ldr	r3, [pc, #620]	@ (800b208 <_dtoa_r+0x8d0>)
 800af9c:	f7f5 fb30 	bl	8000600 <__aeabi_dmul>
 800afa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afa4:	e7bc      	b.n	800af20 <_dtoa_r+0x5e8>
 800afa6:	d10c      	bne.n	800afc2 <_dtoa_r+0x68a>
 800afa8:	2200      	movs	r2, #0
 800afaa:	4b98      	ldr	r3, [pc, #608]	@ (800b20c <_dtoa_r+0x8d4>)
 800afac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afb0:	f7f5 fb26 	bl	8000600 <__aeabi_dmul>
 800afb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800afb8:	f7f5 fda8 	bl	8000b0c <__aeabi_dcmpge>
 800afbc:	2800      	cmp	r0, #0
 800afbe:	f000 8157 	beq.w	800b270 <_dtoa_r+0x938>
 800afc2:	2400      	movs	r4, #0
 800afc4:	4625      	mov	r5, r4
 800afc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afc8:	4656      	mov	r6, sl
 800afca:	43db      	mvns	r3, r3
 800afcc:	9304      	str	r3, [sp, #16]
 800afce:	2700      	movs	r7, #0
 800afd0:	4621      	mov	r1, r4
 800afd2:	4658      	mov	r0, fp
 800afd4:	f000 fbb4 	bl	800b740 <_Bfree>
 800afd8:	2d00      	cmp	r5, #0
 800afda:	d0dc      	beq.n	800af96 <_dtoa_r+0x65e>
 800afdc:	b12f      	cbz	r7, 800afea <_dtoa_r+0x6b2>
 800afde:	42af      	cmp	r7, r5
 800afe0:	d003      	beq.n	800afea <_dtoa_r+0x6b2>
 800afe2:	4639      	mov	r1, r7
 800afe4:	4658      	mov	r0, fp
 800afe6:	f000 fbab 	bl	800b740 <_Bfree>
 800afea:	4629      	mov	r1, r5
 800afec:	4658      	mov	r0, fp
 800afee:	f000 fba7 	bl	800b740 <_Bfree>
 800aff2:	e7d0      	b.n	800af96 <_dtoa_r+0x65e>
 800aff4:	9704      	str	r7, [sp, #16]
 800aff6:	4633      	mov	r3, r6
 800aff8:	461e      	mov	r6, r3
 800affa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800affe:	2a39      	cmp	r2, #57	@ 0x39
 800b000:	d107      	bne.n	800b012 <_dtoa_r+0x6da>
 800b002:	459a      	cmp	sl, r3
 800b004:	d1f8      	bne.n	800aff8 <_dtoa_r+0x6c0>
 800b006:	9a04      	ldr	r2, [sp, #16]
 800b008:	3201      	adds	r2, #1
 800b00a:	9204      	str	r2, [sp, #16]
 800b00c:	2230      	movs	r2, #48	@ 0x30
 800b00e:	f88a 2000 	strb.w	r2, [sl]
 800b012:	781a      	ldrb	r2, [r3, #0]
 800b014:	3201      	adds	r2, #1
 800b016:	701a      	strb	r2, [r3, #0]
 800b018:	e7bd      	b.n	800af96 <_dtoa_r+0x65e>
 800b01a:	2200      	movs	r2, #0
 800b01c:	4b7a      	ldr	r3, [pc, #488]	@ (800b208 <_dtoa_r+0x8d0>)
 800b01e:	f7f5 faef 	bl	8000600 <__aeabi_dmul>
 800b022:	2200      	movs	r2, #0
 800b024:	2300      	movs	r3, #0
 800b026:	4604      	mov	r4, r0
 800b028:	460d      	mov	r5, r1
 800b02a:	f7f5 fd51 	bl	8000ad0 <__aeabi_dcmpeq>
 800b02e:	2800      	cmp	r0, #0
 800b030:	f43f aebb 	beq.w	800adaa <_dtoa_r+0x472>
 800b034:	e6f0      	b.n	800ae18 <_dtoa_r+0x4e0>
 800b036:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b038:	2a00      	cmp	r2, #0
 800b03a:	f000 80db 	beq.w	800b1f4 <_dtoa_r+0x8bc>
 800b03e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b040:	2a01      	cmp	r2, #1
 800b042:	f300 80bf 	bgt.w	800b1c4 <_dtoa_r+0x88c>
 800b046:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b048:	2a00      	cmp	r2, #0
 800b04a:	f000 80b7 	beq.w	800b1bc <_dtoa_r+0x884>
 800b04e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b052:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b054:	4646      	mov	r6, r8
 800b056:	9a08      	ldr	r2, [sp, #32]
 800b058:	2101      	movs	r1, #1
 800b05a:	4658      	mov	r0, fp
 800b05c:	4498      	add	r8, r3
 800b05e:	441a      	add	r2, r3
 800b060:	9208      	str	r2, [sp, #32]
 800b062:	f000 fc23 	bl	800b8ac <__i2b>
 800b066:	4605      	mov	r5, r0
 800b068:	b15e      	cbz	r6, 800b082 <_dtoa_r+0x74a>
 800b06a:	9b08      	ldr	r3, [sp, #32]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	dd08      	ble.n	800b082 <_dtoa_r+0x74a>
 800b070:	42b3      	cmp	r3, r6
 800b072:	9a08      	ldr	r2, [sp, #32]
 800b074:	bfa8      	it	ge
 800b076:	4633      	movge	r3, r6
 800b078:	eba8 0803 	sub.w	r8, r8, r3
 800b07c:	1af6      	subs	r6, r6, r3
 800b07e:	1ad3      	subs	r3, r2, r3
 800b080:	9308      	str	r3, [sp, #32]
 800b082:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b084:	b1f3      	cbz	r3, 800b0c4 <_dtoa_r+0x78c>
 800b086:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b088:	2b00      	cmp	r3, #0
 800b08a:	f000 80b7 	beq.w	800b1fc <_dtoa_r+0x8c4>
 800b08e:	b18c      	cbz	r4, 800b0b4 <_dtoa_r+0x77c>
 800b090:	4629      	mov	r1, r5
 800b092:	4622      	mov	r2, r4
 800b094:	4658      	mov	r0, fp
 800b096:	f000 fcc9 	bl	800ba2c <__pow5mult>
 800b09a:	464a      	mov	r2, r9
 800b09c:	4601      	mov	r1, r0
 800b09e:	4605      	mov	r5, r0
 800b0a0:	4658      	mov	r0, fp
 800b0a2:	f000 fc19 	bl	800b8d8 <__multiply>
 800b0a6:	4649      	mov	r1, r9
 800b0a8:	9004      	str	r0, [sp, #16]
 800b0aa:	4658      	mov	r0, fp
 800b0ac:	f000 fb48 	bl	800b740 <_Bfree>
 800b0b0:	9b04      	ldr	r3, [sp, #16]
 800b0b2:	4699      	mov	r9, r3
 800b0b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0b6:	1b1a      	subs	r2, r3, r4
 800b0b8:	d004      	beq.n	800b0c4 <_dtoa_r+0x78c>
 800b0ba:	4649      	mov	r1, r9
 800b0bc:	4658      	mov	r0, fp
 800b0be:	f000 fcb5 	bl	800ba2c <__pow5mult>
 800b0c2:	4681      	mov	r9, r0
 800b0c4:	2101      	movs	r1, #1
 800b0c6:	4658      	mov	r0, fp
 800b0c8:	f000 fbf0 	bl	800b8ac <__i2b>
 800b0cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0ce:	4604      	mov	r4, r0
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	f000 81cf 	beq.w	800b474 <_dtoa_r+0xb3c>
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	4601      	mov	r1, r0
 800b0da:	4658      	mov	r0, fp
 800b0dc:	f000 fca6 	bl	800ba2c <__pow5mult>
 800b0e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0e2:	4604      	mov	r4, r0
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	f300 8095 	bgt.w	800b214 <_dtoa_r+0x8dc>
 800b0ea:	9b02      	ldr	r3, [sp, #8]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	f040 8087 	bne.w	800b200 <_dtoa_r+0x8c8>
 800b0f2:	9b03      	ldr	r3, [sp, #12]
 800b0f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	f040 8089 	bne.w	800b210 <_dtoa_r+0x8d8>
 800b0fe:	9b03      	ldr	r3, [sp, #12]
 800b100:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b104:	0d1b      	lsrs	r3, r3, #20
 800b106:	051b      	lsls	r3, r3, #20
 800b108:	b12b      	cbz	r3, 800b116 <_dtoa_r+0x7de>
 800b10a:	9b08      	ldr	r3, [sp, #32]
 800b10c:	f108 0801 	add.w	r8, r8, #1
 800b110:	3301      	adds	r3, #1
 800b112:	9308      	str	r3, [sp, #32]
 800b114:	2301      	movs	r3, #1
 800b116:	930a      	str	r3, [sp, #40]	@ 0x28
 800b118:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	f000 81b0 	beq.w	800b480 <_dtoa_r+0xb48>
 800b120:	6923      	ldr	r3, [r4, #16]
 800b122:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b126:	6918      	ldr	r0, [r3, #16]
 800b128:	f000 fb74 	bl	800b814 <__hi0bits>
 800b12c:	f1c0 0020 	rsb	r0, r0, #32
 800b130:	9b08      	ldr	r3, [sp, #32]
 800b132:	4418      	add	r0, r3
 800b134:	f010 001f 	ands.w	r0, r0, #31
 800b138:	d077      	beq.n	800b22a <_dtoa_r+0x8f2>
 800b13a:	f1c0 0320 	rsb	r3, r0, #32
 800b13e:	2b04      	cmp	r3, #4
 800b140:	dd6b      	ble.n	800b21a <_dtoa_r+0x8e2>
 800b142:	f1c0 001c 	rsb	r0, r0, #28
 800b146:	9b08      	ldr	r3, [sp, #32]
 800b148:	4480      	add	r8, r0
 800b14a:	4403      	add	r3, r0
 800b14c:	4406      	add	r6, r0
 800b14e:	9308      	str	r3, [sp, #32]
 800b150:	f1b8 0f00 	cmp.w	r8, #0
 800b154:	dd05      	ble.n	800b162 <_dtoa_r+0x82a>
 800b156:	4649      	mov	r1, r9
 800b158:	4642      	mov	r2, r8
 800b15a:	4658      	mov	r0, fp
 800b15c:	f000 fcc0 	bl	800bae0 <__lshift>
 800b160:	4681      	mov	r9, r0
 800b162:	9b08      	ldr	r3, [sp, #32]
 800b164:	2b00      	cmp	r3, #0
 800b166:	dd05      	ble.n	800b174 <_dtoa_r+0x83c>
 800b168:	4621      	mov	r1, r4
 800b16a:	461a      	mov	r2, r3
 800b16c:	4658      	mov	r0, fp
 800b16e:	f000 fcb7 	bl	800bae0 <__lshift>
 800b172:	4604      	mov	r4, r0
 800b174:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b176:	2b00      	cmp	r3, #0
 800b178:	d059      	beq.n	800b22e <_dtoa_r+0x8f6>
 800b17a:	4621      	mov	r1, r4
 800b17c:	4648      	mov	r0, r9
 800b17e:	f000 fd1b 	bl	800bbb8 <__mcmp>
 800b182:	2800      	cmp	r0, #0
 800b184:	da53      	bge.n	800b22e <_dtoa_r+0x8f6>
 800b186:	1e7b      	subs	r3, r7, #1
 800b188:	4649      	mov	r1, r9
 800b18a:	220a      	movs	r2, #10
 800b18c:	4658      	mov	r0, fp
 800b18e:	9304      	str	r3, [sp, #16]
 800b190:	2300      	movs	r3, #0
 800b192:	f000 faf7 	bl	800b784 <__multadd>
 800b196:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b198:	4681      	mov	r9, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	f000 8172 	beq.w	800b484 <_dtoa_r+0xb4c>
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	4629      	mov	r1, r5
 800b1a4:	220a      	movs	r2, #10
 800b1a6:	4658      	mov	r0, fp
 800b1a8:	f000 faec 	bl	800b784 <__multadd>
 800b1ac:	9b00      	ldr	r3, [sp, #0]
 800b1ae:	4605      	mov	r5, r0
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	dc67      	bgt.n	800b284 <_dtoa_r+0x94c>
 800b1b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1b6:	2b02      	cmp	r3, #2
 800b1b8:	dc41      	bgt.n	800b23e <_dtoa_r+0x906>
 800b1ba:	e063      	b.n	800b284 <_dtoa_r+0x94c>
 800b1bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b1be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b1c2:	e746      	b.n	800b052 <_dtoa_r+0x71a>
 800b1c4:	9b07      	ldr	r3, [sp, #28]
 800b1c6:	1e5c      	subs	r4, r3, #1
 800b1c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1ca:	42a3      	cmp	r3, r4
 800b1cc:	bfb7      	itett	lt
 800b1ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b1d0:	1b1c      	subge	r4, r3, r4
 800b1d2:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b1d4:	1ae3      	sublt	r3, r4, r3
 800b1d6:	bfbe      	ittt	lt
 800b1d8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b1da:	2400      	movlt	r4, #0
 800b1dc:	18d2      	addlt	r2, r2, r3
 800b1de:	9b07      	ldr	r3, [sp, #28]
 800b1e0:	bfb8      	it	lt
 800b1e2:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	bfb5      	itete	lt
 800b1e8:	eba8 0603 	sublt.w	r6, r8, r3
 800b1ec:	4646      	movge	r6, r8
 800b1ee:	2300      	movlt	r3, #0
 800b1f0:	9b07      	ldrge	r3, [sp, #28]
 800b1f2:	e730      	b.n	800b056 <_dtoa_r+0x71e>
 800b1f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b1f6:	4646      	mov	r6, r8
 800b1f8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b1fa:	e735      	b.n	800b068 <_dtoa_r+0x730>
 800b1fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b1fe:	e75c      	b.n	800b0ba <_dtoa_r+0x782>
 800b200:	2300      	movs	r3, #0
 800b202:	e788      	b.n	800b116 <_dtoa_r+0x7de>
 800b204:	3fe00000 	.word	0x3fe00000
 800b208:	40240000 	.word	0x40240000
 800b20c:	40140000 	.word	0x40140000
 800b210:	9b02      	ldr	r3, [sp, #8]
 800b212:	e780      	b.n	800b116 <_dtoa_r+0x7de>
 800b214:	2300      	movs	r3, #0
 800b216:	930a      	str	r3, [sp, #40]	@ 0x28
 800b218:	e782      	b.n	800b120 <_dtoa_r+0x7e8>
 800b21a:	d099      	beq.n	800b150 <_dtoa_r+0x818>
 800b21c:	331c      	adds	r3, #28
 800b21e:	9a08      	ldr	r2, [sp, #32]
 800b220:	441a      	add	r2, r3
 800b222:	4498      	add	r8, r3
 800b224:	441e      	add	r6, r3
 800b226:	9208      	str	r2, [sp, #32]
 800b228:	e792      	b.n	800b150 <_dtoa_r+0x818>
 800b22a:	4603      	mov	r3, r0
 800b22c:	e7f6      	b.n	800b21c <_dtoa_r+0x8e4>
 800b22e:	9b07      	ldr	r3, [sp, #28]
 800b230:	9704      	str	r7, [sp, #16]
 800b232:	2b00      	cmp	r3, #0
 800b234:	dc20      	bgt.n	800b278 <_dtoa_r+0x940>
 800b236:	9300      	str	r3, [sp, #0]
 800b238:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b23a:	2b02      	cmp	r3, #2
 800b23c:	dd1e      	ble.n	800b27c <_dtoa_r+0x944>
 800b23e:	9b00      	ldr	r3, [sp, #0]
 800b240:	2b00      	cmp	r3, #0
 800b242:	f47f aec0 	bne.w	800afc6 <_dtoa_r+0x68e>
 800b246:	4621      	mov	r1, r4
 800b248:	2205      	movs	r2, #5
 800b24a:	4658      	mov	r0, fp
 800b24c:	f000 fa9a 	bl	800b784 <__multadd>
 800b250:	4601      	mov	r1, r0
 800b252:	4604      	mov	r4, r0
 800b254:	4648      	mov	r0, r9
 800b256:	f000 fcaf 	bl	800bbb8 <__mcmp>
 800b25a:	2800      	cmp	r0, #0
 800b25c:	f77f aeb3 	ble.w	800afc6 <_dtoa_r+0x68e>
 800b260:	2331      	movs	r3, #49	@ 0x31
 800b262:	4656      	mov	r6, sl
 800b264:	f806 3b01 	strb.w	r3, [r6], #1
 800b268:	9b04      	ldr	r3, [sp, #16]
 800b26a:	3301      	adds	r3, #1
 800b26c:	9304      	str	r3, [sp, #16]
 800b26e:	e6ae      	b.n	800afce <_dtoa_r+0x696>
 800b270:	9c07      	ldr	r4, [sp, #28]
 800b272:	9704      	str	r7, [sp, #16]
 800b274:	4625      	mov	r5, r4
 800b276:	e7f3      	b.n	800b260 <_dtoa_r+0x928>
 800b278:	9b07      	ldr	r3, [sp, #28]
 800b27a:	9300      	str	r3, [sp, #0]
 800b27c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b27e:	2b00      	cmp	r3, #0
 800b280:	f000 8104 	beq.w	800b48c <_dtoa_r+0xb54>
 800b284:	2e00      	cmp	r6, #0
 800b286:	dd05      	ble.n	800b294 <_dtoa_r+0x95c>
 800b288:	4629      	mov	r1, r5
 800b28a:	4632      	mov	r2, r6
 800b28c:	4658      	mov	r0, fp
 800b28e:	f000 fc27 	bl	800bae0 <__lshift>
 800b292:	4605      	mov	r5, r0
 800b294:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b296:	2b00      	cmp	r3, #0
 800b298:	d05a      	beq.n	800b350 <_dtoa_r+0xa18>
 800b29a:	6869      	ldr	r1, [r5, #4]
 800b29c:	4658      	mov	r0, fp
 800b29e:	f000 fa0f 	bl	800b6c0 <_Balloc>
 800b2a2:	4606      	mov	r6, r0
 800b2a4:	b928      	cbnz	r0, 800b2b2 <_dtoa_r+0x97a>
 800b2a6:	4b84      	ldr	r3, [pc, #528]	@ (800b4b8 <_dtoa_r+0xb80>)
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b2ae:	f7ff bb5a 	b.w	800a966 <_dtoa_r+0x2e>
 800b2b2:	692a      	ldr	r2, [r5, #16]
 800b2b4:	f105 010c 	add.w	r1, r5, #12
 800b2b8:	300c      	adds	r0, #12
 800b2ba:	3202      	adds	r2, #2
 800b2bc:	0092      	lsls	r2, r2, #2
 800b2be:	f7ff faa0 	bl	800a802 <memcpy>
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	4631      	mov	r1, r6
 800b2c6:	4658      	mov	r0, fp
 800b2c8:	f000 fc0a 	bl	800bae0 <__lshift>
 800b2cc:	f10a 0301 	add.w	r3, sl, #1
 800b2d0:	462f      	mov	r7, r5
 800b2d2:	4605      	mov	r5, r0
 800b2d4:	9307      	str	r3, [sp, #28]
 800b2d6:	9b00      	ldr	r3, [sp, #0]
 800b2d8:	4453      	add	r3, sl
 800b2da:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2dc:	9b02      	ldr	r3, [sp, #8]
 800b2de:	f003 0301 	and.w	r3, r3, #1
 800b2e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2e4:	9b07      	ldr	r3, [sp, #28]
 800b2e6:	4621      	mov	r1, r4
 800b2e8:	4648      	mov	r0, r9
 800b2ea:	3b01      	subs	r3, #1
 800b2ec:	9300      	str	r3, [sp, #0]
 800b2ee:	f7ff fa95 	bl	800a81c <quorem>
 800b2f2:	4639      	mov	r1, r7
 800b2f4:	9002      	str	r0, [sp, #8]
 800b2f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b2fa:	4648      	mov	r0, r9
 800b2fc:	f000 fc5c 	bl	800bbb8 <__mcmp>
 800b300:	462a      	mov	r2, r5
 800b302:	9008      	str	r0, [sp, #32]
 800b304:	4621      	mov	r1, r4
 800b306:	4658      	mov	r0, fp
 800b308:	f000 fc72 	bl	800bbf0 <__mdiff>
 800b30c:	68c2      	ldr	r2, [r0, #12]
 800b30e:	4606      	mov	r6, r0
 800b310:	bb02      	cbnz	r2, 800b354 <_dtoa_r+0xa1c>
 800b312:	4601      	mov	r1, r0
 800b314:	4648      	mov	r0, r9
 800b316:	f000 fc4f 	bl	800bbb8 <__mcmp>
 800b31a:	4602      	mov	r2, r0
 800b31c:	4631      	mov	r1, r6
 800b31e:	4658      	mov	r0, fp
 800b320:	920e      	str	r2, [sp, #56]	@ 0x38
 800b322:	f000 fa0d 	bl	800b740 <_Bfree>
 800b326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b328:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b32a:	9e07      	ldr	r6, [sp, #28]
 800b32c:	ea43 0102 	orr.w	r1, r3, r2
 800b330:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b332:	4319      	orrs	r1, r3
 800b334:	d110      	bne.n	800b358 <_dtoa_r+0xa20>
 800b336:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b33a:	d029      	beq.n	800b390 <_dtoa_r+0xa58>
 800b33c:	9b08      	ldr	r3, [sp, #32]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	dd02      	ble.n	800b348 <_dtoa_r+0xa10>
 800b342:	9b02      	ldr	r3, [sp, #8]
 800b344:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b348:	9b00      	ldr	r3, [sp, #0]
 800b34a:	f883 8000 	strb.w	r8, [r3]
 800b34e:	e63f      	b.n	800afd0 <_dtoa_r+0x698>
 800b350:	4628      	mov	r0, r5
 800b352:	e7bb      	b.n	800b2cc <_dtoa_r+0x994>
 800b354:	2201      	movs	r2, #1
 800b356:	e7e1      	b.n	800b31c <_dtoa_r+0x9e4>
 800b358:	9b08      	ldr	r3, [sp, #32]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	db04      	blt.n	800b368 <_dtoa_r+0xa30>
 800b35e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b360:	430b      	orrs	r3, r1
 800b362:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b364:	430b      	orrs	r3, r1
 800b366:	d120      	bne.n	800b3aa <_dtoa_r+0xa72>
 800b368:	2a00      	cmp	r2, #0
 800b36a:	dded      	ble.n	800b348 <_dtoa_r+0xa10>
 800b36c:	4649      	mov	r1, r9
 800b36e:	2201      	movs	r2, #1
 800b370:	4658      	mov	r0, fp
 800b372:	f000 fbb5 	bl	800bae0 <__lshift>
 800b376:	4621      	mov	r1, r4
 800b378:	4681      	mov	r9, r0
 800b37a:	f000 fc1d 	bl	800bbb8 <__mcmp>
 800b37e:	2800      	cmp	r0, #0
 800b380:	dc03      	bgt.n	800b38a <_dtoa_r+0xa52>
 800b382:	d1e1      	bne.n	800b348 <_dtoa_r+0xa10>
 800b384:	f018 0f01 	tst.w	r8, #1
 800b388:	d0de      	beq.n	800b348 <_dtoa_r+0xa10>
 800b38a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b38e:	d1d8      	bne.n	800b342 <_dtoa_r+0xa0a>
 800b390:	2339      	movs	r3, #57	@ 0x39
 800b392:	9a00      	ldr	r2, [sp, #0]
 800b394:	7013      	strb	r3, [r2, #0]
 800b396:	4633      	mov	r3, r6
 800b398:	461e      	mov	r6, r3
 800b39a:	3b01      	subs	r3, #1
 800b39c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b3a0:	2a39      	cmp	r2, #57	@ 0x39
 800b3a2:	d052      	beq.n	800b44a <_dtoa_r+0xb12>
 800b3a4:	3201      	adds	r2, #1
 800b3a6:	701a      	strb	r2, [r3, #0]
 800b3a8:	e612      	b.n	800afd0 <_dtoa_r+0x698>
 800b3aa:	2a00      	cmp	r2, #0
 800b3ac:	dd07      	ble.n	800b3be <_dtoa_r+0xa86>
 800b3ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b3b2:	d0ed      	beq.n	800b390 <_dtoa_r+0xa58>
 800b3b4:	f108 0301 	add.w	r3, r8, #1
 800b3b8:	9a00      	ldr	r2, [sp, #0]
 800b3ba:	7013      	strb	r3, [r2, #0]
 800b3bc:	e608      	b.n	800afd0 <_dtoa_r+0x698>
 800b3be:	9b07      	ldr	r3, [sp, #28]
 800b3c0:	9a07      	ldr	r2, [sp, #28]
 800b3c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b3c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d028      	beq.n	800b41e <_dtoa_r+0xae6>
 800b3cc:	4649      	mov	r1, r9
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	220a      	movs	r2, #10
 800b3d2:	4658      	mov	r0, fp
 800b3d4:	f000 f9d6 	bl	800b784 <__multadd>
 800b3d8:	42af      	cmp	r7, r5
 800b3da:	4681      	mov	r9, r0
 800b3dc:	f04f 0300 	mov.w	r3, #0
 800b3e0:	f04f 020a 	mov.w	r2, #10
 800b3e4:	4639      	mov	r1, r7
 800b3e6:	4658      	mov	r0, fp
 800b3e8:	d107      	bne.n	800b3fa <_dtoa_r+0xac2>
 800b3ea:	f000 f9cb 	bl	800b784 <__multadd>
 800b3ee:	4607      	mov	r7, r0
 800b3f0:	4605      	mov	r5, r0
 800b3f2:	9b07      	ldr	r3, [sp, #28]
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	9307      	str	r3, [sp, #28]
 800b3f8:	e774      	b.n	800b2e4 <_dtoa_r+0x9ac>
 800b3fa:	f000 f9c3 	bl	800b784 <__multadd>
 800b3fe:	4629      	mov	r1, r5
 800b400:	4607      	mov	r7, r0
 800b402:	2300      	movs	r3, #0
 800b404:	220a      	movs	r2, #10
 800b406:	4658      	mov	r0, fp
 800b408:	f000 f9bc 	bl	800b784 <__multadd>
 800b40c:	4605      	mov	r5, r0
 800b40e:	e7f0      	b.n	800b3f2 <_dtoa_r+0xaba>
 800b410:	9b00      	ldr	r3, [sp, #0]
 800b412:	2700      	movs	r7, #0
 800b414:	2b00      	cmp	r3, #0
 800b416:	bfcc      	ite	gt
 800b418:	461e      	movgt	r6, r3
 800b41a:	2601      	movle	r6, #1
 800b41c:	4456      	add	r6, sl
 800b41e:	4649      	mov	r1, r9
 800b420:	2201      	movs	r2, #1
 800b422:	4658      	mov	r0, fp
 800b424:	f000 fb5c 	bl	800bae0 <__lshift>
 800b428:	4621      	mov	r1, r4
 800b42a:	4681      	mov	r9, r0
 800b42c:	f000 fbc4 	bl	800bbb8 <__mcmp>
 800b430:	2800      	cmp	r0, #0
 800b432:	dcb0      	bgt.n	800b396 <_dtoa_r+0xa5e>
 800b434:	d102      	bne.n	800b43c <_dtoa_r+0xb04>
 800b436:	f018 0f01 	tst.w	r8, #1
 800b43a:	d1ac      	bne.n	800b396 <_dtoa_r+0xa5e>
 800b43c:	4633      	mov	r3, r6
 800b43e:	461e      	mov	r6, r3
 800b440:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b444:	2a30      	cmp	r2, #48	@ 0x30
 800b446:	d0fa      	beq.n	800b43e <_dtoa_r+0xb06>
 800b448:	e5c2      	b.n	800afd0 <_dtoa_r+0x698>
 800b44a:	459a      	cmp	sl, r3
 800b44c:	d1a4      	bne.n	800b398 <_dtoa_r+0xa60>
 800b44e:	9b04      	ldr	r3, [sp, #16]
 800b450:	3301      	adds	r3, #1
 800b452:	9304      	str	r3, [sp, #16]
 800b454:	2331      	movs	r3, #49	@ 0x31
 800b456:	f88a 3000 	strb.w	r3, [sl]
 800b45a:	e5b9      	b.n	800afd0 <_dtoa_r+0x698>
 800b45c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b45e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b4bc <_dtoa_r+0xb84>
 800b462:	b11b      	cbz	r3, 800b46c <_dtoa_r+0xb34>
 800b464:	f10a 0308 	add.w	r3, sl, #8
 800b468:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b46a:	6013      	str	r3, [r2, #0]
 800b46c:	4650      	mov	r0, sl
 800b46e:	b019      	add	sp, #100	@ 0x64
 800b470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b476:	2b01      	cmp	r3, #1
 800b478:	f77f ae37 	ble.w	800b0ea <_dtoa_r+0x7b2>
 800b47c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b47e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b480:	2001      	movs	r0, #1
 800b482:	e655      	b.n	800b130 <_dtoa_r+0x7f8>
 800b484:	9b00      	ldr	r3, [sp, #0]
 800b486:	2b00      	cmp	r3, #0
 800b488:	f77f aed6 	ble.w	800b238 <_dtoa_r+0x900>
 800b48c:	4656      	mov	r6, sl
 800b48e:	4621      	mov	r1, r4
 800b490:	4648      	mov	r0, r9
 800b492:	f7ff f9c3 	bl	800a81c <quorem>
 800b496:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b49a:	9b00      	ldr	r3, [sp, #0]
 800b49c:	f806 8b01 	strb.w	r8, [r6], #1
 800b4a0:	eba6 020a 	sub.w	r2, r6, sl
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	ddb3      	ble.n	800b410 <_dtoa_r+0xad8>
 800b4a8:	4649      	mov	r1, r9
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	220a      	movs	r2, #10
 800b4ae:	4658      	mov	r0, fp
 800b4b0:	f000 f968 	bl	800b784 <__multadd>
 800b4b4:	4681      	mov	r9, r0
 800b4b6:	e7ea      	b.n	800b48e <_dtoa_r+0xb56>
 800b4b8:	0800d130 	.word	0x0800d130
 800b4bc:	0800d0b4 	.word	0x0800d0b4

0800b4c0 <_free_r>:
 800b4c0:	b538      	push	{r3, r4, r5, lr}
 800b4c2:	4605      	mov	r5, r0
 800b4c4:	2900      	cmp	r1, #0
 800b4c6:	d041      	beq.n	800b54c <_free_r+0x8c>
 800b4c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4cc:	1f0c      	subs	r4, r1, #4
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	bfb8      	it	lt
 800b4d2:	18e4      	addlt	r4, r4, r3
 800b4d4:	f000 f8e8 	bl	800b6a8 <__malloc_lock>
 800b4d8:	4a1d      	ldr	r2, [pc, #116]	@ (800b550 <_free_r+0x90>)
 800b4da:	6813      	ldr	r3, [r2, #0]
 800b4dc:	b933      	cbnz	r3, 800b4ec <_free_r+0x2c>
 800b4de:	6063      	str	r3, [r4, #4]
 800b4e0:	6014      	str	r4, [r2, #0]
 800b4e2:	4628      	mov	r0, r5
 800b4e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4e8:	f000 b8e4 	b.w	800b6b4 <__malloc_unlock>
 800b4ec:	42a3      	cmp	r3, r4
 800b4ee:	d908      	bls.n	800b502 <_free_r+0x42>
 800b4f0:	6820      	ldr	r0, [r4, #0]
 800b4f2:	1821      	adds	r1, r4, r0
 800b4f4:	428b      	cmp	r3, r1
 800b4f6:	bf01      	itttt	eq
 800b4f8:	6819      	ldreq	r1, [r3, #0]
 800b4fa:	685b      	ldreq	r3, [r3, #4]
 800b4fc:	1809      	addeq	r1, r1, r0
 800b4fe:	6021      	streq	r1, [r4, #0]
 800b500:	e7ed      	b.n	800b4de <_free_r+0x1e>
 800b502:	461a      	mov	r2, r3
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	b10b      	cbz	r3, 800b50c <_free_r+0x4c>
 800b508:	42a3      	cmp	r3, r4
 800b50a:	d9fa      	bls.n	800b502 <_free_r+0x42>
 800b50c:	6811      	ldr	r1, [r2, #0]
 800b50e:	1850      	adds	r0, r2, r1
 800b510:	42a0      	cmp	r0, r4
 800b512:	d10b      	bne.n	800b52c <_free_r+0x6c>
 800b514:	6820      	ldr	r0, [r4, #0]
 800b516:	4401      	add	r1, r0
 800b518:	1850      	adds	r0, r2, r1
 800b51a:	6011      	str	r1, [r2, #0]
 800b51c:	4283      	cmp	r3, r0
 800b51e:	d1e0      	bne.n	800b4e2 <_free_r+0x22>
 800b520:	6818      	ldr	r0, [r3, #0]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	4408      	add	r0, r1
 800b526:	6053      	str	r3, [r2, #4]
 800b528:	6010      	str	r0, [r2, #0]
 800b52a:	e7da      	b.n	800b4e2 <_free_r+0x22>
 800b52c:	d902      	bls.n	800b534 <_free_r+0x74>
 800b52e:	230c      	movs	r3, #12
 800b530:	602b      	str	r3, [r5, #0]
 800b532:	e7d6      	b.n	800b4e2 <_free_r+0x22>
 800b534:	6820      	ldr	r0, [r4, #0]
 800b536:	1821      	adds	r1, r4, r0
 800b538:	428b      	cmp	r3, r1
 800b53a:	bf02      	ittt	eq
 800b53c:	6819      	ldreq	r1, [r3, #0]
 800b53e:	685b      	ldreq	r3, [r3, #4]
 800b540:	1809      	addeq	r1, r1, r0
 800b542:	6063      	str	r3, [r4, #4]
 800b544:	bf08      	it	eq
 800b546:	6021      	streq	r1, [r4, #0]
 800b548:	6054      	str	r4, [r2, #4]
 800b54a:	e7ca      	b.n	800b4e2 <_free_r+0x22>
 800b54c:	bd38      	pop	{r3, r4, r5, pc}
 800b54e:	bf00      	nop
 800b550:	200040a8 	.word	0x200040a8

0800b554 <malloc>:
 800b554:	4b02      	ldr	r3, [pc, #8]	@ (800b560 <malloc+0xc>)
 800b556:	4601      	mov	r1, r0
 800b558:	6818      	ldr	r0, [r3, #0]
 800b55a:	f000 b825 	b.w	800b5a8 <_malloc_r>
 800b55e:	bf00      	nop
 800b560:	2000002c 	.word	0x2000002c

0800b564 <sbrk_aligned>:
 800b564:	b570      	push	{r4, r5, r6, lr}
 800b566:	4e0f      	ldr	r6, [pc, #60]	@ (800b5a4 <sbrk_aligned+0x40>)
 800b568:	460c      	mov	r4, r1
 800b56a:	4605      	mov	r5, r0
 800b56c:	6831      	ldr	r1, [r6, #0]
 800b56e:	b911      	cbnz	r1, 800b576 <sbrk_aligned+0x12>
 800b570:	f000 fff8 	bl	800c564 <_sbrk_r>
 800b574:	6030      	str	r0, [r6, #0]
 800b576:	4621      	mov	r1, r4
 800b578:	4628      	mov	r0, r5
 800b57a:	f000 fff3 	bl	800c564 <_sbrk_r>
 800b57e:	1c43      	adds	r3, r0, #1
 800b580:	d103      	bne.n	800b58a <sbrk_aligned+0x26>
 800b582:	f04f 34ff 	mov.w	r4, #4294967295
 800b586:	4620      	mov	r0, r4
 800b588:	bd70      	pop	{r4, r5, r6, pc}
 800b58a:	1cc4      	adds	r4, r0, #3
 800b58c:	f024 0403 	bic.w	r4, r4, #3
 800b590:	42a0      	cmp	r0, r4
 800b592:	d0f8      	beq.n	800b586 <sbrk_aligned+0x22>
 800b594:	1a21      	subs	r1, r4, r0
 800b596:	4628      	mov	r0, r5
 800b598:	f000 ffe4 	bl	800c564 <_sbrk_r>
 800b59c:	3001      	adds	r0, #1
 800b59e:	d1f2      	bne.n	800b586 <sbrk_aligned+0x22>
 800b5a0:	e7ef      	b.n	800b582 <sbrk_aligned+0x1e>
 800b5a2:	bf00      	nop
 800b5a4:	200040a4 	.word	0x200040a4

0800b5a8 <_malloc_r>:
 800b5a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5ac:	1ccd      	adds	r5, r1, #3
 800b5ae:	4606      	mov	r6, r0
 800b5b0:	f025 0503 	bic.w	r5, r5, #3
 800b5b4:	3508      	adds	r5, #8
 800b5b6:	2d0c      	cmp	r5, #12
 800b5b8:	bf38      	it	cc
 800b5ba:	250c      	movcc	r5, #12
 800b5bc:	2d00      	cmp	r5, #0
 800b5be:	db01      	blt.n	800b5c4 <_malloc_r+0x1c>
 800b5c0:	42a9      	cmp	r1, r5
 800b5c2:	d904      	bls.n	800b5ce <_malloc_r+0x26>
 800b5c4:	230c      	movs	r3, #12
 800b5c6:	6033      	str	r3, [r6, #0]
 800b5c8:	2000      	movs	r0, #0
 800b5ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b6a4 <_malloc_r+0xfc>
 800b5d2:	f000 f869 	bl	800b6a8 <__malloc_lock>
 800b5d6:	f8d8 3000 	ldr.w	r3, [r8]
 800b5da:	461c      	mov	r4, r3
 800b5dc:	bb44      	cbnz	r4, 800b630 <_malloc_r+0x88>
 800b5de:	4629      	mov	r1, r5
 800b5e0:	4630      	mov	r0, r6
 800b5e2:	f7ff ffbf 	bl	800b564 <sbrk_aligned>
 800b5e6:	1c43      	adds	r3, r0, #1
 800b5e8:	4604      	mov	r4, r0
 800b5ea:	d158      	bne.n	800b69e <_malloc_r+0xf6>
 800b5ec:	f8d8 4000 	ldr.w	r4, [r8]
 800b5f0:	4627      	mov	r7, r4
 800b5f2:	2f00      	cmp	r7, #0
 800b5f4:	d143      	bne.n	800b67e <_malloc_r+0xd6>
 800b5f6:	2c00      	cmp	r4, #0
 800b5f8:	d04b      	beq.n	800b692 <_malloc_r+0xea>
 800b5fa:	6823      	ldr	r3, [r4, #0]
 800b5fc:	4639      	mov	r1, r7
 800b5fe:	4630      	mov	r0, r6
 800b600:	eb04 0903 	add.w	r9, r4, r3
 800b604:	f000 ffae 	bl	800c564 <_sbrk_r>
 800b608:	4581      	cmp	r9, r0
 800b60a:	d142      	bne.n	800b692 <_malloc_r+0xea>
 800b60c:	6821      	ldr	r1, [r4, #0]
 800b60e:	4630      	mov	r0, r6
 800b610:	1a6d      	subs	r5, r5, r1
 800b612:	4629      	mov	r1, r5
 800b614:	f7ff ffa6 	bl	800b564 <sbrk_aligned>
 800b618:	3001      	adds	r0, #1
 800b61a:	d03a      	beq.n	800b692 <_malloc_r+0xea>
 800b61c:	6823      	ldr	r3, [r4, #0]
 800b61e:	442b      	add	r3, r5
 800b620:	6023      	str	r3, [r4, #0]
 800b622:	f8d8 3000 	ldr.w	r3, [r8]
 800b626:	685a      	ldr	r2, [r3, #4]
 800b628:	bb62      	cbnz	r2, 800b684 <_malloc_r+0xdc>
 800b62a:	f8c8 7000 	str.w	r7, [r8]
 800b62e:	e00f      	b.n	800b650 <_malloc_r+0xa8>
 800b630:	6822      	ldr	r2, [r4, #0]
 800b632:	1b52      	subs	r2, r2, r5
 800b634:	d420      	bmi.n	800b678 <_malloc_r+0xd0>
 800b636:	2a0b      	cmp	r2, #11
 800b638:	d917      	bls.n	800b66a <_malloc_r+0xc2>
 800b63a:	1961      	adds	r1, r4, r5
 800b63c:	42a3      	cmp	r3, r4
 800b63e:	6025      	str	r5, [r4, #0]
 800b640:	bf18      	it	ne
 800b642:	6059      	strne	r1, [r3, #4]
 800b644:	6863      	ldr	r3, [r4, #4]
 800b646:	bf08      	it	eq
 800b648:	f8c8 1000 	streq.w	r1, [r8]
 800b64c:	5162      	str	r2, [r4, r5]
 800b64e:	604b      	str	r3, [r1, #4]
 800b650:	4630      	mov	r0, r6
 800b652:	f000 f82f 	bl	800b6b4 <__malloc_unlock>
 800b656:	f104 000b 	add.w	r0, r4, #11
 800b65a:	1d23      	adds	r3, r4, #4
 800b65c:	f020 0007 	bic.w	r0, r0, #7
 800b660:	1ac2      	subs	r2, r0, r3
 800b662:	bf1c      	itt	ne
 800b664:	1a1b      	subne	r3, r3, r0
 800b666:	50a3      	strne	r3, [r4, r2]
 800b668:	e7af      	b.n	800b5ca <_malloc_r+0x22>
 800b66a:	6862      	ldr	r2, [r4, #4]
 800b66c:	42a3      	cmp	r3, r4
 800b66e:	bf0c      	ite	eq
 800b670:	f8c8 2000 	streq.w	r2, [r8]
 800b674:	605a      	strne	r2, [r3, #4]
 800b676:	e7eb      	b.n	800b650 <_malloc_r+0xa8>
 800b678:	4623      	mov	r3, r4
 800b67a:	6864      	ldr	r4, [r4, #4]
 800b67c:	e7ae      	b.n	800b5dc <_malloc_r+0x34>
 800b67e:	463c      	mov	r4, r7
 800b680:	687f      	ldr	r7, [r7, #4]
 800b682:	e7b6      	b.n	800b5f2 <_malloc_r+0x4a>
 800b684:	461a      	mov	r2, r3
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	42a3      	cmp	r3, r4
 800b68a:	d1fb      	bne.n	800b684 <_malloc_r+0xdc>
 800b68c:	2300      	movs	r3, #0
 800b68e:	6053      	str	r3, [r2, #4]
 800b690:	e7de      	b.n	800b650 <_malloc_r+0xa8>
 800b692:	230c      	movs	r3, #12
 800b694:	4630      	mov	r0, r6
 800b696:	6033      	str	r3, [r6, #0]
 800b698:	f000 f80c 	bl	800b6b4 <__malloc_unlock>
 800b69c:	e794      	b.n	800b5c8 <_malloc_r+0x20>
 800b69e:	6005      	str	r5, [r0, #0]
 800b6a0:	e7d6      	b.n	800b650 <_malloc_r+0xa8>
 800b6a2:	bf00      	nop
 800b6a4:	200040a8 	.word	0x200040a8

0800b6a8 <__malloc_lock>:
 800b6a8:	4801      	ldr	r0, [pc, #4]	@ (800b6b0 <__malloc_lock+0x8>)
 800b6aa:	f7ff b89a 	b.w	800a7e2 <__retarget_lock_acquire_recursive>
 800b6ae:	bf00      	nop
 800b6b0:	200040a0 	.word	0x200040a0

0800b6b4 <__malloc_unlock>:
 800b6b4:	4801      	ldr	r0, [pc, #4]	@ (800b6bc <__malloc_unlock+0x8>)
 800b6b6:	f7ff b895 	b.w	800a7e4 <__retarget_lock_release_recursive>
 800b6ba:	bf00      	nop
 800b6bc:	200040a0 	.word	0x200040a0

0800b6c0 <_Balloc>:
 800b6c0:	b570      	push	{r4, r5, r6, lr}
 800b6c2:	69c6      	ldr	r6, [r0, #28]
 800b6c4:	4604      	mov	r4, r0
 800b6c6:	460d      	mov	r5, r1
 800b6c8:	b976      	cbnz	r6, 800b6e8 <_Balloc+0x28>
 800b6ca:	2010      	movs	r0, #16
 800b6cc:	f7ff ff42 	bl	800b554 <malloc>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	61e0      	str	r0, [r4, #28]
 800b6d4:	b920      	cbnz	r0, 800b6e0 <_Balloc+0x20>
 800b6d6:	4b18      	ldr	r3, [pc, #96]	@ (800b738 <_Balloc+0x78>)
 800b6d8:	216b      	movs	r1, #107	@ 0x6b
 800b6da:	4818      	ldr	r0, [pc, #96]	@ (800b73c <_Balloc+0x7c>)
 800b6dc:	f000 ff52 	bl	800c584 <__assert_func>
 800b6e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6e4:	6006      	str	r6, [r0, #0]
 800b6e6:	60c6      	str	r6, [r0, #12]
 800b6e8:	69e6      	ldr	r6, [r4, #28]
 800b6ea:	68f3      	ldr	r3, [r6, #12]
 800b6ec:	b183      	cbz	r3, 800b710 <_Balloc+0x50>
 800b6ee:	69e3      	ldr	r3, [r4, #28]
 800b6f0:	68db      	ldr	r3, [r3, #12]
 800b6f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b6f6:	b9b8      	cbnz	r0, 800b728 <_Balloc+0x68>
 800b6f8:	2101      	movs	r1, #1
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	fa01 f605 	lsl.w	r6, r1, r5
 800b700:	1d72      	adds	r2, r6, #5
 800b702:	0092      	lsls	r2, r2, #2
 800b704:	f000 ff5c 	bl	800c5c0 <_calloc_r>
 800b708:	b160      	cbz	r0, 800b724 <_Balloc+0x64>
 800b70a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b70e:	e00e      	b.n	800b72e <_Balloc+0x6e>
 800b710:	2221      	movs	r2, #33	@ 0x21
 800b712:	2104      	movs	r1, #4
 800b714:	4620      	mov	r0, r4
 800b716:	f000 ff53 	bl	800c5c0 <_calloc_r>
 800b71a:	69e3      	ldr	r3, [r4, #28]
 800b71c:	60f0      	str	r0, [r6, #12]
 800b71e:	68db      	ldr	r3, [r3, #12]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d1e4      	bne.n	800b6ee <_Balloc+0x2e>
 800b724:	2000      	movs	r0, #0
 800b726:	bd70      	pop	{r4, r5, r6, pc}
 800b728:	6802      	ldr	r2, [r0, #0]
 800b72a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b72e:	2300      	movs	r3, #0
 800b730:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b734:	e7f7      	b.n	800b726 <_Balloc+0x66>
 800b736:	bf00      	nop
 800b738:	0800d0c1 	.word	0x0800d0c1
 800b73c:	0800d141 	.word	0x0800d141

0800b740 <_Bfree>:
 800b740:	b570      	push	{r4, r5, r6, lr}
 800b742:	69c6      	ldr	r6, [r0, #28]
 800b744:	4605      	mov	r5, r0
 800b746:	460c      	mov	r4, r1
 800b748:	b976      	cbnz	r6, 800b768 <_Bfree+0x28>
 800b74a:	2010      	movs	r0, #16
 800b74c:	f7ff ff02 	bl	800b554 <malloc>
 800b750:	4602      	mov	r2, r0
 800b752:	61e8      	str	r0, [r5, #28]
 800b754:	b920      	cbnz	r0, 800b760 <_Bfree+0x20>
 800b756:	4b09      	ldr	r3, [pc, #36]	@ (800b77c <_Bfree+0x3c>)
 800b758:	218f      	movs	r1, #143	@ 0x8f
 800b75a:	4809      	ldr	r0, [pc, #36]	@ (800b780 <_Bfree+0x40>)
 800b75c:	f000 ff12 	bl	800c584 <__assert_func>
 800b760:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b764:	6006      	str	r6, [r0, #0]
 800b766:	60c6      	str	r6, [r0, #12]
 800b768:	b13c      	cbz	r4, 800b77a <_Bfree+0x3a>
 800b76a:	69eb      	ldr	r3, [r5, #28]
 800b76c:	6862      	ldr	r2, [r4, #4]
 800b76e:	68db      	ldr	r3, [r3, #12]
 800b770:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b774:	6021      	str	r1, [r4, #0]
 800b776:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b77a:	bd70      	pop	{r4, r5, r6, pc}
 800b77c:	0800d0c1 	.word	0x0800d0c1
 800b780:	0800d141 	.word	0x0800d141

0800b784 <__multadd>:
 800b784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b788:	f101 0c14 	add.w	ip, r1, #20
 800b78c:	4607      	mov	r7, r0
 800b78e:	460c      	mov	r4, r1
 800b790:	461e      	mov	r6, r3
 800b792:	690d      	ldr	r5, [r1, #16]
 800b794:	2000      	movs	r0, #0
 800b796:	f8dc 3000 	ldr.w	r3, [ip]
 800b79a:	3001      	adds	r0, #1
 800b79c:	b299      	uxth	r1, r3
 800b79e:	4285      	cmp	r5, r0
 800b7a0:	fb02 6101 	mla	r1, r2, r1, r6
 800b7a4:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b7a8:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800b7ac:	b289      	uxth	r1, r1
 800b7ae:	fb02 3306 	mla	r3, r2, r6, r3
 800b7b2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b7b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b7ba:	f84c 1b04 	str.w	r1, [ip], #4
 800b7be:	dcea      	bgt.n	800b796 <__multadd+0x12>
 800b7c0:	b30e      	cbz	r6, 800b806 <__multadd+0x82>
 800b7c2:	68a3      	ldr	r3, [r4, #8]
 800b7c4:	42ab      	cmp	r3, r5
 800b7c6:	dc19      	bgt.n	800b7fc <__multadd+0x78>
 800b7c8:	6861      	ldr	r1, [r4, #4]
 800b7ca:	4638      	mov	r0, r7
 800b7cc:	3101      	adds	r1, #1
 800b7ce:	f7ff ff77 	bl	800b6c0 <_Balloc>
 800b7d2:	4680      	mov	r8, r0
 800b7d4:	b928      	cbnz	r0, 800b7e2 <__multadd+0x5e>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	4b0c      	ldr	r3, [pc, #48]	@ (800b80c <__multadd+0x88>)
 800b7da:	21ba      	movs	r1, #186	@ 0xba
 800b7dc:	480c      	ldr	r0, [pc, #48]	@ (800b810 <__multadd+0x8c>)
 800b7de:	f000 fed1 	bl	800c584 <__assert_func>
 800b7e2:	6922      	ldr	r2, [r4, #16]
 800b7e4:	f104 010c 	add.w	r1, r4, #12
 800b7e8:	300c      	adds	r0, #12
 800b7ea:	3202      	adds	r2, #2
 800b7ec:	0092      	lsls	r2, r2, #2
 800b7ee:	f7ff f808 	bl	800a802 <memcpy>
 800b7f2:	4621      	mov	r1, r4
 800b7f4:	4644      	mov	r4, r8
 800b7f6:	4638      	mov	r0, r7
 800b7f8:	f7ff ffa2 	bl	800b740 <_Bfree>
 800b7fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b800:	3501      	adds	r5, #1
 800b802:	615e      	str	r6, [r3, #20]
 800b804:	6125      	str	r5, [r4, #16]
 800b806:	4620      	mov	r0, r4
 800b808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b80c:	0800d130 	.word	0x0800d130
 800b810:	0800d141 	.word	0x0800d141

0800b814 <__hi0bits>:
 800b814:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b818:	4603      	mov	r3, r0
 800b81a:	bf36      	itet	cc
 800b81c:	0403      	lslcc	r3, r0, #16
 800b81e:	2000      	movcs	r0, #0
 800b820:	2010      	movcc	r0, #16
 800b822:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b826:	bf3c      	itt	cc
 800b828:	021b      	lslcc	r3, r3, #8
 800b82a:	3008      	addcc	r0, #8
 800b82c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b830:	bf3c      	itt	cc
 800b832:	011b      	lslcc	r3, r3, #4
 800b834:	3004      	addcc	r0, #4
 800b836:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b83a:	bf3c      	itt	cc
 800b83c:	009b      	lslcc	r3, r3, #2
 800b83e:	3002      	addcc	r0, #2
 800b840:	2b00      	cmp	r3, #0
 800b842:	db05      	blt.n	800b850 <__hi0bits+0x3c>
 800b844:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b848:	f100 0001 	add.w	r0, r0, #1
 800b84c:	bf08      	it	eq
 800b84e:	2020      	moveq	r0, #32
 800b850:	4770      	bx	lr

0800b852 <__lo0bits>:
 800b852:	6803      	ldr	r3, [r0, #0]
 800b854:	4602      	mov	r2, r0
 800b856:	f013 0007 	ands.w	r0, r3, #7
 800b85a:	d00b      	beq.n	800b874 <__lo0bits+0x22>
 800b85c:	07d9      	lsls	r1, r3, #31
 800b85e:	d421      	bmi.n	800b8a4 <__lo0bits+0x52>
 800b860:	0798      	lsls	r0, r3, #30
 800b862:	bf47      	ittee	mi
 800b864:	085b      	lsrmi	r3, r3, #1
 800b866:	2001      	movmi	r0, #1
 800b868:	089b      	lsrpl	r3, r3, #2
 800b86a:	2002      	movpl	r0, #2
 800b86c:	bf4c      	ite	mi
 800b86e:	6013      	strmi	r3, [r2, #0]
 800b870:	6013      	strpl	r3, [r2, #0]
 800b872:	4770      	bx	lr
 800b874:	b299      	uxth	r1, r3
 800b876:	b909      	cbnz	r1, 800b87c <__lo0bits+0x2a>
 800b878:	0c1b      	lsrs	r3, r3, #16
 800b87a:	2010      	movs	r0, #16
 800b87c:	b2d9      	uxtb	r1, r3
 800b87e:	b909      	cbnz	r1, 800b884 <__lo0bits+0x32>
 800b880:	3008      	adds	r0, #8
 800b882:	0a1b      	lsrs	r3, r3, #8
 800b884:	0719      	lsls	r1, r3, #28
 800b886:	bf04      	itt	eq
 800b888:	091b      	lsreq	r3, r3, #4
 800b88a:	3004      	addeq	r0, #4
 800b88c:	0799      	lsls	r1, r3, #30
 800b88e:	bf04      	itt	eq
 800b890:	089b      	lsreq	r3, r3, #2
 800b892:	3002      	addeq	r0, #2
 800b894:	07d9      	lsls	r1, r3, #31
 800b896:	d403      	bmi.n	800b8a0 <__lo0bits+0x4e>
 800b898:	085b      	lsrs	r3, r3, #1
 800b89a:	f100 0001 	add.w	r0, r0, #1
 800b89e:	d003      	beq.n	800b8a8 <__lo0bits+0x56>
 800b8a0:	6013      	str	r3, [r2, #0]
 800b8a2:	4770      	bx	lr
 800b8a4:	2000      	movs	r0, #0
 800b8a6:	4770      	bx	lr
 800b8a8:	2020      	movs	r0, #32
 800b8aa:	4770      	bx	lr

0800b8ac <__i2b>:
 800b8ac:	b510      	push	{r4, lr}
 800b8ae:	460c      	mov	r4, r1
 800b8b0:	2101      	movs	r1, #1
 800b8b2:	f7ff ff05 	bl	800b6c0 <_Balloc>
 800b8b6:	4602      	mov	r2, r0
 800b8b8:	b928      	cbnz	r0, 800b8c6 <__i2b+0x1a>
 800b8ba:	4b05      	ldr	r3, [pc, #20]	@ (800b8d0 <__i2b+0x24>)
 800b8bc:	f240 1145 	movw	r1, #325	@ 0x145
 800b8c0:	4804      	ldr	r0, [pc, #16]	@ (800b8d4 <__i2b+0x28>)
 800b8c2:	f000 fe5f 	bl	800c584 <__assert_func>
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	6144      	str	r4, [r0, #20]
 800b8ca:	6103      	str	r3, [r0, #16]
 800b8cc:	bd10      	pop	{r4, pc}
 800b8ce:	bf00      	nop
 800b8d0:	0800d130 	.word	0x0800d130
 800b8d4:	0800d141 	.word	0x0800d141

0800b8d8 <__multiply>:
 800b8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8dc:	4614      	mov	r4, r2
 800b8de:	690a      	ldr	r2, [r1, #16]
 800b8e0:	460f      	mov	r7, r1
 800b8e2:	b085      	sub	sp, #20
 800b8e4:	6923      	ldr	r3, [r4, #16]
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	bfa2      	ittt	ge
 800b8ea:	4623      	movge	r3, r4
 800b8ec:	460c      	movge	r4, r1
 800b8ee:	461f      	movge	r7, r3
 800b8f0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b8f4:	68a3      	ldr	r3, [r4, #8]
 800b8f6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b8fa:	6861      	ldr	r1, [r4, #4]
 800b8fc:	eb0a 0609 	add.w	r6, sl, r9
 800b900:	42b3      	cmp	r3, r6
 800b902:	bfb8      	it	lt
 800b904:	3101      	addlt	r1, #1
 800b906:	f7ff fedb 	bl	800b6c0 <_Balloc>
 800b90a:	b930      	cbnz	r0, 800b91a <__multiply+0x42>
 800b90c:	4602      	mov	r2, r0
 800b90e:	4b45      	ldr	r3, [pc, #276]	@ (800ba24 <__multiply+0x14c>)
 800b910:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b914:	4844      	ldr	r0, [pc, #272]	@ (800ba28 <__multiply+0x150>)
 800b916:	f000 fe35 	bl	800c584 <__assert_func>
 800b91a:	f100 0514 	add.w	r5, r0, #20
 800b91e:	2200      	movs	r2, #0
 800b920:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b924:	462b      	mov	r3, r5
 800b926:	4543      	cmp	r3, r8
 800b928:	d321      	bcc.n	800b96e <__multiply+0x96>
 800b92a:	f107 0114 	add.w	r1, r7, #20
 800b92e:	f104 0214 	add.w	r2, r4, #20
 800b932:	f104 0715 	add.w	r7, r4, #21
 800b936:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b93a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b93e:	9302      	str	r3, [sp, #8]
 800b940:	1b13      	subs	r3, r2, r4
 800b942:	3b15      	subs	r3, #21
 800b944:	f023 0303 	bic.w	r3, r3, #3
 800b948:	3304      	adds	r3, #4
 800b94a:	42ba      	cmp	r2, r7
 800b94c:	bf38      	it	cc
 800b94e:	2304      	movcc	r3, #4
 800b950:	9301      	str	r3, [sp, #4]
 800b952:	9b02      	ldr	r3, [sp, #8]
 800b954:	9103      	str	r1, [sp, #12]
 800b956:	428b      	cmp	r3, r1
 800b958:	d80c      	bhi.n	800b974 <__multiply+0x9c>
 800b95a:	2e00      	cmp	r6, #0
 800b95c:	dd03      	ble.n	800b966 <__multiply+0x8e>
 800b95e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b962:	2b00      	cmp	r3, #0
 800b964:	d05b      	beq.n	800ba1e <__multiply+0x146>
 800b966:	6106      	str	r6, [r0, #16]
 800b968:	b005      	add	sp, #20
 800b96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b96e:	f843 2b04 	str.w	r2, [r3], #4
 800b972:	e7d8      	b.n	800b926 <__multiply+0x4e>
 800b974:	f8b1 a000 	ldrh.w	sl, [r1]
 800b978:	f1ba 0f00 	cmp.w	sl, #0
 800b97c:	d024      	beq.n	800b9c8 <__multiply+0xf0>
 800b97e:	f104 0e14 	add.w	lr, r4, #20
 800b982:	46a9      	mov	r9, r5
 800b984:	f04f 0c00 	mov.w	ip, #0
 800b988:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b98c:	f8d9 3000 	ldr.w	r3, [r9]
 800b990:	fa1f fb87 	uxth.w	fp, r7
 800b994:	4572      	cmp	r2, lr
 800b996:	b29b      	uxth	r3, r3
 800b998:	fb0a 330b 	mla	r3, sl, fp, r3
 800b99c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b9a0:	f8d9 7000 	ldr.w	r7, [r9]
 800b9a4:	4463      	add	r3, ip
 800b9a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b9aa:	fb0a c70b 	mla	r7, sl, fp, ip
 800b9ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b9b2:	b29b      	uxth	r3, r3
 800b9b4:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b9b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b9bc:	f849 3b04 	str.w	r3, [r9], #4
 800b9c0:	d8e2      	bhi.n	800b988 <__multiply+0xb0>
 800b9c2:	9b01      	ldr	r3, [sp, #4]
 800b9c4:	f845 c003 	str.w	ip, [r5, r3]
 800b9c8:	9b03      	ldr	r3, [sp, #12]
 800b9ca:	3104      	adds	r1, #4
 800b9cc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b9d0:	f1b9 0f00 	cmp.w	r9, #0
 800b9d4:	d021      	beq.n	800ba1a <__multiply+0x142>
 800b9d6:	682b      	ldr	r3, [r5, #0]
 800b9d8:	f104 0c14 	add.w	ip, r4, #20
 800b9dc:	46ae      	mov	lr, r5
 800b9de:	f04f 0a00 	mov.w	sl, #0
 800b9e2:	f8bc b000 	ldrh.w	fp, [ip]
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b9ec:	fb09 770b 	mla	r7, r9, fp, r7
 800b9f0:	4457      	add	r7, sl
 800b9f2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b9f6:	f84e 3b04 	str.w	r3, [lr], #4
 800b9fa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b9fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba02:	f8be 3000 	ldrh.w	r3, [lr]
 800ba06:	4562      	cmp	r2, ip
 800ba08:	fb09 330a 	mla	r3, r9, sl, r3
 800ba0c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ba10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba14:	d8e5      	bhi.n	800b9e2 <__multiply+0x10a>
 800ba16:	9f01      	ldr	r7, [sp, #4]
 800ba18:	51eb      	str	r3, [r5, r7]
 800ba1a:	3504      	adds	r5, #4
 800ba1c:	e799      	b.n	800b952 <__multiply+0x7a>
 800ba1e:	3e01      	subs	r6, #1
 800ba20:	e79b      	b.n	800b95a <__multiply+0x82>
 800ba22:	bf00      	nop
 800ba24:	0800d130 	.word	0x0800d130
 800ba28:	0800d141 	.word	0x0800d141

0800ba2c <__pow5mult>:
 800ba2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba30:	4615      	mov	r5, r2
 800ba32:	f012 0203 	ands.w	r2, r2, #3
 800ba36:	4607      	mov	r7, r0
 800ba38:	460e      	mov	r6, r1
 800ba3a:	d007      	beq.n	800ba4c <__pow5mult+0x20>
 800ba3c:	3a01      	subs	r2, #1
 800ba3e:	4c25      	ldr	r4, [pc, #148]	@ (800bad4 <__pow5mult+0xa8>)
 800ba40:	2300      	movs	r3, #0
 800ba42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ba46:	f7ff fe9d 	bl	800b784 <__multadd>
 800ba4a:	4606      	mov	r6, r0
 800ba4c:	10ad      	asrs	r5, r5, #2
 800ba4e:	d03d      	beq.n	800bacc <__pow5mult+0xa0>
 800ba50:	69fc      	ldr	r4, [r7, #28]
 800ba52:	b97c      	cbnz	r4, 800ba74 <__pow5mult+0x48>
 800ba54:	2010      	movs	r0, #16
 800ba56:	f7ff fd7d 	bl	800b554 <malloc>
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	61f8      	str	r0, [r7, #28]
 800ba5e:	b928      	cbnz	r0, 800ba6c <__pow5mult+0x40>
 800ba60:	4b1d      	ldr	r3, [pc, #116]	@ (800bad8 <__pow5mult+0xac>)
 800ba62:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ba66:	481d      	ldr	r0, [pc, #116]	@ (800badc <__pow5mult+0xb0>)
 800ba68:	f000 fd8c 	bl	800c584 <__assert_func>
 800ba6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba70:	6004      	str	r4, [r0, #0]
 800ba72:	60c4      	str	r4, [r0, #12]
 800ba74:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ba78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba7c:	b94c      	cbnz	r4, 800ba92 <__pow5mult+0x66>
 800ba7e:	f240 2171 	movw	r1, #625	@ 0x271
 800ba82:	4638      	mov	r0, r7
 800ba84:	f7ff ff12 	bl	800b8ac <__i2b>
 800ba88:	2300      	movs	r3, #0
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba90:	6003      	str	r3, [r0, #0]
 800ba92:	f04f 0900 	mov.w	r9, #0
 800ba96:	07eb      	lsls	r3, r5, #31
 800ba98:	d50a      	bpl.n	800bab0 <__pow5mult+0x84>
 800ba9a:	4631      	mov	r1, r6
 800ba9c:	4622      	mov	r2, r4
 800ba9e:	4638      	mov	r0, r7
 800baa0:	f7ff ff1a 	bl	800b8d8 <__multiply>
 800baa4:	4680      	mov	r8, r0
 800baa6:	4631      	mov	r1, r6
 800baa8:	4638      	mov	r0, r7
 800baaa:	4646      	mov	r6, r8
 800baac:	f7ff fe48 	bl	800b740 <_Bfree>
 800bab0:	106d      	asrs	r5, r5, #1
 800bab2:	d00b      	beq.n	800bacc <__pow5mult+0xa0>
 800bab4:	6820      	ldr	r0, [r4, #0]
 800bab6:	b938      	cbnz	r0, 800bac8 <__pow5mult+0x9c>
 800bab8:	4622      	mov	r2, r4
 800baba:	4621      	mov	r1, r4
 800babc:	4638      	mov	r0, r7
 800babe:	f7ff ff0b 	bl	800b8d8 <__multiply>
 800bac2:	6020      	str	r0, [r4, #0]
 800bac4:	f8c0 9000 	str.w	r9, [r0]
 800bac8:	4604      	mov	r4, r0
 800baca:	e7e4      	b.n	800ba96 <__pow5mult+0x6a>
 800bacc:	4630      	mov	r0, r6
 800bace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bad2:	bf00      	nop
 800bad4:	0800d19c 	.word	0x0800d19c
 800bad8:	0800d0c1 	.word	0x0800d0c1
 800badc:	0800d141 	.word	0x0800d141

0800bae0 <__lshift>:
 800bae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bae4:	460c      	mov	r4, r1
 800bae6:	4607      	mov	r7, r0
 800bae8:	4691      	mov	r9, r2
 800baea:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800baee:	6923      	ldr	r3, [r4, #16]
 800baf0:	6849      	ldr	r1, [r1, #4]
 800baf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800baf6:	68a3      	ldr	r3, [r4, #8]
 800baf8:	f108 0601 	add.w	r6, r8, #1
 800bafc:	42b3      	cmp	r3, r6
 800bafe:	db0b      	blt.n	800bb18 <__lshift+0x38>
 800bb00:	4638      	mov	r0, r7
 800bb02:	f7ff fddd 	bl	800b6c0 <_Balloc>
 800bb06:	4605      	mov	r5, r0
 800bb08:	b948      	cbnz	r0, 800bb1e <__lshift+0x3e>
 800bb0a:	4602      	mov	r2, r0
 800bb0c:	4b28      	ldr	r3, [pc, #160]	@ (800bbb0 <__lshift+0xd0>)
 800bb0e:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bb12:	4828      	ldr	r0, [pc, #160]	@ (800bbb4 <__lshift+0xd4>)
 800bb14:	f000 fd36 	bl	800c584 <__assert_func>
 800bb18:	3101      	adds	r1, #1
 800bb1a:	005b      	lsls	r3, r3, #1
 800bb1c:	e7ee      	b.n	800bafc <__lshift+0x1c>
 800bb1e:	2300      	movs	r3, #0
 800bb20:	f100 0114 	add.w	r1, r0, #20
 800bb24:	f100 0210 	add.w	r2, r0, #16
 800bb28:	4618      	mov	r0, r3
 800bb2a:	4553      	cmp	r3, sl
 800bb2c:	db33      	blt.n	800bb96 <__lshift+0xb6>
 800bb2e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb32:	f104 0314 	add.w	r3, r4, #20
 800bb36:	6920      	ldr	r0, [r4, #16]
 800bb38:	f019 091f 	ands.w	r9, r9, #31
 800bb3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bb40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bb44:	d02b      	beq.n	800bb9e <__lshift+0xbe>
 800bb46:	f1c9 0e20 	rsb	lr, r9, #32
 800bb4a:	468a      	mov	sl, r1
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	6818      	ldr	r0, [r3, #0]
 800bb50:	fa00 f009 	lsl.w	r0, r0, r9
 800bb54:	4310      	orrs	r0, r2
 800bb56:	f84a 0b04 	str.w	r0, [sl], #4
 800bb5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb5e:	459c      	cmp	ip, r3
 800bb60:	fa22 f20e 	lsr.w	r2, r2, lr
 800bb64:	d8f3      	bhi.n	800bb4e <__lshift+0x6e>
 800bb66:	ebac 0304 	sub.w	r3, ip, r4
 800bb6a:	f104 0015 	add.w	r0, r4, #21
 800bb6e:	3b15      	subs	r3, #21
 800bb70:	f023 0303 	bic.w	r3, r3, #3
 800bb74:	3304      	adds	r3, #4
 800bb76:	4584      	cmp	ip, r0
 800bb78:	bf38      	it	cc
 800bb7a:	2304      	movcc	r3, #4
 800bb7c:	50ca      	str	r2, [r1, r3]
 800bb7e:	b10a      	cbz	r2, 800bb84 <__lshift+0xa4>
 800bb80:	f108 0602 	add.w	r6, r8, #2
 800bb84:	3e01      	subs	r6, #1
 800bb86:	4638      	mov	r0, r7
 800bb88:	4621      	mov	r1, r4
 800bb8a:	612e      	str	r6, [r5, #16]
 800bb8c:	f7ff fdd8 	bl	800b740 <_Bfree>
 800bb90:	4628      	mov	r0, r5
 800bb92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb96:	3301      	adds	r3, #1
 800bb98:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb9c:	e7c5      	b.n	800bb2a <__lshift+0x4a>
 800bb9e:	3904      	subs	r1, #4
 800bba0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bba4:	459c      	cmp	ip, r3
 800bba6:	f841 2f04 	str.w	r2, [r1, #4]!
 800bbaa:	d8f9      	bhi.n	800bba0 <__lshift+0xc0>
 800bbac:	e7ea      	b.n	800bb84 <__lshift+0xa4>
 800bbae:	bf00      	nop
 800bbb0:	0800d130 	.word	0x0800d130
 800bbb4:	0800d141 	.word	0x0800d141

0800bbb8 <__mcmp>:
 800bbb8:	4603      	mov	r3, r0
 800bbba:	690a      	ldr	r2, [r1, #16]
 800bbbc:	6900      	ldr	r0, [r0, #16]
 800bbbe:	1a80      	subs	r0, r0, r2
 800bbc0:	b530      	push	{r4, r5, lr}
 800bbc2:	d10e      	bne.n	800bbe2 <__mcmp+0x2a>
 800bbc4:	3314      	adds	r3, #20
 800bbc6:	3114      	adds	r1, #20
 800bbc8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bbcc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bbd0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bbd4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bbd8:	4295      	cmp	r5, r2
 800bbda:	d003      	beq.n	800bbe4 <__mcmp+0x2c>
 800bbdc:	d205      	bcs.n	800bbea <__mcmp+0x32>
 800bbde:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe2:	bd30      	pop	{r4, r5, pc}
 800bbe4:	42a3      	cmp	r3, r4
 800bbe6:	d3f3      	bcc.n	800bbd0 <__mcmp+0x18>
 800bbe8:	e7fb      	b.n	800bbe2 <__mcmp+0x2a>
 800bbea:	2001      	movs	r0, #1
 800bbec:	e7f9      	b.n	800bbe2 <__mcmp+0x2a>
	...

0800bbf0 <__mdiff>:
 800bbf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf4:	4689      	mov	r9, r1
 800bbf6:	4606      	mov	r6, r0
 800bbf8:	4611      	mov	r1, r2
 800bbfa:	4614      	mov	r4, r2
 800bbfc:	4648      	mov	r0, r9
 800bbfe:	f7ff ffdb 	bl	800bbb8 <__mcmp>
 800bc02:	1e05      	subs	r5, r0, #0
 800bc04:	d112      	bne.n	800bc2c <__mdiff+0x3c>
 800bc06:	4629      	mov	r1, r5
 800bc08:	4630      	mov	r0, r6
 800bc0a:	f7ff fd59 	bl	800b6c0 <_Balloc>
 800bc0e:	4602      	mov	r2, r0
 800bc10:	b928      	cbnz	r0, 800bc1e <__mdiff+0x2e>
 800bc12:	4b41      	ldr	r3, [pc, #260]	@ (800bd18 <__mdiff+0x128>)
 800bc14:	f240 2137 	movw	r1, #567	@ 0x237
 800bc18:	4840      	ldr	r0, [pc, #256]	@ (800bd1c <__mdiff+0x12c>)
 800bc1a:	f000 fcb3 	bl	800c584 <__assert_func>
 800bc1e:	2301      	movs	r3, #1
 800bc20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bc24:	4610      	mov	r0, r2
 800bc26:	b003      	add	sp, #12
 800bc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc2c:	bfbc      	itt	lt
 800bc2e:	464b      	movlt	r3, r9
 800bc30:	46a1      	movlt	r9, r4
 800bc32:	4630      	mov	r0, r6
 800bc34:	bfb8      	it	lt
 800bc36:	2501      	movlt	r5, #1
 800bc38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bc3c:	bfb4      	ite	lt
 800bc3e:	461c      	movlt	r4, r3
 800bc40:	2500      	movge	r5, #0
 800bc42:	f7ff fd3d 	bl	800b6c0 <_Balloc>
 800bc46:	4602      	mov	r2, r0
 800bc48:	b918      	cbnz	r0, 800bc52 <__mdiff+0x62>
 800bc4a:	4b33      	ldr	r3, [pc, #204]	@ (800bd18 <__mdiff+0x128>)
 800bc4c:	f240 2145 	movw	r1, #581	@ 0x245
 800bc50:	e7e2      	b.n	800bc18 <__mdiff+0x28>
 800bc52:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bc56:	f104 0e14 	add.w	lr, r4, #20
 800bc5a:	6926      	ldr	r6, [r4, #16]
 800bc5c:	f100 0b14 	add.w	fp, r0, #20
 800bc60:	60c5      	str	r5, [r0, #12]
 800bc62:	f109 0514 	add.w	r5, r9, #20
 800bc66:	f109 0310 	add.w	r3, r9, #16
 800bc6a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bc6e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bc72:	46d9      	mov	r9, fp
 800bc74:	f04f 0c00 	mov.w	ip, #0
 800bc78:	9301      	str	r3, [sp, #4]
 800bc7a:	9b01      	ldr	r3, [sp, #4]
 800bc7c:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bc80:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bc84:	4576      	cmp	r6, lr
 800bc86:	9301      	str	r3, [sp, #4]
 800bc88:	fa1f f38a 	uxth.w	r3, sl
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	b283      	uxth	r3, r0
 800bc90:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800bc94:	eba1 0303 	sub.w	r3, r1, r3
 800bc98:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bc9c:	4463      	add	r3, ip
 800bc9e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bca8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bcac:	f849 3b04 	str.w	r3, [r9], #4
 800bcb0:	d8e3      	bhi.n	800bc7a <__mdiff+0x8a>
 800bcb2:	1b33      	subs	r3, r6, r4
 800bcb4:	3415      	adds	r4, #21
 800bcb6:	3b15      	subs	r3, #21
 800bcb8:	f023 0303 	bic.w	r3, r3, #3
 800bcbc:	3304      	adds	r3, #4
 800bcbe:	42a6      	cmp	r6, r4
 800bcc0:	bf38      	it	cc
 800bcc2:	2304      	movcc	r3, #4
 800bcc4:	441d      	add	r5, r3
 800bcc6:	445b      	add	r3, fp
 800bcc8:	462c      	mov	r4, r5
 800bcca:	461e      	mov	r6, r3
 800bccc:	4544      	cmp	r4, r8
 800bcce:	d30e      	bcc.n	800bcee <__mdiff+0xfe>
 800bcd0:	f108 0103 	add.w	r1, r8, #3
 800bcd4:	1b49      	subs	r1, r1, r5
 800bcd6:	3d03      	subs	r5, #3
 800bcd8:	f021 0103 	bic.w	r1, r1, #3
 800bcdc:	45a8      	cmp	r8, r5
 800bcde:	bf38      	it	cc
 800bce0:	2100      	movcc	r1, #0
 800bce2:	440b      	add	r3, r1
 800bce4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bce8:	b199      	cbz	r1, 800bd12 <__mdiff+0x122>
 800bcea:	6117      	str	r7, [r2, #16]
 800bcec:	e79a      	b.n	800bc24 <__mdiff+0x34>
 800bcee:	f854 1b04 	ldr.w	r1, [r4], #4
 800bcf2:	46e6      	mov	lr, ip
 800bcf4:	fa1f fc81 	uxth.w	ip, r1
 800bcf8:	0c08      	lsrs	r0, r1, #16
 800bcfa:	4471      	add	r1, lr
 800bcfc:	44f4      	add	ip, lr
 800bcfe:	b289      	uxth	r1, r1
 800bd00:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bd04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bd08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bd0c:	f846 1b04 	str.w	r1, [r6], #4
 800bd10:	e7dc      	b.n	800bccc <__mdiff+0xdc>
 800bd12:	3f01      	subs	r7, #1
 800bd14:	e7e6      	b.n	800bce4 <__mdiff+0xf4>
 800bd16:	bf00      	nop
 800bd18:	0800d130 	.word	0x0800d130
 800bd1c:	0800d141 	.word	0x0800d141

0800bd20 <__d2b>:
 800bd20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bd24:	460f      	mov	r7, r1
 800bd26:	2101      	movs	r1, #1
 800bd28:	4616      	mov	r6, r2
 800bd2a:	ec59 8b10 	vmov	r8, r9, d0
 800bd2e:	f7ff fcc7 	bl	800b6c0 <_Balloc>
 800bd32:	4604      	mov	r4, r0
 800bd34:	b930      	cbnz	r0, 800bd44 <__d2b+0x24>
 800bd36:	4602      	mov	r2, r0
 800bd38:	4b23      	ldr	r3, [pc, #140]	@ (800bdc8 <__d2b+0xa8>)
 800bd3a:	f240 310f 	movw	r1, #783	@ 0x30f
 800bd3e:	4823      	ldr	r0, [pc, #140]	@ (800bdcc <__d2b+0xac>)
 800bd40:	f000 fc20 	bl	800c584 <__assert_func>
 800bd44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bd48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bd4c:	b10d      	cbz	r5, 800bd52 <__d2b+0x32>
 800bd4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bd52:	9301      	str	r3, [sp, #4]
 800bd54:	f1b8 0300 	subs.w	r3, r8, #0
 800bd58:	d023      	beq.n	800bda2 <__d2b+0x82>
 800bd5a:	4668      	mov	r0, sp
 800bd5c:	9300      	str	r3, [sp, #0]
 800bd5e:	f7ff fd78 	bl	800b852 <__lo0bits>
 800bd62:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bd66:	b1d0      	cbz	r0, 800bd9e <__d2b+0x7e>
 800bd68:	f1c0 0320 	rsb	r3, r0, #32
 800bd6c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd70:	40c2      	lsrs	r2, r0
 800bd72:	430b      	orrs	r3, r1
 800bd74:	9201      	str	r2, [sp, #4]
 800bd76:	6163      	str	r3, [r4, #20]
 800bd78:	9b01      	ldr	r3, [sp, #4]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	61a3      	str	r3, [r4, #24]
 800bd7e:	bf0c      	ite	eq
 800bd80:	2201      	moveq	r2, #1
 800bd82:	2202      	movne	r2, #2
 800bd84:	6122      	str	r2, [r4, #16]
 800bd86:	b1a5      	cbz	r5, 800bdb2 <__d2b+0x92>
 800bd88:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bd8c:	4405      	add	r5, r0
 800bd8e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bd92:	603d      	str	r5, [r7, #0]
 800bd94:	6030      	str	r0, [r6, #0]
 800bd96:	4620      	mov	r0, r4
 800bd98:	b003      	add	sp, #12
 800bd9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd9e:	6161      	str	r1, [r4, #20]
 800bda0:	e7ea      	b.n	800bd78 <__d2b+0x58>
 800bda2:	a801      	add	r0, sp, #4
 800bda4:	f7ff fd55 	bl	800b852 <__lo0bits>
 800bda8:	9b01      	ldr	r3, [sp, #4]
 800bdaa:	3020      	adds	r0, #32
 800bdac:	2201      	movs	r2, #1
 800bdae:	6163      	str	r3, [r4, #20]
 800bdb0:	e7e8      	b.n	800bd84 <__d2b+0x64>
 800bdb2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bdb6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bdba:	6038      	str	r0, [r7, #0]
 800bdbc:	6918      	ldr	r0, [r3, #16]
 800bdbe:	f7ff fd29 	bl	800b814 <__hi0bits>
 800bdc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bdc6:	e7e5      	b.n	800bd94 <__d2b+0x74>
 800bdc8:	0800d130 	.word	0x0800d130
 800bdcc:	0800d141 	.word	0x0800d141

0800bdd0 <__ssputs_r>:
 800bdd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdd4:	461f      	mov	r7, r3
 800bdd6:	688e      	ldr	r6, [r1, #8]
 800bdd8:	4682      	mov	sl, r0
 800bdda:	460c      	mov	r4, r1
 800bddc:	42be      	cmp	r6, r7
 800bdde:	4690      	mov	r8, r2
 800bde0:	680b      	ldr	r3, [r1, #0]
 800bde2:	d82d      	bhi.n	800be40 <__ssputs_r+0x70>
 800bde4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bde8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bdec:	d026      	beq.n	800be3c <__ssputs_r+0x6c>
 800bdee:	6965      	ldr	r5, [r4, #20]
 800bdf0:	6909      	ldr	r1, [r1, #16]
 800bdf2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bdf6:	eba3 0901 	sub.w	r9, r3, r1
 800bdfa:	1c7b      	adds	r3, r7, #1
 800bdfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be00:	444b      	add	r3, r9
 800be02:	106d      	asrs	r5, r5, #1
 800be04:	429d      	cmp	r5, r3
 800be06:	bf38      	it	cc
 800be08:	461d      	movcc	r5, r3
 800be0a:	0553      	lsls	r3, r2, #21
 800be0c:	d527      	bpl.n	800be5e <__ssputs_r+0x8e>
 800be0e:	4629      	mov	r1, r5
 800be10:	f7ff fbca 	bl	800b5a8 <_malloc_r>
 800be14:	4606      	mov	r6, r0
 800be16:	b360      	cbz	r0, 800be72 <__ssputs_r+0xa2>
 800be18:	464a      	mov	r2, r9
 800be1a:	6921      	ldr	r1, [r4, #16]
 800be1c:	f7fe fcf1 	bl	800a802 <memcpy>
 800be20:	89a3      	ldrh	r3, [r4, #12]
 800be22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800be26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be2a:	81a3      	strh	r3, [r4, #12]
 800be2c:	6126      	str	r6, [r4, #16]
 800be2e:	444e      	add	r6, r9
 800be30:	6165      	str	r5, [r4, #20]
 800be32:	eba5 0509 	sub.w	r5, r5, r9
 800be36:	6026      	str	r6, [r4, #0]
 800be38:	463e      	mov	r6, r7
 800be3a:	60a5      	str	r5, [r4, #8]
 800be3c:	42be      	cmp	r6, r7
 800be3e:	d900      	bls.n	800be42 <__ssputs_r+0x72>
 800be40:	463e      	mov	r6, r7
 800be42:	4632      	mov	r2, r6
 800be44:	4641      	mov	r1, r8
 800be46:	6820      	ldr	r0, [r4, #0]
 800be48:	f7fe fc34 	bl	800a6b4 <memmove>
 800be4c:	68a3      	ldr	r3, [r4, #8]
 800be4e:	2000      	movs	r0, #0
 800be50:	1b9b      	subs	r3, r3, r6
 800be52:	60a3      	str	r3, [r4, #8]
 800be54:	6823      	ldr	r3, [r4, #0]
 800be56:	4433      	add	r3, r6
 800be58:	6023      	str	r3, [r4, #0]
 800be5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be5e:	462a      	mov	r2, r5
 800be60:	f000 fbd4 	bl	800c60c <_realloc_r>
 800be64:	4606      	mov	r6, r0
 800be66:	2800      	cmp	r0, #0
 800be68:	d1e0      	bne.n	800be2c <__ssputs_r+0x5c>
 800be6a:	6921      	ldr	r1, [r4, #16]
 800be6c:	4650      	mov	r0, sl
 800be6e:	f7ff fb27 	bl	800b4c0 <_free_r>
 800be72:	230c      	movs	r3, #12
 800be74:	f04f 30ff 	mov.w	r0, #4294967295
 800be78:	f8ca 3000 	str.w	r3, [sl]
 800be7c:	89a3      	ldrh	r3, [r4, #12]
 800be7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be82:	81a3      	strh	r3, [r4, #12]
 800be84:	e7e9      	b.n	800be5a <__ssputs_r+0x8a>
	...

0800be88 <_svfiprintf_r>:
 800be88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be8c:	4698      	mov	r8, r3
 800be8e:	898b      	ldrh	r3, [r1, #12]
 800be90:	b09d      	sub	sp, #116	@ 0x74
 800be92:	4607      	mov	r7, r0
 800be94:	061b      	lsls	r3, r3, #24
 800be96:	460d      	mov	r5, r1
 800be98:	4614      	mov	r4, r2
 800be9a:	d510      	bpl.n	800bebe <_svfiprintf_r+0x36>
 800be9c:	690b      	ldr	r3, [r1, #16]
 800be9e:	b973      	cbnz	r3, 800bebe <_svfiprintf_r+0x36>
 800bea0:	2140      	movs	r1, #64	@ 0x40
 800bea2:	f7ff fb81 	bl	800b5a8 <_malloc_r>
 800bea6:	6028      	str	r0, [r5, #0]
 800bea8:	6128      	str	r0, [r5, #16]
 800beaa:	b930      	cbnz	r0, 800beba <_svfiprintf_r+0x32>
 800beac:	230c      	movs	r3, #12
 800beae:	603b      	str	r3, [r7, #0]
 800beb0:	f04f 30ff 	mov.w	r0, #4294967295
 800beb4:	b01d      	add	sp, #116	@ 0x74
 800beb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beba:	2340      	movs	r3, #64	@ 0x40
 800bebc:	616b      	str	r3, [r5, #20]
 800bebe:	2300      	movs	r3, #0
 800bec0:	f8cd 800c 	str.w	r8, [sp, #12]
 800bec4:	f04f 0901 	mov.w	r9, #1
 800bec8:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800c06c <_svfiprintf_r+0x1e4>
 800becc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bece:	2320      	movs	r3, #32
 800bed0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bed4:	2330      	movs	r3, #48	@ 0x30
 800bed6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800beda:	4623      	mov	r3, r4
 800bedc:	469a      	mov	sl, r3
 800bede:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bee2:	b10a      	cbz	r2, 800bee8 <_svfiprintf_r+0x60>
 800bee4:	2a25      	cmp	r2, #37	@ 0x25
 800bee6:	d1f9      	bne.n	800bedc <_svfiprintf_r+0x54>
 800bee8:	ebba 0b04 	subs.w	fp, sl, r4
 800beec:	d00b      	beq.n	800bf06 <_svfiprintf_r+0x7e>
 800beee:	465b      	mov	r3, fp
 800bef0:	4622      	mov	r2, r4
 800bef2:	4629      	mov	r1, r5
 800bef4:	4638      	mov	r0, r7
 800bef6:	f7ff ff6b 	bl	800bdd0 <__ssputs_r>
 800befa:	3001      	adds	r0, #1
 800befc:	f000 80a7 	beq.w	800c04e <_svfiprintf_r+0x1c6>
 800bf00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf02:	445a      	add	r2, fp
 800bf04:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf06:	f89a 3000 	ldrb.w	r3, [sl]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	f000 809f 	beq.w	800c04e <_svfiprintf_r+0x1c6>
 800bf10:	2300      	movs	r3, #0
 800bf12:	f04f 32ff 	mov.w	r2, #4294967295
 800bf16:	f10a 0a01 	add.w	sl, sl, #1
 800bf1a:	9304      	str	r3, [sp, #16]
 800bf1c:	9307      	str	r3, [sp, #28]
 800bf1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf22:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf28:	4654      	mov	r4, sl
 800bf2a:	2205      	movs	r2, #5
 800bf2c:	484f      	ldr	r0, [pc, #316]	@ (800c06c <_svfiprintf_r+0x1e4>)
 800bf2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf32:	f7fe fc58 	bl	800a7e6 <memchr>
 800bf36:	9a04      	ldr	r2, [sp, #16]
 800bf38:	b9d8      	cbnz	r0, 800bf72 <_svfiprintf_r+0xea>
 800bf3a:	06d0      	lsls	r0, r2, #27
 800bf3c:	bf44      	itt	mi
 800bf3e:	2320      	movmi	r3, #32
 800bf40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf44:	0711      	lsls	r1, r2, #28
 800bf46:	bf44      	itt	mi
 800bf48:	232b      	movmi	r3, #43	@ 0x2b
 800bf4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf4e:	f89a 3000 	ldrb.w	r3, [sl]
 800bf52:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf54:	d015      	beq.n	800bf82 <_svfiprintf_r+0xfa>
 800bf56:	9a07      	ldr	r2, [sp, #28]
 800bf58:	4654      	mov	r4, sl
 800bf5a:	2000      	movs	r0, #0
 800bf5c:	f04f 0c0a 	mov.w	ip, #10
 800bf60:	4621      	mov	r1, r4
 800bf62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf66:	3b30      	subs	r3, #48	@ 0x30
 800bf68:	2b09      	cmp	r3, #9
 800bf6a:	d94b      	bls.n	800c004 <_svfiprintf_r+0x17c>
 800bf6c:	b1b0      	cbz	r0, 800bf9c <_svfiprintf_r+0x114>
 800bf6e:	9207      	str	r2, [sp, #28]
 800bf70:	e014      	b.n	800bf9c <_svfiprintf_r+0x114>
 800bf72:	eba0 0308 	sub.w	r3, r0, r8
 800bf76:	46a2      	mov	sl, r4
 800bf78:	fa09 f303 	lsl.w	r3, r9, r3
 800bf7c:	4313      	orrs	r3, r2
 800bf7e:	9304      	str	r3, [sp, #16]
 800bf80:	e7d2      	b.n	800bf28 <_svfiprintf_r+0xa0>
 800bf82:	9b03      	ldr	r3, [sp, #12]
 800bf84:	1d19      	adds	r1, r3, #4
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	9103      	str	r1, [sp, #12]
 800bf8c:	bfbb      	ittet	lt
 800bf8e:	425b      	neglt	r3, r3
 800bf90:	f042 0202 	orrlt.w	r2, r2, #2
 800bf94:	9307      	strge	r3, [sp, #28]
 800bf96:	9307      	strlt	r3, [sp, #28]
 800bf98:	bfb8      	it	lt
 800bf9a:	9204      	strlt	r2, [sp, #16]
 800bf9c:	7823      	ldrb	r3, [r4, #0]
 800bf9e:	2b2e      	cmp	r3, #46	@ 0x2e
 800bfa0:	d10a      	bne.n	800bfb8 <_svfiprintf_r+0x130>
 800bfa2:	7863      	ldrb	r3, [r4, #1]
 800bfa4:	2b2a      	cmp	r3, #42	@ 0x2a
 800bfa6:	d132      	bne.n	800c00e <_svfiprintf_r+0x186>
 800bfa8:	9b03      	ldr	r3, [sp, #12]
 800bfaa:	3402      	adds	r4, #2
 800bfac:	1d1a      	adds	r2, r3, #4
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bfb4:	9203      	str	r2, [sp, #12]
 800bfb6:	9305      	str	r3, [sp, #20]
 800bfb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c07c <_svfiprintf_r+0x1f4>
 800bfbc:	2203      	movs	r2, #3
 800bfbe:	7821      	ldrb	r1, [r4, #0]
 800bfc0:	4650      	mov	r0, sl
 800bfc2:	f7fe fc10 	bl	800a7e6 <memchr>
 800bfc6:	b138      	cbz	r0, 800bfd8 <_svfiprintf_r+0x150>
 800bfc8:	eba0 000a 	sub.w	r0, r0, sl
 800bfcc:	2240      	movs	r2, #64	@ 0x40
 800bfce:	9b04      	ldr	r3, [sp, #16]
 800bfd0:	3401      	adds	r4, #1
 800bfd2:	4082      	lsls	r2, r0
 800bfd4:	4313      	orrs	r3, r2
 800bfd6:	9304      	str	r3, [sp, #16]
 800bfd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfdc:	2206      	movs	r2, #6
 800bfde:	4824      	ldr	r0, [pc, #144]	@ (800c070 <_svfiprintf_r+0x1e8>)
 800bfe0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bfe4:	f7fe fbff 	bl	800a7e6 <memchr>
 800bfe8:	2800      	cmp	r0, #0
 800bfea:	d036      	beq.n	800c05a <_svfiprintf_r+0x1d2>
 800bfec:	4b21      	ldr	r3, [pc, #132]	@ (800c074 <_svfiprintf_r+0x1ec>)
 800bfee:	bb1b      	cbnz	r3, 800c038 <_svfiprintf_r+0x1b0>
 800bff0:	9b03      	ldr	r3, [sp, #12]
 800bff2:	3307      	adds	r3, #7
 800bff4:	f023 0307 	bic.w	r3, r3, #7
 800bff8:	3308      	adds	r3, #8
 800bffa:	9303      	str	r3, [sp, #12]
 800bffc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bffe:	4433      	add	r3, r6
 800c000:	9309      	str	r3, [sp, #36]	@ 0x24
 800c002:	e76a      	b.n	800beda <_svfiprintf_r+0x52>
 800c004:	fb0c 3202 	mla	r2, ip, r2, r3
 800c008:	460c      	mov	r4, r1
 800c00a:	2001      	movs	r0, #1
 800c00c:	e7a8      	b.n	800bf60 <_svfiprintf_r+0xd8>
 800c00e:	2300      	movs	r3, #0
 800c010:	3401      	adds	r4, #1
 800c012:	f04f 0c0a 	mov.w	ip, #10
 800c016:	4619      	mov	r1, r3
 800c018:	9305      	str	r3, [sp, #20]
 800c01a:	4620      	mov	r0, r4
 800c01c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c020:	3a30      	subs	r2, #48	@ 0x30
 800c022:	2a09      	cmp	r2, #9
 800c024:	d903      	bls.n	800c02e <_svfiprintf_r+0x1a6>
 800c026:	2b00      	cmp	r3, #0
 800c028:	d0c6      	beq.n	800bfb8 <_svfiprintf_r+0x130>
 800c02a:	9105      	str	r1, [sp, #20]
 800c02c:	e7c4      	b.n	800bfb8 <_svfiprintf_r+0x130>
 800c02e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c032:	4604      	mov	r4, r0
 800c034:	2301      	movs	r3, #1
 800c036:	e7f0      	b.n	800c01a <_svfiprintf_r+0x192>
 800c038:	ab03      	add	r3, sp, #12
 800c03a:	462a      	mov	r2, r5
 800c03c:	a904      	add	r1, sp, #16
 800c03e:	4638      	mov	r0, r7
 800c040:	9300      	str	r3, [sp, #0]
 800c042:	4b0d      	ldr	r3, [pc, #52]	@ (800c078 <_svfiprintf_r+0x1f0>)
 800c044:	f7fd fd50 	bl	8009ae8 <_printf_float>
 800c048:	1c42      	adds	r2, r0, #1
 800c04a:	4606      	mov	r6, r0
 800c04c:	d1d6      	bne.n	800bffc <_svfiprintf_r+0x174>
 800c04e:	89ab      	ldrh	r3, [r5, #12]
 800c050:	065b      	lsls	r3, r3, #25
 800c052:	f53f af2d 	bmi.w	800beb0 <_svfiprintf_r+0x28>
 800c056:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c058:	e72c      	b.n	800beb4 <_svfiprintf_r+0x2c>
 800c05a:	ab03      	add	r3, sp, #12
 800c05c:	462a      	mov	r2, r5
 800c05e:	a904      	add	r1, sp, #16
 800c060:	4638      	mov	r0, r7
 800c062:	9300      	str	r3, [sp, #0]
 800c064:	4b04      	ldr	r3, [pc, #16]	@ (800c078 <_svfiprintf_r+0x1f0>)
 800c066:	f7fd ffdb 	bl	800a020 <_printf_i>
 800c06a:	e7ed      	b.n	800c048 <_svfiprintf_r+0x1c0>
 800c06c:	0800d298 	.word	0x0800d298
 800c070:	0800d2a2 	.word	0x0800d2a2
 800c074:	08009ae9 	.word	0x08009ae9
 800c078:	0800bdd1 	.word	0x0800bdd1
 800c07c:	0800d29e 	.word	0x0800d29e

0800c080 <__sfputc_r>:
 800c080:	6893      	ldr	r3, [r2, #8]
 800c082:	3b01      	subs	r3, #1
 800c084:	2b00      	cmp	r3, #0
 800c086:	6093      	str	r3, [r2, #8]
 800c088:	b410      	push	{r4}
 800c08a:	da08      	bge.n	800c09e <__sfputc_r+0x1e>
 800c08c:	6994      	ldr	r4, [r2, #24]
 800c08e:	42a3      	cmp	r3, r4
 800c090:	db01      	blt.n	800c096 <__sfputc_r+0x16>
 800c092:	290a      	cmp	r1, #10
 800c094:	d103      	bne.n	800c09e <__sfputc_r+0x1e>
 800c096:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c09a:	f7fe ba76 	b.w	800a58a <__swbuf_r>
 800c09e:	6813      	ldr	r3, [r2, #0]
 800c0a0:	1c58      	adds	r0, r3, #1
 800c0a2:	6010      	str	r0, [r2, #0]
 800c0a4:	4608      	mov	r0, r1
 800c0a6:	7019      	strb	r1, [r3, #0]
 800c0a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0ac:	4770      	bx	lr

0800c0ae <__sfputs_r>:
 800c0ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0b0:	4606      	mov	r6, r0
 800c0b2:	460f      	mov	r7, r1
 800c0b4:	4614      	mov	r4, r2
 800c0b6:	18d5      	adds	r5, r2, r3
 800c0b8:	42ac      	cmp	r4, r5
 800c0ba:	d101      	bne.n	800c0c0 <__sfputs_r+0x12>
 800c0bc:	2000      	movs	r0, #0
 800c0be:	e007      	b.n	800c0d0 <__sfputs_r+0x22>
 800c0c0:	463a      	mov	r2, r7
 800c0c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0c6:	4630      	mov	r0, r6
 800c0c8:	f7ff ffda 	bl	800c080 <__sfputc_r>
 800c0cc:	1c43      	adds	r3, r0, #1
 800c0ce:	d1f3      	bne.n	800c0b8 <__sfputs_r+0xa>
 800c0d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c0d4 <_vfiprintf_r>:
 800c0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d8:	460d      	mov	r5, r1
 800c0da:	b09d      	sub	sp, #116	@ 0x74
 800c0dc:	4614      	mov	r4, r2
 800c0de:	4698      	mov	r8, r3
 800c0e0:	4606      	mov	r6, r0
 800c0e2:	b118      	cbz	r0, 800c0ec <_vfiprintf_r+0x18>
 800c0e4:	6a03      	ldr	r3, [r0, #32]
 800c0e6:	b90b      	cbnz	r3, 800c0ec <_vfiprintf_r+0x18>
 800c0e8:	f7fe f946 	bl	800a378 <__sinit>
 800c0ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c0ee:	07d9      	lsls	r1, r3, #31
 800c0f0:	d405      	bmi.n	800c0fe <_vfiprintf_r+0x2a>
 800c0f2:	89ab      	ldrh	r3, [r5, #12]
 800c0f4:	059a      	lsls	r2, r3, #22
 800c0f6:	d402      	bmi.n	800c0fe <_vfiprintf_r+0x2a>
 800c0f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c0fa:	f7fe fb72 	bl	800a7e2 <__retarget_lock_acquire_recursive>
 800c0fe:	89ab      	ldrh	r3, [r5, #12]
 800c100:	071b      	lsls	r3, r3, #28
 800c102:	d501      	bpl.n	800c108 <_vfiprintf_r+0x34>
 800c104:	692b      	ldr	r3, [r5, #16]
 800c106:	b99b      	cbnz	r3, 800c130 <_vfiprintf_r+0x5c>
 800c108:	4629      	mov	r1, r5
 800c10a:	4630      	mov	r0, r6
 800c10c:	f7fe fa7c 	bl	800a608 <__swsetup_r>
 800c110:	b170      	cbz	r0, 800c130 <_vfiprintf_r+0x5c>
 800c112:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c114:	07dc      	lsls	r4, r3, #31
 800c116:	d504      	bpl.n	800c122 <_vfiprintf_r+0x4e>
 800c118:	f04f 30ff 	mov.w	r0, #4294967295
 800c11c:	b01d      	add	sp, #116	@ 0x74
 800c11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c122:	89ab      	ldrh	r3, [r5, #12]
 800c124:	0598      	lsls	r0, r3, #22
 800c126:	d4f7      	bmi.n	800c118 <_vfiprintf_r+0x44>
 800c128:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c12a:	f7fe fb5b 	bl	800a7e4 <__retarget_lock_release_recursive>
 800c12e:	e7f3      	b.n	800c118 <_vfiprintf_r+0x44>
 800c130:	2300      	movs	r3, #0
 800c132:	f8cd 800c 	str.w	r8, [sp, #12]
 800c136:	f04f 0901 	mov.w	r9, #1
 800c13a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800c2f0 <_vfiprintf_r+0x21c>
 800c13e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c140:	2320      	movs	r3, #32
 800c142:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c146:	2330      	movs	r3, #48	@ 0x30
 800c148:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c14c:	4623      	mov	r3, r4
 800c14e:	469a      	mov	sl, r3
 800c150:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c154:	b10a      	cbz	r2, 800c15a <_vfiprintf_r+0x86>
 800c156:	2a25      	cmp	r2, #37	@ 0x25
 800c158:	d1f9      	bne.n	800c14e <_vfiprintf_r+0x7a>
 800c15a:	ebba 0b04 	subs.w	fp, sl, r4
 800c15e:	d00b      	beq.n	800c178 <_vfiprintf_r+0xa4>
 800c160:	465b      	mov	r3, fp
 800c162:	4622      	mov	r2, r4
 800c164:	4629      	mov	r1, r5
 800c166:	4630      	mov	r0, r6
 800c168:	f7ff ffa1 	bl	800c0ae <__sfputs_r>
 800c16c:	3001      	adds	r0, #1
 800c16e:	f000 80a7 	beq.w	800c2c0 <_vfiprintf_r+0x1ec>
 800c172:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c174:	445a      	add	r2, fp
 800c176:	9209      	str	r2, [sp, #36]	@ 0x24
 800c178:	f89a 3000 	ldrb.w	r3, [sl]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	f000 809f 	beq.w	800c2c0 <_vfiprintf_r+0x1ec>
 800c182:	2300      	movs	r3, #0
 800c184:	f04f 32ff 	mov.w	r2, #4294967295
 800c188:	f10a 0a01 	add.w	sl, sl, #1
 800c18c:	9304      	str	r3, [sp, #16]
 800c18e:	9307      	str	r3, [sp, #28]
 800c190:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c194:	931a      	str	r3, [sp, #104]	@ 0x68
 800c196:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c19a:	4654      	mov	r4, sl
 800c19c:	2205      	movs	r2, #5
 800c19e:	4854      	ldr	r0, [pc, #336]	@ (800c2f0 <_vfiprintf_r+0x21c>)
 800c1a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1a4:	f7fe fb1f 	bl	800a7e6 <memchr>
 800c1a8:	9a04      	ldr	r2, [sp, #16]
 800c1aa:	b9d8      	cbnz	r0, 800c1e4 <_vfiprintf_r+0x110>
 800c1ac:	06d1      	lsls	r1, r2, #27
 800c1ae:	bf44      	itt	mi
 800c1b0:	2320      	movmi	r3, #32
 800c1b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c1b6:	0713      	lsls	r3, r2, #28
 800c1b8:	bf44      	itt	mi
 800c1ba:	232b      	movmi	r3, #43	@ 0x2b
 800c1bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c1c0:	f89a 3000 	ldrb.w	r3, [sl]
 800c1c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c1c6:	d015      	beq.n	800c1f4 <_vfiprintf_r+0x120>
 800c1c8:	9a07      	ldr	r2, [sp, #28]
 800c1ca:	4654      	mov	r4, sl
 800c1cc:	2000      	movs	r0, #0
 800c1ce:	f04f 0c0a 	mov.w	ip, #10
 800c1d2:	4621      	mov	r1, r4
 800c1d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1d8:	3b30      	subs	r3, #48	@ 0x30
 800c1da:	2b09      	cmp	r3, #9
 800c1dc:	d94b      	bls.n	800c276 <_vfiprintf_r+0x1a2>
 800c1de:	b1b0      	cbz	r0, 800c20e <_vfiprintf_r+0x13a>
 800c1e0:	9207      	str	r2, [sp, #28]
 800c1e2:	e014      	b.n	800c20e <_vfiprintf_r+0x13a>
 800c1e4:	eba0 0308 	sub.w	r3, r0, r8
 800c1e8:	46a2      	mov	sl, r4
 800c1ea:	fa09 f303 	lsl.w	r3, r9, r3
 800c1ee:	4313      	orrs	r3, r2
 800c1f0:	9304      	str	r3, [sp, #16]
 800c1f2:	e7d2      	b.n	800c19a <_vfiprintf_r+0xc6>
 800c1f4:	9b03      	ldr	r3, [sp, #12]
 800c1f6:	1d19      	adds	r1, r3, #4
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	9103      	str	r1, [sp, #12]
 800c1fe:	bfbb      	ittet	lt
 800c200:	425b      	neglt	r3, r3
 800c202:	f042 0202 	orrlt.w	r2, r2, #2
 800c206:	9307      	strge	r3, [sp, #28]
 800c208:	9307      	strlt	r3, [sp, #28]
 800c20a:	bfb8      	it	lt
 800c20c:	9204      	strlt	r2, [sp, #16]
 800c20e:	7823      	ldrb	r3, [r4, #0]
 800c210:	2b2e      	cmp	r3, #46	@ 0x2e
 800c212:	d10a      	bne.n	800c22a <_vfiprintf_r+0x156>
 800c214:	7863      	ldrb	r3, [r4, #1]
 800c216:	2b2a      	cmp	r3, #42	@ 0x2a
 800c218:	d132      	bne.n	800c280 <_vfiprintf_r+0x1ac>
 800c21a:	9b03      	ldr	r3, [sp, #12]
 800c21c:	3402      	adds	r4, #2
 800c21e:	1d1a      	adds	r2, r3, #4
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c226:	9203      	str	r2, [sp, #12]
 800c228:	9305      	str	r3, [sp, #20]
 800c22a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c300 <_vfiprintf_r+0x22c>
 800c22e:	2203      	movs	r2, #3
 800c230:	7821      	ldrb	r1, [r4, #0]
 800c232:	4650      	mov	r0, sl
 800c234:	f7fe fad7 	bl	800a7e6 <memchr>
 800c238:	b138      	cbz	r0, 800c24a <_vfiprintf_r+0x176>
 800c23a:	eba0 000a 	sub.w	r0, r0, sl
 800c23e:	2240      	movs	r2, #64	@ 0x40
 800c240:	9b04      	ldr	r3, [sp, #16]
 800c242:	3401      	adds	r4, #1
 800c244:	4082      	lsls	r2, r0
 800c246:	4313      	orrs	r3, r2
 800c248:	9304      	str	r3, [sp, #16]
 800c24a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c24e:	2206      	movs	r2, #6
 800c250:	4828      	ldr	r0, [pc, #160]	@ (800c2f4 <_vfiprintf_r+0x220>)
 800c252:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c256:	f7fe fac6 	bl	800a7e6 <memchr>
 800c25a:	2800      	cmp	r0, #0
 800c25c:	d03f      	beq.n	800c2de <_vfiprintf_r+0x20a>
 800c25e:	4b26      	ldr	r3, [pc, #152]	@ (800c2f8 <_vfiprintf_r+0x224>)
 800c260:	bb1b      	cbnz	r3, 800c2aa <_vfiprintf_r+0x1d6>
 800c262:	9b03      	ldr	r3, [sp, #12]
 800c264:	3307      	adds	r3, #7
 800c266:	f023 0307 	bic.w	r3, r3, #7
 800c26a:	3308      	adds	r3, #8
 800c26c:	9303      	str	r3, [sp, #12]
 800c26e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c270:	443b      	add	r3, r7
 800c272:	9309      	str	r3, [sp, #36]	@ 0x24
 800c274:	e76a      	b.n	800c14c <_vfiprintf_r+0x78>
 800c276:	fb0c 3202 	mla	r2, ip, r2, r3
 800c27a:	460c      	mov	r4, r1
 800c27c:	2001      	movs	r0, #1
 800c27e:	e7a8      	b.n	800c1d2 <_vfiprintf_r+0xfe>
 800c280:	2300      	movs	r3, #0
 800c282:	3401      	adds	r4, #1
 800c284:	f04f 0c0a 	mov.w	ip, #10
 800c288:	4619      	mov	r1, r3
 800c28a:	9305      	str	r3, [sp, #20]
 800c28c:	4620      	mov	r0, r4
 800c28e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c292:	3a30      	subs	r2, #48	@ 0x30
 800c294:	2a09      	cmp	r2, #9
 800c296:	d903      	bls.n	800c2a0 <_vfiprintf_r+0x1cc>
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d0c6      	beq.n	800c22a <_vfiprintf_r+0x156>
 800c29c:	9105      	str	r1, [sp, #20]
 800c29e:	e7c4      	b.n	800c22a <_vfiprintf_r+0x156>
 800c2a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2a4:	4604      	mov	r4, r0
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	e7f0      	b.n	800c28c <_vfiprintf_r+0x1b8>
 800c2aa:	ab03      	add	r3, sp, #12
 800c2ac:	462a      	mov	r2, r5
 800c2ae:	a904      	add	r1, sp, #16
 800c2b0:	4630      	mov	r0, r6
 800c2b2:	9300      	str	r3, [sp, #0]
 800c2b4:	4b11      	ldr	r3, [pc, #68]	@ (800c2fc <_vfiprintf_r+0x228>)
 800c2b6:	f7fd fc17 	bl	8009ae8 <_printf_float>
 800c2ba:	4607      	mov	r7, r0
 800c2bc:	1c78      	adds	r0, r7, #1
 800c2be:	d1d6      	bne.n	800c26e <_vfiprintf_r+0x19a>
 800c2c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c2c2:	07d9      	lsls	r1, r3, #31
 800c2c4:	d405      	bmi.n	800c2d2 <_vfiprintf_r+0x1fe>
 800c2c6:	89ab      	ldrh	r3, [r5, #12]
 800c2c8:	059a      	lsls	r2, r3, #22
 800c2ca:	d402      	bmi.n	800c2d2 <_vfiprintf_r+0x1fe>
 800c2cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c2ce:	f7fe fa89 	bl	800a7e4 <__retarget_lock_release_recursive>
 800c2d2:	89ab      	ldrh	r3, [r5, #12]
 800c2d4:	065b      	lsls	r3, r3, #25
 800c2d6:	f53f af1f 	bmi.w	800c118 <_vfiprintf_r+0x44>
 800c2da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c2dc:	e71e      	b.n	800c11c <_vfiprintf_r+0x48>
 800c2de:	ab03      	add	r3, sp, #12
 800c2e0:	462a      	mov	r2, r5
 800c2e2:	a904      	add	r1, sp, #16
 800c2e4:	4630      	mov	r0, r6
 800c2e6:	9300      	str	r3, [sp, #0]
 800c2e8:	4b04      	ldr	r3, [pc, #16]	@ (800c2fc <_vfiprintf_r+0x228>)
 800c2ea:	f7fd fe99 	bl	800a020 <_printf_i>
 800c2ee:	e7e4      	b.n	800c2ba <_vfiprintf_r+0x1e6>
 800c2f0:	0800d298 	.word	0x0800d298
 800c2f4:	0800d2a2 	.word	0x0800d2a2
 800c2f8:	08009ae9 	.word	0x08009ae9
 800c2fc:	0800c0af 	.word	0x0800c0af
 800c300:	0800d29e 	.word	0x0800d29e

0800c304 <__sflush_r>:
 800c304:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c30c:	0716      	lsls	r6, r2, #28
 800c30e:	4605      	mov	r5, r0
 800c310:	460c      	mov	r4, r1
 800c312:	d454      	bmi.n	800c3be <__sflush_r+0xba>
 800c314:	684b      	ldr	r3, [r1, #4]
 800c316:	2b00      	cmp	r3, #0
 800c318:	dc02      	bgt.n	800c320 <__sflush_r+0x1c>
 800c31a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	dd48      	ble.n	800c3b2 <__sflush_r+0xae>
 800c320:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c322:	2e00      	cmp	r6, #0
 800c324:	d045      	beq.n	800c3b2 <__sflush_r+0xae>
 800c326:	2300      	movs	r3, #0
 800c328:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c32c:	682f      	ldr	r7, [r5, #0]
 800c32e:	6a21      	ldr	r1, [r4, #32]
 800c330:	602b      	str	r3, [r5, #0]
 800c332:	d030      	beq.n	800c396 <__sflush_r+0x92>
 800c334:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c336:	89a3      	ldrh	r3, [r4, #12]
 800c338:	0759      	lsls	r1, r3, #29
 800c33a:	d505      	bpl.n	800c348 <__sflush_r+0x44>
 800c33c:	6863      	ldr	r3, [r4, #4]
 800c33e:	1ad2      	subs	r2, r2, r3
 800c340:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c342:	b10b      	cbz	r3, 800c348 <__sflush_r+0x44>
 800c344:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c346:	1ad2      	subs	r2, r2, r3
 800c348:	2300      	movs	r3, #0
 800c34a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c34c:	6a21      	ldr	r1, [r4, #32]
 800c34e:	4628      	mov	r0, r5
 800c350:	47b0      	blx	r6
 800c352:	1c43      	adds	r3, r0, #1
 800c354:	89a3      	ldrh	r3, [r4, #12]
 800c356:	d106      	bne.n	800c366 <__sflush_r+0x62>
 800c358:	6829      	ldr	r1, [r5, #0]
 800c35a:	291d      	cmp	r1, #29
 800c35c:	d82b      	bhi.n	800c3b6 <__sflush_r+0xb2>
 800c35e:	4a2a      	ldr	r2, [pc, #168]	@ (800c408 <__sflush_r+0x104>)
 800c360:	410a      	asrs	r2, r1
 800c362:	07d6      	lsls	r6, r2, #31
 800c364:	d427      	bmi.n	800c3b6 <__sflush_r+0xb2>
 800c366:	2200      	movs	r2, #0
 800c368:	04d9      	lsls	r1, r3, #19
 800c36a:	6062      	str	r2, [r4, #4]
 800c36c:	6922      	ldr	r2, [r4, #16]
 800c36e:	6022      	str	r2, [r4, #0]
 800c370:	d504      	bpl.n	800c37c <__sflush_r+0x78>
 800c372:	1c42      	adds	r2, r0, #1
 800c374:	d101      	bne.n	800c37a <__sflush_r+0x76>
 800c376:	682b      	ldr	r3, [r5, #0]
 800c378:	b903      	cbnz	r3, 800c37c <__sflush_r+0x78>
 800c37a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c37c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c37e:	602f      	str	r7, [r5, #0]
 800c380:	b1b9      	cbz	r1, 800c3b2 <__sflush_r+0xae>
 800c382:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c386:	4299      	cmp	r1, r3
 800c388:	d002      	beq.n	800c390 <__sflush_r+0x8c>
 800c38a:	4628      	mov	r0, r5
 800c38c:	f7ff f898 	bl	800b4c0 <_free_r>
 800c390:	2300      	movs	r3, #0
 800c392:	6363      	str	r3, [r4, #52]	@ 0x34
 800c394:	e00d      	b.n	800c3b2 <__sflush_r+0xae>
 800c396:	2301      	movs	r3, #1
 800c398:	4628      	mov	r0, r5
 800c39a:	47b0      	blx	r6
 800c39c:	4602      	mov	r2, r0
 800c39e:	1c50      	adds	r0, r2, #1
 800c3a0:	d1c9      	bne.n	800c336 <__sflush_r+0x32>
 800c3a2:	682b      	ldr	r3, [r5, #0]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d0c6      	beq.n	800c336 <__sflush_r+0x32>
 800c3a8:	2b1d      	cmp	r3, #29
 800c3aa:	d001      	beq.n	800c3b0 <__sflush_r+0xac>
 800c3ac:	2b16      	cmp	r3, #22
 800c3ae:	d11d      	bne.n	800c3ec <__sflush_r+0xe8>
 800c3b0:	602f      	str	r7, [r5, #0]
 800c3b2:	2000      	movs	r0, #0
 800c3b4:	e021      	b.n	800c3fa <__sflush_r+0xf6>
 800c3b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3ba:	b21b      	sxth	r3, r3
 800c3bc:	e01a      	b.n	800c3f4 <__sflush_r+0xf0>
 800c3be:	690f      	ldr	r7, [r1, #16]
 800c3c0:	2f00      	cmp	r7, #0
 800c3c2:	d0f6      	beq.n	800c3b2 <__sflush_r+0xae>
 800c3c4:	0793      	lsls	r3, r2, #30
 800c3c6:	680e      	ldr	r6, [r1, #0]
 800c3c8:	600f      	str	r7, [r1, #0]
 800c3ca:	bf0c      	ite	eq
 800c3cc:	694b      	ldreq	r3, [r1, #20]
 800c3ce:	2300      	movne	r3, #0
 800c3d0:	eba6 0807 	sub.w	r8, r6, r7
 800c3d4:	608b      	str	r3, [r1, #8]
 800c3d6:	f1b8 0f00 	cmp.w	r8, #0
 800c3da:	ddea      	ble.n	800c3b2 <__sflush_r+0xae>
 800c3dc:	4643      	mov	r3, r8
 800c3de:	463a      	mov	r2, r7
 800c3e0:	6a21      	ldr	r1, [r4, #32]
 800c3e2:	4628      	mov	r0, r5
 800c3e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c3e6:	47b0      	blx	r6
 800c3e8:	2800      	cmp	r0, #0
 800c3ea:	dc08      	bgt.n	800c3fe <__sflush_r+0xfa>
 800c3ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f8:	81a3      	strh	r3, [r4, #12]
 800c3fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3fe:	4407      	add	r7, r0
 800c400:	eba8 0800 	sub.w	r8, r8, r0
 800c404:	e7e7      	b.n	800c3d6 <__sflush_r+0xd2>
 800c406:	bf00      	nop
 800c408:	dfbffffe 	.word	0xdfbffffe

0800c40c <_fflush_r>:
 800c40c:	b538      	push	{r3, r4, r5, lr}
 800c40e:	690b      	ldr	r3, [r1, #16]
 800c410:	4605      	mov	r5, r0
 800c412:	460c      	mov	r4, r1
 800c414:	b913      	cbnz	r3, 800c41c <_fflush_r+0x10>
 800c416:	2500      	movs	r5, #0
 800c418:	4628      	mov	r0, r5
 800c41a:	bd38      	pop	{r3, r4, r5, pc}
 800c41c:	b118      	cbz	r0, 800c426 <_fflush_r+0x1a>
 800c41e:	6a03      	ldr	r3, [r0, #32]
 800c420:	b90b      	cbnz	r3, 800c426 <_fflush_r+0x1a>
 800c422:	f7fd ffa9 	bl	800a378 <__sinit>
 800c426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d0f3      	beq.n	800c416 <_fflush_r+0xa>
 800c42e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c430:	07d0      	lsls	r0, r2, #31
 800c432:	d404      	bmi.n	800c43e <_fflush_r+0x32>
 800c434:	0599      	lsls	r1, r3, #22
 800c436:	d402      	bmi.n	800c43e <_fflush_r+0x32>
 800c438:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c43a:	f7fe f9d2 	bl	800a7e2 <__retarget_lock_acquire_recursive>
 800c43e:	4628      	mov	r0, r5
 800c440:	4621      	mov	r1, r4
 800c442:	f7ff ff5f 	bl	800c304 <__sflush_r>
 800c446:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c448:	4605      	mov	r5, r0
 800c44a:	07da      	lsls	r2, r3, #31
 800c44c:	d4e4      	bmi.n	800c418 <_fflush_r+0xc>
 800c44e:	89a3      	ldrh	r3, [r4, #12]
 800c450:	059b      	lsls	r3, r3, #22
 800c452:	d4e1      	bmi.n	800c418 <_fflush_r+0xc>
 800c454:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c456:	f7fe f9c5 	bl	800a7e4 <__retarget_lock_release_recursive>
 800c45a:	e7dd      	b.n	800c418 <_fflush_r+0xc>

0800c45c <__swhatbuf_r>:
 800c45c:	b570      	push	{r4, r5, r6, lr}
 800c45e:	460c      	mov	r4, r1
 800c460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c464:	b096      	sub	sp, #88	@ 0x58
 800c466:	4615      	mov	r5, r2
 800c468:	2900      	cmp	r1, #0
 800c46a:	461e      	mov	r6, r3
 800c46c:	da0c      	bge.n	800c488 <__swhatbuf_r+0x2c>
 800c46e:	89a3      	ldrh	r3, [r4, #12]
 800c470:	2100      	movs	r1, #0
 800c472:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c476:	bf14      	ite	ne
 800c478:	2340      	movne	r3, #64	@ 0x40
 800c47a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c47e:	2000      	movs	r0, #0
 800c480:	6031      	str	r1, [r6, #0]
 800c482:	602b      	str	r3, [r5, #0]
 800c484:	b016      	add	sp, #88	@ 0x58
 800c486:	bd70      	pop	{r4, r5, r6, pc}
 800c488:	466a      	mov	r2, sp
 800c48a:	f000 f849 	bl	800c520 <_fstat_r>
 800c48e:	2800      	cmp	r0, #0
 800c490:	dbed      	blt.n	800c46e <__swhatbuf_r+0x12>
 800c492:	9901      	ldr	r1, [sp, #4]
 800c494:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c498:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c49c:	4259      	negs	r1, r3
 800c49e:	4159      	adcs	r1, r3
 800c4a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c4a4:	e7eb      	b.n	800c47e <__swhatbuf_r+0x22>

0800c4a6 <__smakebuf_r>:
 800c4a6:	898b      	ldrh	r3, [r1, #12]
 800c4a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4aa:	079d      	lsls	r5, r3, #30
 800c4ac:	4606      	mov	r6, r0
 800c4ae:	460c      	mov	r4, r1
 800c4b0:	d507      	bpl.n	800c4c2 <__smakebuf_r+0x1c>
 800c4b2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c4b6:	6023      	str	r3, [r4, #0]
 800c4b8:	6123      	str	r3, [r4, #16]
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	6163      	str	r3, [r4, #20]
 800c4be:	b003      	add	sp, #12
 800c4c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4c2:	ab01      	add	r3, sp, #4
 800c4c4:	466a      	mov	r2, sp
 800c4c6:	f7ff ffc9 	bl	800c45c <__swhatbuf_r>
 800c4ca:	9f00      	ldr	r7, [sp, #0]
 800c4cc:	4605      	mov	r5, r0
 800c4ce:	4630      	mov	r0, r6
 800c4d0:	4639      	mov	r1, r7
 800c4d2:	f7ff f869 	bl	800b5a8 <_malloc_r>
 800c4d6:	b948      	cbnz	r0, 800c4ec <__smakebuf_r+0x46>
 800c4d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4dc:	059a      	lsls	r2, r3, #22
 800c4de:	d4ee      	bmi.n	800c4be <__smakebuf_r+0x18>
 800c4e0:	f023 0303 	bic.w	r3, r3, #3
 800c4e4:	f043 0302 	orr.w	r3, r3, #2
 800c4e8:	81a3      	strh	r3, [r4, #12]
 800c4ea:	e7e2      	b.n	800c4b2 <__smakebuf_r+0xc>
 800c4ec:	89a3      	ldrh	r3, [r4, #12]
 800c4ee:	6020      	str	r0, [r4, #0]
 800c4f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4f4:	81a3      	strh	r3, [r4, #12]
 800c4f6:	9b01      	ldr	r3, [sp, #4]
 800c4f8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c4fc:	b15b      	cbz	r3, 800c516 <__smakebuf_r+0x70>
 800c4fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c502:	4630      	mov	r0, r6
 800c504:	f000 f81e 	bl	800c544 <_isatty_r>
 800c508:	b128      	cbz	r0, 800c516 <__smakebuf_r+0x70>
 800c50a:	89a3      	ldrh	r3, [r4, #12]
 800c50c:	f023 0303 	bic.w	r3, r3, #3
 800c510:	f043 0301 	orr.w	r3, r3, #1
 800c514:	81a3      	strh	r3, [r4, #12]
 800c516:	89a3      	ldrh	r3, [r4, #12]
 800c518:	431d      	orrs	r5, r3
 800c51a:	81a5      	strh	r5, [r4, #12]
 800c51c:	e7cf      	b.n	800c4be <__smakebuf_r+0x18>
	...

0800c520 <_fstat_r>:
 800c520:	b538      	push	{r3, r4, r5, lr}
 800c522:	2300      	movs	r3, #0
 800c524:	4d06      	ldr	r5, [pc, #24]	@ (800c540 <_fstat_r+0x20>)
 800c526:	4604      	mov	r4, r0
 800c528:	4608      	mov	r0, r1
 800c52a:	4611      	mov	r1, r2
 800c52c:	602b      	str	r3, [r5, #0]
 800c52e:	f7f6 f916 	bl	800275e <_fstat>
 800c532:	1c43      	adds	r3, r0, #1
 800c534:	d102      	bne.n	800c53c <_fstat_r+0x1c>
 800c536:	682b      	ldr	r3, [r5, #0]
 800c538:	b103      	cbz	r3, 800c53c <_fstat_r+0x1c>
 800c53a:	6023      	str	r3, [r4, #0]
 800c53c:	bd38      	pop	{r3, r4, r5, pc}
 800c53e:	bf00      	nop
 800c540:	2000409c 	.word	0x2000409c

0800c544 <_isatty_r>:
 800c544:	b538      	push	{r3, r4, r5, lr}
 800c546:	2300      	movs	r3, #0
 800c548:	4d05      	ldr	r5, [pc, #20]	@ (800c560 <_isatty_r+0x1c>)
 800c54a:	4604      	mov	r4, r0
 800c54c:	4608      	mov	r0, r1
 800c54e:	602b      	str	r3, [r5, #0]
 800c550:	f7f6 f915 	bl	800277e <_isatty>
 800c554:	1c43      	adds	r3, r0, #1
 800c556:	d102      	bne.n	800c55e <_isatty_r+0x1a>
 800c558:	682b      	ldr	r3, [r5, #0]
 800c55a:	b103      	cbz	r3, 800c55e <_isatty_r+0x1a>
 800c55c:	6023      	str	r3, [r4, #0]
 800c55e:	bd38      	pop	{r3, r4, r5, pc}
 800c560:	2000409c 	.word	0x2000409c

0800c564 <_sbrk_r>:
 800c564:	b538      	push	{r3, r4, r5, lr}
 800c566:	2300      	movs	r3, #0
 800c568:	4d05      	ldr	r5, [pc, #20]	@ (800c580 <_sbrk_r+0x1c>)
 800c56a:	4604      	mov	r4, r0
 800c56c:	4608      	mov	r0, r1
 800c56e:	602b      	str	r3, [r5, #0]
 800c570:	f7f6 f91e 	bl	80027b0 <_sbrk>
 800c574:	1c43      	adds	r3, r0, #1
 800c576:	d102      	bne.n	800c57e <_sbrk_r+0x1a>
 800c578:	682b      	ldr	r3, [r5, #0]
 800c57a:	b103      	cbz	r3, 800c57e <_sbrk_r+0x1a>
 800c57c:	6023      	str	r3, [r4, #0]
 800c57e:	bd38      	pop	{r3, r4, r5, pc}
 800c580:	2000409c 	.word	0x2000409c

0800c584 <__assert_func>:
 800c584:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c586:	4614      	mov	r4, r2
 800c588:	461a      	mov	r2, r3
 800c58a:	4b09      	ldr	r3, [pc, #36]	@ (800c5b0 <__assert_func+0x2c>)
 800c58c:	4605      	mov	r5, r0
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	68d8      	ldr	r0, [r3, #12]
 800c592:	b954      	cbnz	r4, 800c5aa <__assert_func+0x26>
 800c594:	4b07      	ldr	r3, [pc, #28]	@ (800c5b4 <__assert_func+0x30>)
 800c596:	461c      	mov	r4, r3
 800c598:	9100      	str	r1, [sp, #0]
 800c59a:	4907      	ldr	r1, [pc, #28]	@ (800c5b8 <__assert_func+0x34>)
 800c59c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c5a0:	462b      	mov	r3, r5
 800c5a2:	f000 f86f 	bl	800c684 <fiprintf>
 800c5a6:	f000 f87f 	bl	800c6a8 <abort>
 800c5aa:	4b04      	ldr	r3, [pc, #16]	@ (800c5bc <__assert_func+0x38>)
 800c5ac:	e7f4      	b.n	800c598 <__assert_func+0x14>
 800c5ae:	bf00      	nop
 800c5b0:	2000002c 	.word	0x2000002c
 800c5b4:	0800d2ee 	.word	0x0800d2ee
 800c5b8:	0800d2c0 	.word	0x0800d2c0
 800c5bc:	0800d2b3 	.word	0x0800d2b3

0800c5c0 <_calloc_r>:
 800c5c0:	b570      	push	{r4, r5, r6, lr}
 800c5c2:	fba1 5402 	umull	r5, r4, r1, r2
 800c5c6:	b93c      	cbnz	r4, 800c5d8 <_calloc_r+0x18>
 800c5c8:	4629      	mov	r1, r5
 800c5ca:	f7fe ffed 	bl	800b5a8 <_malloc_r>
 800c5ce:	4606      	mov	r6, r0
 800c5d0:	b928      	cbnz	r0, 800c5de <_calloc_r+0x1e>
 800c5d2:	2600      	movs	r6, #0
 800c5d4:	4630      	mov	r0, r6
 800c5d6:	bd70      	pop	{r4, r5, r6, pc}
 800c5d8:	220c      	movs	r2, #12
 800c5da:	6002      	str	r2, [r0, #0]
 800c5dc:	e7f9      	b.n	800c5d2 <_calloc_r+0x12>
 800c5de:	462a      	mov	r2, r5
 800c5e0:	4621      	mov	r1, r4
 800c5e2:	f7fe f881 	bl	800a6e8 <memset>
 800c5e6:	e7f5      	b.n	800c5d4 <_calloc_r+0x14>

0800c5e8 <__ascii_mbtowc>:
 800c5e8:	b082      	sub	sp, #8
 800c5ea:	b901      	cbnz	r1, 800c5ee <__ascii_mbtowc+0x6>
 800c5ec:	a901      	add	r1, sp, #4
 800c5ee:	b142      	cbz	r2, 800c602 <__ascii_mbtowc+0x1a>
 800c5f0:	b14b      	cbz	r3, 800c606 <__ascii_mbtowc+0x1e>
 800c5f2:	7813      	ldrb	r3, [r2, #0]
 800c5f4:	600b      	str	r3, [r1, #0]
 800c5f6:	7812      	ldrb	r2, [r2, #0]
 800c5f8:	1e10      	subs	r0, r2, #0
 800c5fa:	bf18      	it	ne
 800c5fc:	2001      	movne	r0, #1
 800c5fe:	b002      	add	sp, #8
 800c600:	4770      	bx	lr
 800c602:	4610      	mov	r0, r2
 800c604:	e7fb      	b.n	800c5fe <__ascii_mbtowc+0x16>
 800c606:	f06f 0001 	mvn.w	r0, #1
 800c60a:	e7f8      	b.n	800c5fe <__ascii_mbtowc+0x16>

0800c60c <_realloc_r>:
 800c60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c610:	4680      	mov	r8, r0
 800c612:	4615      	mov	r5, r2
 800c614:	460c      	mov	r4, r1
 800c616:	b921      	cbnz	r1, 800c622 <_realloc_r+0x16>
 800c618:	4611      	mov	r1, r2
 800c61a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c61e:	f7fe bfc3 	b.w	800b5a8 <_malloc_r>
 800c622:	b92a      	cbnz	r2, 800c630 <_realloc_r+0x24>
 800c624:	f7fe ff4c 	bl	800b4c0 <_free_r>
 800c628:	2400      	movs	r4, #0
 800c62a:	4620      	mov	r0, r4
 800c62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c630:	f000 f841 	bl	800c6b6 <_malloc_usable_size_r>
 800c634:	4285      	cmp	r5, r0
 800c636:	4606      	mov	r6, r0
 800c638:	d802      	bhi.n	800c640 <_realloc_r+0x34>
 800c63a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c63e:	d8f4      	bhi.n	800c62a <_realloc_r+0x1e>
 800c640:	4629      	mov	r1, r5
 800c642:	4640      	mov	r0, r8
 800c644:	f7fe ffb0 	bl	800b5a8 <_malloc_r>
 800c648:	4607      	mov	r7, r0
 800c64a:	2800      	cmp	r0, #0
 800c64c:	d0ec      	beq.n	800c628 <_realloc_r+0x1c>
 800c64e:	42b5      	cmp	r5, r6
 800c650:	462a      	mov	r2, r5
 800c652:	4621      	mov	r1, r4
 800c654:	bf28      	it	cs
 800c656:	4632      	movcs	r2, r6
 800c658:	f7fe f8d3 	bl	800a802 <memcpy>
 800c65c:	4621      	mov	r1, r4
 800c65e:	4640      	mov	r0, r8
 800c660:	463c      	mov	r4, r7
 800c662:	f7fe ff2d 	bl	800b4c0 <_free_r>
 800c666:	e7e0      	b.n	800c62a <_realloc_r+0x1e>

0800c668 <__ascii_wctomb>:
 800c668:	4603      	mov	r3, r0
 800c66a:	4608      	mov	r0, r1
 800c66c:	b141      	cbz	r1, 800c680 <__ascii_wctomb+0x18>
 800c66e:	2aff      	cmp	r2, #255	@ 0xff
 800c670:	d904      	bls.n	800c67c <__ascii_wctomb+0x14>
 800c672:	228a      	movs	r2, #138	@ 0x8a
 800c674:	f04f 30ff 	mov.w	r0, #4294967295
 800c678:	601a      	str	r2, [r3, #0]
 800c67a:	4770      	bx	lr
 800c67c:	2001      	movs	r0, #1
 800c67e:	700a      	strb	r2, [r1, #0]
 800c680:	4770      	bx	lr
	...

0800c684 <fiprintf>:
 800c684:	b40e      	push	{r1, r2, r3}
 800c686:	b503      	push	{r0, r1, lr}
 800c688:	ab03      	add	r3, sp, #12
 800c68a:	4601      	mov	r1, r0
 800c68c:	4805      	ldr	r0, [pc, #20]	@ (800c6a4 <fiprintf+0x20>)
 800c68e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c692:	6800      	ldr	r0, [r0, #0]
 800c694:	9301      	str	r3, [sp, #4]
 800c696:	f7ff fd1d 	bl	800c0d4 <_vfiprintf_r>
 800c69a:	b002      	add	sp, #8
 800c69c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6a0:	b003      	add	sp, #12
 800c6a2:	4770      	bx	lr
 800c6a4:	2000002c 	.word	0x2000002c

0800c6a8 <abort>:
 800c6a8:	2006      	movs	r0, #6
 800c6aa:	b508      	push	{r3, lr}
 800c6ac:	f000 f834 	bl	800c718 <raise>
 800c6b0:	2001      	movs	r0, #1
 800c6b2:	f7f6 f804 	bl	80026be <_exit>

0800c6b6 <_malloc_usable_size_r>:
 800c6b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6ba:	1f18      	subs	r0, r3, #4
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	bfbc      	itt	lt
 800c6c0:	580b      	ldrlt	r3, [r1, r0]
 800c6c2:	18c0      	addlt	r0, r0, r3
 800c6c4:	4770      	bx	lr

0800c6c6 <_raise_r>:
 800c6c6:	291f      	cmp	r1, #31
 800c6c8:	b538      	push	{r3, r4, r5, lr}
 800c6ca:	4605      	mov	r5, r0
 800c6cc:	460c      	mov	r4, r1
 800c6ce:	d904      	bls.n	800c6da <_raise_r+0x14>
 800c6d0:	2316      	movs	r3, #22
 800c6d2:	6003      	str	r3, [r0, #0]
 800c6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6d8:	bd38      	pop	{r3, r4, r5, pc}
 800c6da:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c6dc:	b112      	cbz	r2, 800c6e4 <_raise_r+0x1e>
 800c6de:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c6e2:	b94b      	cbnz	r3, 800c6f8 <_raise_r+0x32>
 800c6e4:	4628      	mov	r0, r5
 800c6e6:	f000 f831 	bl	800c74c <_getpid_r>
 800c6ea:	4622      	mov	r2, r4
 800c6ec:	4601      	mov	r1, r0
 800c6ee:	4628      	mov	r0, r5
 800c6f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6f4:	f000 b818 	b.w	800c728 <_kill_r>
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	d00a      	beq.n	800c712 <_raise_r+0x4c>
 800c6fc:	1c59      	adds	r1, r3, #1
 800c6fe:	d103      	bne.n	800c708 <_raise_r+0x42>
 800c700:	2316      	movs	r3, #22
 800c702:	6003      	str	r3, [r0, #0]
 800c704:	2001      	movs	r0, #1
 800c706:	e7e7      	b.n	800c6d8 <_raise_r+0x12>
 800c708:	2100      	movs	r1, #0
 800c70a:	4620      	mov	r0, r4
 800c70c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c710:	4798      	blx	r3
 800c712:	2000      	movs	r0, #0
 800c714:	e7e0      	b.n	800c6d8 <_raise_r+0x12>
	...

0800c718 <raise>:
 800c718:	4b02      	ldr	r3, [pc, #8]	@ (800c724 <raise+0xc>)
 800c71a:	4601      	mov	r1, r0
 800c71c:	6818      	ldr	r0, [r3, #0]
 800c71e:	f7ff bfd2 	b.w	800c6c6 <_raise_r>
 800c722:	bf00      	nop
 800c724:	2000002c 	.word	0x2000002c

0800c728 <_kill_r>:
 800c728:	b538      	push	{r3, r4, r5, lr}
 800c72a:	2300      	movs	r3, #0
 800c72c:	4d06      	ldr	r5, [pc, #24]	@ (800c748 <_kill_r+0x20>)
 800c72e:	4604      	mov	r4, r0
 800c730:	4608      	mov	r0, r1
 800c732:	4611      	mov	r1, r2
 800c734:	602b      	str	r3, [r5, #0]
 800c736:	f7f5 ffb2 	bl	800269e <_kill>
 800c73a:	1c43      	adds	r3, r0, #1
 800c73c:	d102      	bne.n	800c744 <_kill_r+0x1c>
 800c73e:	682b      	ldr	r3, [r5, #0]
 800c740:	b103      	cbz	r3, 800c744 <_kill_r+0x1c>
 800c742:	6023      	str	r3, [r4, #0]
 800c744:	bd38      	pop	{r3, r4, r5, pc}
 800c746:	bf00      	nop
 800c748:	2000409c 	.word	0x2000409c

0800c74c <_getpid_r>:
 800c74c:	f7f5 bf9f 	b.w	800268e <_getpid>

0800c750 <_init>:
 800c750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c752:	bf00      	nop
 800c754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c756:	bc08      	pop	{r3}
 800c758:	469e      	mov	lr, r3
 800c75a:	4770      	bx	lr

0800c75c <_fini>:
 800c75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c75e:	bf00      	nop
 800c760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c762:	bc08      	pop	{r3}
 800c764:	469e      	mov	lr, r3
 800c766:	4770      	bx	lr
