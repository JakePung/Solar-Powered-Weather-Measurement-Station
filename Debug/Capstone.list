
Capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9c8  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  0800bc00  0800bc00  0000cc00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c250  0800c250  0000d250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c258  0800c258  0000d258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c25c  0800c25c  0000d25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001ec  20000000  0800c260  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003cb8  200001ec  0800c44c  0000e1ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20003ea4  0800c44c  0000eea4  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000e1ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b36e  00000000  00000000  0000e222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000339c  00000000  00000000  00029590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001690  00000000  00000000  0002c930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000116d  00000000  00000000  0002dfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00004d91  00000000  00000000  0002f12d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001cfa6  00000000  00000000  00033ebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012d1d7  00000000  00000000  00050e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0017e03b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000070e4  00000000  00000000  0017e080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  00185164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001ec 	.word	0x200001ec
 8000254:	00000000 	.word	0x00000000
 8000258:	0800bbe8 	.word	0x0800bbe8

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001f0 	.word	0x200001f0
 8000274:	0800bbe8 	.word	0x0800bbe8

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc4:	f000 b97e 	b.w	8000ec4 <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000be4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000be6:	460c      	mov	r4, r1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d14d      	bne.n	8000c88 <__udivmoddi4+0xa8>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	460f      	mov	r7, r1
 8000bf0:	4684      	mov	ip, r0
 8000bf2:	4696      	mov	lr, r2
 8000bf4:	fab2 f382 	clz	r3, r2
 8000bf8:	d960      	bls.n	8000cbc <__udivmoddi4+0xdc>
 8000bfa:	b14b      	cbz	r3, 8000c10 <__udivmoddi4+0x30>
 8000bfc:	fa02 fe03 	lsl.w	lr, r2, r3
 8000c00:	f1c3 0220 	rsb	r2, r3, #32
 8000c04:	409f      	lsls	r7, r3
 8000c06:	fa00 fc03 	lsl.w	ip, r0, r3
 8000c0a:	fa20 f202 	lsr.w	r2, r0, r2
 8000c0e:	4317      	orrs	r7, r2
 8000c10:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000c14:	fa1f f48e 	uxth.w	r4, lr
 8000c18:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000c1c:	fbb7 f1f6 	udiv	r1, r7, r6
 8000c20:	fb06 7711 	mls	r7, r6, r1, r7
 8000c24:	fb01 f004 	mul.w	r0, r1, r4
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	4290      	cmp	r0, r2
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x62>
 8000c30:	eb1e 0202 	adds.w	r2, lr, r2
 8000c34:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c38:	d202      	bcs.n	8000c40 <__udivmoddi4+0x60>
 8000c3a:	4290      	cmp	r0, r2
 8000c3c:	f200 812d 	bhi.w	8000e9a <__udivmoddi4+0x2ba>
 8000c40:	4639      	mov	r1, r7
 8000c42:	1a12      	subs	r2, r2, r0
 8000c44:	fa1f fc8c 	uxth.w	ip, ip
 8000c48:	fbb2 f0f6 	udiv	r0, r2, r6
 8000c4c:	fb06 2210 	mls	r2, r6, r0, r2
 8000c50:	fb00 f404 	mul.w	r4, r0, r4
 8000c54:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000c58:	4564      	cmp	r4, ip
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x8e>
 8000c5c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000c60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c64:	d202      	bcs.n	8000c6c <__udivmoddi4+0x8c>
 8000c66:	4564      	cmp	r4, ip
 8000c68:	f200 811a 	bhi.w	8000ea0 <__udivmoddi4+0x2c0>
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c72:	ebac 0c04 	sub.w	ip, ip, r4
 8000c76:	2100      	movs	r1, #0
 8000c78:	b125      	cbz	r5, 8000c84 <__udivmoddi4+0xa4>
 8000c7a:	fa2c f303 	lsr.w	r3, ip, r3
 8000c7e:	2200      	movs	r2, #0
 8000c80:	e9c5 3200 	strd	r3, r2, [r5]
 8000c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d905      	bls.n	8000c98 <__udivmoddi4+0xb8>
 8000c8c:	b10d      	cbz	r5, 8000c92 <__udivmoddi4+0xb2>
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	2100      	movs	r1, #0
 8000c94:	4608      	mov	r0, r1
 8000c96:	e7f5      	b.n	8000c84 <__udivmoddi4+0xa4>
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	d14d      	bne.n	8000d3c <__udivmoddi4+0x15c>
 8000ca0:	42a3      	cmp	r3, r4
 8000ca2:	f0c0 80f2 	bcc.w	8000e8a <__udivmoddi4+0x2aa>
 8000ca6:	4290      	cmp	r0, r2
 8000ca8:	f080 80ef 	bcs.w	8000e8a <__udivmoddi4+0x2aa>
 8000cac:	4606      	mov	r6, r0
 8000cae:	4623      	mov	r3, r4
 8000cb0:	4608      	mov	r0, r1
 8000cb2:	2d00      	cmp	r5, #0
 8000cb4:	d0e6      	beq.n	8000c84 <__udivmoddi4+0xa4>
 8000cb6:	e9c5 6300 	strd	r6, r3, [r5]
 8000cba:	e7e3      	b.n	8000c84 <__udivmoddi4+0xa4>
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	f040 80a2 	bne.w	8000e06 <__udivmoddi4+0x226>
 8000cc2:	1a8a      	subs	r2, r1, r2
 8000cc4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000cc8:	fa1f f68e 	uxth.w	r6, lr
 8000ccc:	2101      	movs	r1, #1
 8000cce:	fbb2 f4f7 	udiv	r4, r2, r7
 8000cd2:	fb07 2014 	mls	r0, r7, r4, r2
 8000cd6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000cda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cde:	fb06 f004 	mul.w	r0, r6, r4
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	d90f      	bls.n	8000d06 <__udivmoddi4+0x126>
 8000ce6:	eb1e 0202 	adds.w	r2, lr, r2
 8000cea:	f104 38ff 	add.w	r8, r4, #4294967295
 8000cee:	bf2c      	ite	cs
 8000cf0:	f04f 0901 	movcs.w	r9, #1
 8000cf4:	f04f 0900 	movcc.w	r9, #0
 8000cf8:	4290      	cmp	r0, r2
 8000cfa:	d903      	bls.n	8000d04 <__udivmoddi4+0x124>
 8000cfc:	f1b9 0f00 	cmp.w	r9, #0
 8000d00:	f000 80c8 	beq.w	8000e94 <__udivmoddi4+0x2b4>
 8000d04:	4644      	mov	r4, r8
 8000d06:	1a12      	subs	r2, r2, r0
 8000d08:	fa1f fc8c 	uxth.w	ip, ip
 8000d0c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d10:	fb07 2210 	mls	r2, r7, r0, r2
 8000d14:	fb00 f606 	mul.w	r6, r0, r6
 8000d18:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d1c:	4566      	cmp	r6, ip
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x152>
 8000d20:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d28:	d202      	bcs.n	8000d30 <__udivmoddi4+0x150>
 8000d2a:	4566      	cmp	r6, ip
 8000d2c:	f200 80bb 	bhi.w	8000ea6 <__udivmoddi4+0x2c6>
 8000d30:	4610      	mov	r0, r2
 8000d32:	ebac 0c06 	sub.w	ip, ip, r6
 8000d36:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d3a:	e79d      	b.n	8000c78 <__udivmoddi4+0x98>
 8000d3c:	f1c1 0620 	rsb	r6, r1, #32
 8000d40:	408b      	lsls	r3, r1
 8000d42:	fa04 fe01 	lsl.w	lr, r4, r1
 8000d46:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4a:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d4e:	40f4      	lsrs	r4, r6
 8000d50:	408a      	lsls	r2, r1
 8000d52:	431f      	orrs	r7, r3
 8000d54:	ea4e 030c 	orr.w	r3, lr, ip
 8000d58:	fa00 fe01 	lsl.w	lr, r0, r1
 8000d5c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d60:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d6c:	fb08 4410 	mls	r4, r8, r0, r4
 8000d70:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d74:	fb00 f90c 	mul.w	r9, r0, ip
 8000d78:	45a1      	cmp	r9, r4
 8000d7a:	d90e      	bls.n	8000d9a <__udivmoddi4+0x1ba>
 8000d7c:	193c      	adds	r4, r7, r4
 8000d7e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d82:	bf2c      	ite	cs
 8000d84:	f04f 0b01 	movcs.w	fp, #1
 8000d88:	f04f 0b00 	movcc.w	fp, #0
 8000d8c:	45a1      	cmp	r9, r4
 8000d8e:	d903      	bls.n	8000d98 <__udivmoddi4+0x1b8>
 8000d90:	f1bb 0f00 	cmp.w	fp, #0
 8000d94:	f000 8093 	beq.w	8000ebe <__udivmoddi4+0x2de>
 8000d98:	4650      	mov	r0, sl
 8000d9a:	eba4 0409 	sub.w	r4, r4, r9
 8000d9e:	fa1f f983 	uxth.w	r9, r3
 8000da2:	fbb4 f3f8 	udiv	r3, r4, r8
 8000da6:	fb08 4413 	mls	r4, r8, r3, r4
 8000daa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d906      	bls.n	8000dc4 <__udivmoddi4+0x1e4>
 8000db6:	193c      	adds	r4, r7, r4
 8000db8:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dbc:	d201      	bcs.n	8000dc2 <__udivmoddi4+0x1e2>
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d87a      	bhi.n	8000eb8 <__udivmoddi4+0x2d8>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dc8:	eba4 040c 	sub.w	r4, r4, ip
 8000dcc:	fba0 9802 	umull	r9, r8, r0, r2
 8000dd0:	4544      	cmp	r4, r8
 8000dd2:	46cc      	mov	ip, r9
 8000dd4:	4643      	mov	r3, r8
 8000dd6:	d302      	bcc.n	8000dde <__udivmoddi4+0x1fe>
 8000dd8:	d106      	bne.n	8000de8 <__udivmoddi4+0x208>
 8000dda:	45ce      	cmp	lr, r9
 8000ddc:	d204      	bcs.n	8000de8 <__udivmoddi4+0x208>
 8000dde:	3801      	subs	r0, #1
 8000de0:	ebb9 0c02 	subs.w	ip, r9, r2
 8000de4:	eb68 0307 	sbc.w	r3, r8, r7
 8000de8:	b15d      	cbz	r5, 8000e02 <__udivmoddi4+0x222>
 8000dea:	ebbe 020c 	subs.w	r2, lr, ip
 8000dee:	eb64 0403 	sbc.w	r4, r4, r3
 8000df2:	fa04 f606 	lsl.w	r6, r4, r6
 8000df6:	fa22 f301 	lsr.w	r3, r2, r1
 8000dfa:	40cc      	lsrs	r4, r1
 8000dfc:	431e      	orrs	r6, r3
 8000dfe:	e9c5 6400 	strd	r6, r4, [r5]
 8000e02:	2100      	movs	r1, #0
 8000e04:	e73e      	b.n	8000c84 <__udivmoddi4+0xa4>
 8000e06:	fa02 fe03 	lsl.w	lr, r2, r3
 8000e0a:	f1c3 0120 	rsb	r1, r3, #32
 8000e0e:	fa04 f203 	lsl.w	r2, r4, r3
 8000e12:	fa00 fc03 	lsl.w	ip, r0, r3
 8000e16:	40cc      	lsrs	r4, r1
 8000e18:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e1c:	fa20 f101 	lsr.w	r1, r0, r1
 8000e20:	fa1f f68e 	uxth.w	r6, lr
 8000e24:	fbb4 f0f7 	udiv	r0, r4, r7
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	fb07 4410 	mls	r4, r7, r0, r4
 8000e2e:	0c11      	lsrs	r1, r2, #16
 8000e30:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000e34:	fb00 f406 	mul.w	r4, r0, r6
 8000e38:	428c      	cmp	r4, r1
 8000e3a:	d90e      	bls.n	8000e5a <__udivmoddi4+0x27a>
 8000e3c:	eb1e 0101 	adds.w	r1, lr, r1
 8000e40:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e44:	bf2c      	ite	cs
 8000e46:	f04f 0901 	movcs.w	r9, #1
 8000e4a:	f04f 0900 	movcc.w	r9, #0
 8000e4e:	428c      	cmp	r4, r1
 8000e50:	d902      	bls.n	8000e58 <__udivmoddi4+0x278>
 8000e52:	f1b9 0f00 	cmp.w	r9, #0
 8000e56:	d02c      	beq.n	8000eb2 <__udivmoddi4+0x2d2>
 8000e58:	4640      	mov	r0, r8
 8000e5a:	1b09      	subs	r1, r1, r4
 8000e5c:	b292      	uxth	r2, r2
 8000e5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e62:	fb07 1114 	mls	r1, r7, r4, r1
 8000e66:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e6a:	fb04 f106 	mul.w	r1, r4, r6
 8000e6e:	4291      	cmp	r1, r2
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x2a2>
 8000e72:	eb1e 0202 	adds.w	r2, lr, r2
 8000e76:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e7a:	d201      	bcs.n	8000e80 <__udivmoddi4+0x2a0>
 8000e7c:	4291      	cmp	r1, r2
 8000e7e:	d815      	bhi.n	8000eac <__udivmoddi4+0x2cc>
 8000e80:	4644      	mov	r4, r8
 8000e82:	1a52      	subs	r2, r2, r1
 8000e84:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000e88:	e721      	b.n	8000cce <__udivmoddi4+0xee>
 8000e8a:	1a86      	subs	r6, r0, r2
 8000e8c:	eb64 0303 	sbc.w	r3, r4, r3
 8000e90:	2001      	movs	r0, #1
 8000e92:	e70e      	b.n	8000cb2 <__udivmoddi4+0xd2>
 8000e94:	3c02      	subs	r4, #2
 8000e96:	4472      	add	r2, lr
 8000e98:	e735      	b.n	8000d06 <__udivmoddi4+0x126>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4472      	add	r2, lr
 8000e9e:	e6d0      	b.n	8000c42 <__udivmoddi4+0x62>
 8000ea0:	44f4      	add	ip, lr
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	e6e3      	b.n	8000c6e <__udivmoddi4+0x8e>
 8000ea6:	44f4      	add	ip, lr
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e742      	b.n	8000d32 <__udivmoddi4+0x152>
 8000eac:	3c02      	subs	r4, #2
 8000eae:	4472      	add	r2, lr
 8000eb0:	e7e7      	b.n	8000e82 <__udivmoddi4+0x2a2>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4471      	add	r1, lr
 8000eb6:	e7d0      	b.n	8000e5a <__udivmoddi4+0x27a>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	443c      	add	r4, r7
 8000ebc:	e782      	b.n	8000dc4 <__udivmoddi4+0x1e4>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	443c      	add	r4, r7
 8000ec2:	e76a      	b.n	8000d9a <__udivmoddi4+0x1ba>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ece:	f001 fb81 	bl	80025d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed2:	f000 f951 	bl	8001178 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000ed6:	f000 f9b0 	bl	800123a <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eda:	f000 fbe3 	bl	80016a4 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000ede:	f000 fa79 	bl	80013d4 <MX_ICACHE_Init>
  MX_I2C1_Init();
 8000ee2:	f000 f9b7 	bl	8001254 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000ee6:	f000 f9f5 	bl	80012d4 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000eea:	f000 fa33 	bl	8001354 <MX_I2C3_Init>
  MX_SPI1_Init();
 8000eee:	f000 fb1d 	bl	800152c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000ef2:	f000 fb8b 	bl	800160c <MX_USART3_UART_Init>
  MX_RTC_Init();
 8000ef6:	f000 fa81 	bl	80013fc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  	//ST7735_Init(0);
    //fillScreen(BLACK);
    //testAll();

    HAL_Delay(1000);
 8000efa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000efe:	f001 fc2f 	bl	8002760 <HAL_Delay>
    //ST7735_FillRectangle(0, 0, 180, 128, 0xF800); // Fill screen with red

  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 8000f02:	2000      	movs	r0, #0
 8000f04:	f001 f9bc 	bl	8002280 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000f08:	2101      	movs	r1, #1
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f001 f9f4 	bl	80022f8 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000f10:	4b88      	ldr	r3, [pc, #544]	@ (8001134 <main+0x26c>)
 8000f12:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f16:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000f18:	4b86      	ldr	r3, [pc, #536]	@ (8001134 <main+0x26c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000f1e:	4b85      	ldr	r3, [pc, #532]	@ (8001134 <main+0x26c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000f24:	4b83      	ldr	r3, [pc, #524]	@ (8001134 <main+0x26c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000f2a:	4b82      	ldr	r3, [pc, #520]	@ (8001134 <main+0x26c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000f30:	4980      	ldr	r1, [pc, #512]	@ (8001134 <main+0x26c>)
 8000f32:	2000      	movs	r0, #0
 8000f34:	f001 fa6e 	bl	8002414 <BSP_COM_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <main+0x7a>
  {
    Error_Handler();
 8000f3e:	f000 fdbd 	bl	8001abc <Error_Handler>
  /* USER CODE END BSP */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  bool button1, button2, button3; // temporary, need button inputs
  int entry_shown = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  int new_entry, last_entry = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
  int num_of_entries = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
  int max_entries = 720; //can be changed, 720 = sample every 2 minutes for 1 day
 8000f4e:	f44f 7334 	mov.w	r3, #720	@ 0x2d0
 8000f52:	607b      	str	r3, [r7, #4]
	  //

		  //if(sensor_read){  // sensor_read wakes up controller from sleep w

			  //printf("\033\143"); // TEMP - putty clear
			  printf("Checking new data..."); //screen shows 'updating'
 8000f54:	4878      	ldr	r0, [pc, #480]	@ (8001138 <main+0x270>)
 8000f56:	f008 fe59 	bl	8009c0c <iprintf>

			  // update the new_entry and last_entry 'pointers' to the storage array
			  if(num_of_entries == 0){ // when there is no data, new_entry is set to the first value
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d104      	bne.n	8000f6a <main+0xa2>
				  new_entry = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	613b      	str	r3, [r7, #16]
				  last_entry = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	e00b      	b.n	8000f82 <main+0xba>
			  }
			  else{ // in normal operating, new_entry is incremented to not overwrite the previous read
				  new_entry += 1;
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	613b      	str	r3, [r7, #16]
				  new_entry = new_entry % max_entries; // will wrap around if reaching the end of the array
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	fb93 f2f2 	sdiv	r2, r3, r2
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	fb01 f202 	mul.w	r2, r1, r2
 8000f7e:	1a9b      	subs	r3, r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
			  }
			  printf("1\n");
 8000f82:	486e      	ldr	r0, [pc, #440]	@ (800113c <main+0x274>)
 8000f84:	f008 feaa 	bl	8009cdc <puts>
			  if(new_entry == last_entry){ // if this read will overwrite the oldest value, increase the pointer to the next oldest value
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d10b      	bne.n	8000fa8 <main+0xe0>
				last_entry += 1;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	3301      	adds	r3, #1
 8000f94:	60fb      	str	r3, [r7, #12]
				last_entry = last_entry % max_entries; // will wrap around if reaching the end of the array
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	fb93 f2f2 	sdiv	r2, r3, r2
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	fb01 f202 	mul.w	r2, r1, r2
 8000fa4:	1a9b      	subs	r3, r3, r2
 8000fa6:	60fb      	str	r3, [r7, #12]
			  }
			  printf("2\n");
 8000fa8:	4865      	ldr	r0, [pc, #404]	@ (8001140 <main+0x278>)
 8000faa:	f008 fe97 	bl	8009cdc <puts>
			  //read from sensors to index of new_entry
			  store_data(&sample_array[new_entry]);
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4a62      	ldr	r2, [pc, #392]	@ (8001144 <main+0x27c>)
 8000fba:	4413      	add	r3, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 fc37 	bl	8001830 <store_data>

			  printf("3\n");
 8000fc2:	4861      	ldr	r0, [pc, #388]	@ (8001148 <main+0x280>)
 8000fc4:	f008 fe8a 	bl	8009cdc <puts>
			  entry_shown = new_entry; // show the most up-to-date data on the display
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	617b      	str	r3, [r7, #20]
			  if(num_of_entries < max_entries){ // increase the 'size' of the used array if not full yet
 8000fcc:	68ba      	ldr	r2, [r7, #8]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	da02      	bge.n	8000fda <main+0x112>
				  num_of_entries += 1;
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	60bb      	str	r3, [r7, #8]
			  }

			  HAL_Delay(500); //leave error messages on the screen for a moment
 8000fda:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fde:	f001 fbbf 	bl	8002760 <HAL_Delay>
			  	  	  	  	  // TODO - store error messages to struct when they come up.

			  //update screen
			  display_sample_struct(&sample_array[entry_shown]);
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4a55      	ldr	r2, [pc, #340]	@ (8001144 <main+0x27c>)
 8000fee:	4413      	add	r3, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 fbd9 	bl	80017a8 <display_sample_struct>
			  printf("4\n");
 8000ff6:	4855      	ldr	r0, [pc, #340]	@ (800114c <main+0x284>)
 8000ff8:	f008 fe70 	bl	8009cdc <puts>

			  sensor_read = 0;
 8000ffc:	4b54      	ldr	r3, [pc, #336]	@ (8001150 <main+0x288>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]


		  if(((BspButtonState == BUTTON_PRESSED)||button2||button3) /*&& !input_detected*/ ){
 8001002:	4b54      	ldr	r3, [pc, #336]	@ (8001154 <main+0x28c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d005      	beq.n	8001016 <main+0x14e>
 800100a:	78fb      	ldrb	r3, [r7, #3]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d102      	bne.n	8001016 <main+0x14e>
 8001010:	78bb      	ldrb	r3, [r7, #2]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d09e      	beq.n	8000f54 <main+0x8c>
			  //input_detected = true; // debounce detector- won't run this section again until all buttons left unpressed.
			  // DISABLED due to RTC being implemented differently

			  if(BspButtonState == BUTTON_PRESSED){ // Button 1 decrements the index of the data showed on-screen
 8001016:	4b4f      	ldr	r3, [pc, #316]	@ (8001154 <main+0x28c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d10c      	bne.n	8001038 <main+0x170>
				  BspButtonState = BUTTON_RELEASED;
 800101e:	4b4d      	ldr	r3, [pc, #308]	@ (8001154 <main+0x28c>)
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
				  if(entry_shown == 0){
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d103      	bne.n	8001032 <main+0x16a>
					  entry_shown = num_of_entries - 1; //wraps around to highest used value when falling off the low end of storage
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	3b01      	subs	r3, #1
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	e002      	b.n	8001038 <main+0x170>
				  }
				  else{
					  entry_shown -= 1;
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	3b01      	subs	r3, #1
 8001036:	617b      	str	r3, [r7, #20]
				  }
			  }
			  if(button2){ // Button 2 increments the index of the data shown on-screen
 8001038:	78fb      	ldrb	r3, [r7, #3]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00b      	beq.n	8001056 <main+0x18e>
				  entry_shown += 1;
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	3301      	adds	r3, #1
 8001042:	617b      	str	r3, [r7, #20]
				  entry_shown = entry_shown % num_of_entries;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	fb93 f2f2 	sdiv	r2, r3, r2
 800104c:	68b9      	ldr	r1, [r7, #8]
 800104e:	fb01 f202 	mul.w	r2, r1, r2
 8001052:	1a9b      	subs	r3, r3, r2
 8001054:	617b      	str	r3, [r7, #20]
			  }
			  if(button3){ //  Button 3 deposits available data to the SD card
 8001056:	78bb      	ldrb	r3, [r7, #2]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d04a      	beq.n	80010f2 <main+0x22a>
				  // REPURPOSED - instead this button with scan through all avaliable data, displaying each for each struct for a half second before transitioning to the next
				  entry_shown = last_entry;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	617b      	str	r3, [r7, #20]
				  while(1){
					printf("\033\143"); //Clear terminal
 8001060:	483d      	ldr	r0, [pc, #244]	@ (8001158 <main+0x290>)
 8001062:	f008 fdd3 	bl	8009c0c <iprintf>
					printf("About to display 24 hours worth of data, data is sampled every 2 minutes.\n");
 8001066:	483d      	ldr	r0, [pc, #244]	@ (800115c <main+0x294>)
 8001068:	f008 fe38 	bl	8009cdc <puts>
					printf("For 24 hours worth of data, that is 720 samples.\n");
 800106c:	483c      	ldr	r0, [pc, #240]	@ (8001160 <main+0x298>)
 800106e:	f008 fe35 	bl	8009cdc <puts>
					printf("Each sample will be displayed for a half a second\n");
 8001072:	483c      	ldr	r0, [pc, #240]	@ (8001164 <main+0x29c>)
 8001074:	f008 fe32 	bl	8009cdc <puts>
					HAL_Delay(10000);
 8001078:	f242 7010 	movw	r0, #10000	@ 0x2710
 800107c:	f001 fb70 	bl	8002760 <HAL_Delay>
					display_sample_struct(&sample_array[entry_shown]);
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	4613      	mov	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4a2e      	ldr	r2, [pc, #184]	@ (8001144 <main+0x27c>)
 800108c:	4413      	add	r3, r2
 800108e:	4618      	mov	r0, r3
 8001090:	f000 fb8a 	bl	80017a8 <display_sample_struct>
					HAL_Delay(500);
 8001094:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001098:	f001 fb62 	bl	8002760 <HAL_Delay>
					if(entry_shown == new_entry){
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d107      	bne.n	80010b4 <main+0x1ec>
						printf("REACHED END OF STORED DATA\n RESUMING NORMAL FUNCTIONING IN 20 SECONDS\n");
 80010a4:	4830      	ldr	r0, [pc, #192]	@ (8001168 <main+0x2a0>)
 80010a6:	f008 fe19 	bl	8009cdc <puts>
						HAL_Delay(20000);
 80010aa:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80010ae:	f001 fb57 	bl	8002760 <HAL_Delay>
						break;
 80010b2:	e01e      	b.n	80010f2 <main+0x22a>
					}
					entry_shown += 1;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	3301      	adds	r3, #1
 80010b8:	617b      	str	r3, [r7, #20]
					entry_shown = entry_shown % num_of_entries;
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	68ba      	ldr	r2, [r7, #8]
 80010be:	fb93 f2f2 	sdiv	r2, r3, r2
 80010c2:	68b9      	ldr	r1, [r7, #8]
 80010c4:	fb01 f202 	mul.w	r2, r1, r2
 80010c8:	1a9b      	subs	r3, r3, r2
 80010ca:	617b      	str	r3, [r7, #20]
					if(button1 || button2){ // Emergency abort of scan
 80010cc:	787b      	ldrb	r3, [r7, #1]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d102      	bne.n	80010d8 <main+0x210>
 80010d2:	78fb      	ldrb	r3, [r7, #3]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0c3      	beq.n	8001060 <main+0x198>
						printf("ABORTING SCROLL\n RESUMING NORMAL FUNCTION WHEN BUTTON RELEASED\n");
 80010d8:	4824      	ldr	r0, [pc, #144]	@ (800116c <main+0x2a4>)
 80010da:	f008 fdff 	bl	8009cdc <puts>
						while(button1 || button2){
 80010de:	e002      	b.n	80010e6 <main+0x21e>
							HAL_Delay(100);
 80010e0:	2064      	movs	r0, #100	@ 0x64
 80010e2:	f001 fb3d 	bl	8002760 <HAL_Delay>
						while(button1 || button2){
 80010e6:	787b      	ldrb	r3, [r7, #1]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1f9      	bne.n	80010e0 <main+0x218>
 80010ec:	78fb      	ldrb	r3, [r7, #3]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1f6      	bne.n	80010e0 <main+0x218>
						break;
					}
				  }

			  }
			printf("I GET HERE\n");
 80010f2:	481f      	ldr	r0, [pc, #124]	@ (8001170 <main+0x2a8>)
 80010f4:	f008 fdf2 	bl	8009cdc <puts>
			display_sample_struct(&sample_array[entry_shown]);
 80010f8:	697a      	ldr	r2, [r7, #20]
 80010fa:	4613      	mov	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	4a10      	ldr	r2, [pc, #64]	@ (8001144 <main+0x27c>)
 8001104:	4413      	add	r3, r2
 8001106:	4618      	mov	r0, r3
 8001108:	f000 fb4e 	bl	80017a8 <display_sample_struct>
		   //Following code was heavily influenced from the STM32 website for getting RTC periodic interrupts
		   //https://community.st.com/t5/stm32-mcus/how-to-configure-the-rtc-to-wake-up-the-stm32-periodically-from/ta-p/49836
			HAL_SuspendTick();
 800110c:	f001 fb4c 	bl	80027a8 <HAL_SuspendTick>
			HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 20, RTC_WAKEUPCLOCK_CK_SPRE_16BITS, 0); //Need clock spreader to reduce frequency so we could input 120 seconds, 1Hz
 8001110:	2300      	movs	r3, #0
 8001112:	2204      	movs	r2, #4
 8001114:	2114      	movs	r1, #20
 8001116:	4817      	ldr	r0, [pc, #92]	@ (8001174 <main+0x2ac>)
 8001118:	f007 f832 	bl	8008180 <HAL_RTCEx_SetWakeUpTimer_IT>

			//Go into low power state Stop3
			HAL_PWREx_EnterSTOP3Mode(PWR_STOPENTRY_WFI); //Enter stop mode 3,RTC still runs, wait for interrupt
 800111c:	2001      	movs	r0, #1
 800111e:	f002 fe3f 	bl	8003da0 <HAL_PWREx_EnterSTOP3Mode>
			HAL_RTCEx_DeactivateWakeUpTimer(&hrtc); 	//Once Stop 3 has seen the interrupt from the wakeup timer deactivate it
 8001122:	4814      	ldr	r0, [pc, #80]	@ (8001174 <main+0x2ac>)
 8001124:	f007 f898 	bl	8008258 <HAL_RTCEx_DeactivateWakeUpTimer>
			SystemClock_Config();						//Restart the clock
 8001128:	f000 f826 	bl	8001178 <SystemClock_Config>
			HAL_ResumeTick();							//Resume systick
 800112c:	f001 fb4c 	bl	80027c8 <HAL_ResumeTick>
			  printf("Checking new data..."); //screen shows 'updating'
 8001130:	e710      	b.n	8000f54 <main+0x8c>
 8001132:	bf00      	nop
 8001134:	20003a48 	.word	0x20003a48
 8001138:	0800bc00 	.word	0x0800bc00
 800113c:	0800bc18 	.word	0x0800bc18
 8001140:	0800bc1c 	.word	0x0800bc1c
 8001144:	20000208 	.word	0x20000208
 8001148:	0800bc20 	.word	0x0800bc20
 800114c:	0800bc24 	.word	0x0800bc24
 8001150:	20000000 	.word	0x20000000
 8001154:	20003a58 	.word	0x20003a58
 8001158:	0800bc28 	.word	0x0800bc28
 800115c:	0800bc2c 	.word	0x0800bc2c
 8001160:	0800bc78 	.word	0x0800bc78
 8001164:	0800bcac 	.word	0x0800bcac
 8001168:	0800bce0 	.word	0x0800bce0
 800116c:	0800bd28 	.word	0x0800bd28
 8001170:	0800bd68 	.word	0x0800bd68
 8001174:	20003b58 	.word	0x20003b58

08001178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b09e      	sub	sp, #120	@ 0x78
 800117c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117e:	f107 0318 	add.w	r3, r7, #24
 8001182:	2260      	movs	r2, #96	@ 0x60
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f008 fe88 	bl	8009e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800118c:	463b      	mov	r3, r7
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]
 800119a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800119c:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80011a0:	f002 fd22 	bl	8003be8 <HAL_PWREx_ControlVoltageScaling>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0x36>
  {
    Error_Handler();
 80011aa:	f000 fc87 	bl	8001abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80011ae:	2318      	movs	r3, #24
 80011b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80011b2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80011b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011b8:	2301      	movs	r3, #1
 80011ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80011bc:	2310      	movs	r3, #16
 80011be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c8:	2302      	movs	r3, #2
 80011ca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011cc:	2301      	movs	r3, #1
 80011ce:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 80011d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 80011d6:	2303      	movs	r3, #3
 80011d8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 80011da:	230a      	movs	r3, #10
 80011dc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011de:	2302      	movs	r3, #2
 80011e0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011e2:	2302      	movs	r3, #2
 80011e4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80011e6:	2301      	movs	r3, #1
 80011e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80011ea:	230c      	movs	r3, #12
 80011ec:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f2:	f107 0318 	add.w	r3, r7, #24
 80011f6:	4618      	mov	r0, r3
 80011f8:	f002 fdfe 	bl	8003df8 <HAL_RCC_OscConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001202:	f000 fc5b 	bl	8001abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001206:	231f      	movs	r3, #31
 8001208:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120a:	2303      	movs	r3, #3
 800120c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800121e:	463b      	mov	r3, r7
 8001220:	2104      	movs	r1, #4
 8001222:	4618      	mov	r0, r3
 8001224:	f003 fcc4 	bl	8004bb0 <HAL_RCC_ClockConfig>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800122e:	f000 fc45 	bl	8001abc <Error_Handler>
  }
}
 8001232:	bf00      	nop
 8001234:	3778      	adds	r7, #120	@ 0x78
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	af00      	add	r7, sp, #0

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800123e:	2002      	movs	r0, #2
 8001240:	f002 fd5e 	bl	8003d00 <HAL_PWREx_ConfigSupply>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <SystemPower_Config+0x14>
  {
    Error_Handler();
 800124a:	f000 fc37 	bl	8001abc <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001258:	4b1b      	ldr	r3, [pc, #108]	@ (80012c8 <MX_I2C1_Init+0x74>)
 800125a:	4a1c      	ldr	r2, [pc, #112]	@ (80012cc <MX_I2C1_Init+0x78>)
 800125c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 800125e:	4b1a      	ldr	r3, [pc, #104]	@ (80012c8 <MX_I2C1_Init+0x74>)
 8001260:	4a1b      	ldr	r2, [pc, #108]	@ (80012d0 <MX_I2C1_Init+0x7c>)
 8001262:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001264:	4b18      	ldr	r3, [pc, #96]	@ (80012c8 <MX_I2C1_Init+0x74>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800126a:	4b17      	ldr	r3, [pc, #92]	@ (80012c8 <MX_I2C1_Init+0x74>)
 800126c:	2201      	movs	r2, #1
 800126e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001270:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <MX_I2C1_Init+0x74>)
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001276:	4b14      	ldr	r3, [pc, #80]	@ (80012c8 <MX_I2C1_Init+0x74>)
 8001278:	2200      	movs	r2, #0
 800127a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800127c:	4b12      	ldr	r3, [pc, #72]	@ (80012c8 <MX_I2C1_Init+0x74>)
 800127e:	2200      	movs	r2, #0
 8001280:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001282:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <MX_I2C1_Init+0x74>)
 8001284:	2200      	movs	r2, #0
 8001286:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001288:	4b0f      	ldr	r3, [pc, #60]	@ (80012c8 <MX_I2C1_Init+0x74>)
 800128a:	2200      	movs	r2, #0
 800128c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800128e:	480e      	ldr	r0, [pc, #56]	@ (80012c8 <MX_I2C1_Init+0x74>)
 8001290:	f001 feb6 	bl	8003000 <HAL_I2C_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800129a:	f000 fc0f 	bl	8001abc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800129e:	2100      	movs	r1, #0
 80012a0:	4809      	ldr	r0, [pc, #36]	@ (80012c8 <MX_I2C1_Init+0x74>)
 80012a2:	f002 fbd9 	bl	8003a58 <HAL_I2CEx_ConfigAnalogFilter>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012ac:	f000 fc06 	bl	8001abc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012b0:	2100      	movs	r1, #0
 80012b2:	4805      	ldr	r0, [pc, #20]	@ (80012c8 <MX_I2C1_Init+0x74>)
 80012b4:	f002 fc1b 	bl	8003aee <HAL_I2CEx_ConfigDigitalFilter>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012be:	f000 fbfd 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20003a5c 	.word	0x20003a5c
 80012cc:	40005400 	.word	0x40005400
 80012d0:	30909dec 	.word	0x30909dec

080012d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001348 <MX_I2C2_Init+0x74>)
 80012da:	4a1c      	ldr	r2, [pc, #112]	@ (800134c <MX_I2C2_Init+0x78>)
 80012dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 80012de:	4b1a      	ldr	r3, [pc, #104]	@ (8001348 <MX_I2C2_Init+0x74>)
 80012e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001350 <MX_I2C2_Init+0x7c>)
 80012e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80012e4:	4b18      	ldr	r3, [pc, #96]	@ (8001348 <MX_I2C2_Init+0x74>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ea:	4b17      	ldr	r3, [pc, #92]	@ (8001348 <MX_I2C2_Init+0x74>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f0:	4b15      	ldr	r3, [pc, #84]	@ (8001348 <MX_I2C2_Init+0x74>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80012f6:	4b14      	ldr	r3, [pc, #80]	@ (8001348 <MX_I2C2_Init+0x74>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012fc:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <MX_I2C2_Init+0x74>)
 80012fe:	2200      	movs	r2, #0
 8001300:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001302:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <MX_I2C2_Init+0x74>)
 8001304:	2200      	movs	r2, #0
 8001306:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001308:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <MX_I2C2_Init+0x74>)
 800130a:	2200      	movs	r2, #0
 800130c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800130e:	480e      	ldr	r0, [pc, #56]	@ (8001348 <MX_I2C2_Init+0x74>)
 8001310:	f001 fe76 	bl	8003000 <HAL_I2C_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800131a:	f000 fbcf 	bl	8001abc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800131e:	2100      	movs	r1, #0
 8001320:	4809      	ldr	r0, [pc, #36]	@ (8001348 <MX_I2C2_Init+0x74>)
 8001322:	f002 fb99 	bl	8003a58 <HAL_I2CEx_ConfigAnalogFilter>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800132c:	f000 fbc6 	bl	8001abc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001330:	2100      	movs	r1, #0
 8001332:	4805      	ldr	r0, [pc, #20]	@ (8001348 <MX_I2C2_Init+0x74>)
 8001334:	f002 fbdb 	bl	8003aee <HAL_I2CEx_ConfigDigitalFilter>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800133e:	f000 fbbd 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20003ab0 	.word	0x20003ab0
 800134c:	40005800 	.word	0x40005800
 8001350:	30909dec 	.word	0x30909dec

08001354 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001358:	4b1b      	ldr	r3, [pc, #108]	@ (80013c8 <MX_I2C3_Init+0x74>)
 800135a:	4a1c      	ldr	r2, [pc, #112]	@ (80013cc <MX_I2C3_Init+0x78>)
 800135c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30909DEC;
 800135e:	4b1a      	ldr	r3, [pc, #104]	@ (80013c8 <MX_I2C3_Init+0x74>)
 8001360:	4a1b      	ldr	r2, [pc, #108]	@ (80013d0 <MX_I2C3_Init+0x7c>)
 8001362:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001364:	4b18      	ldr	r3, [pc, #96]	@ (80013c8 <MX_I2C3_Init+0x74>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800136a:	4b17      	ldr	r3, [pc, #92]	@ (80013c8 <MX_I2C3_Init+0x74>)
 800136c:	2201      	movs	r2, #1
 800136e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001370:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <MX_I2C3_Init+0x74>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001376:	4b14      	ldr	r3, [pc, #80]	@ (80013c8 <MX_I2C3_Init+0x74>)
 8001378:	2200      	movs	r2, #0
 800137a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800137c:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <MX_I2C3_Init+0x74>)
 800137e:	2200      	movs	r2, #0
 8001380:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001382:	4b11      	ldr	r3, [pc, #68]	@ (80013c8 <MX_I2C3_Init+0x74>)
 8001384:	2200      	movs	r2, #0
 8001386:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001388:	4b0f      	ldr	r3, [pc, #60]	@ (80013c8 <MX_I2C3_Init+0x74>)
 800138a:	2200      	movs	r2, #0
 800138c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800138e:	480e      	ldr	r0, [pc, #56]	@ (80013c8 <MX_I2C3_Init+0x74>)
 8001390:	f001 fe36 	bl	8003000 <HAL_I2C_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800139a:	f000 fb8f 	bl	8001abc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800139e:	2100      	movs	r1, #0
 80013a0:	4809      	ldr	r0, [pc, #36]	@ (80013c8 <MX_I2C3_Init+0x74>)
 80013a2:	f002 fb59 	bl	8003a58 <HAL_I2CEx_ConfigAnalogFilter>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80013ac:	f000 fb86 	bl	8001abc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80013b0:	2100      	movs	r1, #0
 80013b2:	4805      	ldr	r0, [pc, #20]	@ (80013c8 <MX_I2C3_Init+0x74>)
 80013b4:	f002 fb9b 	bl	8003aee <HAL_I2CEx_ConfigDigitalFilter>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80013be:	f000 fb7d 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20003b04 	.word	0x20003b04
 80013cc:	46002800 	.word	0x46002800
 80013d0:	30909dec 	.word	0x30909dec

080013d4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80013d8:	2000      	movs	r0, #0
 80013da:	f002 fbd5 	bl	8003b88 <HAL_ICACHE_ConfigAssociativityMode>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80013e4:	f000 fb6a 	bl	8001abc <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80013e8:	f002 fbee 	bl	8003bc8 <HAL_ICACHE_Enable>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80013f2:	f000 fb63 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08e      	sub	sp, #56	@ 0x38
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]
 8001412:	615a      	str	r2, [r3, #20]
 8001414:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8001416:	f107 0308 	add.w	r3, r7, #8
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
 8001424:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800142a:	4b3e      	ldr	r3, [pc, #248]	@ (8001524 <MX_RTC_Init+0x128>)
 800142c:	4a3e      	ldr	r2, [pc, #248]	@ (8001528 <MX_RTC_Init+0x12c>)
 800142e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001430:	4b3c      	ldr	r3, [pc, #240]	@ (8001524 <MX_RTC_Init+0x128>)
 8001432:	2200      	movs	r2, #0
 8001434:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001436:	4b3b      	ldr	r3, [pc, #236]	@ (8001524 <MX_RTC_Init+0x128>)
 8001438:	227f      	movs	r2, #127	@ 0x7f
 800143a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800143c:	4b39      	ldr	r3, [pc, #228]	@ (8001524 <MX_RTC_Init+0x128>)
 800143e:	22ff      	movs	r2, #255	@ 0xff
 8001440:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001442:	4b38      	ldr	r3, [pc, #224]	@ (8001524 <MX_RTC_Init+0x128>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_POS1;
 8001448:	4b36      	ldr	r3, [pc, #216]	@ (8001524 <MX_RTC_Init+0x128>)
 800144a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800144e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001450:	4b34      	ldr	r3, [pc, #208]	@ (8001524 <MX_RTC_Init+0x128>)
 8001452:	2200      	movs	r2, #0
 8001454:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001456:	4b33      	ldr	r3, [pc, #204]	@ (8001524 <MX_RTC_Init+0x128>)
 8001458:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800145c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800145e:	4b31      	ldr	r3, [pc, #196]	@ (8001524 <MX_RTC_Init+0x128>)
 8001460:	2200      	movs	r2, #0
 8001462:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001464:	4b2f      	ldr	r3, [pc, #188]	@ (8001524 <MX_RTC_Init+0x128>)
 8001466:	2200      	movs	r2, #0
 8001468:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800146a:	482e      	ldr	r0, [pc, #184]	@ (8001524 <MX_RTC_Init+0x128>)
 800146c:	f006 fb3c 	bl	8007ae8 <HAL_RTC_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8001476:	f000 fb21 	bl	8001abc <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 800147e:	2300      	movs	r3, #0
 8001480:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001482:	2300      	movs	r3, #0
 8001484:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001486:	2300      	movs	r3, #0
 8001488:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	4619      	mov	r1, r3
 8001490:	4824      	ldr	r0, [pc, #144]	@ (8001524 <MX_RTC_Init+0x128>)
 8001492:	f006 ff67 	bl	8008364 <HAL_RTCEx_PrivilegeModeSet>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 800149c:	f000 fb0e 	bl	8001abc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	2201      	movs	r2, #1
 80014ba:	4619      	mov	r1, r3
 80014bc:	4819      	ldr	r0, [pc, #100]	@ (8001524 <MX_RTC_Init+0x128>)
 80014be:	f006 fb95 	bl	8007bec <HAL_RTC_SetTime>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_RTC_Init+0xd0>
  {
    Error_Handler();
 80014c8:	f000 faf8 	bl	8001abc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80014cc:	2301      	movs	r3, #1
 80014ce:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 80014d0:	2301      	movs	r3, #1
 80014d2:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 80014d4:	2301      	movs	r3, #1
 80014d6:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 80014d8:	2300      	movs	r3, #0
 80014da:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	2201      	movs	r2, #1
 80014e0:	4619      	mov	r1, r3
 80014e2:	4810      	ldr	r0, [pc, #64]	@ (8001524 <MX_RTC_Init+0x128>)
 80014e4:	f006 fc90 	bl	8007e08 <HAL_RTC_SetDate>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_RTC_Init+0xf6>
  {
    Error_Handler();
 80014ee:	f000 fae5 	bl	8001abc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 120, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 80014f2:	2300      	movs	r3, #0
 80014f4:	2200      	movs	r2, #0
 80014f6:	2178      	movs	r1, #120	@ 0x78
 80014f8:	480a      	ldr	r0, [pc, #40]	@ (8001524 <MX_RTC_Init+0x128>)
 80014fa:	f006 fe41 	bl	8008180 <HAL_RTCEx_SetWakeUpTimer_IT>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_RTC_Init+0x10c>
  {
    Error_Handler();
 8001504:	f000 fada 	bl	8001abc <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 8001508:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800150c:	4805      	ldr	r0, [pc, #20]	@ (8001524 <MX_RTC_Init+0x128>)
 800150e:	f006 fef5 	bl	80082fc <HAL_RTCEx_SetCalibrationOutPut>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_RTC_Init+0x120>
  {
    Error_Handler();
 8001518:	f000 fad0 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800151c:	bf00      	nop
 800151e:	3738      	adds	r7, #56	@ 0x38
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20003b58 	.word	0x20003b58
 8001528:	46007800 	.word	0x46007800

0800152c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800153c:	4b31      	ldr	r3, [pc, #196]	@ (8001604 <MX_SPI1_Init+0xd8>)
 800153e:	4a32      	ldr	r2, [pc, #200]	@ (8001608 <MX_SPI1_Init+0xdc>)
 8001540:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001542:	4b30      	ldr	r3, [pc, #192]	@ (8001604 <MX_SPI1_Init+0xd8>)
 8001544:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001548:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800154a:	4b2e      	ldr	r3, [pc, #184]	@ (8001604 <MX_SPI1_Init+0xd8>)
 800154c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001550:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001552:	4b2c      	ldr	r3, [pc, #176]	@ (8001604 <MX_SPI1_Init+0xd8>)
 8001554:	2203      	movs	r2, #3
 8001556:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001558:	4b2a      	ldr	r3, [pc, #168]	@ (8001604 <MX_SPI1_Init+0xd8>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800155e:	4b29      	ldr	r3, [pc, #164]	@ (8001604 <MX_SPI1_Init+0xd8>)
 8001560:	2200      	movs	r2, #0
 8001562:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001564:	4b27      	ldr	r3, [pc, #156]	@ (8001604 <MX_SPI1_Init+0xd8>)
 8001566:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800156a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800156c:	4b25      	ldr	r3, [pc, #148]	@ (8001604 <MX_SPI1_Init+0xd8>)
 800156e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001572:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001574:	4b23      	ldr	r3, [pc, #140]	@ (8001604 <MX_SPI1_Init+0xd8>)
 8001576:	2200      	movs	r2, #0
 8001578:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800157a:	4b22      	ldr	r3, [pc, #136]	@ (8001604 <MX_SPI1_Init+0xd8>)
 800157c:	2200      	movs	r2, #0
 800157e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001580:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <MX_SPI1_Init+0xd8>)
 8001582:	2200      	movs	r2, #0
 8001584:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001586:	4b1f      	ldr	r3, [pc, #124]	@ (8001604 <MX_SPI1_Init+0xd8>)
 8001588:	2207      	movs	r2, #7
 800158a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800158c:	4b1d      	ldr	r3, [pc, #116]	@ (8001604 <MX_SPI1_Init+0xd8>)
 800158e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001592:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001594:	4b1b      	ldr	r3, [pc, #108]	@ (8001604 <MX_SPI1_Init+0xd8>)
 8001596:	2200      	movs	r2, #0
 8001598:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800159a:	4b1a      	ldr	r3, [pc, #104]	@ (8001604 <MX_SPI1_Init+0xd8>)
 800159c:	2200      	movs	r2, #0
 800159e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015a0:	4b18      	ldr	r3, [pc, #96]	@ (8001604 <MX_SPI1_Init+0xd8>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80015a6:	4b17      	ldr	r3, [pc, #92]	@ (8001604 <MX_SPI1_Init+0xd8>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80015ac:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <MX_SPI1_Init+0xd8>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80015b2:	4b14      	ldr	r3, [pc, #80]	@ (8001604 <MX_SPI1_Init+0xd8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80015b8:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <MX_SPI1_Init+0xd8>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80015be:	4b11      	ldr	r3, [pc, #68]	@ (8001604 <MX_SPI1_Init+0xd8>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001604 <MX_SPI1_Init+0xd8>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015ca:	480e      	ldr	r0, [pc, #56]	@ (8001604 <MX_SPI1_Init+0xd8>)
 80015cc:	f006 fef8 	bl	80083c0 <HAL_SPI_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_SPI1_Init+0xae>
  {
    Error_Handler();
 80015d6:	f000 fa71 	bl	8001abc <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80015de:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80015e2:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	4619      	mov	r1, r3
 80015ec:	4805      	ldr	r0, [pc, #20]	@ (8001604 <MX_SPI1_Init+0xd8>)
 80015ee:	f007 f818 	bl	8008622 <HAL_SPIEx_SetConfigAutonomousMode>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_SPI1_Init+0xd0>
  {
    Error_Handler();
 80015f8:	f000 fa60 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20003b88 	.word	0x20003b88
 8001608:	40013000 	.word	0x40013000

0800160c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001610:	4b22      	ldr	r3, [pc, #136]	@ (800169c <MX_USART3_UART_Init+0x90>)
 8001612:	4a23      	ldr	r2, [pc, #140]	@ (80016a0 <MX_USART3_UART_Init+0x94>)
 8001614:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001616:	4b21      	ldr	r3, [pc, #132]	@ (800169c <MX_USART3_UART_Init+0x90>)
 8001618:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800161c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800161e:	4b1f      	ldr	r3, [pc, #124]	@ (800169c <MX_USART3_UART_Init+0x90>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001624:	4b1d      	ldr	r3, [pc, #116]	@ (800169c <MX_USART3_UART_Init+0x90>)
 8001626:	2200      	movs	r2, #0
 8001628:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800162a:	4b1c      	ldr	r3, [pc, #112]	@ (800169c <MX_USART3_UART_Init+0x90>)
 800162c:	2200      	movs	r2, #0
 800162e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001630:	4b1a      	ldr	r3, [pc, #104]	@ (800169c <MX_USART3_UART_Init+0x90>)
 8001632:	220c      	movs	r2, #12
 8001634:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001636:	4b19      	ldr	r3, [pc, #100]	@ (800169c <MX_USART3_UART_Init+0x90>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800163c:	4b17      	ldr	r3, [pc, #92]	@ (800169c <MX_USART3_UART_Init+0x90>)
 800163e:	2200      	movs	r2, #0
 8001640:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001642:	4b16      	ldr	r3, [pc, #88]	@ (800169c <MX_USART3_UART_Init+0x90>)
 8001644:	2200      	movs	r2, #0
 8001646:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001648:	4b14      	ldr	r3, [pc, #80]	@ (800169c <MX_USART3_UART_Init+0x90>)
 800164a:	2200      	movs	r2, #0
 800164c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800164e:	4b13      	ldr	r3, [pc, #76]	@ (800169c <MX_USART3_UART_Init+0x90>)
 8001650:	2200      	movs	r2, #0
 8001652:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001654:	4811      	ldr	r0, [pc, #68]	@ (800169c <MX_USART3_UART_Init+0x90>)
 8001656:	f007 f825 	bl	80086a4 <HAL_UART_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001660:	f000 fa2c 	bl	8001abc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001664:	2100      	movs	r1, #0
 8001666:	480d      	ldr	r0, [pc, #52]	@ (800169c <MX_USART3_UART_Init+0x90>)
 8001668:	f007 fcea 	bl	8009040 <HAL_UARTEx_SetTxFifoThreshold>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001672:	f000 fa23 	bl	8001abc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001676:	2100      	movs	r1, #0
 8001678:	4808      	ldr	r0, [pc, #32]	@ (800169c <MX_USART3_UART_Init+0x90>)
 800167a:	f007 fd1f 	bl	80090bc <HAL_UARTEx_SetRxFifoThreshold>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001684:	f000 fa1a 	bl	8001abc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001688:	4804      	ldr	r0, [pc, #16]	@ (800169c <MX_USART3_UART_Init+0x90>)
 800168a:	f007 fca0 	bl	8008fce <HAL_UARTEx_DisableFifoMode>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001694:	f000 fa12 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20003c18 	.word	0x20003c18
 80016a0:	40004800 	.word	0x40004800

080016a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	@ 0x28
 80016a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
 80016b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ba:	4b38      	ldr	r3, [pc, #224]	@ (800179c <MX_GPIO_Init+0xf8>)
 80016bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016c0:	4a36      	ldr	r2, [pc, #216]	@ (800179c <MX_GPIO_Init+0xf8>)
 80016c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016ca:	4b34      	ldr	r3, [pc, #208]	@ (800179c <MX_GPIO_Init+0xf8>)
 80016cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d8:	4b30      	ldr	r3, [pc, #192]	@ (800179c <MX_GPIO_Init+0xf8>)
 80016da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016de:	4a2f      	ldr	r2, [pc, #188]	@ (800179c <MX_GPIO_Init+0xf8>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016e8:	4b2c      	ldr	r3, [pc, #176]	@ (800179c <MX_GPIO_Init+0xf8>)
 80016ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f6:	4b29      	ldr	r3, [pc, #164]	@ (800179c <MX_GPIO_Init+0xf8>)
 80016f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016fc:	4a27      	ldr	r2, [pc, #156]	@ (800179c <MX_GPIO_Init+0xf8>)
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001706:	4b25      	ldr	r3, [pc, #148]	@ (800179c <MX_GPIO_Init+0xf8>)
 8001708:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001714:	4b21      	ldr	r3, [pc, #132]	@ (800179c <MX_GPIO_Init+0xf8>)
 8001716:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800171a:	4a20      	ldr	r2, [pc, #128]	@ (800179c <MX_GPIO_Init+0xf8>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001724:	4b1d      	ldr	r3, [pc, #116]	@ (800179c <MX_GPIO_Init+0xf8>)
 8001726:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8001732:	2200      	movs	r2, #0
 8001734:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8001738:	4819      	ldr	r0, [pc, #100]	@ (80017a0 <MX_GPIO_Init+0xfc>)
 800173a:	f001 fc49 	bl	8002fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001744:	4817      	ldr	r0, [pc, #92]	@ (80017a4 <MX_GPIO_Init+0x100>)
 8001746:	f001 fc43 	bl	8002fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC7 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800174a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800174e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001750:	2301      	movs	r3, #1
 8001752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4619      	mov	r1, r3
 8001762:	480f      	ldr	r0, [pc, #60]	@ (80017a0 <MX_GPIO_Init+0xfc>)
 8001764:	f001 fa5c 	bl	8002c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001768:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800176c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176e:	2301      	movs	r3, #1
 8001770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2300      	movs	r3, #0
 8001778:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4619      	mov	r1, r3
 8001780:	4808      	ldr	r0, [pc, #32]	@ (80017a4 <MX_GPIO_Init+0x100>)
 8001782:	f001 fa4d 	bl	8002c20 <HAL_GPIO_Init>
  //	  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
    //  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
     // GPIO_InitStruct.Pull = GPIO_PULLUP;
      //GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
     // GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	4619      	mov	r1, r3
 800178c:	4804      	ldr	r0, [pc, #16]	@ (80017a0 <MX_GPIO_Init+0xfc>)
 800178e:	f001 fa47 	bl	8002c20 <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 8001792:	bf00      	nop
 8001794:	3728      	adds	r7, #40	@ 0x28
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	46020c00 	.word	0x46020c00
 80017a0:	42020800 	.word	0x42020800
 80017a4:	42020000 	.word	0x42020000

080017a8 <display_sample_struct>:
  	printf("Right after error checking/lockup\n");
    sensor_read = 1; 				 							//Querry the sensors every 2 minutes
    printf("Change signal to 1 so we can get data\n");
}
*/
void display_sample_struct(samples *sample){ // temporary Putty code while trying to figure out our display
 80017a8:	b590      	push	{r4, r7, lr}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af02      	add	r7, sp, #8
 80017ae:	6078      	str	r0, [r7, #4]
// Example use: display_sample_struct( *store_data[entry_shown]);d
	printf("\033\143"); //clear Putty
 80017b0:	481a      	ldr	r0, [pc, #104]	@ (800181c <display_sample_struct+0x74>)
 80017b2:	f008 fa2b 	bl	8009c0c <iprintf>
	printf("Date/Time - %d/%d/%d - %d:%d\n",sample->month,sample->day,sample->year,sample->hours,sample->minutes); //print data and time in a single line
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	785b      	ldrb	r3, [r3, #1]
 80017ba:	4619      	mov	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	789b      	ldrb	r3, [r3, #2]
 80017c6:	461c      	mov	r4, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	78db      	ldrb	r3, [r3, #3]
 80017cc:	461a      	mov	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	791b      	ldrb	r3, [r3, #4]
 80017d2:	9301      	str	r3, [sp, #4]
 80017d4:	9200      	str	r2, [sp, #0]
 80017d6:	4623      	mov	r3, r4
 80017d8:	4602      	mov	r2, r0
 80017da:	4811      	ldr	r0, [pc, #68]	@ (8001820 <display_sample_struct+0x78>)
 80017dc:	f008 fa16 	bl	8009c0c <iprintf>
	printf("Temperature - %f\u00B0C\n", sample->temp); //print temperature with degree symbol
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe feb3 	bl	8000550 <__aeabi_f2d>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	480d      	ldr	r0, [pc, #52]	@ (8001824 <display_sample_struct+0x7c>)
 80017f0:	f008 fa0c 	bl	8009c0c <iprintf>
	printf("Humidity - %f\n", sample->humid); //print relative humidity
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fea9 	bl	8000550 <__aeabi_f2d>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4809      	ldr	r0, [pc, #36]	@ (8001828 <display_sample_struct+0x80>)
 8001804:	f008 fa02 	bl	8009c0c <iprintf>
	printf("Irradiance - %d\n", sample->irrad); //print irradiance (may require additional filtering)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	4619      	mov	r1, r3
 800180e:	4807      	ldr	r0, [pc, #28]	@ (800182c <display_sample_struct+0x84>)
 8001810:	f008 f9fc 	bl	8009c0c <iprintf>
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	bd90      	pop	{r4, r7, pc}
 800181c:	0800bc28 	.word	0x0800bc28
 8001820:	0800bd74 	.word	0x0800bd74
 8001824:	0800bd94 	.word	0x0800bd94
 8001828:	0800bdac 	.word	0x0800bdac
 800182c:	0800bdbc 	.word	0x0800bdbc

08001830 <store_data>:
//Function for getting sensor data
void store_data(samples *sample_inst){
 8001830:	b580      	push	{r7, lr}
 8001832:	b096      	sub	sp, #88	@ 0x58
 8001834:	af02      	add	r7, sp, #8
 8001836:	6078      	str	r0, [r7, #4]

	uint8_t SEND_DATA_TH[2] = {0x24, 0x16}; //LOW REPEATABILITY, CLOCK STRETCHING DISSABLED
 8001838:	f241 6324 	movw	r3, #5668	@ 0x1624
 800183c:	873b      	strh	r3, [r7, #56]	@ 0x38
	uint8_t HUM_TEMP_DATA[6] = {}; //2 bytes for temp, 2 bytes for humid, then checksum
 800183e:	2300      	movs	r3, #0
 8001840:	633b      	str	r3, [r7, #48]	@ 0x30
 8001842:	2300      	movs	r3, #0
 8001844:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t SI_SENSOR_ON[1] = {0x01};// Solar intensity sensor on opcode
 8001846:	2301      	movs	r3, #1
 8001848:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	//uint8_t SI_SENSOR_OFF[1] = {0x00};//Solar Intensity sensor off opcode
	uint8_t SI_SENSOR_READ[1] = {0x20}; //One time read/ standard command, dont need mode 2 for lowlight
 800184c:	2320      	movs	r3, #32
 800184e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	uint8_t SI_SENSOR_DATA[2] = {};
 8001852:	2300      	movs	r3, #0
 8001854:	84bb      	strh	r3, [r7, #36]	@ 0x24
	//Query temperature and humidity sensor for a one time measurement, automatically shutsdown after single measurement mode
  	if(HAL_I2C_Master_Transmit(&hi2c1, I2C1_SLAVE_ADDR, SEND_DATA_TH, 2, HAL_MAX_DELAY) != HAL_OK){ //Write 00
 8001856:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	2302      	movs	r3, #2
 8001862:	2188      	movs	r1, #136	@ 0x88
 8001864:	4882      	ldr	r0, [pc, #520]	@ (8001a70 <store_data+0x240>)
 8001866:	f001 fc67 	bl	8003138 <HAL_I2C_Master_Transmit>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d006      	beq.n	800187e <store_data+0x4e>
  		printf("ERROR!\n");;
 8001870:	4880      	ldr	r0, [pc, #512]	@ (8001a74 <store_data+0x244>)
 8001872:	f008 fa33 	bl	8009cdc <puts>
  	    HAL_Delay(1000);
 8001876:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800187a:	f000 ff71 	bl	8002760 <HAL_Delay>
  	 }
  	 HAL_Delay(100);
 800187e:	2064      	movs	r0, #100	@ 0x64
 8001880:	f000 ff6e 	bl	8002760 <HAL_Delay>
  	 //Get the response from the sensor, 3rd byte is checksum, don't need that just ignore when combining values
  	 if(HAL_I2C_Master_Receive(&hi2c1, (I2C1_SLAVE_ADDR | 0x01), HUM_TEMP_DATA, 6, HAL_MAX_DELAY)!=HAL_OK){ //read |0x01
 8001884:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001888:	f04f 33ff 	mov.w	r3, #4294967295
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	2306      	movs	r3, #6
 8001890:	2189      	movs	r1, #137	@ 0x89
 8001892:	4877      	ldr	r0, [pc, #476]	@ (8001a70 <store_data+0x240>)
 8001894:	f001 fd44 	bl	8003320 <HAL_I2C_Master_Receive>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d006      	beq.n	80018ac <store_data+0x7c>
  		 printf("ERROR!\n");;
 800189e:	4875      	ldr	r0, [pc, #468]	@ (8001a74 <store_data+0x244>)
 80018a0:	f008 fa1c 	bl	8009cdc <puts>
  		 HAL_Delay(1000);
 80018a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018a8:	f000 ff5a 	bl	8002760 <HAL_Delay>
  	 }
  	 uint16_t temp_raw = HUM_TEMP_DATA[0] << 8 | HUM_TEMP_DATA[1]; 			//Combine the two bytes into one temperature value
 80018ac:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80018b0:	021b      	lsls	r3, r3, #8
 80018b2:	b21a      	sxth	r2, r3
 80018b4:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80018b8:	b21b      	sxth	r3, r3
 80018ba:	4313      	orrs	r3, r2
 80018bc:	b21b      	sxth	r3, r3
 80018be:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  	 uint16_t humidity_raw = HUM_TEMP_DATA[3] << 8 | HUM_TEMP_DATA[4];		//Combine the humidity values raw
 80018c2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	b21a      	sxth	r2, r3
 80018ca:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80018ce:	b21b      	sxth	r3, r3
 80018d0:	4313      	orrs	r3, r2
 80018d2:	b21b      	sxth	r3, r3
 80018d4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
  	 float temp_F = -49 + 315*((float)temp_raw/65535); 						//convert raw reading to Fahrenheit
 80018d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80018dc:	ee07 3a90 	vmov	s15, r3
 80018e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018e4:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8001a78 <store_data+0x248>
 80018e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ec:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8001a7c <store_data+0x24c>
 80018f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f4:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8001a80 <store_data+0x250>
 80018f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018fc:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	 float rel_humidity = 100*((float)humidity_raw/65535); 					//Convert raw reading to humidity%
 8001900:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001904:	ee07 3a90 	vmov	s15, r3
 8001908:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800190c:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8001a78 <store_data+0x248>
 8001910:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001914:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8001a84 <store_data+0x254>
 8001918:	ee67 7a87 	vmul.f32	s15, s15, s14
 800191c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	 //printf("TEMPERATURE: %f\n", temp_F);
	 /*******************************************************TEST*************************************************************/
	 sample_inst->temp = temp_F;											//Update the array for temperature(F)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001924:	609a      	str	r2, [r3, #8]

	 HAL_Delay(500);
 8001926:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800192a:	f000 ff19 	bl	8002760 <HAL_Delay>

	 //printf("HUMIDITY: %f\n", rel_humidity);

	 sample_inst->humid = rel_humidity; 									//Update the array for humidity
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001932:	60da      	str	r2, [r3, #12]
  	 /*************************************************************************************************************************/
	 HAL_Delay(1000);
 8001934:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001938:	f000 ff12 	bl	8002760 <HAL_Delay>

  __HAL_I2C_DISABLE(&hi2c3); //Restarting i2c3 made it work
 800193c:	4b52      	ldr	r3, [pc, #328]	@ (8001a88 <store_data+0x258>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4b51      	ldr	r3, [pc, #324]	@ (8001a88 <store_data+0x258>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0201 	bic.w	r2, r2, #1
 800194a:	601a      	str	r2, [r3, #0]
  HAL_Delay(500);
 800194c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001950:	f000 ff06 	bl	8002760 <HAL_Delay>
  __HAL_I2C_ENABLE(&hi2c3);
 8001954:	4b4c      	ldr	r3, [pc, #304]	@ (8001a88 <store_data+0x258>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4b4b      	ldr	r3, [pc, #300]	@ (8001a88 <store_data+0x258>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 0201 	orr.w	r2, r2, #1
 8001962:	601a      	str	r2, [r3, #0]
  HAL_Delay(100);
 8001964:	2064      	movs	r0, #100	@ 0x64
 8001966:	f000 fefb 	bl	8002760 <HAL_Delay>

   /****************************************************SOLAR INTENSITY****************************************************/
  	//Query Illuminance sensor to get it turned on
  	if(HAL_I2C_Master_Transmit(&hi2c3, I2C2_SLAVE_ADDR, SI_SENSOR_ON, 1, 100) != HAL_OK){ //write
 800196a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800196e:	2364      	movs	r3, #100	@ 0x64
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2301      	movs	r3, #1
 8001974:	2146      	movs	r1, #70	@ 0x46
 8001976:	4844      	ldr	r0, [pc, #272]	@ (8001a88 <store_data+0x258>)
 8001978:	f001 fbde 	bl	8003138 <HAL_I2C_Master_Transmit>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d006      	beq.n	8001990 <store_data+0x160>
  		  	printf("ERROR!\n");
 8001982:	483c      	ldr	r0, [pc, #240]	@ (8001a74 <store_data+0x244>)
 8001984:	f008 f9aa 	bl	8009cdc <puts>
  		  	HAL_Delay(1000);
 8001988:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800198c:	f000 fee8 	bl	8002760 <HAL_Delay>
    } else{
    	//printf("Im so turned on rn\n");
    }

  	HAL_Delay(10);
 8001990:	200a      	movs	r0, #10
 8001992:	f000 fee5 	bl	8002760 <HAL_Delay>
  	//Query sensor to get a reading
  	if(HAL_I2C_Master_Transmit(&hi2c3, I2C2_SLAVE_ADDR, SI_SENSOR_READ, 1, 10) != HAL_OK){ //write
 8001996:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800199a:	230a      	movs	r3, #10
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	2301      	movs	r3, #1
 80019a0:	2146      	movs	r1, #70	@ 0x46
 80019a2:	4839      	ldr	r0, [pc, #228]	@ (8001a88 <store_data+0x258>)
 80019a4:	f001 fbc8 	bl	8003138 <HAL_I2C_Master_Transmit>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d006      	beq.n	80019bc <store_data+0x18c>
  		printf("ERROR!\n");;
 80019ae:	4831      	ldr	r0, [pc, #196]	@ (8001a74 <store_data+0x244>)
 80019b0:	f008 f994 	bl	8009cdc <puts>
  		HAL_Delay(1000);
 80019b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019b8:	f000 fed2 	bl	8002760 <HAL_Delay>
    }

  	HAL_Delay(120);
 80019bc:	2078      	movs	r0, #120	@ 0x78
 80019be:	f000 fecf 	bl	8002760 <HAL_Delay>
  	//Grab measured illuminance from the
  	if(HAL_I2C_Master_Receive(&hi2c3, (I2C2_SLAVE_ADDR | 0x01), SI_SENSOR_DATA, 2, 10)!=HAL_OK){ //Read
 80019c2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80019c6:	230a      	movs	r3, #10
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	2302      	movs	r3, #2
 80019cc:	2147      	movs	r1, #71	@ 0x47
 80019ce:	482e      	ldr	r0, [pc, #184]	@ (8001a88 <store_data+0x258>)
 80019d0:	f001 fca6 	bl	8003320 <HAL_I2C_Master_Receive>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d006      	beq.n	80019e8 <store_data+0x1b8>

  		printf("ERROR!\n");;
 80019da:	4826      	ldr	r0, [pc, #152]	@ (8001a74 <store_data+0x244>)
 80019dc:	f008 f97e 	bl	8009cdc <puts>
  		HAL_Delay(1000);
 80019e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019e4:	f000 febc 	bl	8002760 <HAL_Delay>
    }

  	HAL_Delay(100);
 80019e8:	2064      	movs	r0, #100	@ 0x64
 80019ea:	f000 feb9 	bl	8002760 <HAL_Delay>
  	//printf("Got here #3\n");
  	uint16_t raw_intensity = SI_SENSOR_DATA[0] << 8 | SI_SENSOR_DATA[1]; 	//format the sensor data 16 bits
 80019ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80019f2:	021b      	lsls	r3, r3, #8
 80019f4:	b21a      	sxth	r2, r3
 80019f6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	4313      	orrs	r3, r2
 80019fe:	b21b      	sxth	r3, r3
 8001a00:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  	int intensity = (int)raw_intensity/1.2; 								// cast binary value to a int for conversion formula,
 8001a04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fd8f 	bl	800052c <__aeabi_i2d>
 8001a0e:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8001a12:	4b1e      	ldr	r3, [pc, #120]	@ (8001a8c <store_data+0x25c>)
 8001a14:	f7fe ff1e 	bl	8000854 <__aeabi_ddiv>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f7ff f89e 	bl	8000b60 <__aeabi_d2iz>
 8001a24:	4603      	mov	r3, r0
 8001a26:	63fb      	str	r3, [r7, #60]	@ 0x3c

  	//printf("SOLAR INTENSITY: %d\n", intensity); 							//pprint it oooooout


  	sample_inst->irrad = intensity;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a2c:	611a      	str	r2, [r3, #16]


  	RTC_TimeTypeDef sTime;
  	RTC_DateTypeDef sDate;
  	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001a2e:	f107 0310 	add.w	r3, r7, #16
 8001a32:	2200      	movs	r2, #0
 8001a34:	4619      	mov	r1, r3
 8001a36:	4816      	ldr	r0, [pc, #88]	@ (8001a90 <store_data+0x260>)
 8001a38:	f006 f974 	bl	8007d24 <HAL_RTC_GetTime>
  	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); 						//Put this because RTC locks up after callling GetTime for protection, unlock it by calling this
 8001a3c:	f107 030c 	add.w	r3, r7, #12
 8001a40:	2200      	movs	r2, #0
 8001a42:	4619      	mov	r1, r3
 8001a44:	4812      	ldr	r0, [pc, #72]	@ (8001a90 <store_data+0x260>)
 8001a46:	f006 fa65 	bl	8007f14 <HAL_RTC_GetDate>

  	//Update sample structure array instance with the date and time.
  	sample_inst->day = sDate.Date;
 8001a4a:	7bba      	ldrb	r2, [r7, #14]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	701a      	strb	r2, [r3, #0]
  	sample_inst->month = sDate.Month;
 8001a50:	7b7a      	ldrb	r2, [r7, #13]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	705a      	strb	r2, [r3, #1]
  	sample_inst->year = sDate.Year;
 8001a56:	7bfa      	ldrb	r2, [r7, #15]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	709a      	strb	r2, [r3, #2]

  	sample_inst->minutes = sTime.Minutes;
 8001a5c:	7c7a      	ldrb	r2, [r7, #17]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	711a      	strb	r2, [r3, #4]
  	sample_inst->hours = sTime.Hours;
 8001a62:	7c3a      	ldrb	r2, [r7, #16]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	70da      	strb	r2, [r3, #3]

  	//printf("%d/%d/%d\n", sDate.Month, sDate.Date, sDate.Year);
  	//printf("%d:%d:%d\n", sTime.Hours, sTime.Minutes, sTime.Seconds);

}
 8001a68:	bf00      	nop
 8001a6a:	3750      	adds	r7, #80	@ 0x50
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20003a5c 	.word	0x20003a5c
 8001a74:	0800bdd0 	.word	0x0800bdd0
 8001a78:	477fff00 	.word	0x477fff00
 8001a7c:	439d8000 	.word	0x439d8000
 8001a80:	42440000 	.word	0x42440000
 8001a84:	42c80000 	.word	0x42c80000
 8001a88:	20003b04 	.word	0x20003b04
 8001a8c:	3ff33333 	.word	0x3ff33333
 8001a90:	20003b58 	.word	0x20003b58

08001a94 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d102      	bne.n	8001aaa <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8001aa4:	4b04      	ldr	r3, [pc, #16]	@ (8001ab8 <BSP_PB_Callback+0x24>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]
  }
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	20003a58 	.word	0x20003a58

08001abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac0:	b672      	cpsid	i
}
 8001ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <Error_Handler+0x8>

08001ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ace:	4b0a      	ldr	r3, [pc, #40]	@ (8001af8 <HAL_MspInit+0x30>)
 8001ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ad4:	4a08      	ldr	r2, [pc, #32]	@ (8001af8 <HAL_MspInit+0x30>)
 8001ad6:	f043 0304 	orr.w	r3, r3, #4
 8001ada:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001ade:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <HAL_MspInit+0x30>)
 8001ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	46020c00 	.word	0x46020c00

08001afc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b0be      	sub	sp, #248	@ 0xf8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b14:	f107 0320 	add.w	r3, r7, #32
 8001b18:	22c0      	movs	r2, #192	@ 0xc0
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f008 f9bd 	bl	8009e9c <memset>
  if(hi2c->Instance==I2C1)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a73      	ldr	r2, [pc, #460]	@ (8001cf4 <HAL_I2C_MspInit+0x1f8>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d146      	bne.n	8001bba <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b2c:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b3e:	f107 0320 	add.w	r3, r7, #32
 8001b42:	4618      	mov	r0, r3
 8001b44:	f003 fc08 	bl	8005358 <HAL_RCCEx_PeriphCLKConfig>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001b4e:	f7ff ffb5 	bl	8001abc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b52:	4b69      	ldr	r3, [pc, #420]	@ (8001cf8 <HAL_I2C_MspInit+0x1fc>)
 8001b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b58:	4a67      	ldr	r2, [pc, #412]	@ (8001cf8 <HAL_I2C_MspInit+0x1fc>)
 8001b5a:	f043 0302 	orr.w	r3, r3, #2
 8001b5e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b62:	4b65      	ldr	r3, [pc, #404]	@ (8001cf8 <HAL_I2C_MspInit+0x1fc>)
 8001b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	61fb      	str	r3, [r7, #28]
 8001b6e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8001b70:	2348      	movs	r3, #72	@ 0x48
 8001b72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b76:	2312      	movs	r3, #18
 8001b78:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	2300      	movs	r3, #0
 8001b84:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b88:	2304      	movs	r3, #4
 8001b8a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b92:	4619      	mov	r1, r3
 8001b94:	4859      	ldr	r0, [pc, #356]	@ (8001cfc <HAL_I2C_MspInit+0x200>)
 8001b96:	f001 f843 	bl	8002c20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b9a:	4b57      	ldr	r3, [pc, #348]	@ (8001cf8 <HAL_I2C_MspInit+0x1fc>)
 8001b9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ba0:	4a55      	ldr	r2, [pc, #340]	@ (8001cf8 <HAL_I2C_MspInit+0x1fc>)
 8001ba2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ba6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001baa:	4b53      	ldr	r3, [pc, #332]	@ (8001cf8 <HAL_I2C_MspInit+0x1fc>)
 8001bac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001bb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bb4:	61bb      	str	r3, [r7, #24]
 8001bb6:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001bb8:	e097      	b.n	8001cea <HAL_I2C_MspInit+0x1ee>
  else if(hi2c->Instance==I2C2)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a50      	ldr	r2, [pc, #320]	@ (8001d00 <HAL_I2C_MspInit+0x204>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d147      	bne.n	8001c54 <HAL_I2C_MspInit+0x158>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001bc4:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001bc8:	f04f 0300 	mov.w	r3, #0
 8001bcc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bd6:	f107 0320 	add.w	r3, r7, #32
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f003 fbbc 	bl	8005358 <HAL_RCCEx_PeriphCLKConfig>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8001be6:	f7ff ff69 	bl	8001abc <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bea:	4b43      	ldr	r3, [pc, #268]	@ (8001cf8 <HAL_I2C_MspInit+0x1fc>)
 8001bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bf0:	4a41      	ldr	r2, [pc, #260]	@ (8001cf8 <HAL_I2C_MspInit+0x1fc>)
 8001bf2:	f043 0302 	orr.w	r3, r3, #2
 8001bf6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bfa:	4b3f      	ldr	r3, [pc, #252]	@ (8001cf8 <HAL_I2C_MspInit+0x1fc>)
 8001bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001c08:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001c0c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c10:	2312      	movs	r3, #18
 8001c12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c22:	2304      	movs	r3, #4
 8001c24:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c28:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4833      	ldr	r0, [pc, #204]	@ (8001cfc <HAL_I2C_MspInit+0x200>)
 8001c30:	f000 fff6 	bl	8002c20 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c34:	4b30      	ldr	r3, [pc, #192]	@ (8001cf8 <HAL_I2C_MspInit+0x1fc>)
 8001c36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c3a:	4a2f      	ldr	r2, [pc, #188]	@ (8001cf8 <HAL_I2C_MspInit+0x1fc>)
 8001c3c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c40:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001c44:	4b2c      	ldr	r3, [pc, #176]	@ (8001cf8 <HAL_I2C_MspInit+0x1fc>)
 8001c46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]
}
 8001c52:	e04a      	b.n	8001cea <HAL_I2C_MspInit+0x1ee>
  else if(hi2c->Instance==I2C3)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a2a      	ldr	r2, [pc, #168]	@ (8001d04 <HAL_I2C_MspInit+0x208>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d145      	bne.n	8001cea <HAL_I2C_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001c5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c62:	f04f 0300 	mov.w	r3, #0
 8001c66:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c70:	f107 0320 	add.w	r3, r7, #32
 8001c74:	4618      	mov	r0, r3
 8001c76:	f003 fb6f 	bl	8005358 <HAL_RCCEx_PeriphCLKConfig>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_I2C_MspInit+0x188>
      Error_Handler();
 8001c80:	f7ff ff1c 	bl	8001abc <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c84:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf8 <HAL_I2C_MspInit+0x1fc>)
 8001c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c8a:	4a1b      	ldr	r2, [pc, #108]	@ (8001cf8 <HAL_I2C_MspInit+0x1fc>)
 8001c8c:	f043 0304 	orr.w	r3, r3, #4
 8001c90:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c94:	4b18      	ldr	r3, [pc, #96]	@ (8001cf8 <HAL_I2C_MspInit+0x1fc>)
 8001c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ca8:	2312      	movs	r3, #18
 8001caa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cba:	2304      	movs	r3, #4
 8001cbc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4810      	ldr	r0, [pc, #64]	@ (8001d08 <HAL_I2C_MspInit+0x20c>)
 8001cc8:	f000 ffaa 	bl	8002c20 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf8 <HAL_I2C_MspInit+0x1fc>)
 8001cce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001cd2:	4a09      	ldr	r2, [pc, #36]	@ (8001cf8 <HAL_I2C_MspInit+0x1fc>)
 8001cd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cd8:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001cdc:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <HAL_I2C_MspInit+0x1fc>)
 8001cde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
}
 8001cea:	bf00      	nop
 8001cec:	37f8      	adds	r7, #248	@ 0xf8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40005400 	.word	0x40005400
 8001cf8:	46020c00 	.word	0x46020c00
 8001cfc:	42020400 	.word	0x42020400
 8001d00:	40005800 	.word	0x40005800
 8001d04:	46002800 	.word	0x46002800
 8001d08:	42020800 	.word	0x42020800

08001d0c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b0ba      	sub	sp, #232	@ 0xe8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d24:	f107 0310 	add.w	r3, r7, #16
 8001d28:	22c0      	movs	r2, #192	@ 0xc0
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f008 f8b5 	bl	8009e9c <memset>
  if(hrtc->Instance==RTC)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a31      	ldr	r2, [pc, #196]	@ (8001dfc <HAL_RTC_MspInit+0xf0>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d15b      	bne.n	8001df4 <HAL_RTC_MspInit+0xe8>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d3c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001d48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d50:	f107 0310 	add.w	r3, r7, #16
 8001d54:	4618      	mov	r0, r3
 8001d56:	f003 faff 	bl	8005358 <HAL_RCCEx_PeriphCLKConfig>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <HAL_RTC_MspInit+0x58>
    {
      Error_Handler();
 8001d60:	f7ff feac 	bl	8001abc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d64:	4b26      	ldr	r3, [pc, #152]	@ (8001e00 <HAL_RTC_MspInit+0xf4>)
 8001d66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d6a:	4a25      	ldr	r2, [pc, #148]	@ (8001e00 <HAL_RTC_MspInit+0xf4>)
 8001d6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d70:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001d74:	4b22      	ldr	r3, [pc, #136]	@ (8001e00 <HAL_RTC_MspInit+0xf4>)
 8001d76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001d7a:	4a21      	ldr	r2, [pc, #132]	@ (8001e00 <HAL_RTC_MspInit+0xf4>)
 8001d7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d80:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001d84:	4b1e      	ldr	r3, [pc, #120]	@ (8001e00 <HAL_RTC_MspInit+0xf4>)
 8001d86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001d8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8001d92:	4b1b      	ldr	r3, [pc, #108]	@ (8001e00 <HAL_RTC_MspInit+0xf4>)
 8001d94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001d98:	4a19      	ldr	r2, [pc, #100]	@ (8001e00 <HAL_RTC_MspInit+0xf4>)
 8001d9a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d9e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da2:	4b17      	ldr	r3, [pc, #92]	@ (8001e00 <HAL_RTC_MspInit+0xf4>)
 8001da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001da8:	4a15      	ldr	r2, [pc, #84]	@ (8001e00 <HAL_RTC_MspInit+0xf4>)
 8001daa:	f043 0302 	orr.w	r3, r3, #2
 8001dae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001db2:	4b13      	ldr	r3, [pc, #76]	@ (8001e00 <HAL_RTC_MspInit+0xf4>)
 8001db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration
    PB2     ------> RTC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4809      	ldr	r0, [pc, #36]	@ (8001e04 <HAL_RTC_MspInit+0xf8>)
 8001de0:	f000 ff1e 	bl	8002c20 <HAL_GPIO_Init>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001de4:	2200      	movs	r2, #0
 8001de6:	2100      	movs	r1, #0
 8001de8:	2002      	movs	r0, #2
 8001dea:	f000 fdb5 	bl	8002958 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001dee:	2002      	movs	r0, #2
 8001df0:	f000 fdcc 	bl	800298c <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001df4:	bf00      	nop
 8001df6:	37e8      	adds	r7, #232	@ 0xe8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	46007800 	.word	0x46007800
 8001e00:	46020c00 	.word	0x46020c00
 8001e04:	42020400 	.word	0x42020400

08001e08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b0ba      	sub	sp, #232	@ 0xe8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e20:	f107 0310 	add.w	r3, r7, #16
 8001e24:	22c0      	movs	r2, #192	@ 0xc0
 8001e26:	2100      	movs	r1, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f008 f837 	bl	8009e9c <memset>
  if(hspi->Instance==SPI1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a27      	ldr	r2, [pc, #156]	@ (8001ed0 <HAL_SPI_MspInit+0xc8>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d146      	bne.n	8001ec6 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001e38:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001e3c:	f04f 0300 	mov.w	r3, #0
 8001e40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8001e44:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001e48:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e4c:	f107 0310 	add.w	r3, r7, #16
 8001e50:	4618      	mov	r0, r3
 8001e52:	f003 fa81 	bl	8005358 <HAL_RCCEx_PeriphCLKConfig>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001e5c:	f7ff fe2e 	bl	8001abc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e60:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed4 <HAL_SPI_MspInit+0xcc>)
 8001e62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001e66:	4a1b      	ldr	r2, [pc, #108]	@ (8001ed4 <HAL_SPI_MspInit+0xcc>)
 8001e68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e6c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001e70:	4b18      	ldr	r3, [pc, #96]	@ (8001ed4 <HAL_SPI_MspInit+0xcc>)
 8001e72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001e76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7e:	4b15      	ldr	r3, [pc, #84]	@ (8001ed4 <HAL_SPI_MspInit+0xcc>)
 8001e80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e84:	4a13      	ldr	r2, [pc, #76]	@ (8001ed4 <HAL_SPI_MspInit+0xcc>)
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e8e:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <HAL_SPI_MspInit+0xcc>)
 8001e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8001e9c:	2382      	movs	r3, #130	@ 0x82
 8001e9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eb4:	2305      	movs	r3, #5
 8001eb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eba:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4805      	ldr	r0, [pc, #20]	@ (8001ed8 <HAL_SPI_MspInit+0xd0>)
 8001ec2:	f000 fead 	bl	8002c20 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001ec6:	bf00      	nop
 8001ec8:	37e8      	adds	r7, #232	@ 0xe8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40013000 	.word	0x40013000
 8001ed4:	46020c00 	.word	0x46020c00
 8001ed8:	42020000 	.word	0x42020000

08001edc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b0ba      	sub	sp, #232	@ 0xe8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	60da      	str	r2, [r3, #12]
 8001ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ef4:	f107 0310 	add.w	r3, r7, #16
 8001ef8:	22c0      	movs	r2, #192	@ 0xc0
 8001efa:	2100      	movs	r1, #0
 8001efc:	4618      	mov	r0, r3
 8001efe:	f007 ffcd 	bl	8009e9c <memset>
  if(huart->Instance==USART3)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a26      	ldr	r2, [pc, #152]	@ (8001fa0 <HAL_UART_MspInit+0xc4>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d145      	bne.n	8001f98 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f0c:	f04f 0204 	mov.w	r2, #4
 8001f10:	f04f 0300 	mov.w	r3, #0
 8001f14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f1c:	f107 0310 	add.w	r3, r7, #16
 8001f20:	4618      	mov	r0, r3
 8001f22:	f003 fa19 	bl	8005358 <HAL_RCCEx_PeriphCLKConfig>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001f2c:	f7ff fdc6 	bl	8001abc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f30:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa4 <HAL_UART_MspInit+0xc8>)
 8001f32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f36:	4a1b      	ldr	r2, [pc, #108]	@ (8001fa4 <HAL_UART_MspInit+0xc8>)
 8001f38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f3c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001f40:	4b18      	ldr	r3, [pc, #96]	@ (8001fa4 <HAL_UART_MspInit+0xc8>)
 8001f42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f4e:	4b15      	ldr	r3, [pc, #84]	@ (8001fa4 <HAL_UART_MspInit+0xc8>)
 8001f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f54:	4a13      	ldr	r2, [pc, #76]	@ (8001fa4 <HAL_UART_MspInit+0xc8>)
 8001f56:	f043 0304 	orr.w	r3, r3, #4
 8001f5a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f5e:	4b11      	ldr	r3, [pc, #68]	@ (8001fa4 <HAL_UART_MspInit+0xc8>)
 8001f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f6c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f74:	2302      	movs	r3, #2
 8001f76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f80:	2300      	movs	r3, #0
 8001f82:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f86:	2307      	movs	r3, #7
 8001f88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f8c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f90:	4619      	mov	r1, r3
 8001f92:	4805      	ldr	r0, [pc, #20]	@ (8001fa8 <HAL_UART_MspInit+0xcc>)
 8001f94:	f000 fe44 	bl	8002c20 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001f98:	bf00      	nop
 8001f9a:	37e8      	adds	r7, #232	@ 0xe8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40004800 	.word	0x40004800
 8001fa4:	46020c00 	.word	0x46020c00
 8001fa8:	42020800 	.word	0x42020800

08001fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <NMI_Handler+0x4>

08001fb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb8:	bf00      	nop
 8001fba:	e7fd      	b.n	8001fb8 <HardFault_Handler+0x4>

08001fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc0:	bf00      	nop
 8001fc2:	e7fd      	b.n	8001fc0 <MemManage_Handler+0x4>

08001fc4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc8:	bf00      	nop
 8001fca:	e7fd      	b.n	8001fc8 <BusFault_Handler+0x4>

08001fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd0:	bf00      	nop
 8001fd2:	e7fd      	b.n	8001fd0 <UsageFault_Handler+0x4>

08001fd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002002:	f000 fb8d 	bl	8002720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC non-secure interrupt.
  */
void RTC_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002010:	4802      	ldr	r0, [pc, #8]	@ (800201c <RTC_IRQHandler+0x10>)
 8002012:	f006 f94f 	bl	80082b4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20003b58 	.word	0x20003b58

08002020 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8002024:	2000      	movs	r0, #0
 8002026:	f000 f9df 	bl	80023e8 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}

0800202e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0
  return 1;
 8002032:	2301      	movs	r3, #1
}
 8002034:	4618      	mov	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <_kill>:

int _kill(int pid, int sig)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002048:	f007 ff7a 	bl	8009f40 <__errno>
 800204c:	4603      	mov	r3, r0
 800204e:	2216      	movs	r2, #22
 8002050:	601a      	str	r2, [r3, #0]
  return -1;
 8002052:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <_exit>:

void _exit (int status)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002066:	f04f 31ff 	mov.w	r1, #4294967295
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff ffe7 	bl	800203e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002070:	bf00      	nop
 8002072:	e7fd      	b.n	8002070 <_exit+0x12>

08002074 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	e00a      	b.n	800209c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002086:	f3af 8000 	nop.w
 800208a:	4601      	mov	r1, r0
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	60ba      	str	r2, [r7, #8]
 8002092:	b2ca      	uxtb	r2, r1
 8002094:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	3301      	adds	r3, #1
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	dbf0      	blt.n	8002086 <_read+0x12>
  }

  return len;
 80020a4:	687b      	ldr	r3, [r7, #4]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b086      	sub	sp, #24
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	60f8      	str	r0, [r7, #12]
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	e009      	b.n	80020d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	60ba      	str	r2, [r7, #8]
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f000 fa07 	bl	80024dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	3301      	adds	r3, #1
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	429a      	cmp	r2, r3
 80020da:	dbf1      	blt.n	80020c0 <_write+0x12>
  }
  return len;
 80020dc:	687b      	ldr	r3, [r7, #4]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <_close>:

int _close(int file)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800210e:	605a      	str	r2, [r3, #4]
  return 0;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <_isatty>:

int _isatty(int file)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002126:	2301      	movs	r3, #1
}
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
	...

08002150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002158:	4a14      	ldr	r2, [pc, #80]	@ (80021ac <_sbrk+0x5c>)
 800215a:	4b15      	ldr	r3, [pc, #84]	@ (80021b0 <_sbrk+0x60>)
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002164:	4b13      	ldr	r3, [pc, #76]	@ (80021b4 <_sbrk+0x64>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d102      	bne.n	8002172 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800216c:	4b11      	ldr	r3, [pc, #68]	@ (80021b4 <_sbrk+0x64>)
 800216e:	4a12      	ldr	r2, [pc, #72]	@ (80021b8 <_sbrk+0x68>)
 8002170:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002172:	4b10      	ldr	r3, [pc, #64]	@ (80021b4 <_sbrk+0x64>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	429a      	cmp	r2, r3
 800217e:	d207      	bcs.n	8002190 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002180:	f007 fede 	bl	8009f40 <__errno>
 8002184:	4603      	mov	r3, r0
 8002186:	220c      	movs	r2, #12
 8002188:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800218a:	f04f 33ff 	mov.w	r3, #4294967295
 800218e:	e009      	b.n	80021a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002190:	4b08      	ldr	r3, [pc, #32]	@ (80021b4 <_sbrk+0x64>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002196:	4b07      	ldr	r3, [pc, #28]	@ (80021b4 <_sbrk+0x64>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	4a05      	ldr	r2, [pc, #20]	@ (80021b4 <_sbrk+0x64>)
 80021a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021a2:	68fb      	ldr	r3, [r7, #12]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20040000 	.word	0x20040000
 80021b0:	00000400 	.word	0x00000400
 80021b4:	20003cac 	.word	0x20003cac
 80021b8:	20003ea8 	.word	0x20003ea8

080021bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021c0:	4b18      	ldr	r3, [pc, #96]	@ (8002224 <SystemInit+0x68>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c6:	4a17      	ldr	r2, [pc, #92]	@ (8002224 <SystemInit+0x68>)
 80021c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80021d0:	4b15      	ldr	r3, [pc, #84]	@ (8002228 <SystemInit+0x6c>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80021d6:	4b14      	ldr	r3, [pc, #80]	@ (8002228 <SystemInit+0x6c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80021dc:	4b12      	ldr	r3, [pc, #72]	@ (8002228 <SystemInit+0x6c>)
 80021de:	2200      	movs	r2, #0
 80021e0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80021e2:	4b11      	ldr	r3, [pc, #68]	@ (8002228 <SystemInit+0x6c>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80021e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002228 <SystemInit+0x6c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a0e      	ldr	r2, [pc, #56]	@ (8002228 <SystemInit+0x6c>)
 80021ee:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80021f2:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80021f6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80021f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002228 <SystemInit+0x6c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80021fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002228 <SystemInit+0x6c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a09      	ldr	r2, [pc, #36]	@ (8002228 <SystemInit+0x6c>)
 8002204:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002208:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800220a:	4b07      	ldr	r3, [pc, #28]	@ (8002228 <SystemInit+0x6c>)
 800220c:	2200      	movs	r2, #0
 800220e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002210:	4b04      	ldr	r3, [pc, #16]	@ (8002224 <SystemInit+0x68>)
 8002212:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002216:	609a      	str	r2, [r3, #8]
  #endif
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	e000ed00 	.word	0xe000ed00
 8002228:	46020c00 	.word	0x46020c00

0800222c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800222c:	480d      	ldr	r0, [pc, #52]	@ (8002264 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800222e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002230:	f7ff ffc4 	bl	80021bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002234:	480c      	ldr	r0, [pc, #48]	@ (8002268 <LoopForever+0x6>)
  ldr r1, =_edata
 8002236:	490d      	ldr	r1, [pc, #52]	@ (800226c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002238:	4a0d      	ldr	r2, [pc, #52]	@ (8002270 <LoopForever+0xe>)
  movs r3, #0
 800223a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800223c:	e002      	b.n	8002244 <LoopCopyDataInit>

0800223e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800223e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002242:	3304      	adds	r3, #4

08002244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002248:	d3f9      	bcc.n	800223e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800224a:	4a0a      	ldr	r2, [pc, #40]	@ (8002274 <LoopForever+0x12>)
  ldr r4, =_ebss
 800224c:	4c0a      	ldr	r4, [pc, #40]	@ (8002278 <LoopForever+0x16>)
  movs r3, #0
 800224e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002250:	e001      	b.n	8002256 <LoopFillZerobss>

08002252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002254:	3204      	adds	r2, #4

08002256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002258:	d3fb      	bcc.n	8002252 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800225a:	f007 fe77 	bl	8009f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800225e:	f7fe fe33 	bl	8000ec8 <main>

08002262 <LoopForever>:

LoopForever:
    b LoopForever
 8002262:	e7fe      	b.n	8002262 <LoopForever>
  ldr   r0, =_estack
 8002264:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800226c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002270:	0800c260 	.word	0x0800c260
  ldr r2, =_sbss
 8002274:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002278:	20003ea4 	.word	0x20003ea4

0800227c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800227c:	e7fe      	b.n	800227c <ADC1_IRQHandler>
	...

08002280 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08a      	sub	sp, #40	@ 0x28
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <BSP_LED_Init+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002294:	f06f 0301 	mvn.w	r3, #1
 8002298:	627b      	str	r3, [r7, #36]	@ 0x24
 800229a:	e023      	b.n	80022e4 <BSP_LED_Init+0x64>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10e      	bne.n	80022c0 <BSP_LED_Init+0x40>
    {
      LED2_GPIO_CLK_ENABLE();
 80022a2:	4b13      	ldr	r3, [pc, #76]	@ (80022f0 <BSP_LED_Init+0x70>)
 80022a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022a8:	4a11      	ldr	r2, [pc, #68]	@ (80022f0 <BSP_LED_Init+0x70>)
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80022b2:	4b0f      	ldr	r3, [pc, #60]	@ (80022f0 <BSP_LED_Init+0x70>)
 80022b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	68fb      	ldr	r3, [r7, #12]

      LED3_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80022c0:	2320      	movs	r3, #32
 80022c2:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80022c4:	2301      	movs	r3, #1
 80022c6:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022cc:	2303      	movs	r3, #3
 80022ce:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	4a08      	ldr	r2, [pc, #32]	@ (80022f4 <BSP_LED_Init+0x74>)
 80022d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d8:	f107 0210 	add.w	r2, r7, #16
 80022dc:	4611      	mov	r1, r2
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 fc9e 	bl	8002c20 <HAL_GPIO_Init>
  }

  return ret;
 80022e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3728      	adds	r7, #40	@ 0x28
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	46020c00 	.word	0x46020c00
 80022f4:	2000000c 	.word	0x2000000c

080022f8 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	460a      	mov	r2, r1
 8002302:	71fb      	strb	r3, [r7, #7]
 8002304:	4613      	mov	r3, r2
 8002306:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002308:	4b30      	ldr	r3, [pc, #192]	@ (80023cc <BSP_PB_Init+0xd4>)
 800230a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800230e:	4a2f      	ldr	r2, [pc, #188]	@ (80023cc <BSP_PB_Init+0xd4>)
 8002310:	f043 0304 	orr.w	r3, r3, #4
 8002314:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002318:	4b2c      	ldr	r3, [pc, #176]	@ (80023cc <BSP_PB_Init+0xd4>)
 800231a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800231e:	f003 0304 	and.w	r3, r3, #4
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002326:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800232a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800232c:	2302      	movs	r3, #2
 800232e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002330:	2302      	movs	r3, #2
 8002332:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8002334:	79bb      	ldrb	r3, [r7, #6]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10c      	bne.n	8002354 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800233a:	2300      	movs	r3, #0
 800233c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	4a23      	ldr	r2, [pc, #140]	@ (80023d0 <BSP_PB_Init+0xd8>)
 8002342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002346:	f107 020c 	add.w	r2, r7, #12
 800234a:	4611      	mov	r1, r2
 800234c:	4618      	mov	r0, r3
 800234e:	f000 fc67 	bl	8002c20 <HAL_GPIO_Init>
 8002352:	e036      	b.n	80023c2 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002354:	4b1f      	ldr	r3, [pc, #124]	@ (80023d4 <BSP_PB_Init+0xdc>)
 8002356:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	4a1d      	ldr	r2, [pc, #116]	@ (80023d0 <BSP_PB_Init+0xd8>)
 800235c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002360:	f107 020c 	add.w	r2, r7, #12
 8002364:	4611      	mov	r1, r2
 8002366:	4618      	mov	r0, r3
 8002368:	f000 fc5a 	bl	8002c20 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800236c:	79fa      	ldrb	r2, [r7, #7]
 800236e:	4613      	mov	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4413      	add	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4a18      	ldr	r2, [pc, #96]	@ (80023d8 <BSP_PB_Init+0xe0>)
 8002378:	441a      	add	r2, r3
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	4917      	ldr	r1, [pc, #92]	@ (80023dc <BSP_PB_Init+0xe4>)
 800237e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002382:	4619      	mov	r1, r3
 8002384:	4610      	mov	r0, r2
 8002386:	f000 fbef 	bl	8002b68 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800238a:	79fa      	ldrb	r2, [r7, #7]
 800238c:	4613      	mov	r3, r2
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4a10      	ldr	r2, [pc, #64]	@ (80023d8 <BSP_PB_Init+0xe0>)
 8002396:	1898      	adds	r0, r3, r2
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	4a11      	ldr	r2, [pc, #68]	@ (80023e0 <BSP_PB_Init+0xe8>)
 800239c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a0:	461a      	mov	r2, r3
 80023a2:	2100      	movs	r1, #0
 80023a4:	f000 fbb4 	bl	8002b10 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80023a8:	2018      	movs	r0, #24
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	4a0d      	ldr	r2, [pc, #52]	@ (80023e4 <BSP_PB_Init+0xec>)
 80023ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b2:	2200      	movs	r2, #0
 80023b4:	4619      	mov	r1, r3
 80023b6:	f000 facf 	bl	8002958 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80023ba:	2318      	movs	r3, #24
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 fae5 	bl	800298c <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3720      	adds	r7, #32
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	46020c00 	.word	0x46020c00
 80023d0:	20000010 	.word	0x20000010
 80023d4:	10110000 	.word	0x10110000
 80023d8:	20003cb0 	.word	0x20003cb0
 80023dc:	0800be30 	.word	0x0800be30
 80023e0:	20000014 	.word	0x20000014
 80023e4:	20000018 	.word	0x20000018

080023e8 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80023f2:	79fa      	ldrb	r2, [r7, #7]
 80023f4:	4613      	mov	r3, r2
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	4413      	add	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4a04      	ldr	r2, [pc, #16]	@ (8002410 <BSP_PB_IRQHandler+0x28>)
 80023fe:	4413      	add	r3, r2
 8002400:	4618      	mov	r0, r3
 8002402:	f000 fbc5 	bl	8002b90 <HAL_EXTI_IRQHandler>
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20003cb0 	.word	0x20003cb0

08002414 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	6039      	str	r1, [r7, #0]
 800241e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002420:	2300      	movs	r3, #0
 8002422:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800242a:	f06f 0301 	mvn.w	r3, #1
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	e018      	b.n	8002464 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	2294      	movs	r2, #148	@ 0x94
 8002436:	fb02 f303 	mul.w	r3, r2, r3
 800243a:	4a0d      	ldr	r2, [pc, #52]	@ (8002470 <BSP_COM_Init+0x5c>)
 800243c:	4413      	add	r3, r2
 800243e:	4618      	mov	r0, r3
 8002440:	f000 f870 	bl	8002524 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	2294      	movs	r2, #148	@ 0x94
 8002448:	fb02 f303 	mul.w	r3, r2, r3
 800244c:	4a08      	ldr	r2, [pc, #32]	@ (8002470 <BSP_COM_Init+0x5c>)
 800244e:	4413      	add	r3, r2
 8002450:	6839      	ldr	r1, [r7, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f000 f80e 	bl	8002474 <MX_USART1_Init>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800245e:	f06f 0303 	mvn.w	r3, #3
 8002462:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002464:	68fb      	ldr	r3, [r7, #12]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20003cbc 	.word	0x20003cbc

08002474 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 800247e:	4b16      	ldr	r3, [pc, #88]	@ (80024d8 <MX_USART1_Init+0x64>)
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	220c      	movs	r2, #12
 8002492:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	895b      	ldrh	r3, [r3, #10]
 8002498:	461a      	mov	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	891b      	ldrh	r3, [r3, #8]
 80024aa:	461a      	mov	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	899b      	ldrh	r3, [r3, #12]
 80024b4:	461a      	mov	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80024c0:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f006 f8eb 	bl	80086a4 <HAL_UART_Init>
 80024ce:	4603      	mov	r3, r0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000008 	.word	0x20000008

080024dc <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80024e4:	4b09      	ldr	r3, [pc, #36]	@ (800250c <__io_putchar+0x30>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	461a      	mov	r2, r3
 80024ea:	2394      	movs	r3, #148	@ 0x94
 80024ec:	fb02 f303 	mul.w	r3, r2, r3
 80024f0:	4a07      	ldr	r2, [pc, #28]	@ (8002510 <__io_putchar+0x34>)
 80024f2:	1898      	adds	r0, r3, r2
 80024f4:	1d39      	adds	r1, r7, #4
 80024f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024fa:	2201      	movs	r2, #1
 80024fc:	f006 f922 	bl	8008744 <HAL_UART_Transmit>
  return ch;
 8002500:	687b      	ldr	r3, [r7, #4]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20003d50 	.word	0x20003d50
 8002510:	20003cbc 	.word	0x20003cbc

08002514 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002518:	2000      	movs	r0, #0
 800251a:	f7ff fabb 	bl	8001a94 <BSP_PB_Callback>
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08a      	sub	sp, #40	@ 0x28
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800252c:	4b27      	ldr	r3, [pc, #156]	@ (80025cc <COM1_MspInit+0xa8>)
 800252e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002532:	4a26      	ldr	r2, [pc, #152]	@ (80025cc <COM1_MspInit+0xa8>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800253c:	4b23      	ldr	r3, [pc, #140]	@ (80025cc <COM1_MspInit+0xa8>)
 800253e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800254a:	4b20      	ldr	r3, [pc, #128]	@ (80025cc <COM1_MspInit+0xa8>)
 800254c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002550:	4a1e      	ldr	r2, [pc, #120]	@ (80025cc <COM1_MspInit+0xa8>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800255a:	4b1c      	ldr	r3, [pc, #112]	@ (80025cc <COM1_MspInit+0xa8>)
 800255c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002568:	4b18      	ldr	r3, [pc, #96]	@ (80025cc <COM1_MspInit+0xa8>)
 800256a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800256e:	4a17      	ldr	r2, [pc, #92]	@ (80025cc <COM1_MspInit+0xa8>)
 8002570:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002574:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002578:	4b14      	ldr	r3, [pc, #80]	@ (80025cc <COM1_MspInit+0xa8>)
 800257a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800257e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8002586:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800258a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800258c:	2302      	movs	r3, #2
 800258e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002590:	2302      	movs	r3, #2
 8002592:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002594:	2301      	movs	r3, #1
 8002596:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002598:	2307      	movs	r3, #7
 800259a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	4619      	mov	r1, r3
 80025a2:	480b      	ldr	r0, [pc, #44]	@ (80025d0 <COM1_MspInit+0xac>)
 80025a4:	f000 fb3c 	bl	8002c20 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 80025a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025ac:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80025ae:	2302      	movs	r3, #2
 80025b0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80025b2:	2307      	movs	r3, #7
 80025b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80025b6:	f107 0314 	add.w	r3, r7, #20
 80025ba:	4619      	mov	r1, r3
 80025bc:	4804      	ldr	r0, [pc, #16]	@ (80025d0 <COM1_MspInit+0xac>)
 80025be:	f000 fb2f 	bl	8002c20 <HAL_GPIO_Init>
}
 80025c2:	bf00      	nop
 80025c4:	3728      	adds	r7, #40	@ 0x28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	46020c00 	.word	0x46020c00
 80025d0:	42020000 	.word	0x42020000

080025d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025d8:	4b12      	ldr	r3, [pc, #72]	@ (8002624 <HAL_Init+0x50>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a11      	ldr	r2, [pc, #68]	@ (8002624 <HAL_Init+0x50>)
 80025de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025e4:	2003      	movs	r0, #3
 80025e6:	f000 f9ac 	bl	8002942 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80025ea:	f002 fcd3 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 80025ee:	4602      	mov	r2, r0
 80025f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002628 <HAL_Init+0x54>)
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	490c      	ldr	r1, [pc, #48]	@ (800262c <HAL_Init+0x58>)
 80025fa:	5ccb      	ldrb	r3, [r1, r3]
 80025fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002600:	4a0b      	ldr	r2, [pc, #44]	@ (8002630 <HAL_Init+0x5c>)
 8002602:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002604:	2004      	movs	r0, #4
 8002606:	f000 f9f1 	bl	80029ec <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800260a:	200f      	movs	r0, #15
 800260c:	f000 f812 	bl	8002634 <HAL_InitTick>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e002      	b.n	8002620 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800261a:	f7ff fa55 	bl	8001ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40022000 	.word	0x40022000
 8002628:	46020c00 	.word	0x46020c00
 800262c:	0800bdd8 	.word	0x0800bdd8
 8002630:	20000004 	.word	0x20000004

08002634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002640:	4b33      	ldr	r3, [pc, #204]	@ (8002710 <HAL_InitTick+0xdc>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e05c      	b.n	8002706 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 800264c:	4b31      	ldr	r3, [pc, #196]	@ (8002714 <HAL_InitTick+0xe0>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b04      	cmp	r3, #4
 8002656:	d10c      	bne.n	8002672 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002658:	4b2f      	ldr	r3, [pc, #188]	@ (8002718 <HAL_InitTick+0xe4>)
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	4b2c      	ldr	r3, [pc, #176]	@ (8002710 <HAL_InitTick+0xdc>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	4619      	mov	r1, r3
 8002662:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002666:	fbb3 f3f1 	udiv	r3, r3, r1
 800266a:	fbb2 f3f3 	udiv	r3, r2, r3
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	e037      	b.n	80026e2 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002672:	f000 fa13 	bl	8002a9c <HAL_SYSTICK_GetCLKSourceConfig>
 8002676:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d023      	beq.n	80026c6 <HAL_InitTick+0x92>
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2b02      	cmp	r3, #2
 8002682:	d82d      	bhi.n	80026e0 <HAL_InitTick+0xac>
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_InitTick+0x5e>
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d00d      	beq.n	80026ac <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002690:	e026      	b.n	80026e0 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002692:	4b21      	ldr	r3, [pc, #132]	@ (8002718 <HAL_InitTick+0xe4>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	4b1e      	ldr	r3, [pc, #120]	@ (8002710 <HAL_InitTick+0xdc>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	4619      	mov	r1, r3
 800269c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80026a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80026a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a8:	60fb      	str	r3, [r7, #12]
        break;
 80026aa:	e01a      	b.n	80026e2 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80026ac:	4b18      	ldr	r3, [pc, #96]	@ (8002710 <HAL_InitTick+0xdc>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	461a      	mov	r2, r3
 80026b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80026ba:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80026be:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c2:	60fb      	str	r3, [r7, #12]
        break;
 80026c4:	e00d      	b.n	80026e2 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80026c6:	4b12      	ldr	r3, [pc, #72]	@ (8002710 <HAL_InitTick+0xdc>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	461a      	mov	r2, r3
 80026cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80026d4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80026d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026dc:	60fb      	str	r3, [r7, #12]
        break;
 80026de:	e000      	b.n	80026e2 <HAL_InitTick+0xae>
        break;
 80026e0:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 f960 	bl	80029a8 <HAL_SYSTICK_Config>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e009      	b.n	8002706 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026f2:	2200      	movs	r2, #0
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	f04f 30ff 	mov.w	r0, #4294967295
 80026fa:	f000 f92d 	bl	8002958 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80026fe:	4a07      	ldr	r2, [pc, #28]	@ (800271c <HAL_InitTick+0xe8>)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000020 	.word	0x20000020
 8002714:	e000e010 	.word	0xe000e010
 8002718:	20000004 	.word	0x20000004
 800271c:	2000001c 	.word	0x2000001c

08002720 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002724:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <HAL_IncTick+0x20>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	461a      	mov	r2, r3
 800272a:	4b06      	ldr	r3, [pc, #24]	@ (8002744 <HAL_IncTick+0x24>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4413      	add	r3, r2
 8002730:	4a04      	ldr	r2, [pc, #16]	@ (8002744 <HAL_IncTick+0x24>)
 8002732:	6013      	str	r3, [r2, #0]
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000020 	.word	0x20000020
 8002744:	20003d54 	.word	0x20003d54

08002748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return uwTick;
 800274c:	4b03      	ldr	r3, [pc, #12]	@ (800275c <HAL_GetTick+0x14>)
 800274e:	681b      	ldr	r3, [r3, #0]
}
 8002750:	4618      	mov	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	20003d54 	.word	0x20003d54

08002760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002768:	f7ff ffee 	bl	8002748 <HAL_GetTick>
 800276c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002778:	d005      	beq.n	8002786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800277a:	4b0a      	ldr	r3, [pc, #40]	@ (80027a4 <HAL_Delay+0x44>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4413      	add	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002786:	bf00      	nop
 8002788:	f7ff ffde 	bl	8002748 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	429a      	cmp	r2, r3
 8002796:	d8f7      	bhi.n	8002788 <HAL_Delay+0x28>
  {
  }
}
 8002798:	bf00      	nop
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000020 	.word	0x20000020

080027a8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80027ac:	4b05      	ldr	r3, [pc, #20]	@ (80027c4 <HAL_SuspendTick+0x1c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a04      	ldr	r2, [pc, #16]	@ (80027c4 <HAL_SuspendTick+0x1c>)
 80027b2:	f023 0302 	bic.w	r3, r3, #2
 80027b6:	6013      	str	r3, [r2, #0]
}
 80027b8:	bf00      	nop
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	e000e010 	.word	0xe000e010

080027c8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80027cc:	4b05      	ldr	r3, [pc, #20]	@ (80027e4 <HAL_ResumeTick+0x1c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a04      	ldr	r2, [pc, #16]	@ (80027e4 <HAL_ResumeTick+0x1c>)
 80027d2:	f043 0302 	orr.w	r3, r3, #2
 80027d6:	6013      	str	r3, [r2, #0]
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	e000e010 	.word	0xe000e010

080027e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027f8:	4b0c      	ldr	r3, [pc, #48]	@ (800282c <__NVIC_SetPriorityGrouping+0x44>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002804:	4013      	ands	r3, r2
 8002806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002810:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002814:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800281a:	4a04      	ldr	r2, [pc, #16]	@ (800282c <__NVIC_SetPriorityGrouping+0x44>)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	60d3      	str	r3, [r2, #12]
}
 8002820:	bf00      	nop
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	e000ed00 	.word	0xe000ed00

08002830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002834:	4b04      	ldr	r3, [pc, #16]	@ (8002848 <__NVIC_GetPriorityGrouping+0x18>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	0a1b      	lsrs	r3, r3, #8
 800283a:	f003 0307 	and.w	r3, r3, #7
}
 800283e:	4618      	mov	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	4603      	mov	r3, r0
 8002854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285a:	2b00      	cmp	r3, #0
 800285c:	db0b      	blt.n	8002876 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800285e:	79fb      	ldrb	r3, [r7, #7]
 8002860:	f003 021f 	and.w	r2, r3, #31
 8002864:	4907      	ldr	r1, [pc, #28]	@ (8002884 <__NVIC_EnableIRQ+0x38>)
 8002866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286a:	095b      	lsrs	r3, r3, #5
 800286c:	2001      	movs	r0, #1
 800286e:	fa00 f202 	lsl.w	r2, r0, r2
 8002872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	e000e100 	.word	0xe000e100

08002888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	6039      	str	r1, [r7, #0]
 8002892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002898:	2b00      	cmp	r3, #0
 800289a:	db0a      	blt.n	80028b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	490c      	ldr	r1, [pc, #48]	@ (80028d4 <__NVIC_SetPriority+0x4c>)
 80028a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a6:	0112      	lsls	r2, r2, #4
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	440b      	add	r3, r1
 80028ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b0:	e00a      	b.n	80028c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	4908      	ldr	r1, [pc, #32]	@ (80028d8 <__NVIC_SetPriority+0x50>)
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	3b04      	subs	r3, #4
 80028c0:	0112      	lsls	r2, r2, #4
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	440b      	add	r3, r1
 80028c6:	761a      	strb	r2, [r3, #24]
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000e100 	.word	0xe000e100
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028dc:	b480      	push	{r7}
 80028de:	b089      	sub	sp, #36	@ 0x24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f1c3 0307 	rsb	r3, r3, #7
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	bf28      	it	cs
 80028fa:	2304      	movcs	r3, #4
 80028fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3304      	adds	r3, #4
 8002902:	2b06      	cmp	r3, #6
 8002904:	d902      	bls.n	800290c <NVIC_EncodePriority+0x30>
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	3b03      	subs	r3, #3
 800290a:	e000      	b.n	800290e <NVIC_EncodePriority+0x32>
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002910:	f04f 32ff 	mov.w	r2, #4294967295
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43da      	mvns	r2, r3
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	401a      	ands	r2, r3
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002924:	f04f 31ff 	mov.w	r1, #4294967295
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	fa01 f303 	lsl.w	r3, r1, r3
 800292e:	43d9      	mvns	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002934:	4313      	orrs	r3, r2
         );
}
 8002936:	4618      	mov	r0, r3
 8002938:	3724      	adds	r7, #36	@ 0x24
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b082      	sub	sp, #8
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7ff ff4c 	bl	80027e8 <__NVIC_SetPriorityGrouping>
}
 8002950:	bf00      	nop
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
 8002964:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002966:	f7ff ff63 	bl	8002830 <__NVIC_GetPriorityGrouping>
 800296a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	68b9      	ldr	r1, [r7, #8]
 8002970:	6978      	ldr	r0, [r7, #20]
 8002972:	f7ff ffb3 	bl	80028dc <NVIC_EncodePriority>
 8002976:	4602      	mov	r2, r0
 8002978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800297c:	4611      	mov	r1, r2
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff ff82 	bl	8002888 <__NVIC_SetPriority>
}
 8002984:	bf00      	nop
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff ff56 	bl	800284c <__NVIC_EnableIRQ>
}
 80029a0:	bf00      	nop
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029b8:	d301      	bcc.n	80029be <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80029ba:	2301      	movs	r3, #1
 80029bc:	e00d      	b.n	80029da <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80029be:	4a0a      	ldr	r2, [pc, #40]	@ (80029e8 <HAL_SYSTICK_Config+0x40>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80029c6:	4b08      	ldr	r3, [pc, #32]	@ (80029e8 <HAL_SYSTICK_Config+0x40>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80029cc:	4b06      	ldr	r3, [pc, #24]	@ (80029e8 <HAL_SYSTICK_Config+0x40>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a05      	ldr	r2, [pc, #20]	@ (80029e8 <HAL_SYSTICK_Config+0x40>)
 80029d2:	f043 0303 	orr.w	r3, r3, #3
 80029d6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	e000e010 	.word	0xe000e010

080029ec <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d844      	bhi.n	8002a84 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80029fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002a00 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80029fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a00:	08002a23 	.word	0x08002a23
 8002a04:	08002a41 	.word	0x08002a41
 8002a08:	08002a63 	.word	0x08002a63
 8002a0c:	08002a85 	.word	0x08002a85
 8002a10:	08002a15 	.word	0x08002a15
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002a14:	4b1f      	ldr	r3, [pc, #124]	@ (8002a94 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a1e      	ldr	r2, [pc, #120]	@ (8002a94 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002a1a:	f043 0304 	orr.w	r3, r3, #4
 8002a1e:	6013      	str	r3, [r2, #0]
      break;
 8002a20:	e031      	b.n	8002a86 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002a22:	4b1c      	ldr	r3, [pc, #112]	@ (8002a94 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a1b      	ldr	r2, [pc, #108]	@ (8002a94 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002a28:	f023 0304 	bic.w	r3, r3, #4
 8002a2c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8002a98 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a34:	4a18      	ldr	r2, [pc, #96]	@ (8002a98 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002a36:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002a3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002a3e:	e022      	b.n	8002a86 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002a40:	4b14      	ldr	r3, [pc, #80]	@ (8002a94 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a13      	ldr	r2, [pc, #76]	@ (8002a94 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002a46:	f023 0304 	bic.w	r3, r3, #4
 8002a4a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002a4c:	4b12      	ldr	r3, [pc, #72]	@ (8002a98 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a52:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002a56:	4a10      	ldr	r2, [pc, #64]	@ (8002a98 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002a58:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002a60:	e011      	b.n	8002a86 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002a62:	4b0c      	ldr	r3, [pc, #48]	@ (8002a94 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a0b      	ldr	r2, [pc, #44]	@ (8002a94 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002a68:	f023 0304 	bic.w	r3, r3, #4
 8002a6c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a98 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a74:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002a78:	4a07      	ldr	r2, [pc, #28]	@ (8002a98 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002a7a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002a82:	e000      	b.n	8002a86 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002a84:	bf00      	nop
  }
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	e000e010 	.word	0xe000e010
 8002a98:	46020c00 	.word	0x46020c00

08002a9c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002aa2:	4b19      	ldr	r3, [pc, #100]	@ (8002b08 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d002      	beq.n	8002ab4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002aae:	2304      	movs	r3, #4
 8002ab0:	607b      	str	r3, [r7, #4]
 8002ab2:	e021      	b.n	8002af8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8002ab4:	4b15      	ldr	r3, [pc, #84]	@ (8002b0c <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8002ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002aba:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002abe:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ac6:	d011      	beq.n	8002aec <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ace:	d810      	bhi.n	8002af2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d004      	beq.n	8002ae0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002adc:	d003      	beq.n	8002ae6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002ade:	e008      	b.n	8002af2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	607b      	str	r3, [r7, #4]
        break;
 8002ae4:	e008      	b.n	8002af8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	607b      	str	r3, [r7, #4]
        break;
 8002aea:	e005      	b.n	8002af8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002aec:	2302      	movs	r3, #2
 8002aee:	607b      	str	r3, [r7, #4]
        break;
 8002af0:	e002      	b.n	8002af8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002af2:	2300      	movs	r3, #0
 8002af4:	607b      	str	r3, [r7, #4]
        break;
 8002af6:	bf00      	nop
    }
  }
  return systick_source;
 8002af8:	687b      	ldr	r3, [r7, #4]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	e000e010 	.word	0xe000e010
 8002b0c:	46020c00 	.word	0x46020c00

08002b10 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	607a      	str	r2, [r7, #4]
 8002b1c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002b22:	7afb      	ldrb	r3, [r7, #11]
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d011      	beq.n	8002b4c <HAL_EXTI_RegisterCallback+0x3c>
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	dc13      	bgt.n	8002b54 <HAL_EXTI_RegisterCallback+0x44>
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d002      	beq.n	8002b36 <HAL_EXTI_RegisterCallback+0x26>
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d007      	beq.n	8002b44 <HAL_EXTI_RegisterCallback+0x34>
 8002b34:	e00e      	b.n	8002b54 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	609a      	str	r2, [r3, #8]
      break;
 8002b42:	e00a      	b.n	8002b5a <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	605a      	str	r2, [r3, #4]
      break;
 8002b4a:	e006      	b.n	8002b5a <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	609a      	str	r2, [r3, #8]
      break;
 8002b52:	e002      	b.n	8002b5a <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	75fb      	strb	r3, [r7, #23]
      break;
 8002b58:	bf00      	nop
  }

  return status;
 8002b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	371c      	adds	r7, #28
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e003      	b.n	8002b84 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002b82:	2300      	movs	r3, #0
  }
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	0c1b      	lsrs	r3, r3, #16
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 031f 	and.w	r3, r3, #31
 8002bac:	2201      	movs	r2, #1
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	015a      	lsls	r2, r3, #5
 8002bb8:	4b17      	ldr	r3, [pc, #92]	@ (8002c18 <HAL_EXTI_IRQHandler+0x88>)
 8002bba:	4413      	add	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d009      	beq.n	8002be2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	015a      	lsls	r2, r3, #5
 8002be6:	4b0d      	ldr	r3, [pc, #52]	@ (8002c1c <HAL_EXTI_IRQHandler+0x8c>)
 8002be8:	4413      	add	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d009      	beq.n	8002c10 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	4798      	blx	r3
    }
  }
}
 8002c10:	bf00      	nop
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	4602200c 	.word	0x4602200c
 8002c1c:	46022010 	.word	0x46022010

08002c20 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b089      	sub	sp, #36	@ 0x24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002c32:	e1ba      	b.n	8002faa <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	2101      	movs	r1, #1
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c40:	4013      	ands	r3, r2
 8002c42:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 81aa 	beq.w	8002fa4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a55      	ldr	r2, [pc, #340]	@ (8002da8 <HAL_GPIO_Init+0x188>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d15d      	bne.n	8002d14 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002c5e:	2201      	movs	r2, #1
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69fa      	ldr	r2, [r7, #28]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f003 0201 	and.w	r2, r3, #1
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	69fa      	ldr	r2, [r7, #28]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69fa      	ldr	r2, [r7, #28]
 8002c86:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002c88:	4a48      	ldr	r2, [pc, #288]	@ (8002dac <HAL_GPIO_Init+0x18c>)
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c90:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002c92:	4a46      	ldr	r2, [pc, #280]	@ (8002dac <HAL_GPIO_Init+0x18c>)
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	4413      	add	r3, r2
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	08da      	lsrs	r2, r3, #3
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	3208      	adds	r2, #8
 8002ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002caa:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	220f      	movs	r2, #15
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69fa      	ldr	r2, [r7, #28]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	220b      	movs	r2, #11
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	69fa      	ldr	r2, [r7, #28]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	08da      	lsrs	r2, r3, #3
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	3208      	adds	r2, #8
 8002cde:	69f9      	ldr	r1, [r7, #28]
 8002ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	2203      	movs	r2, #3
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69fa      	ldr	r2, [r7, #28]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	2202      	movs	r2, #2
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	69fa      	ldr	r2, [r7, #28]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	69fa      	ldr	r2, [r7, #28]
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	e067      	b.n	8002de4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d003      	beq.n	8002d24 <HAL_GPIO_Init+0x104>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b12      	cmp	r3, #18
 8002d22:	d145      	bne.n	8002db0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	08da      	lsrs	r2, r3, #3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3208      	adds	r2, #8
 8002d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d30:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	220f      	movs	r2, #15
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	69fa      	ldr	r2, [r7, #28]
 8002d44:	4013      	ands	r3, r2
 8002d46:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	f003 020f 	and.w	r2, r3, #15
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	69fa      	ldr	r2, [r7, #28]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	08da      	lsrs	r2, r3, #3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3208      	adds	r2, #8
 8002d6a:	69f9      	ldr	r1, [r7, #28]
 8002d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	69fa      	ldr	r2, [r7, #28]
 8002d84:	4013      	ands	r3, r2
 8002d86:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 0203 	and.w	r2, r3, #3
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	69fa      	ldr	r2, [r7, #28]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	69fa      	ldr	r2, [r7, #28]
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	e01e      	b.n	8002de4 <HAL_GPIO_Init+0x1c4>
 8002da6:	bf00      	nop
 8002da8:	46020000 	.word	0x46020000
 8002dac:	0800be34 	.word	0x0800be34
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	2203      	movs	r2, #3
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	69fa      	ldr	r2, [r7, #28]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 0203 	and.w	r2, r3, #3
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	69fa      	ldr	r2, [r7, #28]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	69fa      	ldr	r2, [r7, #28]
 8002de2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d00b      	beq.n	8002e04 <HAL_GPIO_Init+0x1e4>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d007      	beq.n	8002e04 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002df8:	2b11      	cmp	r3, #17
 8002dfa:	d003      	beq.n	8002e04 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b12      	cmp	r3, #18
 8002e02:	d130      	bne.n	8002e66 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	2203      	movs	r2, #3
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	69fa      	ldr	r2, [r7, #28]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	69fa      	ldr	r2, [r7, #28]
 8002e32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43db      	mvns	r3, r3
 8002e44:	69fa      	ldr	r2, [r7, #28]
 8002e46:	4013      	ands	r3, r2
 8002e48:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	091b      	lsrs	r3, r3, #4
 8002e50:	f003 0201 	and.w	r2, r3, #1
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	69fa      	ldr	r2, [r7, #28]
 8002e64:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d017      	beq.n	8002e9e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	2203      	movs	r2, #3
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	69fa      	ldr	r2, [r7, #28]
 8002e82:	4013      	ands	r3, r2
 8002e84:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	69fa      	ldr	r2, [r7, #28]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	69fa      	ldr	r2, [r7, #28]
 8002e9c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d07c      	beq.n	8002fa4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002eaa:	4a47      	ldr	r2, [pc, #284]	@ (8002fc8 <HAL_GPIO_Init+0x3a8>)
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	089b      	lsrs	r3, r3, #2
 8002eb0:	3318      	adds	r3, #24
 8002eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	220f      	movs	r2, #15
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	69fa      	ldr	r2, [r7, #28]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	0a9a      	lsrs	r2, r3, #10
 8002ed2:	4b3e      	ldr	r3, [pc, #248]	@ (8002fcc <HAL_GPIO_Init+0x3ac>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	f002 0203 	and.w	r2, r2, #3
 8002edc:	00d2      	lsls	r2, r2, #3
 8002ede:	4093      	lsls	r3, r2
 8002ee0:	69fa      	ldr	r2, [r7, #28]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002ee6:	4938      	ldr	r1, [pc, #224]	@ (8002fc8 <HAL_GPIO_Init+0x3a8>)
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	089b      	lsrs	r3, r3, #2
 8002eec:	3318      	adds	r3, #24
 8002eee:	69fa      	ldr	r2, [r7, #28]
 8002ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002ef4:	4b34      	ldr	r3, [pc, #208]	@ (8002fc8 <HAL_GPIO_Init+0x3a8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69fa      	ldr	r2, [r7, #28]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002f10:	69fa      	ldr	r2, [r7, #28]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002f18:	4a2b      	ldr	r2, [pc, #172]	@ (8002fc8 <HAL_GPIO_Init+0x3a8>)
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002f1e:	4b2a      	ldr	r3, [pc, #168]	@ (8002fc8 <HAL_GPIO_Init+0x3a8>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	43db      	mvns	r3, r3
 8002f28:	69fa      	ldr	r2, [r7, #28]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8002f3a:	69fa      	ldr	r2, [r7, #28]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002f42:	4a21      	ldr	r2, [pc, #132]	@ (8002fc8 <HAL_GPIO_Init+0x3a8>)
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002f48:	4b1f      	ldr	r3, [pc, #124]	@ (8002fc8 <HAL_GPIO_Init+0x3a8>)
 8002f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f4e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	43db      	mvns	r3, r3
 8002f54:	69fa      	ldr	r2, [r7, #28]
 8002f56:	4013      	ands	r3, r2
 8002f58:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002f66:	69fa      	ldr	r2, [r7, #28]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002f6e:	4a16      	ldr	r2, [pc, #88]	@ (8002fc8 <HAL_GPIO_Init+0x3a8>)
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002f76:	4b14      	ldr	r3, [pc, #80]	@ (8002fc8 <HAL_GPIO_Init+0x3a8>)
 8002f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f7c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69fa      	ldr	r2, [r7, #28]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002f94:	69fa      	ldr	r2, [r7, #28]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002fc8 <HAL_GPIO_Init+0x3a8>)
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f47f ae3d 	bne.w	8002c34 <HAL_GPIO_Init+0x14>
  }
}
 8002fba:	bf00      	nop
 8002fbc:	bf00      	nop
 8002fbe:	3724      	adds	r7, #36	@ 0x24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	46022000 	.word	0x46022000
 8002fcc:	002f7f7f 	.word	0x002f7f7f

08002fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	807b      	strh	r3, [r7, #2]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fe0:	787b      	ldrb	r3, [r7, #1]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fe6:	887a      	ldrh	r2, [r7, #2]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002fec:	e002      	b.n	8002ff4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002fee:	887a      	ldrh	r2, [r7, #2]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e08d      	b.n	800312e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fe fd68 	bl	8001afc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2224      	movs	r2, #36	@ 0x24
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0201 	bic.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003050:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003060:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d107      	bne.n	800307a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	e006      	b.n	8003088 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003086:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	2b02      	cmp	r3, #2
 800308e:	d108      	bne.n	80030a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800309e:	605a      	str	r2, [r3, #4]
 80030a0:	e007      	b.n	80030b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80030c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691a      	ldr	r2, [r3, #16]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	69d9      	ldr	r1, [r3, #28]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1a      	ldr	r2, [r3, #32]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0201 	orr.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2220      	movs	r2, #32
 800311a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b088      	sub	sp, #32
 800313c:	af02      	add	r7, sp, #8
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	607a      	str	r2, [r7, #4]
 8003142:	461a      	mov	r2, r3
 8003144:	460b      	mov	r3, r1
 8003146:	817b      	strh	r3, [r7, #10]
 8003148:	4613      	mov	r3, r2
 800314a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b20      	cmp	r3, #32
 8003156:	f040 80da 	bne.w	800330e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <HAL_I2C_Master_Transmit+0x30>
 8003164:	2302      	movs	r3, #2
 8003166:	e0d3      	b.n	8003310 <HAL_I2C_Master_Transmit+0x1d8>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003170:	f7ff faea 	bl	8002748 <HAL_GetTick>
 8003174:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	2319      	movs	r3, #25
 800317c:	2201      	movs	r2, #1
 800317e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 f9e6 	bl	8003554 <I2C_WaitOnFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e0be      	b.n	8003310 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2221      	movs	r2, #33	@ 0x21
 8003196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2210      	movs	r2, #16
 800319e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	893a      	ldrh	r2, [r7, #8]
 80031b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031be:	b29b      	uxth	r3, r3
 80031c0:	2bff      	cmp	r3, #255	@ 0xff
 80031c2:	d90e      	bls.n	80031e2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	22ff      	movs	r2, #255	@ 0xff
 80031c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	8979      	ldrh	r1, [r7, #10]
 80031d2:	4b51      	ldr	r3, [pc, #324]	@ (8003318 <HAL_I2C_Master_Transmit+0x1e0>)
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 fc0a 	bl	80039f4 <I2C_TransferConfig>
 80031e0:	e06c      	b.n	80032bc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	8979      	ldrh	r1, [r7, #10]
 80031f4:	4b48      	ldr	r3, [pc, #288]	@ (8003318 <HAL_I2C_Master_Transmit+0x1e0>)
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 fbf9 	bl	80039f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003202:	e05b      	b.n	80032bc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	6a39      	ldr	r1, [r7, #32]
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 f9fc 	bl	8003606 <I2C_WaitOnTXISFlagUntilTimeout>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e07b      	b.n	8003310 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321c:	781a      	ldrb	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003232:	b29b      	uxth	r3, r3
 8003234:	3b01      	subs	r3, #1
 8003236:	b29a      	uxth	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800324c:	b29b      	uxth	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d034      	beq.n	80032bc <HAL_I2C_Master_Transmit+0x184>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003256:	2b00      	cmp	r3, #0
 8003258:	d130      	bne.n	80032bc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	2200      	movs	r2, #0
 8003262:	2180      	movs	r1, #128	@ 0x80
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 f975 	bl	8003554 <I2C_WaitOnFlagUntilTimeout>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e04d      	b.n	8003310 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003278:	b29b      	uxth	r3, r3
 800327a:	2bff      	cmp	r3, #255	@ 0xff
 800327c:	d90e      	bls.n	800329c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	22ff      	movs	r2, #255	@ 0xff
 8003282:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003288:	b2da      	uxtb	r2, r3
 800328a:	8979      	ldrh	r1, [r7, #10]
 800328c:	2300      	movs	r3, #0
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 fbad 	bl	80039f4 <I2C_TransferConfig>
 800329a:	e00f      	b.n	80032bc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	8979      	ldrh	r1, [r7, #10]
 80032ae:	2300      	movs	r3, #0
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 fb9c 	bl	80039f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d19e      	bne.n	8003204 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	6a39      	ldr	r1, [r7, #32]
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 f9e2 	bl	8003694 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e01a      	b.n	8003310 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2220      	movs	r2, #32
 80032e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6859      	ldr	r1, [r3, #4]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4b0b      	ldr	r3, [pc, #44]	@ (800331c <HAL_I2C_Master_Transmit+0x1e4>)
 80032ee:	400b      	ands	r3, r1
 80032f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	e000      	b.n	8003310 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800330e:	2302      	movs	r3, #2
  }
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	80002000 	.word	0x80002000
 800331c:	fe00e800 	.word	0xfe00e800

08003320 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af02      	add	r7, sp, #8
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	607a      	str	r2, [r7, #4]
 800332a:	461a      	mov	r2, r3
 800332c:	460b      	mov	r3, r1
 800332e:	817b      	strh	r3, [r7, #10]
 8003330:	4613      	mov	r3, r2
 8003332:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b20      	cmp	r3, #32
 800333e:	f040 80db 	bne.w	80034f8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_I2C_Master_Receive+0x30>
 800334c:	2302      	movs	r3, #2
 800334e:	e0d4      	b.n	80034fa <HAL_I2C_Master_Receive+0x1da>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003358:	f7ff f9f6 	bl	8002748 <HAL_GetTick>
 800335c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	2319      	movs	r3, #25
 8003364:	2201      	movs	r2, #1
 8003366:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 f8f2 	bl	8003554 <I2C_WaitOnFlagUntilTimeout>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e0bf      	b.n	80034fa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2222      	movs	r2, #34	@ 0x22
 800337e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2210      	movs	r2, #16
 8003386:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	893a      	ldrh	r2, [r7, #8]
 800339a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2bff      	cmp	r3, #255	@ 0xff
 80033aa:	d90e      	bls.n	80033ca <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	22ff      	movs	r2, #255	@ 0xff
 80033b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	8979      	ldrh	r1, [r7, #10]
 80033ba:	4b52      	ldr	r3, [pc, #328]	@ (8003504 <HAL_I2C_Master_Receive+0x1e4>)
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 fb16 	bl	80039f4 <I2C_TransferConfig>
 80033c8:	e06d      	b.n	80034a6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	8979      	ldrh	r1, [r7, #10]
 80033dc:	4b49      	ldr	r3, [pc, #292]	@ (8003504 <HAL_I2C_Master_Receive+0x1e4>)
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 fb05 	bl	80039f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80033ea:	e05c      	b.n	80034a6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	6a39      	ldr	r1, [r7, #32]
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 f993 	bl	800371c <I2C_WaitOnRXNEFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e07c      	b.n	80034fa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800341c:	3b01      	subs	r3, #1
 800341e:	b29a      	uxth	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003436:	b29b      	uxth	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	d034      	beq.n	80034a6 <HAL_I2C_Master_Receive+0x186>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003440:	2b00      	cmp	r3, #0
 8003442:	d130      	bne.n	80034a6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	2200      	movs	r2, #0
 800344c:	2180      	movs	r1, #128	@ 0x80
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 f880 	bl	8003554 <I2C_WaitOnFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e04d      	b.n	80034fa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003462:	b29b      	uxth	r3, r3
 8003464:	2bff      	cmp	r3, #255	@ 0xff
 8003466:	d90e      	bls.n	8003486 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	22ff      	movs	r2, #255	@ 0xff
 800346c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003472:	b2da      	uxtb	r2, r3
 8003474:	8979      	ldrh	r1, [r7, #10]
 8003476:	2300      	movs	r3, #0
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 fab8 	bl	80039f4 <I2C_TransferConfig>
 8003484:	e00f      	b.n	80034a6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003494:	b2da      	uxtb	r2, r3
 8003496:	8979      	ldrh	r1, [r7, #10]
 8003498:	2300      	movs	r3, #0
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 faa7 	bl	80039f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d19d      	bne.n	80033ec <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	6a39      	ldr	r1, [r7, #32]
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 f8ed 	bl	8003694 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e01a      	b.n	80034fa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2220      	movs	r2, #32
 80034ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6859      	ldr	r1, [r3, #4]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003508 <HAL_I2C_Master_Receive+0x1e8>)
 80034d8:	400b      	ands	r3, r1
 80034da:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2220      	movs	r2, #32
 80034e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034f4:	2300      	movs	r3, #0
 80034f6:	e000      	b.n	80034fa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80034f8:	2302      	movs	r3, #2
  }
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	80002400 	.word	0x80002400
 8003508:	fe00e800 	.word	0xfe00e800

0800350c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b02      	cmp	r3, #2
 8003520:	d103      	bne.n	800352a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2200      	movs	r2, #0
 8003528:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b01      	cmp	r3, #1
 8003536:	d007      	beq.n	8003548 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0201 	orr.w	r2, r2, #1
 8003546:	619a      	str	r2, [r3, #24]
  }
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	603b      	str	r3, [r7, #0]
 8003560:	4613      	mov	r3, r2
 8003562:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003564:	e03b      	b.n	80035de <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	6839      	ldr	r1, [r7, #0]
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 f962 	bl	8003834 <I2C_IsErrorOccurred>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e041      	b.n	80035fe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003580:	d02d      	beq.n	80035de <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003582:	f7ff f8e1 	bl	8002748 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d302      	bcc.n	8003598 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d122      	bne.n	80035de <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699a      	ldr	r2, [r3, #24]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	4013      	ands	r3, r2
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	bf0c      	ite	eq
 80035a8:	2301      	moveq	r3, #1
 80035aa:	2300      	movne	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	461a      	mov	r2, r3
 80035b0:	79fb      	ldrb	r3, [r7, #7]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d113      	bne.n	80035de <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ba:	f043 0220 	orr.w	r2, r3, #32
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2220      	movs	r2, #32
 80035c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e00f      	b.n	80035fe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699a      	ldr	r2, [r3, #24]
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4013      	ands	r3, r2
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	bf0c      	ite	eq
 80035ee:	2301      	moveq	r3, #1
 80035f0:	2300      	movne	r3, #0
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	461a      	mov	r2, r3
 80035f6:	79fb      	ldrb	r3, [r7, #7]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d0b4      	beq.n	8003566 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b084      	sub	sp, #16
 800360a:	af00      	add	r7, sp, #0
 800360c:	60f8      	str	r0, [r7, #12]
 800360e:	60b9      	str	r1, [r7, #8]
 8003610:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003612:	e033      	b.n	800367c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	68b9      	ldr	r1, [r7, #8]
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 f90b 	bl	8003834 <I2C_IsErrorOccurred>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e031      	b.n	800368c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362e:	d025      	beq.n	800367c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003630:	f7ff f88a 	bl	8002748 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	429a      	cmp	r2, r3
 800363e:	d302      	bcc.n	8003646 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d11a      	bne.n	800367c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b02      	cmp	r3, #2
 8003652:	d013      	beq.n	800367c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003658:	f043 0220 	orr.w	r2, r3, #32
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e007      	b.n	800368c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b02      	cmp	r3, #2
 8003688:	d1c4      	bne.n	8003614 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036a0:	e02f      	b.n	8003702 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	68b9      	ldr	r1, [r7, #8]
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 f8c4 	bl	8003834 <I2C_IsErrorOccurred>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e02d      	b.n	8003712 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b6:	f7ff f847 	bl	8002748 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d302      	bcc.n	80036cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d11a      	bne.n	8003702 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	f003 0320 	and.w	r3, r3, #32
 80036d6:	2b20      	cmp	r3, #32
 80036d8:	d013      	beq.n	8003702 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036de:	f043 0220 	orr.w	r2, r3, #32
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e007      	b.n	8003712 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	f003 0320 	and.w	r3, r3, #32
 800370c:	2b20      	cmp	r3, #32
 800370e:	d1c8      	bne.n	80036a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800372c:	e071      	b.n	8003812 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	68b9      	ldr	r1, [r7, #8]
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 f87e 	bl	8003834 <I2C_IsErrorOccurred>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	f003 0320 	and.w	r3, r3, #32
 800374c:	2b20      	cmp	r3, #32
 800374e:	d13b      	bne.n	80037c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003750:	7dfb      	ldrb	r3, [r7, #23]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d138      	bne.n	80037c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b04      	cmp	r3, #4
 8003762:	d105      	bne.n	8003770 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	f003 0310 	and.w	r3, r3, #16
 800377a:	2b10      	cmp	r3, #16
 800377c:	d121      	bne.n	80037c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2210      	movs	r2, #16
 8003784:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2204      	movs	r2, #4
 800378a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2220      	movs	r2, #32
 8003792:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6859      	ldr	r1, [r3, #4]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	4b24      	ldr	r3, [pc, #144]	@ (8003830 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80037a0:	400b      	ands	r3, r1
 80037a2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	75fb      	strb	r3, [r7, #23]
 80037c0:	e002      	b.n	80037c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80037c8:	f7fe ffbe 	bl	8002748 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d302      	bcc.n	80037de <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d119      	bne.n	8003812 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80037de:	7dfb      	ldrb	r3, [r7, #23]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d116      	bne.n	8003812 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d00f      	beq.n	8003812 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f6:	f043 0220 	orr.w	r2, r3, #32
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2220      	movs	r2, #32
 8003802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b04      	cmp	r3, #4
 800381e:	d002      	beq.n	8003826 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003820:	7dfb      	ldrb	r3, [r7, #23]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d083      	beq.n	800372e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003826:	7dfb      	ldrb	r3, [r7, #23]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	fe00e800 	.word	0xfe00e800

08003834 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08a      	sub	sp, #40	@ 0x28
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003840:	2300      	movs	r3, #0
 8003842:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800384e:	2300      	movs	r3, #0
 8003850:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	f003 0310 	and.w	r3, r3, #16
 800385c:	2b00      	cmp	r3, #0
 800385e:	d068      	beq.n	8003932 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2210      	movs	r2, #16
 8003866:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003868:	e049      	b.n	80038fe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003870:	d045      	beq.n	80038fe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003872:	f7fe ff69 	bl	8002748 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	429a      	cmp	r2, r3
 8003880:	d302      	bcc.n	8003888 <I2C_IsErrorOccurred+0x54>
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d13a      	bne.n	80038fe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003892:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800389a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038aa:	d121      	bne.n	80038f0 <I2C_IsErrorOccurred+0xbc>
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038b2:	d01d      	beq.n	80038f0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80038b4:	7cfb      	ldrb	r3, [r7, #19]
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	d01a      	beq.n	80038f0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038c8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80038ca:	f7fe ff3d 	bl	8002748 <HAL_GetTick>
 80038ce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038d0:	e00e      	b.n	80038f0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80038d2:	f7fe ff39 	bl	8002748 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b19      	cmp	r3, #25
 80038de:	d907      	bls.n	80038f0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	f043 0320 	orr.w	r3, r3, #32
 80038e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80038ee:	e006      	b.n	80038fe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	f003 0320 	and.w	r3, r3, #32
 80038fa:	2b20      	cmp	r3, #32
 80038fc:	d1e9      	bne.n	80038d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	f003 0320 	and.w	r3, r3, #32
 8003908:	2b20      	cmp	r3, #32
 800390a:	d003      	beq.n	8003914 <I2C_IsErrorOccurred+0xe0>
 800390c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0aa      	beq.n	800386a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003914:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003918:	2b00      	cmp	r3, #0
 800391a:	d103      	bne.n	8003924 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2220      	movs	r2, #32
 8003922:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	f043 0304 	orr.w	r3, r3, #4
 800392a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00b      	beq.n	800395c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003954:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00b      	beq.n	800397e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	f043 0308 	orr.w	r3, r3, #8
 800396c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003976:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00b      	beq.n	80039a0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	f043 0302 	orr.w	r3, r3, #2
 800398e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003998:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80039a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d01c      	beq.n	80039e2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f7ff fdaf 	bl	800350c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6859      	ldr	r1, [r3, #4]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	4b0d      	ldr	r3, [pc, #52]	@ (80039f0 <I2C_IsErrorOccurred+0x1bc>)
 80039ba:	400b      	ands	r3, r1
 80039bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	431a      	orrs	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2220      	movs	r2, #32
 80039ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80039e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3728      	adds	r7, #40	@ 0x28
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	fe00e800 	.word	0xfe00e800

080039f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	607b      	str	r3, [r7, #4]
 80039fe:	460b      	mov	r3, r1
 8003a00:	817b      	strh	r3, [r7, #10]
 8003a02:	4613      	mov	r3, r2
 8003a04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a06:	897b      	ldrh	r3, [r7, #10]
 8003a08:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a0c:	7a7b      	ldrb	r3, [r7, #9]
 8003a0e:	041b      	lsls	r3, r3, #16
 8003a10:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a14:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a22:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	0d5b      	lsrs	r3, r3, #21
 8003a2e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003a32:	4b08      	ldr	r3, [pc, #32]	@ (8003a54 <I2C_TransferConfig+0x60>)
 8003a34:	430b      	orrs	r3, r1
 8003a36:	43db      	mvns	r3, r3
 8003a38:	ea02 0103 	and.w	r1, r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a46:	bf00      	nop
 8003a48:	371c      	adds	r7, #28
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	03ff63ff 	.word	0x03ff63ff

08003a58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b20      	cmp	r3, #32
 8003a6c:	d138      	bne.n	8003ae0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e032      	b.n	8003ae2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2224      	movs	r2, #36	@ 0x24
 8003a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0201 	bic.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003aaa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6819      	ldr	r1, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0201 	orr.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	e000      	b.n	8003ae2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ae0:	2302      	movs	r3, #2
  }
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b085      	sub	sp, #20
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b20      	cmp	r3, #32
 8003b02:	d139      	bne.n	8003b78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d101      	bne.n	8003b12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e033      	b.n	8003b7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2224      	movs	r2, #36	@ 0x24
 8003b1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0201 	bic.w	r2, r2, #1
 8003b30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003b40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	021b      	lsls	r3, r3, #8
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0201 	orr.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b74:	2300      	movs	r3, #0
 8003b76:	e000      	b.n	8003b7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b78:	2302      	movs	r3, #2
  }
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
	...

08003b88 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003b94:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	73fb      	strb	r3, [r7, #15]
 8003ba4:	e007      	b.n	8003bb6 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003ba6:	4b07      	ldr	r3, [pc, #28]	@ (8003bc4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f023 0204 	bic.w	r2, r3, #4
 8003bae:	4905      	ldr	r1, [pc, #20]	@ (8003bc4 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	40030400 	.word	0x40030400

08003bc8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003bcc:	4b05      	ldr	r3, [pc, #20]	@ (8003be4 <HAL_ICACHE_Enable+0x1c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a04      	ldr	r2, [pc, #16]	@ (8003be4 <HAL_ICACHE_Enable+0x1c>)
 8003bd2:	f043 0301 	orr.w	r3, r3, #1
 8003bd6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	40030400 	.word	0x40030400

08003be8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003bf0:	4b39      	ldr	r3, [pc, #228]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bf4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bf8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d10b      	bne.n	8003c1a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c08:	d905      	bls.n	8003c16 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003c0a:	4b33      	ldr	r3, [pc, #204]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	4a32      	ldr	r2, [pc, #200]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c14:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	e057      	b.n	8003cca <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c20:	d90a      	bls.n	8003c38 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003c22:	4b2d      	ldr	r3, [pc, #180]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	4a2a      	ldr	r2, [pc, #168]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c34:	60d3      	str	r3, [r2, #12]
 8003c36:	e007      	b.n	8003c48 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003c38:	4b27      	ldr	r3, [pc, #156]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003c40:	4925      	ldr	r1, [pc, #148]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003c48:	4b24      	ldr	r3, [pc, #144]	@ (8003cdc <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a24      	ldr	r2, [pc, #144]	@ (8003ce0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c52:	099b      	lsrs	r3, r3, #6
 8003c54:	2232      	movs	r2, #50	@ 0x32
 8003c56:	fb02 f303 	mul.w	r3, r2, r3
 8003c5a:	4a21      	ldr	r2, [pc, #132]	@ (8003ce0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c60:	099b      	lsrs	r3, r3, #6
 8003c62:	3301      	adds	r3, #1
 8003c64:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003c66:	e002      	b.n	8003c6e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d102      	bne.n	8003c80 <HAL_PWREx_ControlVoltageScaling+0x98>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1f3      	bne.n	8003c68 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d01b      	beq.n	8003cbe <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003c86:	4b15      	ldr	r3, [pc, #84]	@ (8003cdc <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a15      	ldr	r2, [pc, #84]	@ (8003ce0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c90:	099b      	lsrs	r3, r3, #6
 8003c92:	2232      	movs	r2, #50	@ 0x32
 8003c94:	fb02 f303 	mul.w	r3, r2, r3
 8003c98:	4a11      	ldr	r2, [pc, #68]	@ (8003ce0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	099b      	lsrs	r3, r3, #6
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003ca4:	e002      	b.n	8003cac <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003cac:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d102      	bne.n	8003cbe <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1f3      	bne.n	8003ca6 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e000      	b.n	8003cca <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	46020800 	.word	0x46020800
 8003cdc:	20000004 	.word	0x20000004
 8003ce0:	10624dd3 	.word	0x10624dd3

08003ce4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003ce8:	4b04      	ldr	r3, [pc, #16]	@ (8003cfc <HAL_PWREx_GetVoltageRange+0x18>)
 8003cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	46020800 	.word	0x46020800

08003d00 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003d08:	4b22      	ldr	r3, [pc, #136]	@ (8003d94 <HAL_PWREx_ConfigSupply+0x94>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a22      	ldr	r2, [pc, #136]	@ (8003d98 <HAL_PWREx_ConfigSupply+0x98>)
 8003d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d12:	099b      	lsrs	r3, r3, #6
 8003d14:	2232      	movs	r2, #50	@ 0x32
 8003d16:	fb02 f303 	mul.w	r3, r2, r3
 8003d1a:	4a1f      	ldr	r2, [pc, #124]	@ (8003d98 <HAL_PWREx_ConfigSupply+0x98>)
 8003d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d20:	099b      	lsrs	r3, r3, #6
 8003d22:	3301      	adds	r3, #1
 8003d24:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d113      	bne.n	8003d54 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003d9c <HAL_PWREx_ConfigSupply+0x9c>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	4a1a      	ldr	r2, [pc, #104]	@ (8003d9c <HAL_PWREx_ConfigSupply+0x9c>)
 8003d32:	f023 0302 	bic.w	r3, r3, #2
 8003d36:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003d38:	e002      	b.n	8003d40 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003d40:	4b16      	ldr	r3, [pc, #88]	@ (8003d9c <HAL_PWREx_ConfigSupply+0x9c>)
 8003d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d116      	bne.n	8003d7a <HAL_PWREx_ConfigSupply+0x7a>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f3      	bne.n	8003d3a <HAL_PWREx_ConfigSupply+0x3a>
 8003d52:	e012      	b.n	8003d7a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003d54:	4b11      	ldr	r3, [pc, #68]	@ (8003d9c <HAL_PWREx_ConfigSupply+0x9c>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	4a10      	ldr	r2, [pc, #64]	@ (8003d9c <HAL_PWREx_ConfigSupply+0x9c>)
 8003d5a:	f043 0302 	orr.w	r3, r3, #2
 8003d5e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003d60:	e002      	b.n	8003d68 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	3b01      	subs	r3, #1
 8003d66:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003d68:	4b0c      	ldr	r3, [pc, #48]	@ (8003d9c <HAL_PWREx_ConfigSupply+0x9c>)
 8003d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d102      	bne.n	8003d7a <HAL_PWREx_ConfigSupply+0x7a>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f3      	bne.n	8003d62 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e000      	b.n	8003d86 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	20000004 	.word	0x20000004
 8003d98:	10624dd3 	.word	0x10624dd3
 8003d9c:	46020800 	.word	0x46020800

08003da0 <HAL_PWREx_EnterSTOP3Mode>:
  *                     @arg @ref PWR_STOPENTRY_WFE enter Stop mode with Wait
  *                               For Event request.
  * @retval None.
  */
void HAL_PWREx_EnterSTOP3Mode(uint8_t STOPEntry)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	4603      	mov	r3, r0
 8003da8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 3 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, (PWR_CR1_LPMS_0 | PWR_CR1_LPMS_1));
 8003daa:	4b11      	ldr	r3, [pc, #68]	@ (8003df0 <HAL_PWREx_EnterSTOP3Mode+0x50>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f023 0307 	bic.w	r3, r3, #7
 8003db2:	4a0f      	ldr	r2, [pc, #60]	@ (8003df0 <HAL_PWREx_EnterSTOP3Mode+0x50>)
 8003db4:	f043 0303 	orr.w	r3, r3, #3
 8003db8:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003dba:	4b0e      	ldr	r3, [pc, #56]	@ (8003df4 <HAL_PWREx_EnterSTOP3Mode+0x54>)
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	4a0d      	ldr	r2, [pc, #52]	@ (8003df4 <HAL_PWREx_EnterSTOP3Mode+0x54>)
 8003dc0:	f043 0304 	orr.w	r3, r3, #4
 8003dc4:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8003dc6:	79fb      	ldrb	r3, [r7, #7]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d101      	bne.n	8003dd0 <HAL_PWREx_EnterSTOP3Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003dcc:	bf30      	wfi
 8003dce:	e002      	b.n	8003dd6 <HAL_PWREx_EnterSTOP3Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003dd0:	bf40      	sev
    __WFE();
 8003dd2:	bf20      	wfe
    __WFE();
 8003dd4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003dd6:	4b07      	ldr	r3, [pc, #28]	@ (8003df4 <HAL_PWREx_EnterSTOP3Mode+0x54>)
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	4a06      	ldr	r2, [pc, #24]	@ (8003df4 <HAL_PWREx_EnterSTOP3Mode+0x54>)
 8003ddc:	f023 0304 	bic.w	r3, r3, #4
 8003de0:	6113      	str	r3, [r2, #16]
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	46020800 	.word	0x46020800
 8003df4:	e000ed00 	.word	0xe000ed00

08003df8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08e      	sub	sp, #56	@ 0x38
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003e00:	2300      	movs	r3, #0
 8003e02:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d102      	bne.n	8003e12 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	f000 bec8 	b.w	8004ba2 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e12:	4b99      	ldr	r3, [pc, #612]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	f003 030c 	and.w	r3, r3, #12
 8003e1a:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e1c:	4b96      	ldr	r3, [pc, #600]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e20:	f003 0303 	and.w	r3, r3, #3
 8003e24:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0310 	and.w	r3, r3, #16
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 816c 	beq.w	800410c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d007      	beq.n	8003e4a <HAL_RCC_OscConfig+0x52>
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3c:	2b0c      	cmp	r3, #12
 8003e3e:	f040 80de 	bne.w	8003ffe <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	f040 80da 	bne.w	8003ffe <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d102      	bne.n	8003e58 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	f000 bea5 	b.w	8004ba2 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e5c:	4b86      	ldr	r3, [pc, #536]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d004      	beq.n	8003e72 <HAL_RCC_OscConfig+0x7a>
 8003e68:	4b83      	ldr	r3, [pc, #524]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003e70:	e005      	b.n	8003e7e <HAL_RCC_OscConfig+0x86>
 8003e72:	4b81      	ldr	r3, [pc, #516]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8003e74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003e78:	041b      	lsls	r3, r3, #16
 8003e7a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d255      	bcs.n	8003f2e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10a      	bne.n	8003e9e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f001 f9dd 	bl	800524c <RCC_SetFlashLatencyFromMSIRange>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d002      	beq.n	8003e9e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	f000 be82 	b.w	8004ba2 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003e9e:	4b76      	ldr	r3, [pc, #472]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	4a75      	ldr	r2, [pc, #468]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8003ea4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ea8:	6093      	str	r3, [r2, #8]
 8003eaa:	4b73      	ldr	r3, [pc, #460]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb6:	4970      	ldr	r1, [pc, #448]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003ec4:	d309      	bcc.n	8003eda <HAL_RCC_OscConfig+0xe2>
 8003ec6:	4b6c      	ldr	r3, [pc, #432]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f023 021f 	bic.w	r2, r3, #31
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	4969      	ldr	r1, [pc, #420]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60cb      	str	r3, [r1, #12]
 8003ed8:	e07e      	b.n	8003fd8 <HAL_RCC_OscConfig+0x1e0>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	da0a      	bge.n	8003ef8 <HAL_RCC_OscConfig+0x100>
 8003ee2:	4b65      	ldr	r3, [pc, #404]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	015b      	lsls	r3, r3, #5
 8003ef0:	4961      	ldr	r1, [pc, #388]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60cb      	str	r3, [r1, #12]
 8003ef6:	e06f      	b.n	8003fd8 <HAL_RCC_OscConfig+0x1e0>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f00:	d30a      	bcc.n	8003f18 <HAL_RCC_OscConfig+0x120>
 8003f02:	4b5d      	ldr	r3, [pc, #372]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	029b      	lsls	r3, r3, #10
 8003f10:	4959      	ldr	r1, [pc, #356]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60cb      	str	r3, [r1, #12]
 8003f16:	e05f      	b.n	8003fd8 <HAL_RCC_OscConfig+0x1e0>
 8003f18:	4b57      	ldr	r3, [pc, #348]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	03db      	lsls	r3, r3, #15
 8003f26:	4954      	ldr	r1, [pc, #336]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60cb      	str	r3, [r1, #12]
 8003f2c:	e054      	b.n	8003fd8 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003f2e:	4b52      	ldr	r3, [pc, #328]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	4a51      	ldr	r2, [pc, #324]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8003f34:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f38:	6093      	str	r3, [r2, #8]
 8003f3a:	4b4f      	ldr	r3, [pc, #316]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f46:	494c      	ldr	r1, [pc, #304]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f50:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003f54:	d309      	bcc.n	8003f6a <HAL_RCC_OscConfig+0x172>
 8003f56:	4b48      	ldr	r3, [pc, #288]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f023 021f 	bic.w	r2, r3, #31
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	4945      	ldr	r1, [pc, #276]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	60cb      	str	r3, [r1, #12]
 8003f68:	e028      	b.n	8003fbc <HAL_RCC_OscConfig+0x1c4>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	da0a      	bge.n	8003f88 <HAL_RCC_OscConfig+0x190>
 8003f72:	4b41      	ldr	r3, [pc, #260]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	015b      	lsls	r3, r3, #5
 8003f80:	493d      	ldr	r1, [pc, #244]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60cb      	str	r3, [r1, #12]
 8003f86:	e019      	b.n	8003fbc <HAL_RCC_OscConfig+0x1c4>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f90:	d30a      	bcc.n	8003fa8 <HAL_RCC_OscConfig+0x1b0>
 8003f92:	4b39      	ldr	r3, [pc, #228]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	029b      	lsls	r3, r3, #10
 8003fa0:	4935      	ldr	r1, [pc, #212]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60cb      	str	r3, [r1, #12]
 8003fa6:	e009      	b.n	8003fbc <HAL_RCC_OscConfig+0x1c4>
 8003fa8:	4b33      	ldr	r3, [pc, #204]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	03db      	lsls	r3, r3, #15
 8003fb6:	4930      	ldr	r1, [pc, #192]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10a      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f001 f940 	bl	800524c <RCC_SetFlashLatencyFromMSIRange>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	f000 bde5 	b.w	8004ba2 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003fd8:	f001 f8e2 	bl	80051a0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003fdc:	4b27      	ldr	r3, [pc, #156]	@ (800407c <HAL_RCC_OscConfig+0x284>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fe fb27 	bl	8002634 <HAL_InitTick>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8003fec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 808a 	beq.w	800410a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8003ff6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ffa:	f000 bdd2 	b.w	8004ba2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d066      	beq.n	80040d4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004006:	4b1c      	ldr	r3, [pc, #112]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a1b      	ldr	r2, [pc, #108]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 800400c:	f043 0301 	orr.w	r3, r3, #1
 8004010:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004012:	f7fe fb99 	bl	8002748 <HAL_GetTick>
 8004016:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004018:	e009      	b.n	800402e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800401a:	f7fe fb95 	bl	8002748 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d902      	bls.n	800402e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	f000 bdba 	b.w	8004ba2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800402e:	4b12      	ldr	r3, [pc, #72]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0304 	and.w	r3, r3, #4
 8004036:	2b00      	cmp	r3, #0
 8004038:	d0ef      	beq.n	800401a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800403a:	4b0f      	ldr	r3, [pc, #60]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	4a0e      	ldr	r2, [pc, #56]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8004040:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004044:	6093      	str	r3, [r2, #8]
 8004046:	4b0c      	ldr	r3, [pc, #48]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004052:	4909      	ldr	r1, [pc, #36]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8004054:	4313      	orrs	r3, r2
 8004056:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004060:	d30e      	bcc.n	8004080 <HAL_RCC_OscConfig+0x288>
 8004062:	4b05      	ldr	r3, [pc, #20]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f023 021f 	bic.w	r2, r3, #31
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	4902      	ldr	r1, [pc, #8]	@ (8004078 <HAL_RCC_OscConfig+0x280>)
 8004070:	4313      	orrs	r3, r2
 8004072:	60cb      	str	r3, [r1, #12]
 8004074:	e04a      	b.n	800410c <HAL_RCC_OscConfig+0x314>
 8004076:	bf00      	nop
 8004078:	46020c00 	.word	0x46020c00
 800407c:	2000001c 	.word	0x2000001c
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004084:	2b00      	cmp	r3, #0
 8004086:	da0a      	bge.n	800409e <HAL_RCC_OscConfig+0x2a6>
 8004088:	4b98      	ldr	r3, [pc, #608]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	015b      	lsls	r3, r3, #5
 8004096:	4995      	ldr	r1, [pc, #596]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 8004098:	4313      	orrs	r3, r2
 800409a:	60cb      	str	r3, [r1, #12]
 800409c:	e036      	b.n	800410c <HAL_RCC_OscConfig+0x314>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040a6:	d30a      	bcc.n	80040be <HAL_RCC_OscConfig+0x2c6>
 80040a8:	4b90      	ldr	r3, [pc, #576]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	029b      	lsls	r3, r3, #10
 80040b6:	498d      	ldr	r1, [pc, #564]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	60cb      	str	r3, [r1, #12]
 80040bc:	e026      	b.n	800410c <HAL_RCC_OscConfig+0x314>
 80040be:	4b8b      	ldr	r3, [pc, #556]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	03db      	lsls	r3, r3, #15
 80040cc:	4987      	ldr	r1, [pc, #540]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60cb      	str	r3, [r1, #12]
 80040d2:	e01b      	b.n	800410c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80040d4:	4b85      	ldr	r3, [pc, #532]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a84      	ldr	r2, [pc, #528]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 80040da:	f023 0301 	bic.w	r3, r3, #1
 80040de:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80040e0:	f7fe fb32 	bl	8002748 <HAL_GetTick>
 80040e4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80040e6:	e009      	b.n	80040fc <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040e8:	f7fe fb2e 	bl	8002748 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d902      	bls.n	80040fc <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	f000 bd53 	b.w	8004ba2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80040fc:	4b7b      	ldr	r3, [pc, #492]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1ef      	bne.n	80040e8 <HAL_RCC_OscConfig+0x2f0>
 8004108:	e000      	b.n	800410c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800410a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 808b 	beq.w	8004230 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800411a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411c:	2b08      	cmp	r3, #8
 800411e:	d005      	beq.n	800412c <HAL_RCC_OscConfig+0x334>
 8004120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004122:	2b0c      	cmp	r3, #12
 8004124:	d109      	bne.n	800413a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004128:	2b03      	cmp	r3, #3
 800412a:	d106      	bne.n	800413a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d17d      	bne.n	8004230 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	f000 bd34 	b.w	8004ba2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004142:	d106      	bne.n	8004152 <HAL_RCC_OscConfig+0x35a>
 8004144:	4b69      	ldr	r3, [pc, #420]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a68      	ldr	r2, [pc, #416]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 800414a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	e041      	b.n	80041d6 <HAL_RCC_OscConfig+0x3de>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800415a:	d112      	bne.n	8004182 <HAL_RCC_OscConfig+0x38a>
 800415c:	4b63      	ldr	r3, [pc, #396]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a62      	ldr	r2, [pc, #392]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 8004162:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004166:	6013      	str	r3, [r2, #0]
 8004168:	4b60      	ldr	r3, [pc, #384]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a5f      	ldr	r2, [pc, #380]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 800416e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	4b5d      	ldr	r3, [pc, #372]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a5c      	ldr	r2, [pc, #368]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 800417a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800417e:	6013      	str	r3, [r2, #0]
 8004180:	e029      	b.n	80041d6 <HAL_RCC_OscConfig+0x3de>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800418a:	d112      	bne.n	80041b2 <HAL_RCC_OscConfig+0x3ba>
 800418c:	4b57      	ldr	r3, [pc, #348]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a56      	ldr	r2, [pc, #344]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 8004192:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004196:	6013      	str	r3, [r2, #0]
 8004198:	4b54      	ldr	r3, [pc, #336]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a53      	ldr	r2, [pc, #332]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 800419e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	4b51      	ldr	r3, [pc, #324]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a50      	ldr	r2, [pc, #320]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 80041aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041ae:	6013      	str	r3, [r2, #0]
 80041b0:	e011      	b.n	80041d6 <HAL_RCC_OscConfig+0x3de>
 80041b2:	4b4e      	ldr	r3, [pc, #312]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a4d      	ldr	r2, [pc, #308]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 80041b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041bc:	6013      	str	r3, [r2, #0]
 80041be:	4b4b      	ldr	r3, [pc, #300]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a4a      	ldr	r2, [pc, #296]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 80041c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	4b48      	ldr	r3, [pc, #288]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a47      	ldr	r2, [pc, #284]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 80041d0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80041d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d014      	beq.n	8004208 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80041de:	f7fe fab3 	bl	8002748 <HAL_GetTick>
 80041e2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041e4:	e009      	b.n	80041fa <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041e6:	f7fe faaf 	bl	8002748 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b64      	cmp	r3, #100	@ 0x64
 80041f2:	d902      	bls.n	80041fa <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	f000 bcd4 	b.w	8004ba2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041fa:	4b3c      	ldr	r3, [pc, #240]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0ef      	beq.n	80041e6 <HAL_RCC_OscConfig+0x3ee>
 8004206:	e013      	b.n	8004230 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004208:	f7fe fa9e 	bl	8002748 <HAL_GetTick>
 800420c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800420e:	e009      	b.n	8004224 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004210:	f7fe fa9a 	bl	8002748 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b64      	cmp	r3, #100	@ 0x64
 800421c:	d902      	bls.n	8004224 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	f000 bcbf 	b.w	8004ba2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004224:	4b31      	ldr	r3, [pc, #196]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1ef      	bne.n	8004210 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d05f      	beq.n	80042fc <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800423c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423e:	2b04      	cmp	r3, #4
 8004240:	d005      	beq.n	800424e <HAL_RCC_OscConfig+0x456>
 8004242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004244:	2b0c      	cmp	r3, #12
 8004246:	d114      	bne.n	8004272 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800424a:	2b02      	cmp	r3, #2
 800424c:	d111      	bne.n	8004272 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d102      	bne.n	800425c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	f000 bca3 	b.w	8004ba2 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800425c:	4b23      	ldr	r3, [pc, #140]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	041b      	lsls	r3, r3, #16
 800426a:	4920      	ldr	r1, [pc, #128]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 800426c:	4313      	orrs	r3, r2
 800426e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004270:	e044      	b.n	80042fc <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d024      	beq.n	80042c4 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800427a:	4b1c      	ldr	r3, [pc, #112]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a1b      	ldr	r2, [pc, #108]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 8004280:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004284:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004286:	f7fe fa5f 	bl	8002748 <HAL_GetTick>
 800428a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800428c:	e009      	b.n	80042a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800428e:	f7fe fa5b 	bl	8002748 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d902      	bls.n	80042a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	f000 bc80 	b.w	8004ba2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042a2:	4b12      	ldr	r3, [pc, #72]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0ef      	beq.n	800428e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80042ae:	4b0f      	ldr	r3, [pc, #60]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	041b      	lsls	r3, r3, #16
 80042bc:	490b      	ldr	r1, [pc, #44]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	610b      	str	r3, [r1, #16]
 80042c2:	e01b      	b.n	80042fc <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80042c4:	4b09      	ldr	r3, [pc, #36]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a08      	ldr	r2, [pc, #32]	@ (80042ec <HAL_RCC_OscConfig+0x4f4>)
 80042ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042ce:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80042d0:	f7fe fa3a 	bl	8002748 <HAL_GetTick>
 80042d4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042d6:	e00b      	b.n	80042f0 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042d8:	f7fe fa36 	bl	8002748 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d904      	bls.n	80042f0 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	f000 bc5b 	b.w	8004ba2 <HAL_RCC_OscConfig+0xdaa>
 80042ec:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042f0:	4baf      	ldr	r3, [pc, #700]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1ed      	bne.n	80042d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0308 	and.w	r3, r3, #8
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 80c8 	beq.w	800449a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800430a:	2300      	movs	r3, #0
 800430c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004310:	4ba7      	ldr	r3, [pc, #668]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 8004312:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	2b00      	cmp	r3, #0
 800431c:	d111      	bne.n	8004342 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800431e:	4ba4      	ldr	r3, [pc, #656]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 8004320:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004324:	4aa2      	ldr	r2, [pc, #648]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 8004326:	f043 0304 	orr.w	r3, r3, #4
 800432a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800432e:	4ba0      	ldr	r3, [pc, #640]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 8004330:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	617b      	str	r3, [r7, #20]
 800433a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800433c:	2301      	movs	r3, #1
 800433e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004342:	4b9c      	ldr	r3, [pc, #624]	@ (80045b4 <HAL_RCC_OscConfig+0x7bc>)
 8004344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d119      	bne.n	8004382 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800434e:	4b99      	ldr	r3, [pc, #612]	@ (80045b4 <HAL_RCC_OscConfig+0x7bc>)
 8004350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004352:	4a98      	ldr	r2, [pc, #608]	@ (80045b4 <HAL_RCC_OscConfig+0x7bc>)
 8004354:	f043 0301 	orr.w	r3, r3, #1
 8004358:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800435a:	f7fe f9f5 	bl	8002748 <HAL_GetTick>
 800435e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004360:	e009      	b.n	8004376 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004362:	f7fe f9f1 	bl	8002748 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d902      	bls.n	8004376 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	f000 bc16 	b.w	8004ba2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004376:	4b8f      	ldr	r3, [pc, #572]	@ (80045b4 <HAL_RCC_OscConfig+0x7bc>)
 8004378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0ef      	beq.n	8004362 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d05f      	beq.n	800444a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800438a:	4b89      	ldr	r3, [pc, #548]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 800438c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004390:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	699a      	ldr	r2, [r3, #24]
 8004396:	6a3b      	ldr	r3, [r7, #32]
 8004398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800439c:	429a      	cmp	r2, r3
 800439e:	d037      	beq.n	8004410 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d006      	beq.n	80043b8 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e3f4      	b.n	8004ba2 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80043b8:	6a3b      	ldr	r3, [r7, #32]
 80043ba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d01b      	beq.n	80043fa <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80043c2:	4b7b      	ldr	r3, [pc, #492]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 80043c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043c8:	4a79      	ldr	r2, [pc, #484]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 80043ca:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80043ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80043d2:	f7fe f9b9 	bl	8002748 <HAL_GetTick>
 80043d6:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80043d8:	e008      	b.n	80043ec <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043da:	f7fe f9b5 	bl	8002748 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b05      	cmp	r3, #5
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e3da      	b.n	8004ba2 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80043ec:	4b70      	ldr	r3, [pc, #448]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 80043ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1ef      	bne.n	80043da <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80043fa:	4b6d      	ldr	r3, [pc, #436]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 80043fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004400:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	4969      	ldr	r1, [pc, #420]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004410:	4b67      	ldr	r3, [pc, #412]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 8004412:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004416:	4a66      	ldr	r2, [pc, #408]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 8004418:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800441c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004420:	f7fe f992 	bl	8002748 <HAL_GetTick>
 8004424:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004428:	f7fe f98e 	bl	8002748 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b05      	cmp	r3, #5
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e3b3      	b.n	8004ba2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800443a:	4b5d      	ldr	r3, [pc, #372]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 800443c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004440:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0ef      	beq.n	8004428 <HAL_RCC_OscConfig+0x630>
 8004448:	e01b      	b.n	8004482 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800444a:	4b59      	ldr	r3, [pc, #356]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 800444c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004450:	4a57      	ldr	r2, [pc, #348]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 8004452:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004456:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800445a:	f7fe f975 	bl	8002748 <HAL_GetTick>
 800445e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004462:	f7fe f971 	bl	8002748 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b05      	cmp	r3, #5
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e396      	b.n	8004ba2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004474:	4b4e      	ldr	r3, [pc, #312]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 8004476:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800447a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1ef      	bne.n	8004462 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004482:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004486:	2b01      	cmp	r3, #1
 8004488:	d107      	bne.n	800449a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800448a:	4b49      	ldr	r3, [pc, #292]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 800448c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004490:	4a47      	ldr	r2, [pc, #284]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 8004492:	f023 0304 	bic.w	r3, r3, #4
 8004496:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0304 	and.w	r3, r3, #4
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 8111 	beq.w	80046ca <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80044a8:	2300      	movs	r3, #0
 80044aa:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ae:	4b40      	ldr	r3, [pc, #256]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 80044b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d111      	bne.n	80044e0 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044bc:	4b3c      	ldr	r3, [pc, #240]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 80044be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044c2:	4a3b      	ldr	r2, [pc, #236]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 80044c4:	f043 0304 	orr.w	r3, r3, #4
 80044c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80044cc:	4b38      	ldr	r3, [pc, #224]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 80044ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044d2:	f003 0304 	and.w	r3, r3, #4
 80044d6:	613b      	str	r3, [r7, #16]
 80044d8:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80044da:	2301      	movs	r3, #1
 80044dc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80044e0:	4b34      	ldr	r3, [pc, #208]	@ (80045b4 <HAL_RCC_OscConfig+0x7bc>)
 80044e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d118      	bne.n	800451e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80044ec:	4b31      	ldr	r3, [pc, #196]	@ (80045b4 <HAL_RCC_OscConfig+0x7bc>)
 80044ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f0:	4a30      	ldr	r2, [pc, #192]	@ (80045b4 <HAL_RCC_OscConfig+0x7bc>)
 80044f2:	f043 0301 	orr.w	r3, r3, #1
 80044f6:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044f8:	f7fe f926 	bl	8002748 <HAL_GetTick>
 80044fc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004500:	f7fe f922 	bl	8002748 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e347      	b.n	8004ba2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004512:	4b28      	ldr	r3, [pc, #160]	@ (80045b4 <HAL_RCC_OscConfig+0x7bc>)
 8004514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0f0      	beq.n	8004500 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d01f      	beq.n	800456a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 0304 	and.w	r3, r3, #4
 8004532:	2b00      	cmp	r3, #0
 8004534:	d010      	beq.n	8004558 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004536:	4b1e      	ldr	r3, [pc, #120]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 8004538:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800453c:	4a1c      	ldr	r2, [pc, #112]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 800453e:	f043 0304 	orr.w	r3, r3, #4
 8004542:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004546:	4b1a      	ldr	r3, [pc, #104]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 8004548:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800454c:	4a18      	ldr	r2, [pc, #96]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 800454e:	f043 0301 	orr.w	r3, r3, #1
 8004552:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004556:	e018      	b.n	800458a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004558:	4b15      	ldr	r3, [pc, #84]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 800455a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800455e:	4a14      	ldr	r2, [pc, #80]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 8004560:	f043 0301 	orr.w	r3, r3, #1
 8004564:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004568:	e00f      	b.n	800458a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800456a:	4b11      	ldr	r3, [pc, #68]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 800456c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004570:	4a0f      	ldr	r2, [pc, #60]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 8004572:	f023 0301 	bic.w	r3, r3, #1
 8004576:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800457a:	4b0d      	ldr	r3, [pc, #52]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 800457c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004580:	4a0b      	ldr	r2, [pc, #44]	@ (80045b0 <HAL_RCC_OscConfig+0x7b8>)
 8004582:	f023 0304 	bic.w	r3, r3, #4
 8004586:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d057      	beq.n	8004642 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8004592:	f7fe f8d9 	bl	8002748 <HAL_GetTick>
 8004596:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004598:	e00e      	b.n	80045b8 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800459a:	f7fe f8d5 	bl	8002748 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d905      	bls.n	80045b8 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e2f8      	b.n	8004ba2 <HAL_RCC_OscConfig+0xdaa>
 80045b0:	46020c00 	.word	0x46020c00
 80045b4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045b8:	4b9c      	ldr	r3, [pc, #624]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 80045ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0e9      	beq.n	800459a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d01b      	beq.n	800460a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80045d2:	4b96      	ldr	r3, [pc, #600]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 80045d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045d8:	4a94      	ldr	r2, [pc, #592]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 80045da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80045e2:	e00a      	b.n	80045fa <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e4:	f7fe f8b0 	bl	8002748 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e2d3      	b.n	8004ba2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80045fa:	4b8c      	ldr	r3, [pc, #560]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 80045fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004600:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0ed      	beq.n	80045e4 <HAL_RCC_OscConfig+0x7ec>
 8004608:	e053      	b.n	80046b2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800460a:	4b88      	ldr	r3, [pc, #544]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 800460c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004610:	4a86      	ldr	r2, [pc, #536]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 8004612:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004616:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800461a:	e00a      	b.n	8004632 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800461c:	f7fe f894 	bl	8002748 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e2b7      	b.n	8004ba2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004632:	4b7e      	ldr	r3, [pc, #504]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 8004634:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004638:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1ed      	bne.n	800461c <HAL_RCC_OscConfig+0x824>
 8004640:	e037      	b.n	80046b2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8004642:	f7fe f881 	bl	8002748 <HAL_GetTick>
 8004646:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004648:	e00a      	b.n	8004660 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800464a:	f7fe f87d 	bl	8002748 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004658:	4293      	cmp	r3, r2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e2a0      	b.n	8004ba2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004660:	4b72      	ldr	r3, [pc, #456]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 8004662:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1ed      	bne.n	800464a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800466e:	4b6f      	ldr	r3, [pc, #444]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 8004670:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004674:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004678:	2b00      	cmp	r3, #0
 800467a:	d01a      	beq.n	80046b2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800467c:	4b6b      	ldr	r3, [pc, #428]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 800467e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004682:	4a6a      	ldr	r2, [pc, #424]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 8004684:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004688:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800468c:	e00a      	b.n	80046a4 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800468e:	f7fe f85b 	bl	8002748 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	f241 3288 	movw	r2, #5000	@ 0x1388
 800469c:	4293      	cmp	r3, r2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e27e      	b.n	8004ba2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80046a4:	4b61      	ldr	r3, [pc, #388]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 80046a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1ed      	bne.n	800468e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046b2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d107      	bne.n	80046ca <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ba:	4b5c      	ldr	r3, [pc, #368]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 80046bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046c0:	4a5a      	ldr	r2, [pc, #360]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 80046c2:	f023 0304 	bic.w	r3, r3, #4
 80046c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d036      	beq.n	8004744 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d019      	beq.n	8004712 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80046de:	4b53      	ldr	r3, [pc, #332]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a52      	ldr	r2, [pc, #328]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 80046e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80046e8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80046ea:	f7fe f82d 	bl	8002748 <HAL_GetTick>
 80046ee:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046f2:	f7fe f829 	bl	8002748 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e24e      	b.n	8004ba2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004704:	4b49      	ldr	r3, [pc, #292]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0f0      	beq.n	80046f2 <HAL_RCC_OscConfig+0x8fa>
 8004710:	e018      	b.n	8004744 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8004712:	4b46      	ldr	r3, [pc, #280]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a45      	ldr	r2, [pc, #276]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 8004718:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800471c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800471e:	f7fe f813 	bl	8002748 <HAL_GetTick>
 8004722:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004724:	e008      	b.n	8004738 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004726:	f7fe f80f 	bl	8002748 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d901      	bls.n	8004738 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e234      	b.n	8004ba2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004738:	4b3c      	ldr	r3, [pc, #240]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1f0      	bne.n	8004726 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800474c:	2b00      	cmp	r3, #0
 800474e:	d036      	beq.n	80047be <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004754:	2b00      	cmp	r3, #0
 8004756:	d019      	beq.n	800478c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004758:	4b34      	ldr	r3, [pc, #208]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a33      	ldr	r2, [pc, #204]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 800475e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004762:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004764:	f7fd fff0 	bl	8002748 <HAL_GetTick>
 8004768:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800476c:	f7fd ffec 	bl	8002748 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e211      	b.n	8004ba2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800477e:	4b2b      	ldr	r3, [pc, #172]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0f0      	beq.n	800476c <HAL_RCC_OscConfig+0x974>
 800478a:	e018      	b.n	80047be <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800478c:	4b27      	ldr	r3, [pc, #156]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a26      	ldr	r2, [pc, #152]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 8004792:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004796:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004798:	f7fd ffd6 	bl	8002748 <HAL_GetTick>
 800479c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80047a0:	f7fd ffd2 	bl	8002748 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e1f7      	b.n	8004ba2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80047b2:	4b1e      	ldr	r3, [pc, #120]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f0      	bne.n	80047a0 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d07f      	beq.n	80048ca <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d062      	beq.n	8004898 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80047d2:	4b16      	ldr	r3, [pc, #88]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	4a15      	ldr	r2, [pc, #84]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 80047d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80047dc:	6093      	str	r3, [r2, #8]
 80047de:	4b13      	ldr	r3, [pc, #76]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ea:	4910      	ldr	r1, [pc, #64]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80047f8:	d309      	bcc.n	800480e <HAL_RCC_OscConfig+0xa16>
 80047fa:	4b0c      	ldr	r3, [pc, #48]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f023 021f 	bic.w	r2, r3, #31
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	4909      	ldr	r1, [pc, #36]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 8004808:	4313      	orrs	r3, r2
 800480a:	60cb      	str	r3, [r1, #12]
 800480c:	e02a      	b.n	8004864 <HAL_RCC_OscConfig+0xa6c>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004812:	2b00      	cmp	r3, #0
 8004814:	da0c      	bge.n	8004830 <HAL_RCC_OscConfig+0xa38>
 8004816:	4b05      	ldr	r3, [pc, #20]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	015b      	lsls	r3, r3, #5
 8004824:	4901      	ldr	r1, [pc, #4]	@ (800482c <HAL_RCC_OscConfig+0xa34>)
 8004826:	4313      	orrs	r3, r2
 8004828:	60cb      	str	r3, [r1, #12]
 800482a:	e01b      	b.n	8004864 <HAL_RCC_OscConfig+0xa6c>
 800482c:	46020c00 	.word	0x46020c00
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004838:	d30a      	bcc.n	8004850 <HAL_RCC_OscConfig+0xa58>
 800483a:	4ba1      	ldr	r3, [pc, #644]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	029b      	lsls	r3, r3, #10
 8004848:	499d      	ldr	r1, [pc, #628]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 800484a:	4313      	orrs	r3, r2
 800484c:	60cb      	str	r3, [r1, #12]
 800484e:	e009      	b.n	8004864 <HAL_RCC_OscConfig+0xa6c>
 8004850:	4b9b      	ldr	r3, [pc, #620]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	03db      	lsls	r3, r3, #15
 800485e:	4998      	ldr	r1, [pc, #608]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 8004860:	4313      	orrs	r3, r2
 8004862:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004864:	4b96      	ldr	r3, [pc, #600]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a95      	ldr	r2, [pc, #596]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 800486a:	f043 0310 	orr.w	r3, r3, #16
 800486e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004870:	f7fd ff6a 	bl	8002748 <HAL_GetTick>
 8004874:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004878:	f7fd ff66 	bl	8002748 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e18b      	b.n	8004ba2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800488a:	4b8d      	ldr	r3, [pc, #564]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0320 	and.w	r3, r3, #32
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0f0      	beq.n	8004878 <HAL_RCC_OscConfig+0xa80>
 8004896:	e018      	b.n	80048ca <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004898:	4b89      	ldr	r3, [pc, #548]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a88      	ldr	r2, [pc, #544]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 800489e:	f023 0310 	bic.w	r3, r3, #16
 80048a2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80048a4:	f7fd ff50 	bl	8002748 <HAL_GetTick>
 80048a8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80048ac:	f7fd ff4c 	bl	8002748 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e171      	b.n	8004ba2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80048be:	4b80      	ldr	r3, [pc, #512]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f0      	bne.n	80048ac <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 8166 	beq.w	8004ba0 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80048d4:	2300      	movs	r3, #0
 80048d6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048da:	4b79      	ldr	r3, [pc, #484]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	f003 030c 	and.w	r3, r3, #12
 80048e2:	2b0c      	cmp	r3, #12
 80048e4:	f000 80f2 	beq.w	8004acc <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	f040 80c5 	bne.w	8004a7c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80048f2:	4b73      	ldr	r3, [pc, #460]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a72      	ldr	r2, [pc, #456]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 80048f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048fc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80048fe:	f7fd ff23 	bl	8002748 <HAL_GetTick>
 8004902:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004904:	e008      	b.n	8004918 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004906:	f7fd ff1f 	bl	8002748 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d901      	bls.n	8004918 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e144      	b.n	8004ba2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004918:	4b69      	ldr	r3, [pc, #420]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1f0      	bne.n	8004906 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004924:	4b66      	ldr	r3, [pc, #408]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 8004926:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800492a:	f003 0304 	and.w	r3, r3, #4
 800492e:	2b00      	cmp	r3, #0
 8004930:	d111      	bne.n	8004956 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004932:	4b63      	ldr	r3, [pc, #396]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 8004934:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004938:	4a61      	ldr	r2, [pc, #388]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 800493a:	f043 0304 	orr.w	r3, r3, #4
 800493e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004942:	4b5f      	ldr	r3, [pc, #380]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 8004944:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	60fb      	str	r3, [r7, #12]
 800494e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004950:	2301      	movs	r3, #1
 8004952:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004956:	4b5b      	ldr	r3, [pc, #364]	@ (8004ac4 <HAL_RCC_OscConfig+0xccc>)
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800495e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004962:	d102      	bne.n	800496a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004964:	2301      	movs	r3, #1
 8004966:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800496a:	4b56      	ldr	r3, [pc, #344]	@ (8004ac4 <HAL_RCC_OscConfig+0xccc>)
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	4a55      	ldr	r2, [pc, #340]	@ (8004ac4 <HAL_RCC_OscConfig+0xccc>)
 8004970:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004974:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004976:	4b52      	ldr	r3, [pc, #328]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 8004978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800497e:	f023 0303 	bic.w	r3, r3, #3
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800498a:	3a01      	subs	r2, #1
 800498c:	0212      	lsls	r2, r2, #8
 800498e:	4311      	orrs	r1, r2
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004994:	430a      	orrs	r2, r1
 8004996:	494a      	ldr	r1, [pc, #296]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 8004998:	4313      	orrs	r3, r2
 800499a:	628b      	str	r3, [r1, #40]	@ 0x28
 800499c:	4b48      	ldr	r3, [pc, #288]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 800499e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049a0:	4b49      	ldr	r3, [pc, #292]	@ (8004ac8 <HAL_RCC_OscConfig+0xcd0>)
 80049a2:	4013      	ands	r3, r2
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80049a8:	3a01      	subs	r2, #1
 80049aa:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80049b2:	3a01      	subs	r2, #1
 80049b4:	0252      	lsls	r2, r2, #9
 80049b6:	b292      	uxth	r2, r2
 80049b8:	4311      	orrs	r1, r2
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80049be:	3a01      	subs	r2, #1
 80049c0:	0412      	lsls	r2, r2, #16
 80049c2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80049c6:	4311      	orrs	r1, r2
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80049cc:	3a01      	subs	r2, #1
 80049ce:	0612      	lsls	r2, r2, #24
 80049d0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80049d4:	430a      	orrs	r2, r1
 80049d6:	493a      	ldr	r1, [pc, #232]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80049dc:	4b38      	ldr	r3, [pc, #224]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 80049de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e0:	4a37      	ldr	r2, [pc, #220]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 80049e2:	f023 0310 	bic.w	r3, r3, #16
 80049e6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ec:	4a34      	ldr	r2, [pc, #208]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80049f2:	4b33      	ldr	r3, [pc, #204]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 80049f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f6:	4a32      	ldr	r2, [pc, #200]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 80049f8:	f043 0310 	orr.w	r3, r3, #16
 80049fc:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80049fe:	4b30      	ldr	r3, [pc, #192]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 8004a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a02:	f023 020c 	bic.w	r2, r3, #12
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a0a:	492d      	ldr	r1, [pc, #180]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8004a10:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d105      	bne.n	8004a24 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004a18:	4b2a      	ldr	r3, [pc, #168]	@ (8004ac4 <HAL_RCC_OscConfig+0xccc>)
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	4a29      	ldr	r2, [pc, #164]	@ (8004ac4 <HAL_RCC_OscConfig+0xccc>)
 8004a1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a22:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004a24:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d107      	bne.n	8004a3c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004a2c:	4b24      	ldr	r3, [pc, #144]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 8004a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a32:	4a23      	ldr	r2, [pc, #140]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 8004a34:	f023 0304 	bic.w	r3, r3, #4
 8004a38:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004a3c:	4b20      	ldr	r3, [pc, #128]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a1f      	ldr	r2, [pc, #124]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 8004a42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a46:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004a48:	f7fd fe7e 	bl	8002748 <HAL_GetTick>
 8004a4c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a50:	f7fd fe7a 	bl	8002748 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e09f      	b.n	8004ba2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004a62:	4b17      	ldr	r3, [pc, #92]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0f0      	beq.n	8004a50 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004a6e:	4b14      	ldr	r3, [pc, #80]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 8004a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a72:	4a13      	ldr	r2, [pc, #76]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 8004a74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a78:	6293      	str	r3, [r2, #40]	@ 0x28
 8004a7a:	e091      	b.n	8004ba0 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004a7c:	4b10      	ldr	r3, [pc, #64]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a0f      	ldr	r2, [pc, #60]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 8004a82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a86:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004a88:	f7fd fe5e 	bl	8002748 <HAL_GetTick>
 8004a8c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a90:	f7fd fe5a 	bl	8002748 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e07f      	b.n	8004ba2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004aa2:	4b07      	ldr	r3, [pc, #28]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1f0      	bne.n	8004a90 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004aae:	4b04      	ldr	r3, [pc, #16]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 8004ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab2:	4a03      	ldr	r2, [pc, #12]	@ (8004ac0 <HAL_RCC_OscConfig+0xcc8>)
 8004ab4:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004ab8:	f023 0303 	bic.w	r3, r3, #3
 8004abc:	6293      	str	r3, [r2, #40]	@ 0x28
 8004abe:	e06f      	b.n	8004ba0 <HAL_RCC_OscConfig+0xda8>
 8004ac0:	46020c00 	.word	0x46020c00
 8004ac4:	46020800 	.word	0x46020800
 8004ac8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004acc:	4b37      	ldr	r3, [pc, #220]	@ (8004bac <HAL_RCC_OscConfig+0xdb4>)
 8004ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad0:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004ad2:	4b36      	ldr	r3, [pc, #216]	@ (8004bac <HAL_RCC_OscConfig+0xdb4>)
 8004ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ad6:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d039      	beq.n	8004b54 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	f003 0203 	and.w	r2, r3, #3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d132      	bne.n	8004b54 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	0a1b      	lsrs	r3, r3, #8
 8004af2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afa:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d129      	bne.n	8004b54 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d122      	bne.n	8004b54 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b18:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d11a      	bne.n	8004b54 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	0a5b      	lsrs	r3, r3, #9
 8004b22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b2a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d111      	bne.n	8004b54 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	0c1b      	lsrs	r3, r3, #16
 8004b34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b3c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d108      	bne.n	8004b54 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	0e1b      	lsrs	r3, r3, #24
 8004b46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b4e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d001      	beq.n	8004b58 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e024      	b.n	8004ba2 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004b58:	4b14      	ldr	r3, [pc, #80]	@ (8004bac <HAL_RCC_OscConfig+0xdb4>)
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b5c:	08db      	lsrs	r3, r3, #3
 8004b5e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d01a      	beq.n	8004ba0 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004b6a:	4b10      	ldr	r3, [pc, #64]	@ (8004bac <HAL_RCC_OscConfig+0xdb4>)
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b6e:	4a0f      	ldr	r2, [pc, #60]	@ (8004bac <HAL_RCC_OscConfig+0xdb4>)
 8004b70:	f023 0310 	bic.w	r3, r3, #16
 8004b74:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b76:	f7fd fde7 	bl	8002748 <HAL_GetTick>
 8004b7a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004b7c:	bf00      	nop
 8004b7e:	f7fd fde3 	bl	8002748 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d0f9      	beq.n	8004b7e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b8e:	4a07      	ldr	r2, [pc, #28]	@ (8004bac <HAL_RCC_OscConfig+0xdb4>)
 8004b90:	00db      	lsls	r3, r3, #3
 8004b92:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004b94:	4b05      	ldr	r3, [pc, #20]	@ (8004bac <HAL_RCC_OscConfig+0xdb4>)
 8004b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b98:	4a04      	ldr	r2, [pc, #16]	@ (8004bac <HAL_RCC_OscConfig+0xdb4>)
 8004b9a:	f043 0310 	orr.w	r3, r3, #16
 8004b9e:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3738      	adds	r7, #56	@ 0x38
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	46020c00 	.word	0x46020c00

08004bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e1d9      	b.n	8004f78 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bc4:	4b9b      	ldr	r3, [pc, #620]	@ (8004e34 <HAL_RCC_ClockConfig+0x284>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 030f 	and.w	r3, r3, #15
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d910      	bls.n	8004bf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd2:	4b98      	ldr	r3, [pc, #608]	@ (8004e34 <HAL_RCC_ClockConfig+0x284>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f023 020f 	bic.w	r2, r3, #15
 8004bda:	4996      	ldr	r1, [pc, #600]	@ (8004e34 <HAL_RCC_ClockConfig+0x284>)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be2:	4b94      	ldr	r3, [pc, #592]	@ (8004e34 <HAL_RCC_ClockConfig+0x284>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 030f 	and.w	r3, r3, #15
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d001      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e1c1      	b.n	8004f78 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0310 	and.w	r3, r3, #16
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d010      	beq.n	8004c22 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	695a      	ldr	r2, [r3, #20]
 8004c04:	4b8c      	ldr	r3, [pc, #560]	@ (8004e38 <HAL_RCC_ClockConfig+0x288>)
 8004c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d908      	bls.n	8004c22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004c10:	4b89      	ldr	r3, [pc, #548]	@ (8004e38 <HAL_RCC_ClockConfig+0x288>)
 8004c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c14:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	4986      	ldr	r1, [pc, #536]	@ (8004e38 <HAL_RCC_ClockConfig+0x288>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d012      	beq.n	8004c54 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691a      	ldr	r2, [r3, #16]
 8004c32:	4b81      	ldr	r3, [pc, #516]	@ (8004e38 <HAL_RCC_ClockConfig+0x288>)
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	091b      	lsrs	r3, r3, #4
 8004c38:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d909      	bls.n	8004c54 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004c40:	4b7d      	ldr	r3, [pc, #500]	@ (8004e38 <HAL_RCC_ClockConfig+0x288>)
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	497a      	ldr	r1, [pc, #488]	@ (8004e38 <HAL_RCC_ClockConfig+0x288>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d010      	beq.n	8004c82 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68da      	ldr	r2, [r3, #12]
 8004c64:	4b74      	ldr	r3, [pc, #464]	@ (8004e38 <HAL_RCC_ClockConfig+0x288>)
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d908      	bls.n	8004c82 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004c70:	4b71      	ldr	r3, [pc, #452]	@ (8004e38 <HAL_RCC_ClockConfig+0x288>)
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	496e      	ldr	r1, [pc, #440]	@ (8004e38 <HAL_RCC_ClockConfig+0x288>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d010      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	689a      	ldr	r2, [r3, #8]
 8004c92:	4b69      	ldr	r3, [pc, #420]	@ (8004e38 <HAL_RCC_ClockConfig+0x288>)
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	f003 030f 	and.w	r3, r3, #15
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d908      	bls.n	8004cb0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004c9e:	4b66      	ldr	r3, [pc, #408]	@ (8004e38 <HAL_RCC_ClockConfig+0x288>)
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	f023 020f 	bic.w	r2, r3, #15
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	4963      	ldr	r1, [pc, #396]	@ (8004e38 <HAL_RCC_ClockConfig+0x288>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 80d2 	beq.w	8004e62 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d143      	bne.n	8004d52 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cca:	4b5b      	ldr	r3, [pc, #364]	@ (8004e38 <HAL_RCC_ClockConfig+0x288>)
 8004ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d110      	bne.n	8004cfa <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004cd8:	4b57      	ldr	r3, [pc, #348]	@ (8004e38 <HAL_RCC_ClockConfig+0x288>)
 8004cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cde:	4a56      	ldr	r2, [pc, #344]	@ (8004e38 <HAL_RCC_ClockConfig+0x288>)
 8004ce0:	f043 0304 	orr.w	r3, r3, #4
 8004ce4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004ce8:	4b53      	ldr	r3, [pc, #332]	@ (8004e38 <HAL_RCC_ClockConfig+0x288>)
 8004cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cee:	f003 0304 	and.w	r3, r3, #4
 8004cf2:	60bb      	str	r3, [r7, #8]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004cfa:	f7fd fd25 	bl	8002748 <HAL_GetTick>
 8004cfe:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004d00:	4b4e      	ldr	r3, [pc, #312]	@ (8004e3c <HAL_RCC_ClockConfig+0x28c>)
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00f      	beq.n	8004d2c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004d0c:	e008      	b.n	8004d20 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004d0e:	f7fd fd1b 	bl	8002748 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e12b      	b.n	8004f78 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004d20:	4b46      	ldr	r3, [pc, #280]	@ (8004e3c <HAL_RCC_ClockConfig+0x28c>)
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0f0      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004d2c:	7dfb      	ldrb	r3, [r7, #23]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d107      	bne.n	8004d42 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004d32:	4b41      	ldr	r3, [pc, #260]	@ (8004e38 <HAL_RCC_ClockConfig+0x288>)
 8004d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d38:	4a3f      	ldr	r2, [pc, #252]	@ (8004e38 <HAL_RCC_ClockConfig+0x288>)
 8004d3a:	f023 0304 	bic.w	r3, r3, #4
 8004d3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004d42:	4b3d      	ldr	r3, [pc, #244]	@ (8004e38 <HAL_RCC_ClockConfig+0x288>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d121      	bne.n	8004d92 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e112      	b.n	8004f78 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d107      	bne.n	8004d6a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d5a:	4b37      	ldr	r3, [pc, #220]	@ (8004e38 <HAL_RCC_ClockConfig+0x288>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d115      	bne.n	8004d92 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e106      	b.n	8004f78 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d107      	bne.n	8004d82 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004d72:	4b31      	ldr	r3, [pc, #196]	@ (8004e38 <HAL_RCC_ClockConfig+0x288>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0304 	and.w	r3, r3, #4
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d109      	bne.n	8004d92 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e0fa      	b.n	8004f78 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d82:	4b2d      	ldr	r3, [pc, #180]	@ (8004e38 <HAL_RCC_ClockConfig+0x288>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e0f2      	b.n	8004f78 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004d92:	4b29      	ldr	r3, [pc, #164]	@ (8004e38 <HAL_RCC_ClockConfig+0x288>)
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	f023 0203 	bic.w	r2, r3, #3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	4926      	ldr	r1, [pc, #152]	@ (8004e38 <HAL_RCC_ClockConfig+0x288>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004da4:	f7fd fcd0 	bl	8002748 <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b03      	cmp	r3, #3
 8004db0:	d112      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004db2:	e00a      	b.n	8004dca <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004db4:	f7fd fcc8 	bl	8002748 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e0d6      	b.n	8004f78 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dca:	4b1b      	ldr	r3, [pc, #108]	@ (8004e38 <HAL_RCC_ClockConfig+0x288>)
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	f003 030c 	and.w	r3, r3, #12
 8004dd2:	2b0c      	cmp	r3, #12
 8004dd4:	d1ee      	bne.n	8004db4 <HAL_RCC_ClockConfig+0x204>
 8004dd6:	e044      	b.n	8004e62 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d112      	bne.n	8004e06 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004de0:	e00a      	b.n	8004df8 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004de2:	f7fd fcb1 	bl	8002748 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e0bf      	b.n	8004f78 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004df8:	4b0f      	ldr	r3, [pc, #60]	@ (8004e38 <HAL_RCC_ClockConfig+0x288>)
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	f003 030c 	and.w	r3, r3, #12
 8004e00:	2b08      	cmp	r3, #8
 8004e02:	d1ee      	bne.n	8004de2 <HAL_RCC_ClockConfig+0x232>
 8004e04:	e02d      	b.n	8004e62 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d123      	bne.n	8004e56 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e0e:	e00a      	b.n	8004e26 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e10:	f7fd fc9a 	bl	8002748 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e0a8      	b.n	8004f78 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e26:	4b04      	ldr	r3, [pc, #16]	@ (8004e38 <HAL_RCC_ClockConfig+0x288>)
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	f003 030c 	and.w	r3, r3, #12
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1ee      	bne.n	8004e10 <HAL_RCC_ClockConfig+0x260>
 8004e32:	e016      	b.n	8004e62 <HAL_RCC_ClockConfig+0x2b2>
 8004e34:	40022000 	.word	0x40022000
 8004e38:	46020c00 	.word	0x46020c00
 8004e3c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e40:	f7fd fc82 	bl	8002748 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e090      	b.n	8004f78 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e56:	4b4a      	ldr	r3, [pc, #296]	@ (8004f80 <HAL_RCC_ClockConfig+0x3d0>)
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	f003 030c 	and.w	r3, r3, #12
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d1ee      	bne.n	8004e40 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d010      	beq.n	8004e90 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689a      	ldr	r2, [r3, #8]
 8004e72:	4b43      	ldr	r3, [pc, #268]	@ (8004f80 <HAL_RCC_ClockConfig+0x3d0>)
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d208      	bcs.n	8004e90 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004e7e:	4b40      	ldr	r3, [pc, #256]	@ (8004f80 <HAL_RCC_ClockConfig+0x3d0>)
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	f023 020f 	bic.w	r2, r3, #15
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	493d      	ldr	r1, [pc, #244]	@ (8004f80 <HAL_RCC_ClockConfig+0x3d0>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e90:	4b3c      	ldr	r3, [pc, #240]	@ (8004f84 <HAL_RCC_ClockConfig+0x3d4>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 030f 	and.w	r3, r3, #15
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d210      	bcs.n	8004ec0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e9e:	4b39      	ldr	r3, [pc, #228]	@ (8004f84 <HAL_RCC_ClockConfig+0x3d4>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f023 020f 	bic.w	r2, r3, #15
 8004ea6:	4937      	ldr	r1, [pc, #220]	@ (8004f84 <HAL_RCC_ClockConfig+0x3d4>)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eae:	4b35      	ldr	r3, [pc, #212]	@ (8004f84 <HAL_RCC_ClockConfig+0x3d4>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 030f 	and.w	r3, r3, #15
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d001      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e05b      	b.n	8004f78 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d010      	beq.n	8004eee <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68da      	ldr	r2, [r3, #12]
 8004ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8004f80 <HAL_RCC_ClockConfig+0x3d0>)
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d208      	bcs.n	8004eee <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004edc:	4b28      	ldr	r3, [pc, #160]	@ (8004f80 <HAL_RCC_ClockConfig+0x3d0>)
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	4925      	ldr	r1, [pc, #148]	@ (8004f80 <HAL_RCC_ClockConfig+0x3d0>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d012      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	4b20      	ldr	r3, [pc, #128]	@ (8004f80 <HAL_RCC_ClockConfig+0x3d0>)
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	091b      	lsrs	r3, r3, #4
 8004f04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d209      	bcs.n	8004f20 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8004f80 <HAL_RCC_ClockConfig+0x3d0>)
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	011b      	lsls	r3, r3, #4
 8004f1a:	4919      	ldr	r1, [pc, #100]	@ (8004f80 <HAL_RCC_ClockConfig+0x3d0>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0310 	and.w	r3, r3, #16
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d010      	beq.n	8004f4e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	695a      	ldr	r2, [r3, #20]
 8004f30:	4b13      	ldr	r3, [pc, #76]	@ (8004f80 <HAL_RCC_ClockConfig+0x3d0>)
 8004f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f34:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d208      	bcs.n	8004f4e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004f3c:	4b10      	ldr	r3, [pc, #64]	@ (8004f80 <HAL_RCC_ClockConfig+0x3d0>)
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f40:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	490d      	ldr	r1, [pc, #52]	@ (8004f80 <HAL_RCC_ClockConfig+0x3d0>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004f4e:	f000 f821 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 8004f52:	4602      	mov	r2, r0
 8004f54:	4b0a      	ldr	r3, [pc, #40]	@ (8004f80 <HAL_RCC_ClockConfig+0x3d0>)
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	f003 030f 	and.w	r3, r3, #15
 8004f5c:	490a      	ldr	r1, [pc, #40]	@ (8004f88 <HAL_RCC_ClockConfig+0x3d8>)
 8004f5e:	5ccb      	ldrb	r3, [r1, r3]
 8004f60:	fa22 f303 	lsr.w	r3, r2, r3
 8004f64:	4a09      	ldr	r2, [pc, #36]	@ (8004f8c <HAL_RCC_ClockConfig+0x3dc>)
 8004f66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f68:	4b09      	ldr	r3, [pc, #36]	@ (8004f90 <HAL_RCC_ClockConfig+0x3e0>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7fd fb61 	bl	8002634 <HAL_InitTick>
 8004f72:	4603      	mov	r3, r0
 8004f74:	73fb      	strb	r3, [r7, #15]

  return status;
 8004f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3718      	adds	r7, #24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	46020c00 	.word	0x46020c00
 8004f84:	40022000 	.word	0x40022000
 8004f88:	0800bdd8 	.word	0x0800bdd8
 8004f8c:	20000004 	.word	0x20000004
 8004f90:	2000001c 	.word	0x2000001c

08004f94 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b08b      	sub	sp, #44	@ 0x2c
 8004f98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fa2:	4b78      	ldr	r3, [pc, #480]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
 8004faa:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fac:	4b75      	ldr	r3, [pc, #468]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb0:	f003 0303 	and.w	r3, r3, #3
 8004fb4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <HAL_RCC_GetSysClockFreq+0x34>
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	2b0c      	cmp	r3, #12
 8004fc0:	d121      	bne.n	8005006 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d11e      	bne.n	8005006 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004fc8:	4b6e      	ldr	r3, [pc, #440]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d107      	bne.n	8004fe4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004fd4:	4b6b      	ldr	r3, [pc, #428]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004fd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004fda:	0b1b      	lsrs	r3, r3, #12
 8004fdc:	f003 030f 	and.w	r3, r3, #15
 8004fe0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fe2:	e005      	b.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004fe4:	4b67      	ldr	r3, [pc, #412]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	0f1b      	lsrs	r3, r3, #28
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ff0:	4a65      	ldr	r2, [pc, #404]	@ (8005188 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ff8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d110      	bne.n	8005022 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005002:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005004:	e00d      	b.n	8005022 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005006:	4b5f      	ldr	r3, [pc, #380]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	f003 030c 	and.w	r3, r3, #12
 800500e:	2b04      	cmp	r3, #4
 8005010:	d102      	bne.n	8005018 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005012:	4b5e      	ldr	r3, [pc, #376]	@ (800518c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005014:	623b      	str	r3, [r7, #32]
 8005016:	e004      	b.n	8005022 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	2b08      	cmp	r3, #8
 800501c:	d101      	bne.n	8005022 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800501e:	4b5c      	ldr	r3, [pc, #368]	@ (8005190 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005020:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	2b0c      	cmp	r3, #12
 8005026:	f040 80a5 	bne.w	8005174 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800502a:	4b56      	ldr	r3, [pc, #344]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800502c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005034:	4b53      	ldr	r3, [pc, #332]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005038:	0a1b      	lsrs	r3, r3, #8
 800503a:	f003 030f 	and.w	r3, r3, #15
 800503e:	3301      	adds	r3, #1
 8005040:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005042:	4b50      	ldr	r3, [pc, #320]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005046:	091b      	lsrs	r3, r3, #4
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800504e:	4b4d      	ldr	r3, [pc, #308]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005052:	08db      	lsrs	r3, r3, #3
 8005054:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	fb02 f303 	mul.w	r3, r2, r3
 800505e:	ee07 3a90 	vmov	s15, r3
 8005062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005066:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	2b02      	cmp	r3, #2
 800506e:	d003      	beq.n	8005078 <HAL_RCC_GetSysClockFreq+0xe4>
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	2b03      	cmp	r3, #3
 8005074:	d022      	beq.n	80050bc <HAL_RCC_GetSysClockFreq+0x128>
 8005076:	e043      	b.n	8005100 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	ee07 3a90 	vmov	s15, r3
 800507e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005082:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8005194 <HAL_RCC_GetSysClockFreq+0x200>
 8005086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800508a:	4b3e      	ldr	r3, [pc, #248]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800508c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800508e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005092:	ee07 3a90 	vmov	s15, r3
 8005096:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800509a:	ed97 6a01 	vldr	s12, [r7, #4]
 800509e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005198 <HAL_RCC_GetSysClockFreq+0x204>
 80050a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80050aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050ba:	e046      	b.n	800514a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	ee07 3a90 	vmov	s15, r3
 80050c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050c6:	eddf 6a35 	vldr	s13, [pc, #212]	@ 800519c <HAL_RCC_GetSysClockFreq+0x208>
 80050ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ce:	4b2d      	ldr	r3, [pc, #180]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80050d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050d6:	ee07 3a90 	vmov	s15, r3
 80050da:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80050de:	ed97 6a01 	vldr	s12, [r7, #4]
 80050e2:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8005198 <HAL_RCC_GetSysClockFreq+0x204>
 80050e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80050ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050fe:	e024      	b.n	800514a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005102:	ee07 3a90 	vmov	s15, r3
 8005106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	ee07 3a90 	vmov	s15, r3
 8005110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005114:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005118:	4b1a      	ldr	r3, [pc, #104]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800511a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800511c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005120:	ee07 3a90 	vmov	s15, r3
 8005124:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005128:	ed97 6a01 	vldr	s12, [r7, #4]
 800512c:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8005198 <HAL_RCC_GetSysClockFreq+0x204>
 8005130:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005134:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005138:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800513c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005144:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005148:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800514a:	4b0e      	ldr	r3, [pc, #56]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800514c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800514e:	0e1b      	lsrs	r3, r3, #24
 8005150:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005154:	3301      	adds	r3, #1
 8005156:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	ee07 3a90 	vmov	s15, r3
 800515e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005162:	edd7 6a07 	vldr	s13, [r7, #28]
 8005166:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800516a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800516e:	ee17 3a90 	vmov	r3, s15
 8005172:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8005174:	6a3b      	ldr	r3, [r7, #32]
}
 8005176:	4618      	mov	r0, r3
 8005178:	372c      	adds	r7, #44	@ 0x2c
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	46020c00 	.word	0x46020c00
 8005188:	0800bdf0 	.word	0x0800bdf0
 800518c:	00f42400 	.word	0x00f42400
 8005190:	007a1200 	.word	0x007a1200
 8005194:	4b742400 	.word	0x4b742400
 8005198:	46000000 	.word	0x46000000
 800519c:	4af42400 	.word	0x4af42400

080051a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80051a4:	f7ff fef6 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 80051a8:	4602      	mov	r2, r0
 80051aa:	4b07      	ldr	r3, [pc, #28]	@ (80051c8 <HAL_RCC_GetHCLKFreq+0x28>)
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	f003 030f 	and.w	r3, r3, #15
 80051b2:	4906      	ldr	r1, [pc, #24]	@ (80051cc <HAL_RCC_GetHCLKFreq+0x2c>)
 80051b4:	5ccb      	ldrb	r3, [r1, r3]
 80051b6:	fa22 f303 	lsr.w	r3, r2, r3
 80051ba:	4a05      	ldr	r2, [pc, #20]	@ (80051d0 <HAL_RCC_GetHCLKFreq+0x30>)
 80051bc:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80051be:	4b04      	ldr	r3, [pc, #16]	@ (80051d0 <HAL_RCC_GetHCLKFreq+0x30>)
 80051c0:	681b      	ldr	r3, [r3, #0]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	46020c00 	.word	0x46020c00
 80051cc:	0800bdd8 	.word	0x0800bdd8
 80051d0:	20000004 	.word	0x20000004

080051d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80051d8:	f7ff ffe2 	bl	80051a0 <HAL_RCC_GetHCLKFreq>
 80051dc:	4602      	mov	r2, r0
 80051de:	4b05      	ldr	r3, [pc, #20]	@ (80051f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	091b      	lsrs	r3, r3, #4
 80051e4:	f003 0307 	and.w	r3, r3, #7
 80051e8:	4903      	ldr	r1, [pc, #12]	@ (80051f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051ea:	5ccb      	ldrb	r3, [r1, r3]
 80051ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	46020c00 	.word	0x46020c00
 80051f8:	0800bde8 	.word	0x0800bde8

080051fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005200:	f7ff ffce 	bl	80051a0 <HAL_RCC_GetHCLKFreq>
 8005204:	4602      	mov	r2, r0
 8005206:	4b05      	ldr	r3, [pc, #20]	@ (800521c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	0a1b      	lsrs	r3, r3, #8
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	4903      	ldr	r1, [pc, #12]	@ (8005220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005212:	5ccb      	ldrb	r3, [r1, r3]
 8005214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005218:	4618      	mov	r0, r3
 800521a:	bd80      	pop	{r7, pc}
 800521c:	46020c00 	.word	0x46020c00
 8005220:	0800bde8 	.word	0x0800bde8

08005224 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005228:	f7ff ffba 	bl	80051a0 <HAL_RCC_GetHCLKFreq>
 800522c:	4602      	mov	r2, r0
 800522e:	4b05      	ldr	r3, [pc, #20]	@ (8005244 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005232:	091b      	lsrs	r3, r3, #4
 8005234:	f003 0307 	and.w	r3, r3, #7
 8005238:	4903      	ldr	r1, [pc, #12]	@ (8005248 <HAL_RCC_GetPCLK3Freq+0x24>)
 800523a:	5ccb      	ldrb	r3, [r1, r3]
 800523c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005240:	4618      	mov	r0, r3
 8005242:	bd80      	pop	{r7, pc}
 8005244:	46020c00 	.word	0x46020c00
 8005248:	0800bde8 	.word	0x0800bde8

0800524c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005254:	4b3e      	ldr	r3, [pc, #248]	@ (8005350 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005256:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800525a:	f003 0304 	and.w	r3, r3, #4
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005262:	f7fe fd3f 	bl	8003ce4 <HAL_PWREx_GetVoltageRange>
 8005266:	6178      	str	r0, [r7, #20]
 8005268:	e019      	b.n	800529e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800526a:	4b39      	ldr	r3, [pc, #228]	@ (8005350 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800526c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005270:	4a37      	ldr	r2, [pc, #220]	@ (8005350 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005272:	f043 0304 	orr.w	r3, r3, #4
 8005276:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800527a:	4b35      	ldr	r3, [pc, #212]	@ (8005350 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800527c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005280:	f003 0304 	and.w	r3, r3, #4
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005288:	f7fe fd2c 	bl	8003ce4 <HAL_PWREx_GetVoltageRange>
 800528c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800528e:	4b30      	ldr	r3, [pc, #192]	@ (8005350 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005290:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005294:	4a2e      	ldr	r2, [pc, #184]	@ (8005350 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005296:	f023 0304 	bic.w	r3, r3, #4
 800529a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80052a4:	d003      	beq.n	80052ae <RCC_SetFlashLatencyFromMSIRange+0x62>
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052ac:	d109      	bne.n	80052c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052b4:	d202      	bcs.n	80052bc <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80052b6:	2301      	movs	r3, #1
 80052b8:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80052ba:	e033      	b.n	8005324 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80052bc:	2300      	movs	r3, #0
 80052be:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80052c0:	e030      	b.n	8005324 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052c8:	d208      	bcs.n	80052dc <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052d0:	d102      	bne.n	80052d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80052d2:	2303      	movs	r3, #3
 80052d4:	613b      	str	r3, [r7, #16]
 80052d6:	e025      	b.n	8005324 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e035      	b.n	8005348 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052e2:	d90f      	bls.n	8005304 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d109      	bne.n	80052fe <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80052f0:	d902      	bls.n	80052f8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80052f2:	2300      	movs	r3, #0
 80052f4:	613b      	str	r3, [r7, #16]
 80052f6:	e015      	b.n	8005324 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80052f8:	2301      	movs	r3, #1
 80052fa:	613b      	str	r3, [r7, #16]
 80052fc:	e012      	b.n	8005324 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80052fe:	2300      	movs	r3, #0
 8005300:	613b      	str	r3, [r7, #16]
 8005302:	e00f      	b.n	8005324 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800530a:	d109      	bne.n	8005320 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005312:	d102      	bne.n	800531a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005314:	2301      	movs	r3, #1
 8005316:	613b      	str	r3, [r7, #16]
 8005318:	e004      	b.n	8005324 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800531a:	2302      	movs	r3, #2
 800531c:	613b      	str	r3, [r7, #16]
 800531e:	e001      	b.n	8005324 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005320:	2301      	movs	r3, #1
 8005322:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005324:	4b0b      	ldr	r3, [pc, #44]	@ (8005354 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f023 020f 	bic.w	r2, r3, #15
 800532c:	4909      	ldr	r1, [pc, #36]	@ (8005354 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	4313      	orrs	r3, r2
 8005332:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005334:	4b07      	ldr	r3, [pc, #28]	@ (8005354 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 030f 	and.w	r3, r3, #15
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	429a      	cmp	r2, r3
 8005340:	d001      	beq.n	8005346 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e000      	b.n	8005348 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3718      	adds	r7, #24
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	46020c00 	.word	0x46020c00
 8005354:	40022000 	.word	0x40022000

08005358 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800535c:	b0b6      	sub	sp, #216	@ 0xd8
 800535e:	af00      	add	r7, sp, #0
 8005360:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005364:	2300      	movs	r3, #0
 8005366:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800536a:	2300      	movs	r3, #0
 800536c:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005370:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005378:	f002 0401 	and.w	r4, r2, #1
 800537c:	2500      	movs	r5, #0
 800537e:	ea54 0305 	orrs.w	r3, r4, r5
 8005382:	d00b      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005384:	4bc5      	ldr	r3, [pc, #788]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800538a:	f023 0103 	bic.w	r1, r3, #3
 800538e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005392:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005394:	4ac1      	ldr	r2, [pc, #772]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005396:	430b      	orrs	r3, r1
 8005398:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800539c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80053a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a4:	f002 0804 	and.w	r8, r2, #4
 80053a8:	f04f 0900 	mov.w	r9, #0
 80053ac:	ea58 0309 	orrs.w	r3, r8, r9
 80053b0:	d00b      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80053b2:	4bba      	ldr	r3, [pc, #744]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80053b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053b8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80053bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80053c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053c2:	4ab6      	ldr	r2, [pc, #728]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80053c4:	430b      	orrs	r3, r1
 80053c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80053ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d2:	f002 0a08 	and.w	sl, r2, #8
 80053d6:	f04f 0b00 	mov.w	fp, #0
 80053da:	ea5a 030b 	orrs.w	r3, sl, fp
 80053de:	d00b      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80053e0:	4bae      	ldr	r3, [pc, #696]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80053e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80053ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80053ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053f0:	4aaa      	ldr	r2, [pc, #680]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80053f2:	430b      	orrs	r3, r1
 80053f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80053fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005400:	f002 0310 	and.w	r3, r2, #16
 8005404:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005408:	2300      	movs	r3, #0
 800540a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800540e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005412:	460b      	mov	r3, r1
 8005414:	4313      	orrs	r3, r2
 8005416:	d00b      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005418:	4ba0      	ldr	r3, [pc, #640]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800541a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800541e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005422:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005428:	4a9c      	ldr	r2, [pc, #624]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800542a:	430b      	orrs	r3, r1
 800542c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005430:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005438:	f002 0320 	and.w	r3, r2, #32
 800543c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005440:	2300      	movs	r3, #0
 8005442:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005446:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800544a:	460b      	mov	r3, r1
 800544c:	4313      	orrs	r3, r2
 800544e:	d00b      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005450:	4b92      	ldr	r3, [pc, #584]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005452:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005456:	f023 0107 	bic.w	r1, r3, #7
 800545a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800545e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005460:	4a8e      	ldr	r2, [pc, #568]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005462:	430b      	orrs	r3, r1
 8005464:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005468:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800546c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005470:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005474:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005478:	2300      	movs	r3, #0
 800547a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800547e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005482:	460b      	mov	r3, r1
 8005484:	4313      	orrs	r3, r2
 8005486:	d00b      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005488:	4b84      	ldr	r3, [pc, #528]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800548a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800548e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005492:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005496:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005498:	4a80      	ldr	r2, [pc, #512]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800549a:	430b      	orrs	r3, r1
 800549c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80054a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80054ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80054b0:	2300      	movs	r3, #0
 80054b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80054b6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80054ba:	460b      	mov	r3, r1
 80054bc:	4313      	orrs	r3, r2
 80054be:	d00b      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80054c0:	4b76      	ldr	r3, [pc, #472]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80054c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80054c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80054ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054d0:	4a72      	ldr	r2, [pc, #456]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80054d2:	430b      	orrs	r3, r1
 80054d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80054dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e0:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80054e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80054e8:	2300      	movs	r3, #0
 80054ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80054ee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80054f2:	460b      	mov	r3, r1
 80054f4:	4313      	orrs	r3, r2
 80054f6:	d00b      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80054f8:	4b68      	ldr	r3, [pc, #416]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80054fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80054fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005502:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005506:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005508:	4a64      	ldr	r2, [pc, #400]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800550a:	430b      	orrs	r3, r1
 800550c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005510:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005518:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800551c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005520:	2300      	movs	r3, #0
 8005522:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005526:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800552a:	460b      	mov	r3, r1
 800552c:	4313      	orrs	r3, r2
 800552e:	d00b      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005530:	4b5a      	ldr	r3, [pc, #360]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005536:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800553a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800553e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005540:	4a56      	ldr	r2, [pc, #344]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005542:	430b      	orrs	r3, r1
 8005544:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005548:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800554c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005550:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8005554:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005558:	2300      	movs	r3, #0
 800555a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800555e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005562:	460b      	mov	r3, r1
 8005564:	4313      	orrs	r3, r2
 8005566:	d00b      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005568:	4b4c      	ldr	r3, [pc, #304]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800556a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800556e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005572:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005576:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005578:	4a48      	ldr	r2, [pc, #288]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800557a:	430b      	orrs	r3, r1
 800557c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005580:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005588:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800558c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005590:	2300      	movs	r3, #0
 8005592:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005596:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800559a:	460b      	mov	r3, r1
 800559c:	4313      	orrs	r3, r2
 800559e:	d00b      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80055a0:	4b3e      	ldr	r3, [pc, #248]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80055a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055a6:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80055aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80055ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055b0:	4a3a      	ldr	r2, [pc, #232]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80055b2:	430b      	orrs	r3, r1
 80055b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80055b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80055c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80055c6:	2300      	movs	r3, #0
 80055c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80055ca:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80055ce:	460b      	mov	r3, r1
 80055d0:	4313      	orrs	r3, r2
 80055d2:	d00b      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80055d4:	4b31      	ldr	r3, [pc, #196]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80055d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80055da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80055de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80055e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055e4:	4a2d      	ldr	r2, [pc, #180]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80055e6:	430b      	orrs	r3, r1
 80055e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80055ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80055f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f4:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80055f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80055fa:	2300      	movs	r3, #0
 80055fc:	677b      	str	r3, [r7, #116]	@ 0x74
 80055fe:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005602:	460b      	mov	r3, r1
 8005604:	4313      	orrs	r3, r2
 8005606:	d04f      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005608:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800560c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005610:	2b80      	cmp	r3, #128	@ 0x80
 8005612:	d02d      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8005614:	2b80      	cmp	r3, #128	@ 0x80
 8005616:	d827      	bhi.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005618:	2b60      	cmp	r3, #96	@ 0x60
 800561a:	d02b      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800561c:	2b60      	cmp	r3, #96	@ 0x60
 800561e:	d823      	bhi.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005620:	2b40      	cmp	r3, #64	@ 0x40
 8005622:	d006      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005624:	2b40      	cmp	r3, #64	@ 0x40
 8005626:	d81f      	bhi.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005628:	2b00      	cmp	r3, #0
 800562a:	d009      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800562c:	2b20      	cmp	r3, #32
 800562e:	d011      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005630:	e01a      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005632:	4b1a      	ldr	r3, [pc, #104]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005636:	4a19      	ldr	r2, [pc, #100]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800563c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800563e:	e01a      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005640:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005644:	3308      	adds	r3, #8
 8005646:	4618      	mov	r0, r3
 8005648:	f002 f91e 	bl	8007888 <RCCEx_PLL2_Config>
 800564c:	4603      	mov	r3, r0
 800564e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005652:	e010      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005654:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005658:	332c      	adds	r3, #44	@ 0x2c
 800565a:	4618      	mov	r0, r3
 800565c:	f002 f9ac 	bl	80079b8 <RCCEx_PLL3_Config>
 8005660:	4603      	mov	r3, r0
 8005662:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005666:	e006      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800566e:	e002      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8005670:	bf00      	nop
 8005672:	e000      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8005674:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005676:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d110      	bne.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800567e:	4b07      	ldr	r3, [pc, #28]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005680:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005684:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8005688:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800568c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005690:	4a02      	ldr	r2, [pc, #8]	@ (800569c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005692:	430b      	orrs	r3, r1
 8005694:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005698:	e006      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800569a:	bf00      	nop
 800569c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a0:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80056a4:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80056a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80056ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80056b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056b6:	2300      	movs	r3, #0
 80056b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80056ba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80056be:	460b      	mov	r3, r1
 80056c0:	4313      	orrs	r3, r2
 80056c2:	d046      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80056c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80056c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80056cc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80056d0:	d028      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80056d2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80056d6:	d821      	bhi.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80056d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056dc:	d022      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80056de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056e2:	d81b      	bhi.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80056e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056e8:	d01c      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80056ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056ee:	d815      	bhi.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80056f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056f4:	d008      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 80056f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056fa:	d80f      	bhi.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d011      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005700:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005704:	d00e      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005706:	e009      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005708:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800570c:	3308      	adds	r3, #8
 800570e:	4618      	mov	r0, r3
 8005710:	f002 f8ba 	bl	8007888 <RCCEx_PLL2_Config>
 8005714:	4603      	mov	r3, r0
 8005716:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800571a:	e004      	b.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005722:	e000      	b.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 8005724:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005726:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10d      	bne.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800572e:	4bb6      	ldr	r3, [pc, #728]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005730:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005734:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005738:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800573c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005740:	4ab1      	ldr	r2, [pc, #708]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005742:	430b      	orrs	r3, r1
 8005744:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005748:	e003      	b.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800574a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800574e:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005752:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800575e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005760:	2300      	movs	r3, #0
 8005762:	667b      	str	r3, [r7, #100]	@ 0x64
 8005764:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005768:	460b      	mov	r3, r1
 800576a:	4313      	orrs	r3, r2
 800576c:	d03e      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800576e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005772:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005776:	2b04      	cmp	r3, #4
 8005778:	d81d      	bhi.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800577a:	a201      	add	r2, pc, #4	@ (adr r2, 8005780 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 800577c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005780:	080057bf 	.word	0x080057bf
 8005784:	08005795 	.word	0x08005795
 8005788:	080057a3 	.word	0x080057a3
 800578c:	080057bf 	.word	0x080057bf
 8005790:	080057bf 	.word	0x080057bf
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005794:	4b9c      	ldr	r3, [pc, #624]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005798:	4a9b      	ldr	r2, [pc, #620]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800579a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800579e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80057a0:	e00e      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80057a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80057a6:	332c      	adds	r3, #44	@ 0x2c
 80057a8:	4618      	mov	r0, r3
 80057aa:	f002 f905 	bl	80079b8 <RCCEx_PLL3_Config>
 80057ae:	4603      	mov	r3, r0
 80057b0:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80057b4:	e004      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80057bc:	e000      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 80057be:	bf00      	nop
    }
    if (ret == HAL_OK)
 80057c0:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10d      	bne.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80057c8:	4b8f      	ldr	r3, [pc, #572]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80057ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80057ce:	f023 0107 	bic.w	r1, r3, #7
 80057d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80057d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057da:	4a8b      	ldr	r2, [pc, #556]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80057dc:	430b      	orrs	r3, r1
 80057de:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80057e2:	e003      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e4:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80057e8:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80057ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80057f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f4:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80057f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057fa:	2300      	movs	r3, #0
 80057fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057fe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005802:	460b      	mov	r3, r1
 8005804:	4313      	orrs	r3, r2
 8005806:	d04a      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005808:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800580c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005810:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005814:	d028      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8005816:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800581a:	d821      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800581c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005820:	d024      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005822:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005826:	d81b      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005828:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800582c:	d00e      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800582e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005832:	d815      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005834:	2b00      	cmp	r3, #0
 8005836:	d01b      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800583c:	d110      	bne.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800583e:	4b72      	ldr	r3, [pc, #456]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005842:	4a71      	ldr	r2, [pc, #452]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005848:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800584a:	e012      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800584c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005850:	332c      	adds	r3, #44	@ 0x2c
 8005852:	4618      	mov	r0, r3
 8005854:	f002 f8b0 	bl	80079b8 <RCCEx_PLL3_Config>
 8005858:	4603      	mov	r3, r0
 800585a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800585e:	e008      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005866:	e004      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8005868:	bf00      	nop
 800586a:	e002      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 800586c:	bf00      	nop
 800586e:	e000      	b.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8005870:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005872:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10d      	bne.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800587a:	4b63      	ldr	r3, [pc, #396]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800587c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005880:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005884:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800588c:	4a5e      	ldr	r2, [pc, #376]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800588e:	430b      	orrs	r3, r1
 8005890:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005894:	e003      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005896:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800589a:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800589e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80058a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80058aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80058ac:	2300      	movs	r3, #0
 80058ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80058b0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80058b4:	460b      	mov	r3, r1
 80058b6:	4313      	orrs	r3, r2
 80058b8:	f000 80ba 	beq.w	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058bc:	2300      	movs	r3, #0
 80058be:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058c2:	4b51      	ldr	r3, [pc, #324]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80058c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d113      	bne.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058d0:	4b4d      	ldr	r3, [pc, #308]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80058d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058d6:	4a4c      	ldr	r2, [pc, #304]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80058d8:	f043 0304 	orr.w	r3, r3, #4
 80058dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80058e0:	4b49      	ldr	r3, [pc, #292]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80058e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058e6:	f003 0304 	and.w	r3, r3, #4
 80058ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
      pwrclkchanged = SET;
 80058f2:	2301      	movs	r3, #1
 80058f4:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80058f8:	4b44      	ldr	r3, [pc, #272]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 80058fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058fc:	4a43      	ldr	r2, [pc, #268]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 80058fe:	f043 0301 	orr.w	r3, r3, #1
 8005902:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005904:	f7fc ff20 	bl	8002748 <HAL_GetTick>
 8005908:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800590c:	e00b      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800590e:	f7fc ff1b 	bl	8002748 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d903      	bls.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005924:	e005      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005926:	4b39      	ldr	r3, [pc, #228]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8005928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	d0ed      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 8005932:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d16a      	bne.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800593a:	4b33      	ldr	r3, [pc, #204]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800593c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005940:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005944:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005948:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800594c:	2b00      	cmp	r3, #0
 800594e:	d023      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8005950:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005954:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8005958:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800595c:	4293      	cmp	r3, r2
 800595e:	d01b      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005960:	4b29      	ldr	r3, [pc, #164]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005962:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005966:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800596a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800596e:	4b26      	ldr	r3, [pc, #152]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005970:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005974:	4a24      	ldr	r2, [pc, #144]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005976:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800597a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800597e:	4b22      	ldr	r3, [pc, #136]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005980:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005984:	4a20      	ldr	r2, [pc, #128]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005986:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800598a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800598e:	4a1e      	ldr	r2, [pc, #120]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005990:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005994:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005998:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d019      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a4:	f7fc fed0 	bl	8002748 <HAL_GetTick>
 80059a8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059ac:	e00d      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059ae:	f7fc fecb 	bl	8002748 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059b8:	1ad2      	subs	r2, r2, r3
 80059ba:	f241 3388 	movw	r3, #5000	@ 0x1388
 80059be:	429a      	cmp	r2, r3
 80059c0:	d903      	bls.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
            break;
 80059c8:	e006      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059ca:	4b0f      	ldr	r3, [pc, #60]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80059cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d0ea      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 80059d8:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10d      	bne.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80059e0:	4b09      	ldr	r3, [pc, #36]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80059e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80059ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80059f2:	4a05      	ldr	r2, [pc, #20]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80059f4:	430b      	orrs	r3, r1
 80059f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80059fa:	e00d      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059fc:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005a00:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
 8005a04:	e008      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8005a06:	bf00      	nop
 8005a08:	46020c00 	.word	0x46020c00
 8005a0c:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a10:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005a14:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a18:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d107      	bne.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a20:	4bb2      	ldr	r3, [pc, #712]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a26:	4ab1      	ldr	r2, [pc, #708]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005a28:	f023 0304 	bic.w	r3, r3, #4
 8005a2c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005a30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a38:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a3e:	2300      	movs	r3, #0
 8005a40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a42:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005a46:	460b      	mov	r3, r1
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	d042      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005a4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a50:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a54:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005a58:	d022      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8005a5a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005a5e:	d81b      	bhi.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005a60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a64:	d011      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x732>
 8005a66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a6a:	d815      	bhi.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d019      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8005a70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a74:	d110      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a7a:	3308      	adds	r3, #8
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f001 ff03 	bl	8007888 <RCCEx_PLL2_Config>
 8005a82:	4603      	mov	r3, r0
 8005a84:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005a88:	e00d      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a8a:	4b98      	ldr	r3, [pc, #608]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8e:	4a97      	ldr	r2, [pc, #604]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005a90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a94:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005a96:	e006      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005a9e:	e002      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8005aa0:	bf00      	nop
 8005aa2:	e000      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8005aa4:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005aa6:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10d      	bne.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005aae:	4b8f      	ldr	r3, [pc, #572]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ab4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005ab8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005abc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ac0:	4a8a      	ldr	r2, [pc, #552]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005ac2:	430b      	orrs	r3, r1
 8005ac4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005ac8:	e003      	b.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aca:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005ace:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005ad2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ada:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005ade:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ae4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4313      	orrs	r3, r2
 8005aec:	d02d      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005aee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005af6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005afa:	d00b      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8005afc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b00:	d804      	bhi.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d008      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8005b06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b0a:	d007      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005b12:	e004      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8005b14:	bf00      	nop
 8005b16:	e002      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8005b18:	bf00      	nop
 8005b1a:	e000      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8005b1c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005b1e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10d      	bne.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005b26:	4b71      	ldr	r3, [pc, #452]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005b28:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b2c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b38:	4a6c      	ldr	r2, [pc, #432]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005b3a:	430b      	orrs	r3, r1
 8005b3c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005b40:	e003      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b42:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005b46:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005b4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b52:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005b56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b58:	2300      	movs	r3, #0
 8005b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b5c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005b60:	460b      	mov	r3, r1
 8005b62:	4313      	orrs	r3, r2
 8005b64:	d00c      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005b66:	4b61      	ldr	r3, [pc, #388]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005b68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b6c:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8005b70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b78:	4a5c      	ldr	r2, [pc, #368]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005b7a:	430b      	orrs	r3, r1
 8005b7c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005b80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b88:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005b8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b8e:	2300      	movs	r3, #0
 8005b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b92:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005b96:	460b      	mov	r3, r1
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	d019      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005b9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ba0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ba4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ba8:	d105      	bne.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005baa:	4b50      	ldr	r3, [pc, #320]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bae:	4a4f      	ldr	r2, [pc, #316]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005bb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bb4:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005bb6:	4b4d      	ldr	r3, [pc, #308]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005bb8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005bbc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005bc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005bc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005bc8:	4a48      	ldr	r2, [pc, #288]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005bca:	430b      	orrs	r3, r1
 8005bcc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005bd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bde:	2300      	movs	r3, #0
 8005be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005be2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005be6:	460b      	mov	r3, r1
 8005be8:	4313      	orrs	r3, r2
 8005bea:	d00c      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005bec:	4b3f      	ldr	r3, [pc, #252]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005bf2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005bf6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005bfa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005bfe:	493b      	ldr	r1, [pc, #236]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005c06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005c12:	623b      	str	r3, [r7, #32]
 8005c14:	2300      	movs	r3, #0
 8005c16:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c18:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	d00c      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005c22:	4b32      	ldr	r3, [pc, #200]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c28:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005c2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c34:	492d      	ldr	r1, [pc, #180]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005c3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c44:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005c48:	61bb      	str	r3, [r7, #24]
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	61fb      	str	r3, [r7, #28]
 8005c4e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005c52:	460b      	mov	r3, r1
 8005c54:	4313      	orrs	r3, r2
 8005c56:	d00c      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005c58:	4b24      	ldr	r3, [pc, #144]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005c5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005c5e:	f023 0218 	bic.w	r2, r3, #24
 8005c62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c6a:	4920      	ldr	r1, [pc, #128]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005c72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7a:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005c7e:	613b      	str	r3, [r7, #16]
 8005c80:	2300      	movs	r3, #0
 8005c82:	617b      	str	r3, [r7, #20]
 8005c84:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005c88:	460b      	mov	r3, r1
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	d034      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005c8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005c92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005c96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c9a:	d105      	bne.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c9c:	4b13      	ldr	r3, [pc, #76]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca0:	4a12      	ldr	r2, [pc, #72]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005ca2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ca6:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005ca8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005cac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005cb0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005cb4:	d108      	bne.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005cb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005cba:	3308      	adds	r3, #8
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f001 fde3 	bl	8007888 <RCCEx_PLL2_Config>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    }
    if (ret == HAL_OK)
 8005cc8:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10f      	bne.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005cd0:	4b06      	ldr	r3, [pc, #24]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005cd2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005cd6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005cda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005cde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005ce2:	4902      	ldr	r1, [pc, #8]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005cea:	e005      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8005cec:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf0:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005cf4:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005cf8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d00:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005d04:	60bb      	str	r3, [r7, #8]
 8005d06:	2300      	movs	r3, #0
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005d0e:	460b      	mov	r3, r1
 8005d10:	4313      	orrs	r3, r2
 8005d12:	d03a      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005d14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d20:	d00e      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8005d22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d26:	d815      	bhi.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d017      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005d2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d30:	d110      	bne.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d32:	4b27      	ldr	r3, [pc, #156]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d36:	4a26      	ldr	r2, [pc, #152]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005d38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d3c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005d3e:	e00e      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d44:	3308      	adds	r3, #8
 8005d46:	4618      	mov	r0, r3
 8005d48:	f001 fd9e 	bl	8007888 <RCCEx_PLL2_Config>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005d52:	e004      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005d5a:	e000      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 8005d5c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005d5e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10d      	bne.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005d66:	4b1a      	ldr	r3, [pc, #104]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d6c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005d70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d78:	4915      	ldr	r1, [pc, #84]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005d80:	e003      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d82:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005d86:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005d8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d92:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005d96:	603b      	str	r3, [r7, #0]
 8005d98:	2300      	movs	r3, #0
 8005d9a:	607b      	str	r3, [r7, #4]
 8005d9c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005da0:	460b      	mov	r3, r1
 8005da2:	4313      	orrs	r3, r2
 8005da4:	d00c      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005da6:	4b0a      	ldr	r3, [pc, #40]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005da8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005dac:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005db0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005db4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005db8:	4905      	ldr	r1, [pc, #20]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005dc0:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	37d8      	adds	r7, #216	@ 0xd8
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dce:	bf00      	nop
 8005dd0:	46020c00 	.word	0x46020c00

08005dd4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b089      	sub	sp, #36	@ 0x24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005ddc:	4ba6      	ldr	r3, [pc, #664]	@ (8006078 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de4:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005de6:	4ba4      	ldr	r3, [pc, #656]	@ (8006078 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dea:	f003 0303 	and.w	r3, r3, #3
 8005dee:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005df0:	4ba1      	ldr	r3, [pc, #644]	@ (8006078 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df4:	0a1b      	lsrs	r3, r3, #8
 8005df6:	f003 030f 	and.w	r3, r3, #15
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005dfe:	4b9e      	ldr	r3, [pc, #632]	@ (8006078 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e02:	091b      	lsrs	r3, r3, #4
 8005e04:	f003 0301 	and.w	r3, r3, #1
 8005e08:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005e0a:	4b9b      	ldr	r3, [pc, #620]	@ (8006078 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e0e:	08db      	lsrs	r3, r3, #3
 8005e10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	fb02 f303 	mul.w	r3, r2, r3
 8005e1a:	ee07 3a90 	vmov	s15, r3
 8005e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e22:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	2b03      	cmp	r3, #3
 8005e2a:	d062      	beq.n	8005ef2 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	2b03      	cmp	r3, #3
 8005e30:	f200 8081 	bhi.w	8005f36 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d024      	beq.n	8005e84 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d17a      	bne.n	8005f36 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	ee07 3a90 	vmov	s15, r3
 8005e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e4a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800607c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e52:	4b89      	ldr	r3, [pc, #548]	@ (8006078 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e5a:	ee07 3a90 	vmov	s15, r3
 8005e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e62:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e66:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006080 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e82:	e08f      	b.n	8005fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005e84:	4b7c      	ldr	r3, [pc, #496]	@ (8006078 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d005      	beq.n	8005e9c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005e90:	4b79      	ldr	r3, [pc, #484]	@ (8006078 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	0f1b      	lsrs	r3, r3, #28
 8005e96:	f003 030f 	and.w	r3, r3, #15
 8005e9a:	e006      	b.n	8005eaa <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8005e9c:	4b76      	ldr	r3, [pc, #472]	@ (8006078 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005e9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ea2:	041b      	lsls	r3, r3, #16
 8005ea4:	0f1b      	lsrs	r3, r3, #28
 8005ea6:	f003 030f 	and.w	r3, r3, #15
 8005eaa:	4a76      	ldr	r2, [pc, #472]	@ (8006084 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eb0:	ee07 3a90 	vmov	s15, r3
 8005eb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	ee07 3a90 	vmov	s15, r3
 8005ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	ee07 3a90 	vmov	s15, r3
 8005ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ed0:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ed4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006080 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005ed8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005edc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ee0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ee4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ef0:	e058      	b.n	8005fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	ee07 3a90 	vmov	s15, r3
 8005ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efc:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8006088 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
 8005f00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f04:	4b5c      	ldr	r3, [pc, #368]	@ (8006078 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f0c:	ee07 3a90 	vmov	s15, r3
 8005f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f14:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f18:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006080 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005f1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f20:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f28:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f34:	e036      	b.n	8005fa4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005f36:	4b50      	ldr	r3, [pc, #320]	@ (8006078 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d005      	beq.n	8005f4e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8005f42:	4b4d      	ldr	r3, [pc, #308]	@ (8006078 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	0f1b      	lsrs	r3, r3, #28
 8005f48:	f003 030f 	and.w	r3, r3, #15
 8005f4c:	e006      	b.n	8005f5c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8005f4e:	4b4a      	ldr	r3, [pc, #296]	@ (8006078 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005f50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005f54:	041b      	lsls	r3, r3, #16
 8005f56:	0f1b      	lsrs	r3, r3, #28
 8005f58:	f003 030f 	and.w	r3, r3, #15
 8005f5c:	4a49      	ldr	r2, [pc, #292]	@ (8006084 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f62:	ee07 3a90 	vmov	s15, r3
 8005f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	ee07 3a90 	vmov	s15, r3
 8005f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	ee07 3a90 	vmov	s15, r3
 8005f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f82:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f86:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006080 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fa2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005fa4:	4b34      	ldr	r3, [pc, #208]	@ (8006078 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d017      	beq.n	8005fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005fb0:	4b31      	ldr	r3, [pc, #196]	@ (8006078 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fb4:	0a5b      	lsrs	r3, r3, #9
 8005fb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fba:	ee07 3a90 	vmov	s15, r3
 8005fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005fc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fc6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005fca:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fd6:	ee17 2a90 	vmov	r2, s15
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	e002      	b.n	8005fe6 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005fe6:	4b24      	ldr	r3, [pc, #144]	@ (8006078 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d017      	beq.n	8006022 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005ff2:	4b21      	ldr	r3, [pc, #132]	@ (8006078 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005ff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ff6:	0c1b      	lsrs	r3, r3, #16
 8005ff8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ffc:	ee07 3a90 	vmov	s15, r3
 8006000:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006004:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006008:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800600c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006010:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006014:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006018:	ee17 2a90 	vmov	r2, s15
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	605a      	str	r2, [r3, #4]
 8006020:	e002      	b.n	8006028 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006028:	4b13      	ldr	r3, [pc, #76]	@ (8006078 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800602a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800602c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d017      	beq.n	8006064 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006034:	4b10      	ldr	r3, [pc, #64]	@ (8006078 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006038:	0e1b      	lsrs	r3, r3, #24
 800603a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800603e:	ee07 3a90 	vmov	s15, r3
 8006042:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006046:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800604a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800604e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800605a:	ee17 2a90 	vmov	r2, s15
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006062:	e002      	b.n	800606a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	609a      	str	r2, [r3, #8]
}
 800606a:	bf00      	nop
 800606c:	3724      	adds	r7, #36	@ 0x24
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	46020c00 	.word	0x46020c00
 800607c:	4b742400 	.word	0x4b742400
 8006080:	46000000 	.word	0x46000000
 8006084:	0800bdf0 	.word	0x0800bdf0
 8006088:	4af42400 	.word	0x4af42400

0800608c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800608c:	b480      	push	{r7}
 800608e:	b089      	sub	sp, #36	@ 0x24
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006094:	4ba6      	ldr	r3, [pc, #664]	@ (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800609c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800609e:	4ba4      	ldr	r3, [pc, #656]	@ (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80060a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060a2:	f003 0303 	and.w	r3, r3, #3
 80060a6:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80060a8:	4ba1      	ldr	r3, [pc, #644]	@ (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80060aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ac:	0a1b      	lsrs	r3, r3, #8
 80060ae:	f003 030f 	and.w	r3, r3, #15
 80060b2:	3301      	adds	r3, #1
 80060b4:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80060b6:	4b9e      	ldr	r3, [pc, #632]	@ (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80060b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ba:	091b      	lsrs	r3, r3, #4
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80060c2:	4b9b      	ldr	r3, [pc, #620]	@ (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80060c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c6:	08db      	lsrs	r3, r3, #3
 80060c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	fb02 f303 	mul.w	r3, r2, r3
 80060d2:	ee07 3a90 	vmov	s15, r3
 80060d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060da:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	2b03      	cmp	r3, #3
 80060e2:	d062      	beq.n	80061aa <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	2b03      	cmp	r3, #3
 80060e8:	f200 8081 	bhi.w	80061ee <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d024      	beq.n	800613c <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d17a      	bne.n	80061ee <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	ee07 3a90 	vmov	s15, r3
 80060fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006102:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006334 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800610a:	4b89      	ldr	r3, [pc, #548]	@ (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800610c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800610e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006112:	ee07 3a90 	vmov	s15, r3
 8006116:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800611a:	ed97 6a02 	vldr	s12, [r7, #8]
 800611e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006122:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006126:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800612a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800612e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006136:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800613a:	e08f      	b.n	800625c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800613c:	4b7c      	ldr	r3, [pc, #496]	@ (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d005      	beq.n	8006154 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006148:	4b79      	ldr	r3, [pc, #484]	@ (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	0f1b      	lsrs	r3, r3, #28
 800614e:	f003 030f 	and.w	r3, r3, #15
 8006152:	e006      	b.n	8006162 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8006154:	4b76      	ldr	r3, [pc, #472]	@ (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006156:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800615a:	041b      	lsls	r3, r3, #16
 800615c:	0f1b      	lsrs	r3, r3, #28
 800615e:	f003 030f 	and.w	r3, r3, #15
 8006162:	4a76      	ldr	r2, [pc, #472]	@ (800633c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006168:	ee07 3a90 	vmov	s15, r3
 800616c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	ee07 3a90 	vmov	s15, r3
 8006176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800617a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	ee07 3a90 	vmov	s15, r3
 8006184:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006188:	ed97 6a02 	vldr	s12, [r7, #8]
 800618c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006190:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006194:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006198:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800619c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80061a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061a8:	e058      	b.n	800625c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	ee07 3a90 	vmov	s15, r3
 80061b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b4:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
 80061b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061bc:	4b5c      	ldr	r3, [pc, #368]	@ (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80061be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c4:	ee07 3a90 	vmov	s15, r3
 80061c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80061cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80061d0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80061d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80061d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80061dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80061e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061ec:	e036      	b.n	800625c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80061ee:	4b50      	ldr	r3, [pc, #320]	@ (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d005      	beq.n	8006206 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80061fa:	4b4d      	ldr	r3, [pc, #308]	@ (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	0f1b      	lsrs	r3, r3, #28
 8006200:	f003 030f 	and.w	r3, r3, #15
 8006204:	e006      	b.n	8006214 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8006206:	4b4a      	ldr	r3, [pc, #296]	@ (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006208:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800620c:	041b      	lsls	r3, r3, #16
 800620e:	0f1b      	lsrs	r3, r3, #28
 8006210:	f003 030f 	and.w	r3, r3, #15
 8006214:	4a49      	ldr	r2, [pc, #292]	@ (800633c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800621a:	ee07 3a90 	vmov	s15, r3
 800621e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	ee07 3a90 	vmov	s15, r3
 8006228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800622c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	ee07 3a90 	vmov	s15, r3
 8006236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800623a:	ed97 6a02 	vldr	s12, [r7, #8]
 800623e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800624a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800624e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006256:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800625a:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800625c:	4b34      	ldr	r3, [pc, #208]	@ (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800625e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006260:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d017      	beq.n	8006298 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006268:	4b31      	ldr	r3, [pc, #196]	@ (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800626a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800626c:	0a5b      	lsrs	r3, r3, #9
 800626e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006272:	ee07 3a90 	vmov	s15, r3
 8006276:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800627a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800627e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006282:	edd7 6a07 	vldr	s13, [r7, #28]
 8006286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800628a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800628e:	ee17 2a90 	vmov	r2, s15
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	601a      	str	r2, [r3, #0]
 8006296:	e002      	b.n	800629e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800629e:	4b24      	ldr	r3, [pc, #144]	@ (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80062a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d017      	beq.n	80062da <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80062aa:	4b21      	ldr	r3, [pc, #132]	@ (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80062ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ae:	0c1b      	lsrs	r3, r3, #16
 80062b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062b4:	ee07 3a90 	vmov	s15, r3
 80062b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80062bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80062c0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80062c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80062c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062d0:	ee17 2a90 	vmov	r2, s15
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	605a      	str	r2, [r3, #4]
 80062d8:	e002      	b.n	80062e0 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80062e0:	4b13      	ldr	r3, [pc, #76]	@ (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80062e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d017      	beq.n	800631c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80062ec:	4b10      	ldr	r3, [pc, #64]	@ (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80062ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062f0:	0e1b      	lsrs	r3, r3, #24
 80062f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062f6:	ee07 3a90 	vmov	s15, r3
 80062fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80062fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006302:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006306:	edd7 6a07 	vldr	s13, [r7, #28]
 800630a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800630e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006312:	ee17 2a90 	vmov	r2, s15
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800631a:	e002      	b.n	8006322 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	609a      	str	r2, [r3, #8]
}
 8006322:	bf00      	nop
 8006324:	3724      	adds	r7, #36	@ 0x24
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	46020c00 	.word	0x46020c00
 8006334:	4b742400 	.word	0x4b742400
 8006338:	46000000 	.word	0x46000000
 800633c:	0800bdf0 	.word	0x0800bdf0
 8006340:	4af42400 	.word	0x4af42400

08006344 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006344:	b480      	push	{r7}
 8006346:	b089      	sub	sp, #36	@ 0x24
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800634c:	4ba6      	ldr	r3, [pc, #664]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800634e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006354:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006356:	4ba4      	ldr	r3, [pc, #656]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800635a:	f003 0303 	and.w	r3, r3, #3
 800635e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006360:	4ba1      	ldr	r3, [pc, #644]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006364:	0a1b      	lsrs	r3, r3, #8
 8006366:	f003 030f 	and.w	r3, r3, #15
 800636a:	3301      	adds	r3, #1
 800636c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800636e:	4b9e      	ldr	r3, [pc, #632]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006372:	091b      	lsrs	r3, r3, #4
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800637a:	4b9b      	ldr	r3, [pc, #620]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800637c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800637e:	08db      	lsrs	r3, r3, #3
 8006380:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	fb02 f303 	mul.w	r3, r2, r3
 800638a:	ee07 3a90 	vmov	s15, r3
 800638e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006392:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2b03      	cmp	r3, #3
 800639a:	d062      	beq.n	8006462 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	2b03      	cmp	r3, #3
 80063a0:	f200 8081 	bhi.w	80064a6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d024      	beq.n	80063f4 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d17a      	bne.n	80064a6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	ee07 3a90 	vmov	s15, r3
 80063b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ba:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80065ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80063be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063c2:	4b89      	ldr	r3, [pc, #548]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80063c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ca:	ee07 3a90 	vmov	s15, r3
 80063ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80063d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80063d6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80065f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80063da:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80063de:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80063e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80063ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ee:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80063f2:	e08f      	b.n	8006514 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80063f4:	4b7c      	ldr	r3, [pc, #496]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d005      	beq.n	800640c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8006400:	4b79      	ldr	r3, [pc, #484]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	0f1b      	lsrs	r3, r3, #28
 8006406:	f003 030f 	and.w	r3, r3, #15
 800640a:	e006      	b.n	800641a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800640c:	4b76      	ldr	r3, [pc, #472]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800640e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006412:	041b      	lsls	r3, r3, #16
 8006414:	0f1b      	lsrs	r3, r3, #28
 8006416:	f003 030f 	and.w	r3, r3, #15
 800641a:	4a76      	ldr	r2, [pc, #472]	@ (80065f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800641c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006420:	ee07 3a90 	vmov	s15, r3
 8006424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	ee07 3a90 	vmov	s15, r3
 800642e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	ee07 3a90 	vmov	s15, r3
 800643c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006440:	ed97 6a02 	vldr	s12, [r7, #8]
 8006444:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80065f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006448:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800644c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006450:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006454:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800645c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006460:	e058      	b.n	8006514 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	ee07 3a90 	vmov	s15, r3
 8006468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800646c:	eddf 6a62 	vldr	s13, [pc, #392]	@ 80065f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
 8006470:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006474:	4b5c      	ldr	r3, [pc, #368]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800647c:	ee07 3a90 	vmov	s15, r3
 8006480:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006484:	ed97 6a02 	vldr	s12, [r7, #8]
 8006488:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80065f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800648c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006490:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006494:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006498:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800649c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064a4:	e036      	b.n	8006514 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80064a6:	4b50      	ldr	r3, [pc, #320]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d005      	beq.n	80064be <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80064b2:	4b4d      	ldr	r3, [pc, #308]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	0f1b      	lsrs	r3, r3, #28
 80064b8:	f003 030f 	and.w	r3, r3, #15
 80064bc:	e006      	b.n	80064cc <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80064be:	4b4a      	ldr	r3, [pc, #296]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80064c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80064c4:	041b      	lsls	r3, r3, #16
 80064c6:	0f1b      	lsrs	r3, r3, #28
 80064c8:	f003 030f 	and.w	r3, r3, #15
 80064cc:	4a49      	ldr	r2, [pc, #292]	@ (80065f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80064ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064d2:	ee07 3a90 	vmov	s15, r3
 80064d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	ee07 3a90 	vmov	s15, r3
 80064e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	ee07 3a90 	vmov	s15, r3
 80064ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80064f6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80065f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80064fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006502:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006506:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800650a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800650e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006512:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006514:	4b34      	ldr	r3, [pc, #208]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006518:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d017      	beq.n	8006550 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006520:	4b31      	ldr	r3, [pc, #196]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006524:	0a5b      	lsrs	r3, r3, #9
 8006526:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800652a:	ee07 3a90 	vmov	s15, r3
 800652e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8006532:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006536:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800653a:	edd7 6a07 	vldr	s13, [r7, #28]
 800653e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006542:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006546:	ee17 2a90 	vmov	r2, s15
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	601a      	str	r2, [r3, #0]
 800654e:	e002      	b.n	8006556 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006556:	4b24      	ldr	r3, [pc, #144]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800655a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d017      	beq.n	8006592 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006562:	4b21      	ldr	r3, [pc, #132]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006566:	0c1b      	lsrs	r3, r3, #16
 8006568:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800656c:	ee07 3a90 	vmov	s15, r3
 8006570:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006574:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006578:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800657c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006580:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006584:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006588:	ee17 2a90 	vmov	r2, s15
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	605a      	str	r2, [r3, #4]
 8006590:	e002      	b.n	8006598 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006598:	4b13      	ldr	r3, [pc, #76]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800659a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800659c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d017      	beq.n	80065d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80065a4:	4b10      	ldr	r3, [pc, #64]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80065a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065a8:	0e1b      	lsrs	r3, r3, #24
 80065aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065ae:	ee07 3a90 	vmov	s15, r3
 80065b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80065b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065ba:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80065be:	edd7 6a07 	vldr	s13, [r7, #28]
 80065c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065ca:	ee17 2a90 	vmov	r2, s15
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80065d2:	e002      	b.n	80065da <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	609a      	str	r2, [r3, #8]
}
 80065da:	bf00      	nop
 80065dc:	3724      	adds	r7, #36	@ 0x24
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	46020c00 	.word	0x46020c00
 80065ec:	4b742400 	.word	0x4b742400
 80065f0:	46000000 	.word	0x46000000
 80065f4:	0800bdf0 	.word	0x0800bdf0
 80065f8:	4af42400 	.word	0x4af42400

080065fc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b08e      	sub	sp, #56	@ 0x38
 8006600:	af00      	add	r7, sp, #0
 8006602:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006606:	e9d7 2300 	ldrd	r2, r3, [r7]
 800660a:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800660e:	430b      	orrs	r3, r1
 8006610:	d145      	bne.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006612:	4b9b      	ldr	r3, [pc, #620]	@ (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006614:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006618:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800661c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800661e:	4b98      	ldr	r3, [pc, #608]	@ (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006620:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b02      	cmp	r3, #2
 800662a:	d108      	bne.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800662c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006632:	d104      	bne.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006634:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006638:	637b      	str	r3, [r7, #52]	@ 0x34
 800663a:	f001 b916 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800663e:	4b90      	ldr	r3, [pc, #576]	@ (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006640:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006644:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006648:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800664c:	d114      	bne.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800664e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006650:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006654:	d110      	bne.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006656:	4b8a      	ldr	r3, [pc, #552]	@ (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006658:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800665c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006660:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006664:	d103      	bne.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8006666:	23fa      	movs	r3, #250	@ 0xfa
 8006668:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800666a:	f001 b8fe 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      else
      {
        frequency = LSI_VALUE;
 800666e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006672:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006674:	f001 b8f9 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006678:	4b81      	ldr	r3, [pc, #516]	@ (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006680:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006684:	d107      	bne.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8006686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006688:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800668c:	d103      	bne.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800668e:	4b7d      	ldr	r3, [pc, #500]	@ (8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006690:	637b      	str	r3, [r7, #52]	@ 0x34
 8006692:	f001 b8ea 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006696:	2300      	movs	r3, #0
 8006698:	637b      	str	r3, [r7, #52]	@ 0x34
 800669a:	f001 b8e6 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800669e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066a2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80066a6:	430b      	orrs	r3, r1
 80066a8:	d151      	bne.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80066aa:	4b75      	ldr	r3, [pc, #468]	@ (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80066ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80066b0:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80066b4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80066b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b8:	2b80      	cmp	r3, #128	@ 0x80
 80066ba:	d035      	beq.n	8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80066bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066be:	2b80      	cmp	r3, #128	@ 0x80
 80066c0:	d841      	bhi.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80066c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c4:	2b60      	cmp	r3, #96	@ 0x60
 80066c6:	d02a      	beq.n	800671e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80066c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ca:	2b60      	cmp	r3, #96	@ 0x60
 80066cc:	d83b      	bhi.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80066ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d0:	2b40      	cmp	r3, #64	@ 0x40
 80066d2:	d009      	beq.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80066d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d6:	2b40      	cmp	r3, #64	@ 0x40
 80066d8:	d835      	bhi.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80066da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00c      	beq.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80066e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e2:	2b20      	cmp	r3, #32
 80066e4:	d012      	beq.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80066e6:	e02e      	b.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7ff fb71 	bl	8005dd4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80066f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066f6:	f001 b8b8 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066fa:	f107 0318 	add.w	r3, r7, #24
 80066fe:	4618      	mov	r0, r3
 8006700:	f7ff fcc4 	bl	800608c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006708:	f001 b8af 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800670c:	f107 030c 	add.w	r3, r7, #12
 8006710:	4618      	mov	r0, r3
 8006712:	f7ff fe17 	bl	8006344 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800671a:	f001 b8a6 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800671e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006722:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006724:	f001 b8a1 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006728:	4b55      	ldr	r3, [pc, #340]	@ (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006730:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006734:	d103      	bne.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006736:	4b54      	ldr	r3, [pc, #336]	@ (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8006738:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800673a:	f001 b896 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 800673e:	2300      	movs	r3, #0
 8006740:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006742:	f001 b892 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      default :
      {
        frequency = 0U;
 8006746:	2300      	movs	r3, #0
 8006748:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800674a:	f001 b88e 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
        break;
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800674e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006752:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006756:	430b      	orrs	r3, r1
 8006758:	d126      	bne.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800675a:	4b49      	ldr	r3, [pc, #292]	@ (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800675c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006760:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006764:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8006766:	4b46      	ldr	r3, [pc, #280]	@ (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800676e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006772:	d106      	bne.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8006774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006776:	2b00      	cmp	r3, #0
 8006778:	d103      	bne.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
    {
      frequency = HSI_VALUE;
 800677a:	4b43      	ldr	r3, [pc, #268]	@ (8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800677c:	637b      	str	r3, [r7, #52]	@ 0x34
 800677e:	f001 b874 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8006782:	4b3f      	ldr	r3, [pc, #252]	@ (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800678a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800678e:	d107      	bne.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8006790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006792:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006796:	d103      	bne.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
    {
      frequency = HSI_VALUE >> 1U;
 8006798:	4b3c      	ldr	r3, [pc, #240]	@ (800688c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800679a:	637b      	str	r3, [r7, #52]	@ 0x34
 800679c:	f001 b865 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80067a0:	2300      	movs	r3, #0
 80067a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80067a4:	f001 b861 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80067a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067ac:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 80067b0:	430b      	orrs	r3, r1
 80067b2:	d171      	bne.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80067b4:	4b32      	ldr	r3, [pc, #200]	@ (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80067b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067ba:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80067be:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80067c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80067c6:	d034      	beq.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80067c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ca:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80067ce:	d853      	bhi.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80067d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067d6:	d00b      	beq.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80067d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067de:	d84b      	bhi.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80067e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d016      	beq.n	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 80067e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80067ec:	d009      	beq.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 80067ee:	e043      	b.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7ff faed 	bl	8005dd4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80067fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067fe:	f001 b834 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006802:	f107 0318 	add.w	r3, r7, #24
 8006806:	4618      	mov	r0, r3
 8006808:	f7ff fc40 	bl	800608c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006810:	f001 b82b 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006814:	4b1a      	ldr	r3, [pc, #104]	@ (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800681c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006820:	d103      	bne.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
        {
          frequency = HSI48_VALUE;
 8006822:	4b1b      	ldr	r3, [pc, #108]	@ (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006824:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006826:	f001 b820 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 800682a:	2300      	movs	r3, #0
 800682c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800682e:	f001 b81c 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006832:	4b13      	ldr	r3, [pc, #76]	@ (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0320 	and.w	r3, r3, #32
 800683a:	2b20      	cmp	r3, #32
 800683c:	d118      	bne.n	8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800683e:	4b10      	ldr	r3, [pc, #64]	@ (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d005      	beq.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800684a:	4b0d      	ldr	r3, [pc, #52]	@ (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	0e1b      	lsrs	r3, r3, #24
 8006850:	f003 030f 	and.w	r3, r3, #15
 8006854:	e006      	b.n	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 8006856:	4b0a      	ldr	r3, [pc, #40]	@ (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006858:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800685c:	041b      	lsls	r3, r3, #16
 800685e:	0e1b      	lsrs	r3, r3, #24
 8006860:	f003 030f 	and.w	r3, r3, #15
 8006864:	4a0b      	ldr	r2, [pc, #44]	@ (8006894 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800686a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800686c:	f000 bffd 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 8006870:	2300      	movs	r3, #0
 8006872:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006874:	f000 bff9 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      default :

        frequency = 0U;
 8006878:	2300      	movs	r3, #0
 800687a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800687c:	f000 bff5 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8006880:	46020c00 	.word	0x46020c00
 8006884:	0003d090 	.word	0x0003d090
 8006888:	00f42400 	.word	0x00f42400
 800688c:	007a1200 	.word	0x007a1200
 8006890:	02dc6c00 	.word	0x02dc6c00
 8006894:	0800bdf0 	.word	0x0800bdf0
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800689c:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80068a0:	430b      	orrs	r3, r1
 80068a2:	d17f      	bne.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80068a4:	4ba8      	ldr	r3, [pc, #672]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80068a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80068aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068ae:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80068b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d165      	bne.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80068b6:	4ba4      	ldr	r3, [pc, #656]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80068b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068bc:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80068c0:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80068c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80068c8:	d034      	beq.n	8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80068ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068cc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80068d0:	d853      	bhi.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 80068d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068d8:	d00b      	beq.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 80068da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068e0:	d84b      	bhi.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 80068e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d016      	beq.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 80068e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80068ee:	d009      	beq.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80068f0:	e043      	b.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7ff fa6c 	bl	8005dd4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068fe:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006900:	f000 bfb3 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006904:	f107 0318 	add.w	r3, r7, #24
 8006908:	4618      	mov	r0, r3
 800690a:	f7ff fbbf 	bl	800608c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006912:	f000 bfaa 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006916:	4b8c      	ldr	r3, [pc, #560]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800691e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006922:	d103      	bne.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          {
            frequency = HSI48_VALUE;
 8006924:	4b89      	ldr	r3, [pc, #548]	@ (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 8006926:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006928:	f000 bf9f 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
            frequency = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006930:	f000 bf9b 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006934:	4b84      	ldr	r3, [pc, #528]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0320 	and.w	r3, r3, #32
 800693c:	2b20      	cmp	r3, #32
 800693e:	d118      	bne.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006940:	4b81      	ldr	r3, [pc, #516]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d005      	beq.n	8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 800694c:	4b7e      	ldr	r3, [pc, #504]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	0e1b      	lsrs	r3, r3, #24
 8006952:	f003 030f 	and.w	r3, r3, #15
 8006956:	e006      	b.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8006958:	4b7b      	ldr	r3, [pc, #492]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800695a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800695e:	041b      	lsls	r3, r3, #16
 8006960:	0e1b      	lsrs	r3, r3, #24
 8006962:	f003 030f 	and.w	r3, r3, #15
 8006966:	4a7a      	ldr	r2, [pc, #488]	@ (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8006968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800696c:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800696e:	f000 bf7c 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
            frequency = 0U;
 8006972:	2300      	movs	r3, #0
 8006974:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006976:	f000 bf78 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
        }
        default :
        {
          frequency = 0U;
 800697a:	2300      	movs	r3, #0
 800697c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800697e:	f000 bf74 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006984:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006988:	d108      	bne.n	800699c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800698a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800698e:	4618      	mov	r0, r3
 8006990:	f7ff fa20 	bl	8005dd4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006996:	637b      	str	r3, [r7, #52]	@ 0x34
 8006998:	f000 bf67 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else
    {
      frequency = 0U;
 800699c:	2300      	movs	r3, #0
 800699e:	637b      	str	r3, [r7, #52]	@ 0x34
 80069a0:	f000 bf63 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80069a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069a8:	1e51      	subs	r1, r2, #1
 80069aa:	430b      	orrs	r3, r1
 80069ac:	d136      	bne.n	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80069ae:	4b66      	ldr	r3, [pc, #408]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80069b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069b4:	f003 0303 	and.w	r3, r3, #3
 80069b8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80069ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d104      	bne.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80069c0:	f7fe fc1c 	bl	80051fc <HAL_RCC_GetPCLK2Freq>
 80069c4:	6378      	str	r0, [r7, #52]	@ 0x34
 80069c6:	f000 bf50 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80069ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d104      	bne.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80069d0:	f7fe fae0 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 80069d4:	6378      	str	r0, [r7, #52]	@ 0x34
 80069d6:	f000 bf48 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80069da:	4b5b      	ldr	r3, [pc, #364]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069e6:	d106      	bne.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 80069e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d103      	bne.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HSI_VALUE;
 80069ee:	4b59      	ldr	r3, [pc, #356]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80069f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80069f2:	f000 bf3a 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80069f6:	4b54      	ldr	r3, [pc, #336]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80069f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069fc:	f003 0302 	and.w	r3, r3, #2
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d107      	bne.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8006a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a06:	2b03      	cmp	r3, #3
 8006a08:	d104      	bne.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
    {
      frequency = LSE_VALUE;
 8006a0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a10:	f000 bf2b 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a18:	f000 bf27 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006a1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a20:	1f11      	subs	r1, r2, #4
 8006a22:	430b      	orrs	r3, r1
 8006a24:	d136      	bne.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006a26:	4b48      	ldr	r3, [pc, #288]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a2c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006a30:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d104      	bne.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006a38:	f7fe fbcc 	bl	80051d4 <HAL_RCC_GetPCLK1Freq>
 8006a3c:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a3e:	f000 bf14 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a44:	2b10      	cmp	r3, #16
 8006a46:	d104      	bne.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006a48:	f7fe faa4 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 8006a4c:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a4e:	f000 bf0c 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006a52:	4b3d      	ldr	r3, [pc, #244]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a5e:	d106      	bne.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a62:	2b20      	cmp	r3, #32
 8006a64:	d103      	bne.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    {
      frequency = HSI_VALUE;
 8006a66:	4b3b      	ldr	r3, [pc, #236]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8006a68:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a6a:	f000 befe 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006a6e:	4b36      	ldr	r3, [pc, #216]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006a70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a74:	f003 0302 	and.w	r3, r3, #2
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d107      	bne.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a7e:	2b30      	cmp	r3, #48	@ 0x30
 8006a80:	d104      	bne.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = LSE_VALUE;
 8006a82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a86:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a88:	f000 beef 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a90:	f000 beeb 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006a94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a98:	f1a2 0108 	sub.w	r1, r2, #8
 8006a9c:	430b      	orrs	r3, r1
 8006a9e:	d136      	bne.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x512>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006aa0:	4b29      	ldr	r3, [pc, #164]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006aa6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006aaa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d104      	bne.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006ab2:	f7fe fb8f 	bl	80051d4 <HAL_RCC_GetPCLK1Freq>
 8006ab6:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ab8:	f000 bed7 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006abe:	2b40      	cmp	r3, #64	@ 0x40
 8006ac0:	d104      	bne.n	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006ac2:	f7fe fa67 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 8006ac6:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ac8:	f000 becf 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006acc:	4b1e      	ldr	r3, [pc, #120]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ad4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ad8:	d106      	bne.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8006ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006adc:	2b80      	cmp	r3, #128	@ 0x80
 8006ade:	d103      	bne.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
    {
      frequency = HSI_VALUE;
 8006ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8006ae2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ae4:	f000 bec1 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006ae8:	4b17      	ldr	r3, [pc, #92]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006aea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d107      	bne.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8006af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af8:	2bc0      	cmp	r3, #192	@ 0xc0
 8006afa:	d104      	bne.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {
      frequency = LSE_VALUE;
 8006afc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b00:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b02:	f000 beb2 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006b06:	2300      	movs	r3, #0
 8006b08:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b0a:	f000 beae 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006b0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b12:	f1a2 0110 	sub.w	r1, r2, #16
 8006b16:	430b      	orrs	r3, r1
 8006b18:	d141      	bne.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b24:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d104      	bne.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006b2c:	f7fe fb52 	bl	80051d4 <HAL_RCC_GetPCLK1Freq>
 8006b30:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b32:	f000 be9a 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b3c:	d10c      	bne.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006b3e:	f7fe fa29 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 8006b42:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b44:	f000 be91 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8006b48:	46020c00 	.word	0x46020c00
 8006b4c:	02dc6c00 	.word	0x02dc6c00
 8006b50:	0800bdf0 	.word	0x0800bdf0
 8006b54:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006b58:	4baa      	ldr	r3, [pc, #680]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b64:	d107      	bne.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8006b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b6c:	d103      	bne.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8006b6e:	4ba6      	ldr	r3, [pc, #664]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006b70:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b72:	f000 be7a 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006b76:	4ba3      	ldr	r3, [pc, #652]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006b78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b7c:	f003 0302 	and.w	r3, r3, #2
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d108      	bne.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 8006b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b8a:	d104      	bne.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
    {
      frequency = LSE_VALUE;
 8006b8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b92:	f000 be6a 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b9a:	f000 be66 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006b9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ba2:	f1a2 0120 	sub.w	r1, r2, #32
 8006ba6:	430b      	orrs	r3, r1
 8006ba8:	d158      	bne.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006baa:	4b96      	ldr	r3, [pc, #600]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006bac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006bb0:	f003 0307 	and.w	r3, r3, #7
 8006bb4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d104      	bne.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006bbc:	f7fe fb32 	bl	8005224 <HAL_RCC_GetPCLK3Freq>
 8006bc0:	6378      	str	r0, [r7, #52]	@ 0x34
 8006bc2:	f000 be52 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d104      	bne.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006bcc:	f7fe f9e2 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 8006bd0:	6378      	str	r0, [r7, #52]	@ 0x34
 8006bd2:	f000 be4a 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006bd6:	4b8b      	ldr	r3, [pc, #556]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006be2:	d106      	bne.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8006be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d103      	bne.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      frequency = HSI_VALUE;
 8006bea:	4b87      	ldr	r3, [pc, #540]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006bec:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bee:	f000 be3c 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006bf2:	4b84      	ldr	r3, [pc, #528]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006bf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bf8:	f003 0302 	and.w	r3, r3, #2
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d107      	bne.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c02:	2b03      	cmp	r3, #3
 8006c04:	d104      	bne.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = LSE_VALUE;
 8006c06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c0c:	f000 be2d 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006c10:	4b7c      	ldr	r3, [pc, #496]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0320 	and.w	r3, r3, #32
 8006c18:	2b20      	cmp	r3, #32
 8006c1a:	d11b      	bne.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1e:	2b04      	cmp	r3, #4
 8006c20:	d118      	bne.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c22:	4b78      	ldr	r3, [pc, #480]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d005      	beq.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
 8006c2e:	4b75      	ldr	r3, [pc, #468]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	0e1b      	lsrs	r3, r3, #24
 8006c34:	f003 030f 	and.w	r3, r3, #15
 8006c38:	e006      	b.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006c3a:	4b72      	ldr	r3, [pc, #456]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006c3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c40:	041b      	lsls	r3, r3, #16
 8006c42:	0e1b      	lsrs	r3, r3, #24
 8006c44:	f003 030f 	and.w	r3, r3, #15
 8006c48:	4a70      	ldr	r2, [pc, #448]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8006c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c50:	f000 be0b 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006c54:	2300      	movs	r3, #0
 8006c56:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c58:	f000 be07 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006c5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c60:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006c64:	430b      	orrs	r3, r1
 8006c66:	d16c      	bne.n	8006d42 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006c68:	4b66      	ldr	r3, [pc, #408]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006c6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c6e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006c72:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c7a:	d104      	bne.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006c7c:	f7fe f98a 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 8006c80:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c82:	f000 bdf2 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c8c:	d108      	bne.n	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c8e:	f107 0318 	add.w	r3, r7, #24
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7ff f9fa 	bl	800608c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c9c:	f000 bde5 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d104      	bne.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006ca6:	f7fe fa7b 	bl	80051a0 <HAL_RCC_GetHCLKFreq>
 8006caa:	6378      	str	r0, [r7, #52]	@ 0x34
 8006cac:	f000 bddd 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006cb6:	d122      	bne.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x702>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006cb8:	4b52      	ldr	r3, [pc, #328]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0320 	and.w	r3, r3, #32
 8006cc0:	2b20      	cmp	r3, #32
 8006cc2:	d118      	bne.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006cc4:	4b4f      	ldr	r3, [pc, #316]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d005      	beq.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8006cd0:	4b4c      	ldr	r3, [pc, #304]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	0e1b      	lsrs	r3, r3, #24
 8006cd6:	f003 030f 	and.w	r3, r3, #15
 8006cda:	e006      	b.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8006cdc:	4b49      	ldr	r3, [pc, #292]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006cde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ce2:	041b      	lsls	r3, r3, #16
 8006ce4:	0e1b      	lsrs	r3, r3, #24
 8006ce6:	f003 030f 	and.w	r3, r3, #15
 8006cea:	4a48      	ldr	r2, [pc, #288]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8006cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cf2:	f000 bdba 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      else
      {
        frequency = 0U;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cfa:	f000 bdb6 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006cfe:	4b41      	ldr	r3, [pc, #260]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d0a:	d107      	bne.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006d12:	d103      	bne.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
    {
      frequency = HSE_VALUE;
 8006d14:	4b3e      	ldr	r3, [pc, #248]	@ (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8006d16:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d18:	f000 bda7 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006d1c:	4b39      	ldr	r3, [pc, #228]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d28:	d107      	bne.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d30:	d103      	bne.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
    {
      frequency = HSI_VALUE;
 8006d32:	4b35      	ldr	r3, [pc, #212]	@ (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006d34:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d36:	f000 bd98 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d3e:	f000 bd94 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006d42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d46:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006d4a:	430b      	orrs	r3, r1
 8006d4c:	d162      	bne.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006d4e:	4b2d      	ldr	r3, [pc, #180]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006d50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d54:	f003 0307 	and.w	r3, r3, #7
 8006d58:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5c:	2b04      	cmp	r3, #4
 8006d5e:	d84c      	bhi.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8006d60:	a201      	add	r2, pc, #4	@ (adr r2, 8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8006d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d66:	bf00      	nop
 8006d68:	08006da1 	.word	0x08006da1
 8006d6c:	08006d7d 	.word	0x08006d7d
 8006d70:	08006d8f 	.word	0x08006d8f
 8006d74:	08006dab 	.word	0x08006dab
 8006d78:	08006db5 	.word	0x08006db5
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7ff f827 	bl	8005dd4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d8a:	f000 bd6e 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d8e:	f107 030c 	add.w	r3, r7, #12
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7ff fad6 	bl	8006344 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d9c:	f000 bd65 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006da0:	f7fe f9fe 	bl	80051a0 <HAL_RCC_GetHCLKFreq>
 8006da4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006da6:	f000 bd60 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006daa:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006dae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006db0:	f000 bd5b 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006db4:	4b13      	ldr	r3, [pc, #76]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0320 	and.w	r3, r3, #32
 8006dbc:	2b20      	cmp	r3, #32
 8006dbe:	d118      	bne.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006dc0:	4b10      	ldr	r3, [pc, #64]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d005      	beq.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8006dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	0e1b      	lsrs	r3, r3, #24
 8006dd2:	f003 030f 	and.w	r3, r3, #15
 8006dd6:	e006      	b.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8006dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006dda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006dde:	041b      	lsls	r3, r3, #16
 8006de0:	0e1b      	lsrs	r3, r3, #24
 8006de2:	f003 030f 	and.w	r3, r3, #15
 8006de6:	4a09      	ldr	r2, [pc, #36]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8006de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dec:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006dee:	f000 bd3c 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 8006df2:	2300      	movs	r3, #0
 8006df4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006df6:	f000 bd38 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      default:

        frequency = 0U;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006dfe:	f000 bd34 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8006e02:	bf00      	nop
 8006e04:	46020c00 	.word	0x46020c00
 8006e08:	00f42400 	.word	0x00f42400
 8006e0c:	0800bdf0 	.word	0x0800bdf0
 8006e10:	007a1200 	.word	0x007a1200
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8006e14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e18:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8006e1c:	430b      	orrs	r3, r1
 8006e1e:	d167      	bne.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006e20:	4ba0      	ldr	r3, [pc, #640]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8006e22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e26:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006e2a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e32:	d036      	beq.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 8006e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e3a:	d855      	bhi.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006e42:	d029      	beq.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8006e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e46:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006e4a:	d84d      	bhi.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8006e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e52:	d013      	beq.n	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x880>
 8006e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e5a:	d845      	bhi.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8006e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d015      	beq.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8006e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e68:	d13e      	bne.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7fe ffb0 	bl	8005dd4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e78:	f000 bcf7 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e7c:	f107 030c 	add.w	r3, r7, #12
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7ff fa5f 	bl	8006344 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e8a:	f000 bcee 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006e8e:	f7fe f987 	bl	80051a0 <HAL_RCC_GetHCLKFreq>
 8006e92:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006e94:	f000 bce9 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006e98:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006e9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e9e:	f000 bce4 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ea2:	4b80      	ldr	r3, [pc, #512]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0320 	and.w	r3, r3, #32
 8006eaa:	2b20      	cmp	r3, #32
 8006eac:	d118      	bne.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006eae:	4b7d      	ldr	r3, [pc, #500]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d005      	beq.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8006eba:	4b7a      	ldr	r3, [pc, #488]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	0e1b      	lsrs	r3, r3, #24
 8006ec0:	f003 030f 	and.w	r3, r3, #15
 8006ec4:	e006      	b.n	8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 8006ec6:	4b77      	ldr	r3, [pc, #476]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8006ec8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ecc:	041b      	lsls	r3, r3, #16
 8006ece:	0e1b      	lsrs	r3, r3, #24
 8006ed0:	f003 030f 	and.w	r3, r3, #15
 8006ed4:	4a74      	ldr	r2, [pc, #464]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eda:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006edc:	f000 bcc5 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ee4:	f000 bcc1 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      default:

        frequency = 0U;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006eec:	f000 bcbd 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ef4:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8006ef8:	430b      	orrs	r3, r1
 8006efa:	d14c      	bne.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006efc:	4b69      	ldr	r3, [pc, #420]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8006efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f02:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006f06:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d104      	bne.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006f0e:	f7fe f961 	bl	80051d4 <HAL_RCC_GetPCLK1Freq>
 8006f12:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f14:	f000 bca9 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f1e:	d104      	bne.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006f20:	f7fe f838 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 8006f24:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f26:	f000 bca0 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006f2a:	4b5e      	ldr	r3, [pc, #376]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f36:	d107      	bne.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>
 8006f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f3e:	d103      	bne.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>
    {
      frequency = HSI_VALUE;
 8006f40:	4b5a      	ldr	r3, [pc, #360]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006f42:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f44:	f000 bc91 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8006f48:	4b56      	ldr	r3, [pc, #344]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0320 	and.w	r3, r3, #32
 8006f50:	2b20      	cmp	r3, #32
 8006f52:	d11c      	bne.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8006f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f56:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f5a:	d118      	bne.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f5c:	4b51      	ldr	r3, [pc, #324]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d005      	beq.n	8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8006f68:	4b4e      	ldr	r3, [pc, #312]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	0e1b      	lsrs	r3, r3, #24
 8006f6e:	f003 030f 	and.w	r3, r3, #15
 8006f72:	e006      	b.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8006f74:	4b4b      	ldr	r3, [pc, #300]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8006f76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f7a:	041b      	lsls	r3, r3, #16
 8006f7c:	0e1b      	lsrs	r3, r3, #24
 8006f7e:	f003 030f 	and.w	r3, r3, #15
 8006f82:	4a49      	ldr	r2, [pc, #292]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f88:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f8a:	f000 bc6e 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f92:	f000 bc6a 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8006f96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f9a:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8006f9e:	430b      	orrs	r3, r1
 8006fa0:	d14c      	bne.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006fa2:	4b40      	ldr	r3, [pc, #256]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8006fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fa8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006fac:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d104      	bne.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006fb4:	f7fe f90e 	bl	80051d4 <HAL_RCC_GetPCLK1Freq>
 8006fb8:	6378      	str	r0, [r7, #52]	@ 0x34
 8006fba:	f000 bc56 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fc4:	d104      	bne.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006fc6:	f7fd ffe5 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 8006fca:	6378      	str	r0, [r7, #52]	@ 0x34
 8006fcc:	f000 bc4d 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006fd0:	4b34      	ldr	r3, [pc, #208]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fdc:	d107      	bne.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
 8006fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fe4:	d103      	bne.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
    {
      frequency = HSI_VALUE;
 8006fe6:	4b31      	ldr	r3, [pc, #196]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006fe8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fea:	f000 bc3e 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006fee:	4b2d      	ldr	r3, [pc, #180]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0320 	and.w	r3, r3, #32
 8006ff6:	2b20      	cmp	r3, #32
 8006ff8:	d11c      	bne.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007000:	d118      	bne.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007002:	4b28      	ldr	r3, [pc, #160]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d005      	beq.n	800701a <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 800700e:	4b25      	ldr	r3, [pc, #148]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	0e1b      	lsrs	r3, r3, #24
 8007014:	f003 030f 	and.w	r3, r3, #15
 8007018:	e006      	b.n	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0xa2c>
 800701a:	4b22      	ldr	r3, [pc, #136]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800701c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007020:	041b      	lsls	r3, r3, #16
 8007022:	0e1b      	lsrs	r3, r3, #24
 8007024:	f003 030f 	and.w	r3, r3, #15
 8007028:	4a1f      	ldr	r2, [pc, #124]	@ (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800702a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800702e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007030:	f000 bc1b 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007034:	2300      	movs	r3, #0
 8007036:	637b      	str	r3, [r7, #52]	@ 0x34
 8007038:	f000 bc17 	b.w	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800703c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007040:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007044:	430b      	orrs	r3, r1
 8007046:	d157      	bne.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007048:	4b16      	ldr	r3, [pc, #88]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800704a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800704e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007052:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007056:	2bc0      	cmp	r3, #192	@ 0xc0
 8007058:	d02a      	beq.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 800705a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705c:	2bc0      	cmp	r3, #192	@ 0xc0
 800705e:	d848      	bhi.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 8007060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007062:	2b80      	cmp	r3, #128	@ 0x80
 8007064:	d00d      	beq.n	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8007066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007068:	2b80      	cmp	r3, #128	@ 0x80
 800706a:	d842      	bhi.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800706c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706e:	2b00      	cmp	r3, #0
 8007070:	d003      	beq.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xa7e>
 8007072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007074:	2b40      	cmp	r3, #64	@ 0x40
 8007076:	d011      	beq.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
 8007078:	e03b      	b.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800707a:	f7fe f8d3 	bl	8005224 <HAL_RCC_GetPCLK3Freq>
 800707e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007080:	e3f3      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007082:	4b08      	ldr	r3, [pc, #32]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800708a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800708e:	d102      	bne.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0xa9a>
        {
          frequency = HSI_VALUE;
 8007090:	4b06      	ldr	r3, [pc, #24]	@ (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007092:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007094:	e3e9      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 8007096:	2300      	movs	r3, #0
 8007098:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800709a:	e3e6      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800709c:	f7fd ff7a 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 80070a0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80070a2:	e3e2      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 80070a4:	46020c00 	.word	0x46020c00
 80070a8:	0800bdf0 	.word	0x0800bdf0
 80070ac:	00f42400 	.word	0x00f42400
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80070b0:	4ba3      	ldr	r3, [pc, #652]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0320 	and.w	r3, r3, #32
 80070b8:	2b20      	cmp	r3, #32
 80070ba:	d117      	bne.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80070bc:	4ba0      	ldr	r3, [pc, #640]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d005      	beq.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
 80070c8:	4b9d      	ldr	r3, [pc, #628]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	0e1b      	lsrs	r3, r3, #24
 80070ce:	f003 030f 	and.w	r3, r3, #15
 80070d2:	e006      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 80070d4:	4b9a      	ldr	r3, [pc, #616]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80070d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070da:	041b      	lsls	r3, r3, #16
 80070dc:	0e1b      	lsrs	r3, r3, #24
 80070de:	f003 030f 	and.w	r3, r3, #15
 80070e2:	4a98      	ldr	r2, [pc, #608]	@ (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 80070e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070e8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80070ea:	e3be      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 80070ec:	2300      	movs	r3, #0
 80070ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070f0:	e3bb      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      default:
      {
        frequency = 0U;
 80070f2:	2300      	movs	r3, #0
 80070f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070f6:	e3b8      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80070f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070fc:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8007100:	430b      	orrs	r3, r1
 8007102:	d147      	bne.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007104:	4b8e      	ldr	r3, [pc, #568]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800710a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800710e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007112:	2b00      	cmp	r3, #0
 8007114:	d103      	bne.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007116:	f7fe f85d 	bl	80051d4 <HAL_RCC_GetPCLK1Freq>
 800711a:	6378      	str	r0, [r7, #52]	@ 0x34
 800711c:	e3a5      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800711e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007120:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007124:	d103      	bne.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0xb32>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007126:	f7fd ff35 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 800712a:	6378      	str	r0, [r7, #52]	@ 0x34
 800712c:	e39d      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800712e:	4b84      	ldr	r3, [pc, #528]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800713a:	d106      	bne.n	800714a <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
 800713c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007142:	d102      	bne.n	800714a <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
    {
      frequency = HSI_VALUE;
 8007144:	4b80      	ldr	r3, [pc, #512]	@ (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>)
 8007146:	637b      	str	r3, [r7, #52]	@ 0x34
 8007148:	e38f      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800714a:	4b7d      	ldr	r3, [pc, #500]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0320 	and.w	r3, r3, #32
 8007152:	2b20      	cmp	r3, #32
 8007154:	d11b      	bne.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8007156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007158:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800715c:	d117      	bne.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800715e:	4b78      	ldr	r3, [pc, #480]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d005      	beq.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0xb7a>
 800716a:	4b75      	ldr	r3, [pc, #468]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	0e1b      	lsrs	r3, r3, #24
 8007170:	f003 030f 	and.w	r3, r3, #15
 8007174:	e006      	b.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 8007176:	4b72      	ldr	r3, [pc, #456]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007178:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800717c:	041b      	lsls	r3, r3, #16
 800717e:	0e1b      	lsrs	r3, r3, #24
 8007180:	f003 030f 	and.w	r3, r3, #15
 8007184:	4a6f      	ldr	r2, [pc, #444]	@ (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8007186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800718a:	637b      	str	r3, [r7, #52]	@ 0x34
 800718c:	e36d      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800718e:	2300      	movs	r3, #0
 8007190:	637b      	str	r3, [r7, #52]	@ 0x34
 8007192:	e36a      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007194:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007198:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800719c:	430b      	orrs	r3, r1
 800719e:	d164      	bne.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0xc6e>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80071a0:	4b67      	ldr	r3, [pc, #412]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80071a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80071a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071aa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80071ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d120      	bne.n	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbf8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80071b2:	4b63      	ldr	r3, [pc, #396]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0320 	and.w	r3, r3, #32
 80071ba:	2b20      	cmp	r3, #32
 80071bc:	d117      	bne.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80071be:	4b60      	ldr	r3, [pc, #384]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d005      	beq.n	80071d6 <HAL_RCCEx_GetPeriphCLKFreq+0xbda>
 80071ca:	4b5d      	ldr	r3, [pc, #372]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	0e1b      	lsrs	r3, r3, #24
 80071d0:	f003 030f 	and.w	r3, r3, #15
 80071d4:	e006      	b.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 80071d6:	4b5a      	ldr	r3, [pc, #360]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80071d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80071dc:	041b      	lsls	r3, r3, #16
 80071de:	0e1b      	lsrs	r3, r3, #24
 80071e0:	f003 030f 	and.w	r3, r3, #15
 80071e4:	4a57      	ldr	r2, [pc, #348]	@ (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 80071e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80071ec:	e33d      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      else
      {
        frequency = 0U;
 80071ee:	2300      	movs	r3, #0
 80071f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80071f2:	e33a      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80071f4:	4b52      	ldr	r3, [pc, #328]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80071f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80071fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007202:	d112      	bne.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8007204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007206:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800720a:	d10e      	bne.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800720c:	4b4c      	ldr	r3, [pc, #304]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800720e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007216:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800721a:	d102      	bne.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0xc26>
      {
        frequency = LSI_VALUE / 128U;
 800721c:	23fa      	movs	r3, #250	@ 0xfa
 800721e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007220:	e323      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      else
      {
        frequency = LSI_VALUE;
 8007222:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007226:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007228:	e31f      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800722a:	4b45      	ldr	r3, [pc, #276]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007236:	d106      	bne.n	8007246 <HAL_RCCEx_GetPeriphCLKFreq+0xc4a>
 8007238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800723a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800723e:	d102      	bne.n	8007246 <HAL_RCCEx_GetPeriphCLKFreq+0xc4a>
    {
      frequency = HSI_VALUE;
 8007240:	4b41      	ldr	r3, [pc, #260]	@ (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>)
 8007242:	637b      	str	r3, [r7, #52]	@ 0x34
 8007244:	e311      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8007246:	4b3e      	ldr	r3, [pc, #248]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007248:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800724c:	f003 0302 	and.w	r3, r3, #2
 8007250:	2b02      	cmp	r3, #2
 8007252:	d107      	bne.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
 8007254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007256:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800725a:	d103      	bne.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
    {
      frequency = LSE_VALUE;
 800725c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007260:	637b      	str	r3, [r7, #52]	@ 0x34
 8007262:	e302      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	637b      	str	r3, [r7, #52]	@ 0x34
 8007268:	e2ff      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800726a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800726e:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007272:	430b      	orrs	r3, r1
 8007274:	d16a      	bne.n	800734c <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007276:	4b32      	ldr	r3, [pc, #200]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007278:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800727c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007280:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007284:	2b00      	cmp	r3, #0
 8007286:	d120      	bne.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007288:	4b2d      	ldr	r3, [pc, #180]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0320 	and.w	r3, r3, #32
 8007290:	2b20      	cmp	r3, #32
 8007292:	d117      	bne.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007294:	4b2a      	ldr	r3, [pc, #168]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800729c:	2b00      	cmp	r3, #0
 800729e:	d005      	beq.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
 80072a0:	4b27      	ldr	r3, [pc, #156]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	0e1b      	lsrs	r3, r3, #24
 80072a6:	f003 030f 	and.w	r3, r3, #15
 80072aa:	e006      	b.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 80072ac:	4b24      	ldr	r3, [pc, #144]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80072ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80072b2:	041b      	lsls	r3, r3, #16
 80072b4:	0e1b      	lsrs	r3, r3, #24
 80072b6:	f003 030f 	and.w	r3, r3, #15
 80072ba:	4a22      	ldr	r2, [pc, #136]	@ (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 80072bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80072c2:	e2d2      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      else
      {
        frequency = 0U;
 80072c4:	2300      	movs	r3, #0
 80072c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80072c8:	e2cf      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80072ca:	4b1d      	ldr	r3, [pc, #116]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80072cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072d8:	d112      	bne.n	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 80072da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072e0:	d10e      	bne.n	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072e2:	4b17      	ldr	r3, [pc, #92]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80072e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072f0:	d102      	bne.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
      {
        frequency = LSI_VALUE / 128U;
 80072f2:	23fa      	movs	r3, #250	@ 0xfa
 80072f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072f6:	e2b8      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      else
      {
        frequency = LSI_VALUE;
 80072f8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80072fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072fe:	e2b4      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007300:	4b0f      	ldr	r3, [pc, #60]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007308:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800730c:	d106      	bne.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 800730e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007310:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007314:	d102      	bne.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
    {
      frequency = HSI_VALUE;
 8007316:	4b0c      	ldr	r3, [pc, #48]	@ (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>)
 8007318:	637b      	str	r3, [r7, #52]	@ 0x34
 800731a:	e2a6      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800731c:	4b08      	ldr	r3, [pc, #32]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800731e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	2b02      	cmp	r3, #2
 8007328:	d107      	bne.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 800732a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007330:	d103      	bne.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
    {
      frequency = LSE_VALUE;
 8007332:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007336:	637b      	str	r3, [r7, #52]	@ 0x34
 8007338:	e297      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800733a:	2300      	movs	r3, #0
 800733c:	637b      	str	r3, [r7, #52]	@ 0x34
 800733e:	e294      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8007340:	46020c00 	.word	0x46020c00
 8007344:	0800bdf0 	.word	0x0800bdf0
 8007348:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800734c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007350:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007354:	430b      	orrs	r3, r1
 8007356:	d147      	bne.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007358:	4b9a      	ldr	r3, [pc, #616]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 800735a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800735e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007362:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8007364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007366:	2b00      	cmp	r3, #0
 8007368:	d103      	bne.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800736a:	f7fd ff33 	bl	80051d4 <HAL_RCC_GetPCLK1Freq>
 800736e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007370:	e27b      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8007372:	4b94      	ldr	r3, [pc, #592]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8007374:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007378:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800737c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007380:	d112      	bne.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0xdac>
 8007382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007384:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007388:	d10e      	bne.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0xdac>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800738a:	4b8e      	ldr	r3, [pc, #568]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 800738c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007390:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007394:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007398:	d102      	bne.n	80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0xda4>
      {
        frequency = LSI_VALUE / 128U;
 800739a:	23fa      	movs	r3, #250	@ 0xfa
 800739c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800739e:	e264      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      else
      {
        frequency = LSI_VALUE;
 80073a0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80073a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073a6:	e260      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80073a8:	4b86      	ldr	r3, [pc, #536]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073b4:	d106      	bne.n	80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc8>
 80073b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80073bc:	d102      	bne.n	80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc8>
    {
      frequency = HSI_VALUE;
 80073be:	4b82      	ldr	r3, [pc, #520]	@ (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 80073c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80073c2:	e252      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80073c4:	4b7f      	ldr	r3, [pc, #508]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80073c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073ca:	f003 0302 	and.w	r3, r3, #2
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d107      	bne.n	80073e2 <HAL_RCCEx_GetPeriphCLKFreq+0xde6>
 80073d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80073d8:	d103      	bne.n	80073e2 <HAL_RCCEx_GetPeriphCLKFreq+0xde6>
    {
      frequency = LSE_VALUE;
 80073da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073de:	637b      	str	r3, [r7, #52]	@ 0x34
 80073e0:	e243      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80073e2:	2300      	movs	r3, #0
 80073e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80073e6:	e240      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80073e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073ec:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80073f0:	430b      	orrs	r3, r1
 80073f2:	d12d      	bne.n	8007450 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80073f4:	4b73      	ldr	r3, [pc, #460]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80073f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80073fa:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80073fe:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007400:	4b70      	ldr	r3, [pc, #448]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007408:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800740c:	d105      	bne.n	800741a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 800740e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007410:	2b00      	cmp	r3, #0
 8007412:	d102      	bne.n	800741a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = HSE_VALUE;
 8007414:	4b6d      	ldr	r3, [pc, #436]	@ (80075cc <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8007416:	637b      	str	r3, [r7, #52]	@ 0x34
 8007418:	e227      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800741a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007420:	d107      	bne.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xe36>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007422:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007426:	4618      	mov	r0, r3
 8007428:	f7fe fcd4 	bl	8005dd4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800742c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800742e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007430:	e21b      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8007432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007434:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007438:	d107      	bne.n	800744a <HAL_RCCEx_GetPeriphCLKFreq+0xe4e>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800743a:	f107 0318 	add.w	r3, r7, #24
 800743e:	4618      	mov	r0, r3
 8007440:	f7fe fe24 	bl	800608c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	637b      	str	r3, [r7, #52]	@ 0x34
 8007448:	e20f      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800744a:	2300      	movs	r3, #0
 800744c:	637b      	str	r3, [r7, #52]	@ 0x34
 800744e:	e20c      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8007450:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007454:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8007458:	430b      	orrs	r3, r1
 800745a:	d156      	bne.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800745c:	4b59      	ldr	r3, [pc, #356]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 800745e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007462:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007466:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800746e:	d028      	beq.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0xec6>
 8007470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007472:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007476:	d845      	bhi.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
 8007478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800747e:	d013      	beq.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
 8007480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007482:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007486:	d83d      	bhi.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
 8007488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748a:	2b00      	cmp	r3, #0
 800748c:	d004      	beq.n	8007498 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 800748e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007490:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007494:	d004      	beq.n	80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0xea4>
 8007496:	e035      	b.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8007498:	f7fd feb0 	bl	80051fc <HAL_RCC_GetPCLK2Freq>
 800749c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800749e:	e1e4      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80074a0:	f7fd fd78 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 80074a4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80074a6:	e1e0      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80074a8:	4b46      	ldr	r3, [pc, #280]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074b4:	d102      	bne.n	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
        {
          frequency = HSI_VALUE;
 80074b6:	4b44      	ldr	r3, [pc, #272]	@ (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 80074b8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80074ba:	e1d6      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074c0:	e1d3      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80074c2:	4b40      	ldr	r3, [pc, #256]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0320 	and.w	r3, r3, #32
 80074ca:	2b20      	cmp	r3, #32
 80074cc:	d117      	bne.n	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80074ce:	4b3d      	ldr	r3, [pc, #244]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d005      	beq.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0xeea>
 80074da:	4b3a      	ldr	r3, [pc, #232]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	0e1b      	lsrs	r3, r3, #24
 80074e0:	f003 030f 	and.w	r3, r3, #15
 80074e4:	e006      	b.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 80074e6:	4b37      	ldr	r3, [pc, #220]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80074e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80074ec:	041b      	lsls	r3, r3, #16
 80074ee:	0e1b      	lsrs	r3, r3, #24
 80074f0:	f003 030f 	and.w	r3, r3, #15
 80074f4:	4a36      	ldr	r2, [pc, #216]	@ (80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>)
 80074f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074fa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80074fc:	e1b5      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 80074fe:	2300      	movs	r3, #0
 8007500:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007502:	e1b2      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      default:

        frequency = 0U;
 8007504:	2300      	movs	r3, #0
 8007506:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007508:	e1af      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800750a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800750e:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8007512:	430b      	orrs	r3, r1
 8007514:	d15e      	bne.n	80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007516:	4b2b      	ldr	r3, [pc, #172]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8007518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800751c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007520:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007524:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007528:	d028      	beq.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 800752a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800752c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007530:	d845      	bhi.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8007532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007534:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007538:	d013      	beq.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0xf66>
 800753a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800753c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007540:	d83d      	bhi.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8007542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007544:	2b00      	cmp	r3, #0
 8007546:	d004      	beq.n	8007552 <HAL_RCCEx_GetPeriphCLKFreq+0xf56>
 8007548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800754e:	d004      	beq.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0xf5e>
 8007550:	e035      	b.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007552:	f7fd fe3f 	bl	80051d4 <HAL_RCC_GetPCLK1Freq>
 8007556:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007558:	e187      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800755a:	f7fd fd1b 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 800755e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007560:	e183      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007562:	4b18      	ldr	r3, [pc, #96]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800756a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800756e:	d102      	bne.n	8007576 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
        {
          frequency = HSI_VALUE;
 8007570:	4b15      	ldr	r3, [pc, #84]	@ (80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8007572:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007574:	e179      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 8007576:	2300      	movs	r3, #0
 8007578:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800757a:	e176      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800757c:	4b11      	ldr	r3, [pc, #68]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 0320 	and.w	r3, r3, #32
 8007584:	2b20      	cmp	r3, #32
 8007586:	d117      	bne.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xfbc>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007588:	4b0e      	ldr	r3, [pc, #56]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d005      	beq.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8007594:	4b0b      	ldr	r3, [pc, #44]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	0e1b      	lsrs	r3, r3, #24
 800759a:	f003 030f 	and.w	r3, r3, #15
 800759e:	e006      	b.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0xfb2>
 80075a0:	4b08      	ldr	r3, [pc, #32]	@ (80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 80075a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80075a6:	041b      	lsls	r3, r3, #16
 80075a8:	0e1b      	lsrs	r3, r3, #24
 80075aa:	f003 030f 	and.w	r3, r3, #15
 80075ae:	4a08      	ldr	r2, [pc, #32]	@ (80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>)
 80075b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075b4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80075b6:	e158      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 80075b8:	2300      	movs	r3, #0
 80075ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075bc:	e155      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      default:

        frequency = 0U;
 80075be:	2300      	movs	r3, #0
 80075c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075c2:	e152      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 80075c4:	46020c00 	.word	0x46020c00
 80075c8:	00f42400 	.word	0x00f42400
 80075cc:	007a1200 	.word	0x007a1200
 80075d0:	0800bdf0 	.word	0x0800bdf0
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80075d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075d8:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80075dc:	430b      	orrs	r3, r1
 80075de:	d176      	bne.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0x10d2>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80075e0:	4ba4      	ldr	r3, [pc, #656]	@ (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 80075e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80075e6:	f003 0318 	and.w	r3, r3, #24
 80075ea:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80075ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ee:	2b18      	cmp	r3, #24
 80075f0:	d86a      	bhi.n	80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10cc>
 80075f2:	a201      	add	r2, pc, #4	@ (adr r2, 80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0xffc>)
 80075f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f8:	0800765d 	.word	0x0800765d
 80075fc:	080076c9 	.word	0x080076c9
 8007600:	080076c9 	.word	0x080076c9
 8007604:	080076c9 	.word	0x080076c9
 8007608:	080076c9 	.word	0x080076c9
 800760c:	080076c9 	.word	0x080076c9
 8007610:	080076c9 	.word	0x080076c9
 8007614:	080076c9 	.word	0x080076c9
 8007618:	08007665 	.word	0x08007665
 800761c:	080076c9 	.word	0x080076c9
 8007620:	080076c9 	.word	0x080076c9
 8007624:	080076c9 	.word	0x080076c9
 8007628:	080076c9 	.word	0x080076c9
 800762c:	080076c9 	.word	0x080076c9
 8007630:	080076c9 	.word	0x080076c9
 8007634:	080076c9 	.word	0x080076c9
 8007638:	0800766d 	.word	0x0800766d
 800763c:	080076c9 	.word	0x080076c9
 8007640:	080076c9 	.word	0x080076c9
 8007644:	080076c9 	.word	0x080076c9
 8007648:	080076c9 	.word	0x080076c9
 800764c:	080076c9 	.word	0x080076c9
 8007650:	080076c9 	.word	0x080076c9
 8007654:	080076c9 	.word	0x080076c9
 8007658:	08007687 	.word	0x08007687
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800765c:	f7fd fde2 	bl	8005224 <HAL_RCC_GetPCLK3Freq>
 8007660:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007662:	e102      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007664:	f7fd fc96 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 8007668:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800766a:	e0fe      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800766c:	4b81      	ldr	r3, [pc, #516]	@ (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007674:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007678:	d102      	bne.n	8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
        {
          frequency = HSI_VALUE;
 800767a:	4b7f      	ldr	r3, [pc, #508]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 800767c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800767e:	e0f4      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 8007680:	2300      	movs	r3, #0
 8007682:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007684:	e0f1      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007686:	4b7b      	ldr	r3, [pc, #492]	@ (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 0320 	and.w	r3, r3, #32
 800768e:	2b20      	cmp	r3, #32
 8007690:	d117      	bne.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x10c6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007692:	4b78      	ldr	r3, [pc, #480]	@ (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d005      	beq.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
 800769e:	4b75      	ldr	r3, [pc, #468]	@ (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	0e1b      	lsrs	r3, r3, #24
 80076a4:	f003 030f 	and.w	r3, r3, #15
 80076a8:	e006      	b.n	80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>
 80076aa:	4b72      	ldr	r3, [pc, #456]	@ (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 80076ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80076b0:	041b      	lsls	r3, r3, #16
 80076b2:	0e1b      	lsrs	r3, r3, #24
 80076b4:	f003 030f 	and.w	r3, r3, #15
 80076b8:	4a70      	ldr	r2, [pc, #448]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80076ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076be:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80076c0:	e0d3      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 80076c2:	2300      	movs	r3, #0
 80076c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076c6:	e0d0      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      default:

        frequency = 0U;
 80076c8:	2300      	movs	r3, #0
 80076ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076cc:	e0cd      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80076ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076d2:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80076d6:	430b      	orrs	r3, r1
 80076d8:	d155      	bne.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0x118a>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80076da:	4b66      	ldr	r3, [pc, #408]	@ (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 80076dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80076e0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80076e4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80076e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80076ec:	d013      	beq.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 80076ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80076f4:	d844      	bhi.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x1184>
 80076f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80076fc:	d013      	beq.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0x112a>
 80076fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007700:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007704:	d83c      	bhi.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x1184>
 8007706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007708:	2b00      	cmp	r3, #0
 800770a:	d014      	beq.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800770c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800770e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007712:	d014      	beq.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x1142>
 8007714:	e034      	b.n	8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x1184>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007716:	f107 0318 	add.w	r3, r7, #24
 800771a:	4618      	mov	r0, r3
 800771c:	f7fe fcb6 	bl	800608c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007724:	e0a1      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007726:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800772a:	4618      	mov	r0, r3
 800772c:	f7fe fb52 	bl	8005dd4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007732:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007734:	e099      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007736:	f7fd fc2d 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 800773a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800773c:	e095      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800773e:	4b4d      	ldr	r3, [pc, #308]	@ (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 0320 	and.w	r3, r3, #32
 8007746:	2b20      	cmp	r3, #32
 8007748:	d117      	bne.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800774a:	4b4a      	ldr	r3, [pc, #296]	@ (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007752:	2b00      	cmp	r3, #0
 8007754:	d005      	beq.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x1166>
 8007756:	4b47      	ldr	r3, [pc, #284]	@ (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	0e1b      	lsrs	r3, r3, #24
 800775c:	f003 030f 	and.w	r3, r3, #15
 8007760:	e006      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x1174>
 8007762:	4b44      	ldr	r3, [pc, #272]	@ (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8007764:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007768:	041b      	lsls	r3, r3, #16
 800776a:	0e1b      	lsrs	r3, r3, #24
 800776c:	f003 030f 	and.w	r3, r3, #15
 8007770:	4a42      	ldr	r2, [pc, #264]	@ (800787c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007776:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007778:	e077      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
          frequency = 0U;
 800777a:	2300      	movs	r3, #0
 800777c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800777e:	e074      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>

      default:

        frequency = 0U;
 8007780:	2300      	movs	r3, #0
 8007782:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007784:	e071      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8007786:	e9d7 2300 	ldrd	r2, r3, [r7]
 800778a:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800778e:	430b      	orrs	r3, r1
 8007790:	d131      	bne.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007792:	4b38      	ldr	r3, [pc, #224]	@ (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8007794:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007798:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800779c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800779e:	4b35      	ldr	r3, [pc, #212]	@ (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 80077a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077a4:	f003 0302 	and.w	r3, r3, #2
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d106      	bne.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 80077ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d103      	bne.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
    {
      frequency = LSE_VALUE;
 80077b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80077b8:	e057      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80077ba:	4b2e      	ldr	r3, [pc, #184]	@ (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 80077bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077c8:	d112      	bne.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x11f4>
 80077ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077d0:	d10e      	bne.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x11f4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80077d2:	4b28      	ldr	r3, [pc, #160]	@ (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 80077d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077e0:	d102      	bne.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
      {
        frequency = LSI_VALUE / 128U;
 80077e2:	23fa      	movs	r3, #250	@ 0xfa
 80077e4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80077e6:	e040      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
      else
      {
        frequency = LSI_VALUE;
 80077e8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80077ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80077ee:	e03c      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80077f0:	2300      	movs	r3, #0
 80077f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80077f4:	e039      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80077f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077fa:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80077fe:	430b      	orrs	r3, r1
 8007800:	d131      	bne.n	8007866 <HAL_RCCEx_GetPeriphCLKFreq+0x126a>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007802:	4b1c      	ldr	r3, [pc, #112]	@ (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8007804:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007808:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800780c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800780e:	4b19      	ldr	r3, [pc, #100]	@ (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007816:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800781a:	d105      	bne.n	8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>
 800781c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781e:	2b00      	cmp	r3, #0
 8007820:	d102      	bne.n	8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x122c>
    {
      frequency = HSI48_VALUE;
 8007822:	4b17      	ldr	r3, [pc, #92]	@ (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007824:	637b      	str	r3, [r7, #52]	@ 0x34
 8007826:	e020      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8007828:	4b12      	ldr	r3, [pc, #72]	@ (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007830:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007834:	d106      	bne.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8007836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007838:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800783c:	d102      	bne.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
    {
      frequency = HSI48_VALUE >> 1U ;
 800783e:	4b11      	ldr	r3, [pc, #68]	@ (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8007840:	637b      	str	r3, [r7, #52]	@ 0x34
 8007842:	e012      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8007844:	4b0b      	ldr	r3, [pc, #44]	@ (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800784c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007850:	d106      	bne.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>
 8007852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007854:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007858:	d102      	bne.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>
    {
      frequency = HSI_VALUE;
 800785a:	4b07      	ldr	r3, [pc, #28]	@ (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 800785c:	637b      	str	r3, [r7, #52]	@ 0x34
 800785e:	e004      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8007860:	2300      	movs	r3, #0
 8007862:	637b      	str	r3, [r7, #52]	@ 0x34
 8007864:	e001      	b.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8007866:	2300      	movs	r3, #0
 8007868:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800786a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800786c:	4618      	mov	r0, r3
 800786e:	3738      	adds	r7, #56	@ 0x38
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	46020c00 	.word	0x46020c00
 8007878:	00f42400 	.word	0x00f42400
 800787c:	0800bdf0 	.word	0x0800bdf0
 8007880:	02dc6c00 	.word	0x02dc6c00
 8007884:	016e3600 	.word	0x016e3600

08007888 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007890:	4b47      	ldr	r3, [pc, #284]	@ (80079b0 <RCCEx_PLL2_Config+0x128>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a46      	ldr	r2, [pc, #280]	@ (80079b0 <RCCEx_PLL2_Config+0x128>)
 8007896:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800789a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800789c:	f7fa ff54 	bl	8002748 <HAL_GetTick>
 80078a0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80078a2:	e008      	b.n	80078b6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80078a4:	f7fa ff50 	bl	8002748 <HAL_GetTick>
 80078a8:	4602      	mov	r2, r0
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d901      	bls.n	80078b6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e077      	b.n	80079a6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80078b6:	4b3e      	ldr	r3, [pc, #248]	@ (80079b0 <RCCEx_PLL2_Config+0x128>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1f0      	bne.n	80078a4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80078c2:	4b3b      	ldr	r3, [pc, #236]	@ (80079b0 <RCCEx_PLL2_Config+0x128>)
 80078c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80078ca:	f023 0303 	bic.w	r3, r3, #3
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	6811      	ldr	r1, [r2, #0]
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	6852      	ldr	r2, [r2, #4]
 80078d6:	3a01      	subs	r2, #1
 80078d8:	0212      	lsls	r2, r2, #8
 80078da:	430a      	orrs	r2, r1
 80078dc:	4934      	ldr	r1, [pc, #208]	@ (80079b0 <RCCEx_PLL2_Config+0x128>)
 80078de:	4313      	orrs	r3, r2
 80078e0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80078e2:	4b33      	ldr	r3, [pc, #204]	@ (80079b0 <RCCEx_PLL2_Config+0x128>)
 80078e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078e6:	4b33      	ldr	r3, [pc, #204]	@ (80079b4 <RCCEx_PLL2_Config+0x12c>)
 80078e8:	4013      	ands	r3, r2
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	6892      	ldr	r2, [r2, #8]
 80078ee:	3a01      	subs	r2, #1
 80078f0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	68d2      	ldr	r2, [r2, #12]
 80078f8:	3a01      	subs	r2, #1
 80078fa:	0252      	lsls	r2, r2, #9
 80078fc:	b292      	uxth	r2, r2
 80078fe:	4311      	orrs	r1, r2
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	6912      	ldr	r2, [r2, #16]
 8007904:	3a01      	subs	r2, #1
 8007906:	0412      	lsls	r2, r2, #16
 8007908:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800790c:	4311      	orrs	r1, r2
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	6952      	ldr	r2, [r2, #20]
 8007912:	3a01      	subs	r2, #1
 8007914:	0612      	lsls	r2, r2, #24
 8007916:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800791a:	430a      	orrs	r2, r1
 800791c:	4924      	ldr	r1, [pc, #144]	@ (80079b0 <RCCEx_PLL2_Config+0x128>)
 800791e:	4313      	orrs	r3, r2
 8007920:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007922:	4b23      	ldr	r3, [pc, #140]	@ (80079b0 <RCCEx_PLL2_Config+0x128>)
 8007924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007926:	f023 020c 	bic.w	r2, r3, #12
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	4920      	ldr	r1, [pc, #128]	@ (80079b0 <RCCEx_PLL2_Config+0x128>)
 8007930:	4313      	orrs	r3, r2
 8007932:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007934:	4b1e      	ldr	r3, [pc, #120]	@ (80079b0 <RCCEx_PLL2_Config+0x128>)
 8007936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a1b      	ldr	r3, [r3, #32]
 800793c:	491c      	ldr	r1, [pc, #112]	@ (80079b0 <RCCEx_PLL2_Config+0x128>)
 800793e:	4313      	orrs	r3, r2
 8007940:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007942:	4b1b      	ldr	r3, [pc, #108]	@ (80079b0 <RCCEx_PLL2_Config+0x128>)
 8007944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007946:	4a1a      	ldr	r2, [pc, #104]	@ (80079b0 <RCCEx_PLL2_Config+0x128>)
 8007948:	f023 0310 	bic.w	r3, r3, #16
 800794c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800794e:	4b18      	ldr	r3, [pc, #96]	@ (80079b0 <RCCEx_PLL2_Config+0x128>)
 8007950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007952:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007956:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	69d2      	ldr	r2, [r2, #28]
 800795e:	00d2      	lsls	r2, r2, #3
 8007960:	4913      	ldr	r1, [pc, #76]	@ (80079b0 <RCCEx_PLL2_Config+0x128>)
 8007962:	4313      	orrs	r3, r2
 8007964:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007966:	4b12      	ldr	r3, [pc, #72]	@ (80079b0 <RCCEx_PLL2_Config+0x128>)
 8007968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800796a:	4a11      	ldr	r2, [pc, #68]	@ (80079b0 <RCCEx_PLL2_Config+0x128>)
 800796c:	f043 0310 	orr.w	r3, r3, #16
 8007970:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007972:	4b0f      	ldr	r3, [pc, #60]	@ (80079b0 <RCCEx_PLL2_Config+0x128>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a0e      	ldr	r2, [pc, #56]	@ (80079b0 <RCCEx_PLL2_Config+0x128>)
 8007978:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800797c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800797e:	f7fa fee3 	bl	8002748 <HAL_GetTick>
 8007982:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007984:	e008      	b.n	8007998 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007986:	f7fa fedf 	bl	8002748 <HAL_GetTick>
 800798a:	4602      	mov	r2, r0
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	2b02      	cmp	r3, #2
 8007992:	d901      	bls.n	8007998 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007994:	2303      	movs	r3, #3
 8007996:	e006      	b.n	80079a6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007998:	4b05      	ldr	r3, [pc, #20]	@ (80079b0 <RCCEx_PLL2_Config+0x128>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d0f0      	beq.n	8007986 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80079a4:	2300      	movs	r3, #0

}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	46020c00 	.word	0x46020c00
 80079b4:	80800000 	.word	0x80800000

080079b8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80079c0:	4b47      	ldr	r3, [pc, #284]	@ (8007ae0 <RCCEx_PLL3_Config+0x128>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a46      	ldr	r2, [pc, #280]	@ (8007ae0 <RCCEx_PLL3_Config+0x128>)
 80079c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079ca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80079cc:	f7fa febc 	bl	8002748 <HAL_GetTick>
 80079d0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80079d2:	e008      	b.n	80079e6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80079d4:	f7fa feb8 	bl	8002748 <HAL_GetTick>
 80079d8:	4602      	mov	r2, r0
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d901      	bls.n	80079e6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e077      	b.n	8007ad6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80079e6:	4b3e      	ldr	r3, [pc, #248]	@ (8007ae0 <RCCEx_PLL3_Config+0x128>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1f0      	bne.n	80079d4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80079f2:	4b3b      	ldr	r3, [pc, #236]	@ (8007ae0 <RCCEx_PLL3_Config+0x128>)
 80079f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079f6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80079fa:	f023 0303 	bic.w	r3, r3, #3
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	6811      	ldr	r1, [r2, #0]
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	6852      	ldr	r2, [r2, #4]
 8007a06:	3a01      	subs	r2, #1
 8007a08:	0212      	lsls	r2, r2, #8
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	4934      	ldr	r1, [pc, #208]	@ (8007ae0 <RCCEx_PLL3_Config+0x128>)
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	630b      	str	r3, [r1, #48]	@ 0x30
 8007a12:	4b33      	ldr	r3, [pc, #204]	@ (8007ae0 <RCCEx_PLL3_Config+0x128>)
 8007a14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a16:	4b33      	ldr	r3, [pc, #204]	@ (8007ae4 <RCCEx_PLL3_Config+0x12c>)
 8007a18:	4013      	ands	r3, r2
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	6892      	ldr	r2, [r2, #8]
 8007a1e:	3a01      	subs	r2, #1
 8007a20:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	68d2      	ldr	r2, [r2, #12]
 8007a28:	3a01      	subs	r2, #1
 8007a2a:	0252      	lsls	r2, r2, #9
 8007a2c:	b292      	uxth	r2, r2
 8007a2e:	4311      	orrs	r1, r2
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	6912      	ldr	r2, [r2, #16]
 8007a34:	3a01      	subs	r2, #1
 8007a36:	0412      	lsls	r2, r2, #16
 8007a38:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007a3c:	4311      	orrs	r1, r2
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	6952      	ldr	r2, [r2, #20]
 8007a42:	3a01      	subs	r2, #1
 8007a44:	0612      	lsls	r2, r2, #24
 8007a46:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	4924      	ldr	r1, [pc, #144]	@ (8007ae0 <RCCEx_PLL3_Config+0x128>)
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007a52:	4b23      	ldr	r3, [pc, #140]	@ (8007ae0 <RCCEx_PLL3_Config+0x128>)
 8007a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a56:	f023 020c 	bic.w	r2, r3, #12
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	4920      	ldr	r1, [pc, #128]	@ (8007ae0 <RCCEx_PLL3_Config+0x128>)
 8007a60:	4313      	orrs	r3, r2
 8007a62:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007a64:	4b1e      	ldr	r3, [pc, #120]	@ (8007ae0 <RCCEx_PLL3_Config+0x128>)
 8007a66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a1b      	ldr	r3, [r3, #32]
 8007a6c:	491c      	ldr	r1, [pc, #112]	@ (8007ae0 <RCCEx_PLL3_Config+0x128>)
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007a72:	4b1b      	ldr	r3, [pc, #108]	@ (8007ae0 <RCCEx_PLL3_Config+0x128>)
 8007a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a76:	4a1a      	ldr	r2, [pc, #104]	@ (8007ae0 <RCCEx_PLL3_Config+0x128>)
 8007a78:	f023 0310 	bic.w	r3, r3, #16
 8007a7c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007a7e:	4b18      	ldr	r3, [pc, #96]	@ (8007ae0 <RCCEx_PLL3_Config+0x128>)
 8007a80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a86:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	69d2      	ldr	r2, [r2, #28]
 8007a8e:	00d2      	lsls	r2, r2, #3
 8007a90:	4913      	ldr	r1, [pc, #76]	@ (8007ae0 <RCCEx_PLL3_Config+0x128>)
 8007a92:	4313      	orrs	r3, r2
 8007a94:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007a96:	4b12      	ldr	r3, [pc, #72]	@ (8007ae0 <RCCEx_PLL3_Config+0x128>)
 8007a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a9a:	4a11      	ldr	r2, [pc, #68]	@ (8007ae0 <RCCEx_PLL3_Config+0x128>)
 8007a9c:	f043 0310 	orr.w	r3, r3, #16
 8007aa0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8007ae0 <RCCEx_PLL3_Config+0x128>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a0e      	ldr	r2, [pc, #56]	@ (8007ae0 <RCCEx_PLL3_Config+0x128>)
 8007aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007aac:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007aae:	f7fa fe4b 	bl	8002748 <HAL_GetTick>
 8007ab2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ab4:	e008      	b.n	8007ac8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007ab6:	f7fa fe47 	bl	8002748 <HAL_GetTick>
 8007aba:	4602      	mov	r2, r0
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	2b02      	cmp	r3, #2
 8007ac2:	d901      	bls.n	8007ac8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	e006      	b.n	8007ad6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ac8:	4b05      	ldr	r3, [pc, #20]	@ (8007ae0 <RCCEx_PLL3_Config+0x128>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d0f0      	beq.n	8007ab6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3710      	adds	r7, #16
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	46020c00 	.word	0x46020c00
 8007ae4:	80800000 	.word	0x80800000

08007ae8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d071      	beq.n	8007bde <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d106      	bne.n	8007b14 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f7fa f8fc 	bl	8001d0c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2202      	movs	r2, #2
 8007b18:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007b1c:	4b32      	ldr	r3, [pc, #200]	@ (8007be8 <HAL_RTC_Init+0x100>)
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	f003 0310 	and.w	r3, r3, #16
 8007b24:	2b10      	cmp	r3, #16
 8007b26:	d051      	beq.n	8007bcc <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b28:	4b2f      	ldr	r3, [pc, #188]	@ (8007be8 <HAL_RTC_Init+0x100>)
 8007b2a:	22ca      	movs	r2, #202	@ 0xca
 8007b2c:	625a      	str	r2, [r3, #36]	@ 0x24
 8007b2e:	4b2e      	ldr	r3, [pc, #184]	@ (8007be8 <HAL_RTC_Init+0x100>)
 8007b30:	2253      	movs	r2, #83	@ 0x53
 8007b32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 fa6d 	bl	8008014 <RTC_EnterInitMode>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8007b3e:	7bfb      	ldrb	r3, [r7, #15]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d13f      	bne.n	8007bc4 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8007b44:	4b28      	ldr	r3, [pc, #160]	@ (8007be8 <HAL_RTC_Init+0x100>)
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	4a27      	ldr	r2, [pc, #156]	@ (8007be8 <HAL_RTC_Init+0x100>)
 8007b4a:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8007b4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b52:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8007b54:	4b24      	ldr	r3, [pc, #144]	@ (8007be8 <HAL_RTC_Init+0x100>)
 8007b56:	699a      	ldr	r2, [r3, #24]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6859      	ldr	r1, [r3, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	4319      	orrs	r1, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	430b      	orrs	r3, r1
 8007b68:	491f      	ldr	r1, [pc, #124]	@ (8007be8 <HAL_RTC_Init+0x100>)
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	68da      	ldr	r2, [r3, #12]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	041b      	lsls	r3, r3, #16
 8007b78:	491b      	ldr	r1, [pc, #108]	@ (8007be8 <HAL_RTC_Init+0x100>)
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8007b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8007be8 <HAL_RTC_Init+0x100>)
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b8e:	430b      	orrs	r3, r1
 8007b90:	4915      	ldr	r1, [pc, #84]	@ (8007be8 <HAL_RTC_Init+0x100>)
 8007b92:	4313      	orrs	r3, r2
 8007b94:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fa78 	bl	800808c <RTC_ExitInitMode>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8007ba0:	7bfb      	ldrb	r3, [r7, #15]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10e      	bne.n	8007bc4 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8007ba6:	4b10      	ldr	r3, [pc, #64]	@ (8007be8 <HAL_RTC_Init+0x100>)
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a19      	ldr	r1, [r3, #32]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	69db      	ldr	r3, [r3, #28]
 8007bb6:	4319      	orrs	r1, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	430b      	orrs	r3, r1
 8007bbe:	490a      	ldr	r1, [pc, #40]	@ (8007be8 <HAL_RTC_Init+0x100>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bc4:	4b08      	ldr	r3, [pc, #32]	@ (8007be8 <HAL_RTC_Init+0x100>)
 8007bc6:	22ff      	movs	r2, #255	@ 0xff
 8007bc8:	625a      	str	r2, [r3, #36]	@ 0x24
 8007bca:	e001      	b.n	8007bd0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007bd0:	7bfb      	ldrb	r3, [r7, #15]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d103      	bne.n	8007bde <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8007bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	46007800 	.word	0x46007800

08007bec <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007bec:	b590      	push	{r4, r7, lr}
 8007bee:	b087      	sub	sp, #28
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d101      	bne.n	8007c06 <HAL_RTC_SetTime+0x1a>
 8007c02:	2302      	movs	r3, #2
 8007c04:	e088      	b.n	8007d18 <HAL_RTC_SetTime+0x12c>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2202      	movs	r2, #2
 8007c12:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c16:	4b42      	ldr	r3, [pc, #264]	@ (8007d20 <HAL_RTC_SetTime+0x134>)
 8007c18:	22ca      	movs	r2, #202	@ 0xca
 8007c1a:	625a      	str	r2, [r3, #36]	@ 0x24
 8007c1c:	4b40      	ldr	r3, [pc, #256]	@ (8007d20 <HAL_RTC_SetTime+0x134>)
 8007c1e:	2253      	movs	r2, #83	@ 0x53
 8007c20:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f000 f9f6 	bl	8008014 <RTC_EnterInitMode>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007c2c:	7cfb      	ldrb	r3, [r7, #19]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d163      	bne.n	8007cfa <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8007c32:	4b3b      	ldr	r3, [pc, #236]	@ (8007d20 <HAL_RTC_SetTime+0x134>)
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c3e:	d057      	beq.n	8007cf0 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d125      	bne.n	8007c92 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007c46:	4b36      	ldr	r3, [pc, #216]	@ (8007d20 <HAL_RTC_SetTime+0x134>)
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d102      	bne.n	8007c58 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	2200      	movs	r2, #0
 8007c56:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f000 fa53 	bl	8008108 <RTC_ByteToBcd2>
 8007c62:	4603      	mov	r3, r0
 8007c64:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	785b      	ldrb	r3, [r3, #1]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 fa4c 	bl	8008108 <RTC_ByteToBcd2>
 8007c70:	4603      	mov	r3, r0
 8007c72:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007c74:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	789b      	ldrb	r3, [r3, #2]
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f000 fa44 	bl	8008108 <RTC_ByteToBcd2>
 8007c80:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007c82:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	78db      	ldrb	r3, [r3, #3]
 8007c8a:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	617b      	str	r3, [r7, #20]
 8007c90:	e017      	b.n	8007cc2 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007c92:	4b23      	ldr	r3, [pc, #140]	@ (8007d20 <HAL_RTC_SetTime+0x134>)
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d102      	bne.n	8007ca4 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	785b      	ldrb	r3, [r3, #1]
 8007cae:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007cb0:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007cb6:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	78db      	ldrb	r3, [r3, #3]
 8007cbc:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8007cc2:	4a17      	ldr	r2, [pc, #92]	@ (8007d20 <HAL_RTC_SetTime+0x134>)
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8007cca:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007cce:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8007cd0:	4b13      	ldr	r3, [pc, #76]	@ (8007d20 <HAL_RTC_SetTime+0x134>)
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	4a12      	ldr	r2, [pc, #72]	@ (8007d20 <HAL_RTC_SetTime+0x134>)
 8007cd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007cda:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8007cdc:	4b10      	ldr	r3, [pc, #64]	@ (8007d20 <HAL_RTC_SetTime+0x134>)
 8007cde:	699a      	ldr	r2, [r3, #24]
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	68d9      	ldr	r1, [r3, #12]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	430b      	orrs	r3, r1
 8007cea:	490d      	ldr	r1, [pc, #52]	@ (8007d20 <HAL_RTC_SetTime+0x134>)
 8007cec:	4313      	orrs	r3, r2
 8007cee:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f000 f9cb 	bl	800808c <RTC_ExitInitMode>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cfa:	4b09      	ldr	r3, [pc, #36]	@ (8007d20 <HAL_RTC_SetTime+0x134>)
 8007cfc:	22ff      	movs	r2, #255	@ 0xff
 8007cfe:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8007d00:	7cfb      	ldrb	r3, [r7, #19]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d103      	bne.n	8007d0e <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8007d16:	7cfb      	ldrb	r3, [r7, #19]
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	371c      	adds	r7, #28
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd90      	pop	{r4, r7, pc}
 8007d20:	46007800 	.word	0x46007800

08007d24 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(const RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b086      	sub	sp, #24
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8007d30:	4b34      	ldr	r3, [pc, #208]	@ (8007e04 <HAL_RTC_GetTime+0xe0>)
 8007d32:	689a      	ldr	r2, [r3, #8]
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	605a      	str	r2, [r3, #4]


  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8007d38:	4b32      	ldr	r3, [pc, #200]	@ (8007e04 <HAL_RTC_GetTime+0xe0>)
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d44:	d04a      	beq.n	8007ddc <HAL_RTC_GetTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field */
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8007d46:	4b2f      	ldr	r3, [pc, #188]	@ (8007e04 <HAL_RTC_GetTime+0xe0>)
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8007d52:	4b2c      	ldr	r3, [pc, #176]	@ (8007e04 <HAL_RTC_GetTime+0xe0>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8007d5a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007d5e:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	0c1b      	lsrs	r3, r3, #16
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d6a:	b2da      	uxtb	r2, r3
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	0a1b      	lsrs	r3, r3, #8
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d7a:	b2da      	uxtb	r2, r3
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d88:	b2da      	uxtb	r2, r3
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	0d9b      	lsrs	r3, r3, #22
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	f003 0301 	and.w	r3, r3, #1
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d12a      	bne.n	8007dfa <HAL_RTC_GetTime+0xd6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 f9cd 	bl	8008148 <RTC_Bcd2ToByte>
 8007dae:	4603      	mov	r3, r0
 8007db0:	461a      	mov	r2, r3
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	785b      	ldrb	r3, [r3, #1]
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f000 f9c4 	bl	8008148 <RTC_Bcd2ToByte>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	789b      	ldrb	r3, [r3, #2]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f000 f9bb 	bl	8008148 <RTC_Bcd2ToByte>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	709a      	strb	r2, [r3, #2]
 8007dda:	e00e      	b.n	8007dfa <HAL_RTC_GetTime+0xd6>
    }
  }
  else
  {
    /* Initialize structure fields */
    sTime->Hours = 0U;
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	2200      	movs	r2, #0
 8007de0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = 0U;
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	2200      	movs	r2, #0
 8007de6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = 0U;
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	2200      	movs	r2, #0
 8007dec:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = 0U;
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	2200      	movs	r2, #0
 8007df2:	70da      	strb	r2, [r3, #3]
    sTime->SecondFraction = 0U;
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	2200      	movs	r2, #0
 8007df8:	609a      	str	r2, [r3, #8]
  }

  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3718      	adds	r7, #24
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	46007800 	.word	0x46007800

08007e08 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007e08:	b590      	push	{r4, r7, lr}
 8007e0a:	b087      	sub	sp, #28
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d101      	bne.n	8007e22 <HAL_RTC_SetDate+0x1a>
 8007e1e:	2302      	movs	r3, #2
 8007e20:	e071      	b.n	8007f06 <HAL_RTC_SetDate+0xfe>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2202      	movs	r2, #2
 8007e2e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d10e      	bne.n	8007e56 <HAL_RTC_SetDate+0x4e>
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	785b      	ldrb	r3, [r3, #1]
 8007e3c:	f003 0310 	and.w	r3, r3, #16
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d008      	beq.n	8007e56 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	785b      	ldrb	r3, [r3, #1]
 8007e48:	f023 0310 	bic.w	r3, r3, #16
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	330a      	adds	r3, #10
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d11c      	bne.n	8007e96 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	78db      	ldrb	r3, [r3, #3]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f000 f951 	bl	8008108 <RTC_ByteToBcd2>
 8007e66:	4603      	mov	r3, r0
 8007e68:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	785b      	ldrb	r3, [r3, #1]
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 f94a 	bl	8008108 <RTC_ByteToBcd2>
 8007e74:	4603      	mov	r3, r0
 8007e76:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007e78:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	789b      	ldrb	r3, [r3, #2]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 f942 	bl	8008108 <RTC_ByteToBcd2>
 8007e84:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007e86:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007e90:	4313      	orrs	r3, r2
 8007e92:	617b      	str	r3, [r7, #20]
 8007e94:	e00e      	b.n	8007eb4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	78db      	ldrb	r3, [r3, #3]
 8007e9a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	785b      	ldrb	r3, [r3, #1]
 8007ea0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007ea2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8007ea4:	68ba      	ldr	r2, [r7, #8]
 8007ea6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007ea8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007eb4:	4b16      	ldr	r3, [pc, #88]	@ (8007f10 <HAL_RTC_SetDate+0x108>)
 8007eb6:	22ca      	movs	r2, #202	@ 0xca
 8007eb8:	625a      	str	r2, [r3, #36]	@ 0x24
 8007eba:	4b15      	ldr	r3, [pc, #84]	@ (8007f10 <HAL_RTC_SetDate+0x108>)
 8007ebc:	2253      	movs	r2, #83	@ 0x53
 8007ebe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f000 f8a7 	bl	8008014 <RTC_EnterInitMode>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007eca:	7cfb      	ldrb	r3, [r7, #19]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10b      	bne.n	8007ee8 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8007ed0:	4a0f      	ldr	r2, [pc, #60]	@ (8007f10 <HAL_RTC_SetDate+0x108>)
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007ed8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007edc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f000 f8d4 	bl	800808c <RTC_ExitInitMode>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ee8:	4b09      	ldr	r3, [pc, #36]	@ (8007f10 <HAL_RTC_SetDate+0x108>)
 8007eea:	22ff      	movs	r2, #255	@ 0xff
 8007eec:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8007eee:	7cfb      	ldrb	r3, [r7, #19]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d103      	bne.n	8007efc <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8007f04:	7cfb      	ldrb	r3, [r7, #19]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	371c      	adds	r7, #28
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd90      	pop	{r4, r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	46007800 	.word	0x46007800

08007f14 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b086      	sub	sp, #24
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8007f20:	4b22      	ldr	r3, [pc, #136]	@ (8007fac <HAL_RTC_GetDate+0x98>)
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007f28:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007f2c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	0c1b      	lsrs	r3, r3, #16
 8007f32:	b2da      	uxtb	r2, r3
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	0a1b      	lsrs	r3, r3, #8
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	f003 031f 	and.w	r3, r3, #31
 8007f42:	b2da      	uxtb	r2, r3
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f50:	b2da      	uxtb	r2, r3
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	0b5b      	lsrs	r3, r3, #13
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	f003 0307 	and.w	r3, r3, #7
 8007f60:	b2da      	uxtb	r2, r3
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d11a      	bne.n	8007fa2 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	78db      	ldrb	r3, [r3, #3]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f000 f8e9 	bl	8008148 <RTC_Bcd2ToByte>
 8007f76:	4603      	mov	r3, r0
 8007f78:	461a      	mov	r2, r3
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	785b      	ldrb	r3, [r3, #1]
 8007f82:	4618      	mov	r0, r3
 8007f84:	f000 f8e0 	bl	8008148 <RTC_Bcd2ToByte>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	789b      	ldrb	r3, [r3, #2]
 8007f94:	4618      	mov	r0, r3
 8007f96:	f000 f8d7 	bl	8008148 <RTC_Bcd2ToByte>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3718      	adds	r7, #24
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	46007800 	.word	0x46007800

08007fb0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8007fb8:	4b15      	ldr	r3, [pc, #84]	@ (8008010 <HAL_RTC_WaitForSynchro+0x60>)
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	4a14      	ldr	r2, [pc, #80]	@ (8008010 <HAL_RTC_WaitForSynchro+0x60>)
 8007fbe:	f023 0320 	bic.w	r3, r3, #32
 8007fc2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8007fc4:	f7fa fbc0 	bl	8002748 <HAL_GetTick>
 8007fc8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007fca:	e013      	b.n	8007ff4 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007fcc:	f7fa fbbc 	bl	8002748 <HAL_GetTick>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007fda:	d90b      	bls.n	8007ff4 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8008010 <HAL_RTC_WaitForSynchro+0x60>)
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	f003 0320 	and.w	r3, r3, #32
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10c      	bne.n	8008002 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2203      	movs	r2, #3
 8007fec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	e008      	b.n	8008006 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007ff4:	4b06      	ldr	r3, [pc, #24]	@ (8008010 <HAL_RTC_WaitForSynchro+0x60>)
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	f003 0320 	and.w	r3, r3, #32
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d0e5      	beq.n	8007fcc <HAL_RTC_WaitForSynchro+0x1c>
 8008000:	e000      	b.n	8008004 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 8008002:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	46007800 	.word	0x46007800

08008014 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800801c:	2300      	movs	r3, #0
 800801e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008020:	4b19      	ldr	r3, [pc, #100]	@ (8008088 <RTC_EnterInitMode+0x74>)
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008028:	2b00      	cmp	r3, #0
 800802a:	d128      	bne.n	800807e <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800802c:	4b16      	ldr	r3, [pc, #88]	@ (8008088 <RTC_EnterInitMode+0x74>)
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	4a15      	ldr	r2, [pc, #84]	@ (8008088 <RTC_EnterInitMode+0x74>)
 8008032:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008036:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8008038:	f7fa fb86 	bl	8002748 <HAL_GetTick>
 800803c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800803e:	e013      	b.n	8008068 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008040:	f7fa fb82 	bl	8002748 <HAL_GetTick>
 8008044:	4602      	mov	r2, r0
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	1ad3      	subs	r3, r2, r3
 800804a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800804e:	d90b      	bls.n	8008068 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008050:	4b0d      	ldr	r3, [pc, #52]	@ (8008088 <RTC_EnterInitMode+0x74>)
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10f      	bne.n	800807c <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800805c:	2303      	movs	r3, #3
 800805e:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2203      	movs	r2, #3
 8008064:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008068:	4b07      	ldr	r3, [pc, #28]	@ (8008088 <RTC_EnterInitMode+0x74>)
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008070:	2b00      	cmp	r3, #0
 8008072:	d104      	bne.n	800807e <RTC_EnterInitMode+0x6a>
 8008074:	7bfb      	ldrb	r3, [r7, #15]
 8008076:	2b03      	cmp	r3, #3
 8008078:	d1e2      	bne.n	8008040 <RTC_EnterInitMode+0x2c>
 800807a:	e000      	b.n	800807e <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800807c:	bf00      	nop
        }
      }
    }
  }

  return status;
 800807e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008080:	4618      	mov	r0, r3
 8008082:	3710      	adds	r7, #16
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	46007800 	.word	0x46007800

0800808c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008094:	2300      	movs	r3, #0
 8008096:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008098:	4b1a      	ldr	r3, [pc, #104]	@ (8008104 <RTC_ExitInitMode+0x78>)
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	4a19      	ldr	r2, [pc, #100]	@ (8008104 <RTC_ExitInitMode+0x78>)
 800809e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080a2:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80080a4:	4b17      	ldr	r3, [pc, #92]	@ (8008104 <RTC_ExitInitMode+0x78>)
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	f003 0320 	and.w	r3, r3, #32
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10c      	bne.n	80080ca <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f7ff ff7d 	bl	8007fb0 <HAL_RTC_WaitForSynchro>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d01e      	beq.n	80080fa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2203      	movs	r2, #3
 80080c0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80080c4:	2303      	movs	r3, #3
 80080c6:	73fb      	strb	r3, [r7, #15]
 80080c8:	e017      	b.n	80080fa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80080ca:	4b0e      	ldr	r3, [pc, #56]	@ (8008104 <RTC_ExitInitMode+0x78>)
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	4a0d      	ldr	r2, [pc, #52]	@ (8008104 <RTC_ExitInitMode+0x78>)
 80080d0:	f023 0320 	bic.w	r3, r3, #32
 80080d4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7ff ff6a 	bl	8007fb0 <HAL_RTC_WaitForSynchro>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d005      	beq.n	80080ee <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2203      	movs	r2, #3
 80080e6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80080ea:	2303      	movs	r3, #3
 80080ec:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80080ee:	4b05      	ldr	r3, [pc, #20]	@ (8008104 <RTC_ExitInitMode+0x78>)
 80080f0:	699b      	ldr	r3, [r3, #24]
 80080f2:	4a04      	ldr	r2, [pc, #16]	@ (8008104 <RTC_ExitInitMode+0x78>)
 80080f4:	f043 0320 	orr.w	r3, r3, #32
 80080f8:	6193      	str	r3, [r2, #24]
  }
  return status;
 80080fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	46007800 	.word	0x46007800

08008108 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	4603      	mov	r3, r0
 8008110:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008112:	2300      	movs	r3, #0
 8008114:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8008116:	79fb      	ldrb	r3, [r7, #7]
 8008118:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800811a:	e005      	b.n	8008128 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	3301      	adds	r3, #1
 8008120:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8008122:	7afb      	ldrb	r3, [r7, #11]
 8008124:	3b0a      	subs	r3, #10
 8008126:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8008128:	7afb      	ldrb	r3, [r7, #11]
 800812a:	2b09      	cmp	r3, #9
 800812c:	d8f6      	bhi.n	800811c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	b2db      	uxtb	r3, r3
 8008132:	011b      	lsls	r3, r3, #4
 8008134:	b2da      	uxtb	r2, r3
 8008136:	7afb      	ldrb	r3, [r7, #11]
 8008138:	4313      	orrs	r3, r2
 800813a:	b2db      	uxtb	r3, r3
}
 800813c:	4618      	mov	r0, r3
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	4603      	mov	r3, r0
 8008150:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8008152:	79fb      	ldrb	r3, [r7, #7]
 8008154:	091b      	lsrs	r3, r3, #4
 8008156:	b2db      	uxtb	r3, r3
 8008158:	461a      	mov	r2, r3
 800815a:	4613      	mov	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	4413      	add	r3, r2
 8008160:	005b      	lsls	r3, r3, #1
 8008162:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	b2da      	uxtb	r2, r3
 8008168:	79fb      	ldrb	r3, [r7, #7]
 800816a:	f003 030f 	and.w	r3, r3, #15
 800816e:	b2db      	uxtb	r3, r3
 8008170:	4413      	add	r3, r2
 8008172:	b2db      	uxtb	r3, r3
}
 8008174:	4618      	mov	r0, r3
 8008176:	3714      	adds	r7, #20
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                         after Wake Up.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock,
                                              uint32_t WakeUpAutoClr)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
 800818c:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008194:	2b01      	cmp	r3, #1
 8008196:	d101      	bne.n	800819c <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8008198:	2302      	movs	r3, #2
 800819a:	e057      	b.n	800824c <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2202      	movs	r2, #2
 80081a8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d


  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 80081ac:	4b29      	ldr	r3, [pc, #164]	@ (8008254 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	4a28      	ldr	r2, [pc, #160]	@ (8008254 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 80081b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80081b6:	6193      	str	r3, [r2, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 80081b8:	4b26      	ldr	r3, [pc, #152]	@ (8008254 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 80081ba:	2204      	movs	r2, #4
 80081bc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80081be:	4b25      	ldr	r3, [pc, #148]	@ (8008254 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d123      	bne.n	8008212 <HAL_RTCEx_SetWakeUpTimer_IT+0x92>
  {
    tickstart = HAL_GetTick();
 80081ca:	f7fa fabd 	bl	8002748 <HAL_GetTick>
 80081ce:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80081d0:	e017      	b.n	8008202 <HAL_RTCEx_SetWakeUpTimer_IT+0x82>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80081d2:	f7fa fab9 	bl	8002748 <HAL_GetTick>
 80081d6:	4602      	mov	r2, r0
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80081e0:	d90f      	bls.n	8008202 <HAL_RTCEx_SetWakeUpTimer_IT+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80081e2:	4b1c      	ldr	r3, [pc, #112]	@ (8008254 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	f003 0304 	and.w	r3, r3, #4
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d110      	bne.n	8008210 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
        {

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2203      	movs	r2, #3
 80081f2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

          return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e024      	b.n	800824c <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8008202:	4b14      	ldr	r3, [pc, #80]	@ (8008254 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	f003 0304 	and.w	r3, r3, #4
 800820a:	2b00      	cmp	r3, #0
 800820c:	d0e1      	beq.n	80081d2 <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
 800820e:	e000      	b.n	8008212 <HAL_RTCEx_SetWakeUpTimer_IT+0x92>
        }
        else
        {
          break;
 8008210:	bf00      	nop
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	041a      	lsls	r2, r3, #16
 8008216:	490f      	ldr	r1, [pc, #60]	@ (8008254 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	4313      	orrs	r3, r2
 800821c:	614b      	str	r3, [r1, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 800821e:	4b0d      	ldr	r3, [pc, #52]	@ (8008254 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8008220:	699b      	ldr	r3, [r3, #24]
 8008222:	f023 0207 	bic.w	r2, r3, #7
 8008226:	490b      	ldr	r1, [pc, #44]	@ (8008254 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4313      	orrs	r3, r2
 800822c:	618b      	str	r3, [r1, #24]

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 800822e:	4b09      	ldr	r3, [pc, #36]	@ (8008254 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	4a08      	ldr	r2, [pc, #32]	@ (8008254 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8008234:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 8008238:	6193      	str	r3, [r2, #24]


  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2201      	movs	r2, #1
 800823e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3718      	adds	r7, #24
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	46007800 	.word	0x46007800

08008258 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008266:	2b01      	cmp	r3, #1
 8008268:	d101      	bne.n	800826e <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 800826a:	2302      	movs	r3, #2
 800826c:	e019      	b.n	80082a2 <HAL_RTCEx_DeactivateWakeUpTimer+0x4a>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2202      	movs	r2, #2
 800827a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d


  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 800827e:	4b0c      	ldr	r3, [pc, #48]	@ (80082b0 <HAL_RTCEx_DeactivateWakeUpTimer+0x58>)
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	4a0b      	ldr	r2, [pc, #44]	@ (80082b0 <HAL_RTCEx_DeactivateWakeUpTimer+0x58>)
 8008284:	f423 4388 	bic.w	r3, r3, #17408	@ 0x4400
 8008288:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800828a:	4b09      	ldr	r3, [pc, #36]	@ (80082b0 <HAL_RTCEx_DeactivateWakeUpTimer+0x58>)
 800828c:	22ff      	movs	r2, #255	@ 0xff
 800828e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	370c      	adds	r7, #12
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	46007800 	.word	0x46007800

080082b4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wake-Up Timer Interrupt */
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if (READ_BIT(RTC->SMISR, RTC_SMISR_WUTMF) != 0U)
#else
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 80082bc:	4b09      	ldr	r3, [pc, #36]	@ (80082e4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80082be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082c0:	f003 0304 	and.w	r3, r3, #4
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d005      	beq.n	80082d4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
#endif /* #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 80082c8:	4b06      	ldr	r3, [pc, #24]	@ (80082e4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 80082ca:	2204      	movs	r2, #4
 80082cc:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f80a 	bl	80082e8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 80082dc:	bf00      	nop
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	46007800 	.word	0x46007800

080082e8 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800830c:	2b01      	cmp	r3, #1
 800830e:	d101      	bne.n	8008314 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8008310:	2302      	movs	r3, #2
 8008312:	e01e      	b.n	8008352 <HAL_RTCEx_SetCalibrationOutPut+0x56>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2202      	movs	r2, #2
 8008320:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d


  /* Configure the RTC_CR register */
  MODIFY_REG(RTC->CR, RTC_CR_COSEL, CalibOutput);
 8008324:	4b0e      	ldr	r3, [pc, #56]	@ (8008360 <HAL_RTCEx_SetCalibrationOutPut+0x64>)
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800832c:	490c      	ldr	r1, [pc, #48]	@ (8008360 <HAL_RTCEx_SetCalibrationOutPut+0x64>)
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	4313      	orrs	r3, r2
 8008332:	618b      	str	r3, [r1, #24]

  /* Enable calibration output */
  SET_BIT(RTC->CR, RTC_CR_COE);
 8008334:	4b0a      	ldr	r3, [pc, #40]	@ (8008360 <HAL_RTCEx_SetCalibrationOutPut+0x64>)
 8008336:	699b      	ldr	r3, [r3, #24]
 8008338:	4a09      	ldr	r2, [pc, #36]	@ (8008360 <HAL_RTCEx_SetCalibrationOutPut+0x64>)
 800833a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800833e:	6193      	str	r3, [r2, #24]


  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	370c      	adds	r7, #12
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	46007800 	.word	0x46007800

08008364 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	4910      	ldr	r1, [pc, #64]	@ (80083b8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8008378:	4313      	orrs	r3, r2
 800837a:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	689a      	ldr	r2, [r3, #8]
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	431a      	orrs	r2, r3
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	699b      	ldr	r3, [r3, #24]
 800838a:	490c      	ldr	r1, [pc, #48]	@ (80083bc <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800838c:	4313      	orrs	r3, r2
 800838e:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 8008390:	4b0a      	ldr	r3, [pc, #40]	@ (80083bc <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8008392:	6a1b      	ldr	r3, [r3, #32]
 8008394:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	6919      	ldr	r1, [r3, #16]
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	695b      	ldr	r3, [r3, #20]
 80083a0:	041b      	lsls	r3, r3, #16
 80083a2:	430b      	orrs	r3, r1
 80083a4:	4905      	ldr	r1, [pc, #20]	@ (80083bc <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80083a6:	4313      	orrs	r3, r2
 80083a8:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	46007800 	.word	0x46007800
 80083bc:	46007c00 	.word	0x46007c00

080083c0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d101      	bne.n	80083d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e0fb      	b.n	80085ca <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a7f      	ldr	r2, [pc, #508]	@ (80085d4 <HAL_SPI_Init+0x214>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d004      	beq.n	80083e6 <HAL_SPI_Init+0x26>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a7d      	ldr	r2, [pc, #500]	@ (80085d8 <HAL_SPI_Init+0x218>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	e000      	b.n	80083e8 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 80083e6:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a78      	ldr	r2, [pc, #480]	@ (80085d4 <HAL_SPI_Init+0x214>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d004      	beq.n	8008402 <HAL_SPI_Init+0x42>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a76      	ldr	r2, [pc, #472]	@ (80085d8 <HAL_SPI_Init+0x218>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d105      	bne.n	800840e <HAL_SPI_Init+0x4e>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	2b0f      	cmp	r3, #15
 8008408:	d901      	bls.n	800840e <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e0dd      	b.n	80085ca <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f8ec 	bl	80085ec <SPI_GetPacketSize>
 8008414:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a6e      	ldr	r2, [pc, #440]	@ (80085d4 <HAL_SPI_Init+0x214>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d004      	beq.n	800842a <HAL_SPI_Init+0x6a>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a6c      	ldr	r2, [pc, #432]	@ (80085d8 <HAL_SPI_Init+0x218>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d102      	bne.n	8008430 <HAL_SPI_Init+0x70>
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2b08      	cmp	r3, #8
 800842e:	d816      	bhi.n	800845e <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008434:	4a69      	ldr	r2, [pc, #420]	@ (80085dc <HAL_SPI_Init+0x21c>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d00e      	beq.n	8008458 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a68      	ldr	r2, [pc, #416]	@ (80085e0 <HAL_SPI_Init+0x220>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d009      	beq.n	8008458 <HAL_SPI_Init+0x98>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a66      	ldr	r2, [pc, #408]	@ (80085e4 <HAL_SPI_Init+0x224>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d004      	beq.n	8008458 <HAL_SPI_Init+0x98>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a65      	ldr	r2, [pc, #404]	@ (80085e8 <HAL_SPI_Init+0x228>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d104      	bne.n	8008462 <HAL_SPI_Init+0xa2>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2b10      	cmp	r3, #16
 800845c:	d901      	bls.n	8008462 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	e0b3      	b.n	80085ca <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008468:	b2db      	uxtb	r3, r3
 800846a:	2b00      	cmp	r3, #0
 800846c:	d106      	bne.n	800847c <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f7f9 fcc6 	bl	8001e08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2202      	movs	r2, #2
 8008480:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f022 0201 	bic.w	r2, r2, #1
 8008492:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800849e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	699b      	ldr	r3, [r3, #24]
 80084a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80084a8:	d119      	bne.n	80084de <HAL_SPI_Init+0x11e>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084b2:	d103      	bne.n	80084bc <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d008      	beq.n	80084ce <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d10c      	bne.n	80084de <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80084c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084cc:	d107      	bne.n	80084de <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80084dc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00f      	beq.n	800850a <HAL_SPI_Init+0x14a>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	2b06      	cmp	r3, #6
 80084f0:	d90b      	bls.n	800850a <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	430a      	orrs	r2, r1
 8008506:	601a      	str	r2, [r3, #0]
 8008508:	e007      	b.n	800851a <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008518:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	69da      	ldr	r2, [r3, #28]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008522:	431a      	orrs	r2, r3
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	431a      	orrs	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800852c:	ea42 0103 	orr.w	r1, r2, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	68da      	ldr	r2, [r3, #12]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	430a      	orrs	r2, r1
 800853a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008544:	431a      	orrs	r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800854a:	431a      	orrs	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	699b      	ldr	r3, [r3, #24]
 8008550:	431a      	orrs	r2, r3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	431a      	orrs	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	695b      	ldr	r3, [r3, #20]
 800855c:	431a      	orrs	r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a1b      	ldr	r3, [r3, #32]
 8008562:	431a      	orrs	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	431a      	orrs	r2, r3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800856e:	431a      	orrs	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	431a      	orrs	r2, r3
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800857a:	431a      	orrs	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008580:	431a      	orrs	r2, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008586:	ea42 0103 	orr.w	r1, r2, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	430a      	orrs	r2, r1
 8008594:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00a      	beq.n	80085b8 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	430a      	orrs	r2, r1
 80085b6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	46002000 	.word	0x46002000
 80085d8:	56002000 	.word	0x56002000
 80085dc:	40013000 	.word	0x40013000
 80085e0:	50013000 	.word	0x50013000
 80085e4:	40003800 	.word	0x40003800
 80085e8:	50003800 	.word	0x50003800

080085ec <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085f8:	095b      	lsrs	r3, r3, #5
 80085fa:	3301      	adds	r3, #1
 80085fc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	3301      	adds	r3, #1
 8008604:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	3307      	adds	r3, #7
 800860a:	08db      	lsrs	r3, r3, #3
 800860c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	fb02 f303 	mul.w	r3, r2, r3
}
 8008616:	4618      	mov	r0, r3
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8008622:	b480      	push	{r7}
 8008624:	b083      	sub	sp, #12
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008632:	b2db      	uxtb	r3, r3
 8008634:	2b01      	cmp	r3, #1
 8008636:	d12e      	bne.n	8008696 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800863e:	2b01      	cmp	r3, #1
 8008640:	d101      	bne.n	8008646 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8008642:	2302      	movs	r3, #2
 8008644:	e028      	b.n	8008698 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2201      	movs	r2, #1
 800864a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2202      	movs	r2, #2
 8008652:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f022 0201 	bic.w	r2, r2, #1
 8008664:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8008672:	ea42 0103 	orr.w	r1, r2, r3
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	689a      	ldr	r2, [r3, #8]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	430a      	orrs	r2, r1
 8008680:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008692:	2300      	movs	r3, #0
 8008694:	e000      	b.n	8008698 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
  }
}
 8008698:	4618      	mov	r0, r3
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d101      	bne.n	80086b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e042      	b.n	800873c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d106      	bne.n	80086ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f7f9 fc07 	bl	8001edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2224      	movs	r2, #36	@ 0x24
 80086d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f022 0201 	bic.w	r2, r2, #1
 80086e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d002      	beq.n	80086f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fa4e 	bl	8008b90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 f8b3 	bl	8008860 <UART_SetConfig>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d101      	bne.n	8008704 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	e01b      	b.n	800873c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	685a      	ldr	r2, [r3, #4]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008712:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	689a      	ldr	r2, [r3, #8]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008722:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f042 0201 	orr.w	r2, r2, #1
 8008732:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 facd 	bl	8008cd4 <UART_CheckIdleState>
 800873a:	4603      	mov	r3, r0
}
 800873c:	4618      	mov	r0, r3
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b08a      	sub	sp, #40	@ 0x28
 8008748:	af02      	add	r7, sp, #8
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	603b      	str	r3, [r7, #0]
 8008750:	4613      	mov	r3, r2
 8008752:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800875a:	2b20      	cmp	r3, #32
 800875c:	d17b      	bne.n	8008856 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d002      	beq.n	800876a <HAL_UART_Transmit+0x26>
 8008764:	88fb      	ldrh	r3, [r7, #6]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d101      	bne.n	800876e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	e074      	b.n	8008858 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2221      	movs	r2, #33	@ 0x21
 800877a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800877e:	f7f9 ffe3 	bl	8002748 <HAL_GetTick>
 8008782:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	88fa      	ldrh	r2, [r7, #6]
 8008788:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	88fa      	ldrh	r2, [r7, #6]
 8008790:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800879c:	d108      	bne.n	80087b0 <HAL_UART_Transmit+0x6c>
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d104      	bne.n	80087b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80087a6:	2300      	movs	r3, #0
 80087a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	61bb      	str	r3, [r7, #24]
 80087ae:	e003      	b.n	80087b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80087b4:	2300      	movs	r3, #0
 80087b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80087b8:	e030      	b.n	800881c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	9300      	str	r3, [sp, #0]
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	2200      	movs	r2, #0
 80087c2:	2180      	movs	r1, #128	@ 0x80
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f000 fb2f 	bl	8008e28 <UART_WaitOnFlagUntilTimeout>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d005      	beq.n	80087dc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2220      	movs	r2, #32
 80087d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80087d8:	2303      	movs	r3, #3
 80087da:	e03d      	b.n	8008858 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d10b      	bne.n	80087fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	881b      	ldrh	r3, [r3, #0]
 80087e6:	461a      	mov	r2, r3
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087f0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	3302      	adds	r3, #2
 80087f6:	61bb      	str	r3, [r7, #24]
 80087f8:	e007      	b.n	800880a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	781a      	ldrb	r2, [r3, #0]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	3301      	adds	r3, #1
 8008808:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008810:	b29b      	uxth	r3, r3
 8008812:	3b01      	subs	r3, #1
 8008814:	b29a      	uxth	r2, r3
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008822:	b29b      	uxth	r3, r3
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1c8      	bne.n	80087ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	9300      	str	r3, [sp, #0]
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	2200      	movs	r2, #0
 8008830:	2140      	movs	r1, #64	@ 0x40
 8008832:	68f8      	ldr	r0, [r7, #12]
 8008834:	f000 faf8 	bl	8008e28 <UART_WaitOnFlagUntilTimeout>
 8008838:	4603      	mov	r3, r0
 800883a:	2b00      	cmp	r3, #0
 800883c:	d005      	beq.n	800884a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2220      	movs	r2, #32
 8008842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008846:	2303      	movs	r3, #3
 8008848:	e006      	b.n	8008858 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2220      	movs	r2, #32
 800884e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008852:	2300      	movs	r3, #0
 8008854:	e000      	b.n	8008858 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008856:	2302      	movs	r3, #2
  }
}
 8008858:	4618      	mov	r0, r3
 800885a:	3720      	adds	r7, #32
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008864:	b094      	sub	sp, #80	@ 0x50
 8008866:	af00      	add	r7, sp, #0
 8008868:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800886a:	2300      	movs	r3, #0
 800886c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	4b9b      	ldr	r3, [pc, #620]	@ (8008ae4 <UART_SetConfig+0x284>)
 8008876:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800887a:	689a      	ldr	r2, [r3, #8]
 800887c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	431a      	orrs	r2, r3
 8008882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	431a      	orrs	r2, r3
 8008888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800888a:	69db      	ldr	r3, [r3, #28]
 800888c:	4313      	orrs	r3, r2
 800888e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4994      	ldr	r1, [pc, #592]	@ (8008ae8 <UART_SetConfig+0x288>)
 8008898:	4019      	ands	r1, r3
 800889a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088a0:	430b      	orrs	r3, r1
 80088a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80088ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088b0:	68d9      	ldr	r1, [r3, #12]
 80088b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	ea40 0301 	orr.w	r3, r0, r1
 80088ba:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80088bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088be:	699b      	ldr	r3, [r3, #24]
 80088c0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80088c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	4b87      	ldr	r3, [pc, #540]	@ (8008ae4 <UART_SetConfig+0x284>)
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d009      	beq.n	80088e0 <UART_SetConfig+0x80>
 80088cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	4b86      	ldr	r3, [pc, #536]	@ (8008aec <UART_SetConfig+0x28c>)
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d004      	beq.n	80088e0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80088d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088d8:	6a1a      	ldr	r2, [r3, #32]
 80088da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088dc:	4313      	orrs	r3, r2
 80088de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80088e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80088ea:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80088ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088f4:	430b      	orrs	r3, r1
 80088f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80088f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088fe:	f023 000f 	bic.w	r0, r3, #15
 8008902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008904:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	ea40 0301 	orr.w	r3, r0, r1
 800890e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	4b76      	ldr	r3, [pc, #472]	@ (8008af0 <UART_SetConfig+0x290>)
 8008916:	429a      	cmp	r2, r3
 8008918:	d102      	bne.n	8008920 <UART_SetConfig+0xc0>
 800891a:	2301      	movs	r3, #1
 800891c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800891e:	e021      	b.n	8008964 <UART_SetConfig+0x104>
 8008920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	4b73      	ldr	r3, [pc, #460]	@ (8008af4 <UART_SetConfig+0x294>)
 8008926:	429a      	cmp	r2, r3
 8008928:	d102      	bne.n	8008930 <UART_SetConfig+0xd0>
 800892a:	2304      	movs	r3, #4
 800892c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800892e:	e019      	b.n	8008964 <UART_SetConfig+0x104>
 8008930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	4b70      	ldr	r3, [pc, #448]	@ (8008af8 <UART_SetConfig+0x298>)
 8008936:	429a      	cmp	r2, r3
 8008938:	d102      	bne.n	8008940 <UART_SetConfig+0xe0>
 800893a:	2308      	movs	r3, #8
 800893c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800893e:	e011      	b.n	8008964 <UART_SetConfig+0x104>
 8008940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	4b6d      	ldr	r3, [pc, #436]	@ (8008afc <UART_SetConfig+0x29c>)
 8008946:	429a      	cmp	r2, r3
 8008948:	d102      	bne.n	8008950 <UART_SetConfig+0xf0>
 800894a:	2310      	movs	r3, #16
 800894c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800894e:	e009      	b.n	8008964 <UART_SetConfig+0x104>
 8008950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	4b63      	ldr	r3, [pc, #396]	@ (8008ae4 <UART_SetConfig+0x284>)
 8008956:	429a      	cmp	r2, r3
 8008958:	d102      	bne.n	8008960 <UART_SetConfig+0x100>
 800895a:	2320      	movs	r3, #32
 800895c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800895e:	e001      	b.n	8008964 <UART_SetConfig+0x104>
 8008960:	2300      	movs	r3, #0
 8008962:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	4b5e      	ldr	r3, [pc, #376]	@ (8008ae4 <UART_SetConfig+0x284>)
 800896a:	429a      	cmp	r2, r3
 800896c:	d004      	beq.n	8008978 <UART_SetConfig+0x118>
 800896e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	4b5e      	ldr	r3, [pc, #376]	@ (8008aec <UART_SetConfig+0x28c>)
 8008974:	429a      	cmp	r2, r3
 8008976:	d172      	bne.n	8008a5e <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008978:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800897a:	2200      	movs	r2, #0
 800897c:	623b      	str	r3, [r7, #32]
 800897e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008980:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008984:	f7fd fe3a 	bl	80065fc <HAL_RCCEx_GetPeriphCLKFreq>
 8008988:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800898a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800898c:	2b00      	cmp	r3, #0
 800898e:	f000 80e7 	beq.w	8008b60 <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008996:	4a5a      	ldr	r2, [pc, #360]	@ (8008b00 <UART_SetConfig+0x2a0>)
 8008998:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800899c:	461a      	mov	r2, r3
 800899e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80089a4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089a8:	685a      	ldr	r2, [r3, #4]
 80089aa:	4613      	mov	r3, r2
 80089ac:	005b      	lsls	r3, r3, #1
 80089ae:	4413      	add	r3, r2
 80089b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d305      	bcc.n	80089c2 <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80089b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089be:	429a      	cmp	r2, r3
 80089c0:	d903      	bls.n	80089ca <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80089c8:	e048      	b.n	8008a5c <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089cc:	2200      	movs	r2, #0
 80089ce:	61bb      	str	r3, [r7, #24]
 80089d0:	61fa      	str	r2, [r7, #28]
 80089d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089d6:	4a4a      	ldr	r2, [pc, #296]	@ (8008b00 <UART_SetConfig+0x2a0>)
 80089d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089dc:	b29b      	uxth	r3, r3
 80089de:	2200      	movs	r2, #0
 80089e0:	613b      	str	r3, [r7, #16]
 80089e2:	617a      	str	r2, [r7, #20]
 80089e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80089e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80089ec:	f7f8 f8e0 	bl	8000bb0 <__aeabi_uldivmod>
 80089f0:	4602      	mov	r2, r0
 80089f2:	460b      	mov	r3, r1
 80089f4:	4610      	mov	r0, r2
 80089f6:	4619      	mov	r1, r3
 80089f8:	f04f 0200 	mov.w	r2, #0
 80089fc:	f04f 0300 	mov.w	r3, #0
 8008a00:	020b      	lsls	r3, r1, #8
 8008a02:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008a06:	0202      	lsls	r2, r0, #8
 8008a08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a0a:	6849      	ldr	r1, [r1, #4]
 8008a0c:	0849      	lsrs	r1, r1, #1
 8008a0e:	2000      	movs	r0, #0
 8008a10:	460c      	mov	r4, r1
 8008a12:	4605      	mov	r5, r0
 8008a14:	eb12 0804 	adds.w	r8, r2, r4
 8008a18:	eb43 0905 	adc.w	r9, r3, r5
 8008a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	60bb      	str	r3, [r7, #8]
 8008a24:	60fa      	str	r2, [r7, #12]
 8008a26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a2a:	4640      	mov	r0, r8
 8008a2c:	4649      	mov	r1, r9
 8008a2e:	f7f8 f8bf 	bl	8000bb0 <__aeabi_uldivmod>
 8008a32:	4602      	mov	r2, r0
 8008a34:	460b      	mov	r3, r1
 8008a36:	4613      	mov	r3, r2
 8008a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a40:	d308      	bcc.n	8008a54 <UART_SetConfig+0x1f4>
 8008a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a48:	d204      	bcs.n	8008a54 <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 8008a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008a50:	60da      	str	r2, [r3, #12]
 8008a52:	e003      	b.n	8008a5c <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008a5a:	e081      	b.n	8008b60 <UART_SetConfig+0x300>
 8008a5c:	e080      	b.n	8008b60 <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a60:	69db      	ldr	r3, [r3, #28]
 8008a62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a66:	d14d      	bne.n	8008b04 <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008a68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	603b      	str	r3, [r7, #0]
 8008a6e:	607a      	str	r2, [r7, #4]
 8008a70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a74:	f7fd fdc2 	bl	80065fc <HAL_RCCEx_GetPeriphCLKFreq>
 8008a78:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d06f      	beq.n	8008b60 <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a84:	4a1e      	ldr	r2, [pc, #120]	@ (8008b00 <UART_SetConfig+0x2a0>)
 8008a86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a92:	005a      	lsls	r2, r3, #1
 8008a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	085b      	lsrs	r3, r3, #1
 8008a9a:	441a      	add	r2, r3
 8008a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aa8:	2b0f      	cmp	r3, #15
 8008aaa:	d916      	bls.n	8008ada <UART_SetConfig+0x27a>
 8008aac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ab2:	d212      	bcs.n	8008ada <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	f023 030f 	bic.w	r3, r3, #15
 8008abc:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008abe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ac0:	085b      	lsrs	r3, r3, #1
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	f003 0307 	and.w	r3, r3, #7
 8008ac8:	b29a      	uxth	r2, r3
 8008aca:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008acc:	4313      	orrs	r3, r2
 8008ace:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8008ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008ad6:	60da      	str	r2, [r3, #12]
 8008ad8:	e042      	b.n	8008b60 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008ae0:	e03e      	b.n	8008b60 <UART_SetConfig+0x300>
 8008ae2:	bf00      	nop
 8008ae4:	46002400 	.word	0x46002400
 8008ae8:	cfff69f3 	.word	0xcfff69f3
 8008aec:	56002400 	.word	0x56002400
 8008af0:	40013800 	.word	0x40013800
 8008af4:	40004800 	.word	0x40004800
 8008af8:	40004c00 	.word	0x40004c00
 8008afc:	40005000 	.word	0x40005000
 8008b00:	0800beb4 	.word	0x0800beb4
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008b04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b06:	2200      	movs	r2, #0
 8008b08:	469a      	mov	sl, r3
 8008b0a:	4693      	mov	fp, r2
 8008b0c:	4650      	mov	r0, sl
 8008b0e:	4659      	mov	r1, fp
 8008b10:	f7fd fd74 	bl	80065fc <HAL_RCCEx_GetPeriphCLKFreq>
 8008b14:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8008b16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d021      	beq.n	8008b60 <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b20:	4a1a      	ldr	r2, [pc, #104]	@ (8008b8c <UART_SetConfig+0x32c>)
 8008b22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b26:	461a      	mov	r2, r3
 8008b28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	085b      	lsrs	r3, r3, #1
 8008b34:	441a      	add	r2, r3
 8008b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b42:	2b0f      	cmp	r3, #15
 8008b44:	d909      	bls.n	8008b5a <UART_SetConfig+0x2fa>
 8008b46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b4c:	d205      	bcs.n	8008b5a <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b50:	b29a      	uxth	r2, r3
 8008b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	60da      	str	r2, [r3, #12]
 8008b58:	e002      	b.n	8008b60 <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b62:	2201      	movs	r2, #1
 8008b64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b72:	2200      	movs	r2, #0
 8008b74:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b78:	2200      	movs	r2, #0
 8008b7a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008b7c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3750      	adds	r7, #80	@ 0x50
 8008b84:	46bd      	mov	sp, r7
 8008b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b8a:	bf00      	nop
 8008b8c:	0800beb4 	.word	0x0800beb4

08008b90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b9c:	f003 0308 	and.w	r3, r3, #8
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00a      	beq.n	8008bba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	430a      	orrs	r2, r1
 8008bb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bbe:	f003 0301 	and.w	r3, r3, #1
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d00a      	beq.n	8008bdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	430a      	orrs	r2, r1
 8008bda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008be0:	f003 0302 	and.w	r3, r3, #2
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00a      	beq.n	8008bfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	430a      	orrs	r2, r1
 8008bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c02:	f003 0304 	and.w	r3, r3, #4
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00a      	beq.n	8008c20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	430a      	orrs	r2, r1
 8008c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c24:	f003 0310 	and.w	r3, r3, #16
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d00a      	beq.n	8008c42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	430a      	orrs	r2, r1
 8008c40:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c46:	f003 0320 	and.w	r3, r3, #32
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d00a      	beq.n	8008c64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	430a      	orrs	r2, r1
 8008c62:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d01a      	beq.n	8008ca6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	430a      	orrs	r2, r1
 8008c84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c8e:	d10a      	bne.n	8008ca6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	430a      	orrs	r2, r1
 8008ca4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00a      	beq.n	8008cc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	430a      	orrs	r2, r1
 8008cc6:	605a      	str	r2, [r3, #4]
  }
}
 8008cc8:	bf00      	nop
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b098      	sub	sp, #96	@ 0x60
 8008cd8:	af02      	add	r7, sp, #8
 8008cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ce4:	f7f9 fd30 	bl	8002748 <HAL_GetTick>
 8008ce8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 0308 	and.w	r3, r3, #8
 8008cf4:	2b08      	cmp	r3, #8
 8008cf6:	d12f      	bne.n	8008d58 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cf8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008cfc:	9300      	str	r3, [sp, #0]
 8008cfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d00:	2200      	movs	r2, #0
 8008d02:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 f88e 	bl	8008e28 <UART_WaitOnFlagUntilTimeout>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d022      	beq.n	8008d58 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d1a:	e853 3f00 	ldrex	r3, [r3]
 8008d1e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d26:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d30:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d32:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008d36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d38:	e841 2300 	strex	r3, r2, [r1]
 8008d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1e6      	bne.n	8008d12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2220      	movs	r2, #32
 8008d48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d54:	2303      	movs	r3, #3
 8008d56:	e063      	b.n	8008e20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 0304 	and.w	r3, r3, #4
 8008d62:	2b04      	cmp	r3, #4
 8008d64:	d149      	bne.n	8008dfa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d66:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 f857 	bl	8008e28 <UART_WaitOnFlagUntilTimeout>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d03c      	beq.n	8008dfa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d88:	e853 3f00 	ldrex	r3, [r3]
 8008d8c:	623b      	str	r3, [r7, #32]
   return(result);
 8008d8e:	6a3b      	ldr	r3, [r7, #32]
 8008d90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008da0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008da4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008da6:	e841 2300 	strex	r3, r2, [r1]
 8008daa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1e6      	bne.n	8008d80 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	3308      	adds	r3, #8
 8008db8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	e853 3f00 	ldrex	r3, [r3]
 8008dc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f023 0301 	bic.w	r3, r3, #1
 8008dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	3308      	adds	r3, #8
 8008dd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008dd2:	61fa      	str	r2, [r7, #28]
 8008dd4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd6:	69b9      	ldr	r1, [r7, #24]
 8008dd8:	69fa      	ldr	r2, [r7, #28]
 8008dda:	e841 2300 	strex	r3, r2, [r1]
 8008dde:	617b      	str	r3, [r7, #20]
   return(result);
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d1e5      	bne.n	8008db2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2220      	movs	r2, #32
 8008dea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2200      	movs	r2, #0
 8008df2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008df6:	2303      	movs	r3, #3
 8008df8:	e012      	b.n	8008e20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2220      	movs	r2, #32
 8008dfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2220      	movs	r2, #32
 8008e06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3758      	adds	r7, #88	@ 0x58
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	603b      	str	r3, [r7, #0]
 8008e34:	4613      	mov	r3, r2
 8008e36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e38:	e04f      	b.n	8008eda <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e40:	d04b      	beq.n	8008eda <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e42:	f7f9 fc81 	bl	8002748 <HAL_GetTick>
 8008e46:	4602      	mov	r2, r0
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	1ad3      	subs	r3, r2, r3
 8008e4c:	69ba      	ldr	r2, [r7, #24]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d302      	bcc.n	8008e58 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d101      	bne.n	8008e5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008e58:	2303      	movs	r3, #3
 8008e5a:	e04e      	b.n	8008efa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f003 0304 	and.w	r3, r3, #4
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d037      	beq.n	8008eda <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	2b80      	cmp	r3, #128	@ 0x80
 8008e6e:	d034      	beq.n	8008eda <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	2b40      	cmp	r3, #64	@ 0x40
 8008e74:	d031      	beq.n	8008eda <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	69db      	ldr	r3, [r3, #28]
 8008e7c:	f003 0308 	and.w	r3, r3, #8
 8008e80:	2b08      	cmp	r3, #8
 8008e82:	d110      	bne.n	8008ea6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2208      	movs	r2, #8
 8008e8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f000 f838 	bl	8008f02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2208      	movs	r2, #8
 8008e96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e029      	b.n	8008efa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	69db      	ldr	r3, [r3, #28]
 8008eac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008eb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008eb4:	d111      	bne.n	8008eda <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008ebe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f000 f81e 	bl	8008f02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2220      	movs	r2, #32
 8008eca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	e00f      	b.n	8008efa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	69da      	ldr	r2, [r3, #28]
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	4013      	ands	r3, r2
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	bf0c      	ite	eq
 8008eea:	2301      	moveq	r3, #1
 8008eec:	2300      	movne	r3, #0
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	79fb      	ldrb	r3, [r7, #7]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d0a0      	beq.n	8008e3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f02:	b480      	push	{r7}
 8008f04:	b095      	sub	sp, #84	@ 0x54
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f12:	e853 3f00 	ldrex	r3, [r3]
 8008f16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	461a      	mov	r2, r3
 8008f26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f28:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f2a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f30:	e841 2300 	strex	r3, r2, [r1]
 8008f34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1e6      	bne.n	8008f0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	3308      	adds	r3, #8
 8008f42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f44:	6a3b      	ldr	r3, [r7, #32]
 8008f46:	e853 3f00 	ldrex	r3, [r3]
 8008f4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f52:	f023 0301 	bic.w	r3, r3, #1
 8008f56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	3308      	adds	r3, #8
 8008f5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008f62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f68:	e841 2300 	strex	r3, r2, [r1]
 8008f6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d1e3      	bne.n	8008f3c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d118      	bne.n	8008fae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	e853 3f00 	ldrex	r3, [r3]
 8008f88:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	f023 0310 	bic.w	r3, r3, #16
 8008f90:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	461a      	mov	r2, r3
 8008f98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f9a:	61bb      	str	r3, [r7, #24]
 8008f9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9e:	6979      	ldr	r1, [r7, #20]
 8008fa0:	69ba      	ldr	r2, [r7, #24]
 8008fa2:	e841 2300 	strex	r3, r2, [r1]
 8008fa6:	613b      	str	r3, [r7, #16]
   return(result);
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1e6      	bne.n	8008f7c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2220      	movs	r2, #32
 8008fb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008fc2:	bf00      	nop
 8008fc4:	3754      	adds	r7, #84	@ 0x54
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr

08008fce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008fce:	b480      	push	{r7}
 8008fd0:	b085      	sub	sp, #20
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d101      	bne.n	8008fe4 <HAL_UARTEx_DisableFifoMode+0x16>
 8008fe0:	2302      	movs	r3, #2
 8008fe2:	e027      	b.n	8009034 <HAL_UARTEx_DisableFifoMode+0x66>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2224      	movs	r2, #36	@ 0x24
 8008ff0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f022 0201 	bic.w	r2, r2, #1
 800900a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009012:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	68fa      	ldr	r2, [r7, #12]
 8009020:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2220      	movs	r2, #32
 8009026:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3714      	adds	r7, #20
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009050:	2b01      	cmp	r3, #1
 8009052:	d101      	bne.n	8009058 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009054:	2302      	movs	r3, #2
 8009056:	e02d      	b.n	80090b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2201      	movs	r2, #1
 800905c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2224      	movs	r2, #36	@ 0x24
 8009064:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f022 0201 	bic.w	r2, r2, #1
 800907e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	430a      	orrs	r2, r1
 8009092:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 f84f 	bl	8009138 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	68fa      	ldr	r2, [r7, #12]
 80090a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2220      	movs	r2, #32
 80090a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d101      	bne.n	80090d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80090d0:	2302      	movs	r3, #2
 80090d2:	e02d      	b.n	8009130 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2224      	movs	r2, #36	@ 0x24
 80090e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f022 0201 	bic.w	r2, r2, #1
 80090fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	430a      	orrs	r2, r1
 800910e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 f811 	bl	8009138 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2220      	movs	r2, #32
 8009122:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	3710      	adds	r7, #16
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009138:	b480      	push	{r7}
 800913a:	b085      	sub	sp, #20
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009144:	2b00      	cmp	r3, #0
 8009146:	d108      	bne.n	800915a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009158:	e031      	b.n	80091be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800915a:	2308      	movs	r3, #8
 800915c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800915e:	2308      	movs	r3, #8
 8009160:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	0e5b      	lsrs	r3, r3, #25
 800916a:	b2db      	uxtb	r3, r3
 800916c:	f003 0307 	and.w	r3, r3, #7
 8009170:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	0f5b      	lsrs	r3, r3, #29
 800917a:	b2db      	uxtb	r3, r3
 800917c:	f003 0307 	and.w	r3, r3, #7
 8009180:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009182:	7bbb      	ldrb	r3, [r7, #14]
 8009184:	7b3a      	ldrb	r2, [r7, #12]
 8009186:	4911      	ldr	r1, [pc, #68]	@ (80091cc <UARTEx_SetNbDataToProcess+0x94>)
 8009188:	5c8a      	ldrb	r2, [r1, r2]
 800918a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800918e:	7b3a      	ldrb	r2, [r7, #12]
 8009190:	490f      	ldr	r1, [pc, #60]	@ (80091d0 <UARTEx_SetNbDataToProcess+0x98>)
 8009192:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009194:	fb93 f3f2 	sdiv	r3, r3, r2
 8009198:	b29a      	uxth	r2, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
 80091a2:	7b7a      	ldrb	r2, [r7, #13]
 80091a4:	4909      	ldr	r1, [pc, #36]	@ (80091cc <UARTEx_SetNbDataToProcess+0x94>)
 80091a6:	5c8a      	ldrb	r2, [r1, r2]
 80091a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80091ac:	7b7a      	ldrb	r2, [r7, #13]
 80091ae:	4908      	ldr	r1, [pc, #32]	@ (80091d0 <UARTEx_SetNbDataToProcess+0x98>)
 80091b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80091be:	bf00      	nop
 80091c0:	3714      	adds	r7, #20
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	0800becc 	.word	0x0800becc
 80091d0:	0800bed4 	.word	0x0800bed4

080091d4 <__cvt>:
 80091d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091d8:	ec57 6b10 	vmov	r6, r7, d0
 80091dc:	2f00      	cmp	r7, #0
 80091de:	460c      	mov	r4, r1
 80091e0:	4619      	mov	r1, r3
 80091e2:	463b      	mov	r3, r7
 80091e4:	bfb4      	ite	lt
 80091e6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80091ea:	2300      	movge	r3, #0
 80091ec:	4691      	mov	r9, r2
 80091ee:	bfbf      	itttt	lt
 80091f0:	4632      	movlt	r2, r6
 80091f2:	461f      	movlt	r7, r3
 80091f4:	232d      	movlt	r3, #45	@ 0x2d
 80091f6:	4616      	movlt	r6, r2
 80091f8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80091fc:	700b      	strb	r3, [r1, #0]
 80091fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009200:	f023 0820 	bic.w	r8, r3, #32
 8009204:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009208:	d005      	beq.n	8009216 <__cvt+0x42>
 800920a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800920e:	d100      	bne.n	8009212 <__cvt+0x3e>
 8009210:	3401      	adds	r4, #1
 8009212:	2102      	movs	r1, #2
 8009214:	e000      	b.n	8009218 <__cvt+0x44>
 8009216:	2103      	movs	r1, #3
 8009218:	ab03      	add	r3, sp, #12
 800921a:	4622      	mov	r2, r4
 800921c:	9301      	str	r3, [sp, #4]
 800921e:	ab02      	add	r3, sp, #8
 8009220:	ec47 6b10 	vmov	d0, r6, r7
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	4653      	mov	r3, sl
 8009228:	f000 ff52 	bl	800a0d0 <_dtoa_r>
 800922c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009230:	4605      	mov	r5, r0
 8009232:	d119      	bne.n	8009268 <__cvt+0x94>
 8009234:	f019 0f01 	tst.w	r9, #1
 8009238:	d00e      	beq.n	8009258 <__cvt+0x84>
 800923a:	eb00 0904 	add.w	r9, r0, r4
 800923e:	2200      	movs	r2, #0
 8009240:	2300      	movs	r3, #0
 8009242:	4630      	mov	r0, r6
 8009244:	4639      	mov	r1, r7
 8009246:	f7f7 fc43 	bl	8000ad0 <__aeabi_dcmpeq>
 800924a:	b108      	cbz	r0, 8009250 <__cvt+0x7c>
 800924c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009250:	2230      	movs	r2, #48	@ 0x30
 8009252:	9b03      	ldr	r3, [sp, #12]
 8009254:	454b      	cmp	r3, r9
 8009256:	d31e      	bcc.n	8009296 <__cvt+0xc2>
 8009258:	9b03      	ldr	r3, [sp, #12]
 800925a:	4628      	mov	r0, r5
 800925c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800925e:	1b5b      	subs	r3, r3, r5
 8009260:	6013      	str	r3, [r2, #0]
 8009262:	b004      	add	sp, #16
 8009264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009268:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800926c:	eb00 0904 	add.w	r9, r0, r4
 8009270:	d1e5      	bne.n	800923e <__cvt+0x6a>
 8009272:	7803      	ldrb	r3, [r0, #0]
 8009274:	2b30      	cmp	r3, #48	@ 0x30
 8009276:	d10a      	bne.n	800928e <__cvt+0xba>
 8009278:	2200      	movs	r2, #0
 800927a:	2300      	movs	r3, #0
 800927c:	4630      	mov	r0, r6
 800927e:	4639      	mov	r1, r7
 8009280:	f7f7 fc26 	bl	8000ad0 <__aeabi_dcmpeq>
 8009284:	b918      	cbnz	r0, 800928e <__cvt+0xba>
 8009286:	f1c4 0401 	rsb	r4, r4, #1
 800928a:	f8ca 4000 	str.w	r4, [sl]
 800928e:	f8da 3000 	ldr.w	r3, [sl]
 8009292:	4499      	add	r9, r3
 8009294:	e7d3      	b.n	800923e <__cvt+0x6a>
 8009296:	1c59      	adds	r1, r3, #1
 8009298:	9103      	str	r1, [sp, #12]
 800929a:	701a      	strb	r2, [r3, #0]
 800929c:	e7d9      	b.n	8009252 <__cvt+0x7e>

0800929e <__exponent>:
 800929e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092a0:	2900      	cmp	r1, #0
 80092a2:	7002      	strb	r2, [r0, #0]
 80092a4:	bfba      	itte	lt
 80092a6:	4249      	neglt	r1, r1
 80092a8:	232d      	movlt	r3, #45	@ 0x2d
 80092aa:	232b      	movge	r3, #43	@ 0x2b
 80092ac:	2909      	cmp	r1, #9
 80092ae:	7043      	strb	r3, [r0, #1]
 80092b0:	dd28      	ble.n	8009304 <__exponent+0x66>
 80092b2:	f10d 0307 	add.w	r3, sp, #7
 80092b6:	270a      	movs	r7, #10
 80092b8:	461d      	mov	r5, r3
 80092ba:	461a      	mov	r2, r3
 80092bc:	3b01      	subs	r3, #1
 80092be:	fbb1 f6f7 	udiv	r6, r1, r7
 80092c2:	fb07 1416 	mls	r4, r7, r6, r1
 80092c6:	3430      	adds	r4, #48	@ 0x30
 80092c8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80092cc:	460c      	mov	r4, r1
 80092ce:	4631      	mov	r1, r6
 80092d0:	2c63      	cmp	r4, #99	@ 0x63
 80092d2:	dcf2      	bgt.n	80092ba <__exponent+0x1c>
 80092d4:	3130      	adds	r1, #48	@ 0x30
 80092d6:	1e94      	subs	r4, r2, #2
 80092d8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80092dc:	1c41      	adds	r1, r0, #1
 80092de:	4623      	mov	r3, r4
 80092e0:	42ab      	cmp	r3, r5
 80092e2:	d30a      	bcc.n	80092fa <__exponent+0x5c>
 80092e4:	f10d 0309 	add.w	r3, sp, #9
 80092e8:	1a9b      	subs	r3, r3, r2
 80092ea:	42ac      	cmp	r4, r5
 80092ec:	bf88      	it	hi
 80092ee:	2300      	movhi	r3, #0
 80092f0:	3302      	adds	r3, #2
 80092f2:	4403      	add	r3, r0
 80092f4:	1a18      	subs	r0, r3, r0
 80092f6:	b003      	add	sp, #12
 80092f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092fa:	f813 6b01 	ldrb.w	r6, [r3], #1
 80092fe:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009302:	e7ed      	b.n	80092e0 <__exponent+0x42>
 8009304:	2330      	movs	r3, #48	@ 0x30
 8009306:	3130      	adds	r1, #48	@ 0x30
 8009308:	7083      	strb	r3, [r0, #2]
 800930a:	1d03      	adds	r3, r0, #4
 800930c:	70c1      	strb	r1, [r0, #3]
 800930e:	e7f1      	b.n	80092f4 <__exponent+0x56>

08009310 <_printf_float>:
 8009310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009314:	b08d      	sub	sp, #52	@ 0x34
 8009316:	460c      	mov	r4, r1
 8009318:	4616      	mov	r6, r2
 800931a:	461f      	mov	r7, r3
 800931c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009320:	4605      	mov	r5, r0
 8009322:	f000 fdc3 	bl	8009eac <_localeconv_r>
 8009326:	6803      	ldr	r3, [r0, #0]
 8009328:	4618      	mov	r0, r3
 800932a:	9304      	str	r3, [sp, #16]
 800932c:	f7f6 ffa4 	bl	8000278 <strlen>
 8009330:	2300      	movs	r3, #0
 8009332:	9005      	str	r0, [sp, #20]
 8009334:	930a      	str	r3, [sp, #40]	@ 0x28
 8009336:	f8d8 3000 	ldr.w	r3, [r8]
 800933a:	f894 a018 	ldrb.w	sl, [r4, #24]
 800933e:	3307      	adds	r3, #7
 8009340:	f8d4 b000 	ldr.w	fp, [r4]
 8009344:	f023 0307 	bic.w	r3, r3, #7
 8009348:	f103 0208 	add.w	r2, r3, #8
 800934c:	f8c8 2000 	str.w	r2, [r8]
 8009350:	f04f 32ff 	mov.w	r2, #4294967295
 8009354:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009358:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800935c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009360:	9307      	str	r3, [sp, #28]
 8009362:	4b9d      	ldr	r3, [pc, #628]	@ (80095d8 <_printf_float+0x2c8>)
 8009364:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009368:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800936c:	f7f7 fbe2 	bl	8000b34 <__aeabi_dcmpun>
 8009370:	bb70      	cbnz	r0, 80093d0 <_printf_float+0xc0>
 8009372:	f04f 32ff 	mov.w	r2, #4294967295
 8009376:	4b98      	ldr	r3, [pc, #608]	@ (80095d8 <_printf_float+0x2c8>)
 8009378:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800937c:	f7f7 fbbc 	bl	8000af8 <__aeabi_dcmple>
 8009380:	bb30      	cbnz	r0, 80093d0 <_printf_float+0xc0>
 8009382:	2200      	movs	r2, #0
 8009384:	2300      	movs	r3, #0
 8009386:	4640      	mov	r0, r8
 8009388:	4649      	mov	r1, r9
 800938a:	f7f7 fbab 	bl	8000ae4 <__aeabi_dcmplt>
 800938e:	b110      	cbz	r0, 8009396 <_printf_float+0x86>
 8009390:	232d      	movs	r3, #45	@ 0x2d
 8009392:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009396:	4a91      	ldr	r2, [pc, #580]	@ (80095dc <_printf_float+0x2cc>)
 8009398:	4b91      	ldr	r3, [pc, #580]	@ (80095e0 <_printf_float+0x2d0>)
 800939a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800939e:	bf94      	ite	ls
 80093a0:	4690      	movls	r8, r2
 80093a2:	4698      	movhi	r8, r3
 80093a4:	2303      	movs	r3, #3
 80093a6:	f04f 0900 	mov.w	r9, #0
 80093aa:	6123      	str	r3, [r4, #16]
 80093ac:	f02b 0304 	bic.w	r3, fp, #4
 80093b0:	6023      	str	r3, [r4, #0]
 80093b2:	4633      	mov	r3, r6
 80093b4:	aa0b      	add	r2, sp, #44	@ 0x2c
 80093b6:	4621      	mov	r1, r4
 80093b8:	4628      	mov	r0, r5
 80093ba:	9700      	str	r7, [sp, #0]
 80093bc:	f000 f9d2 	bl	8009764 <_printf_common>
 80093c0:	3001      	adds	r0, #1
 80093c2:	f040 808d 	bne.w	80094e0 <_printf_float+0x1d0>
 80093c6:	f04f 30ff 	mov.w	r0, #4294967295
 80093ca:	b00d      	add	sp, #52	@ 0x34
 80093cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d0:	4642      	mov	r2, r8
 80093d2:	464b      	mov	r3, r9
 80093d4:	4640      	mov	r0, r8
 80093d6:	4649      	mov	r1, r9
 80093d8:	f7f7 fbac 	bl	8000b34 <__aeabi_dcmpun>
 80093dc:	b140      	cbz	r0, 80093f0 <_printf_float+0xe0>
 80093de:	464b      	mov	r3, r9
 80093e0:	4a80      	ldr	r2, [pc, #512]	@ (80095e4 <_printf_float+0x2d4>)
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	bfbc      	itt	lt
 80093e6:	232d      	movlt	r3, #45	@ 0x2d
 80093e8:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80093ec:	4b7e      	ldr	r3, [pc, #504]	@ (80095e8 <_printf_float+0x2d8>)
 80093ee:	e7d4      	b.n	800939a <_printf_float+0x8a>
 80093f0:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80093f4:	6863      	ldr	r3, [r4, #4]
 80093f6:	9206      	str	r2, [sp, #24]
 80093f8:	1c5a      	adds	r2, r3, #1
 80093fa:	d13b      	bne.n	8009474 <_printf_float+0x164>
 80093fc:	2306      	movs	r3, #6
 80093fe:	6063      	str	r3, [r4, #4]
 8009400:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009404:	2300      	movs	r3, #0
 8009406:	4628      	mov	r0, r5
 8009408:	6022      	str	r2, [r4, #0]
 800940a:	9303      	str	r3, [sp, #12]
 800940c:	ab0a      	add	r3, sp, #40	@ 0x28
 800940e:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009412:	ab09      	add	r3, sp, #36	@ 0x24
 8009414:	ec49 8b10 	vmov	d0, r8, r9
 8009418:	9300      	str	r3, [sp, #0]
 800941a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800941e:	6861      	ldr	r1, [r4, #4]
 8009420:	f7ff fed8 	bl	80091d4 <__cvt>
 8009424:	9b06      	ldr	r3, [sp, #24]
 8009426:	4680      	mov	r8, r0
 8009428:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800942a:	2b47      	cmp	r3, #71	@ 0x47
 800942c:	d129      	bne.n	8009482 <_printf_float+0x172>
 800942e:	1cc8      	adds	r0, r1, #3
 8009430:	db02      	blt.n	8009438 <_printf_float+0x128>
 8009432:	6863      	ldr	r3, [r4, #4]
 8009434:	4299      	cmp	r1, r3
 8009436:	dd41      	ble.n	80094bc <_printf_float+0x1ac>
 8009438:	f1aa 0a02 	sub.w	sl, sl, #2
 800943c:	fa5f fa8a 	uxtb.w	sl, sl
 8009440:	3901      	subs	r1, #1
 8009442:	4652      	mov	r2, sl
 8009444:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009448:	9109      	str	r1, [sp, #36]	@ 0x24
 800944a:	f7ff ff28 	bl	800929e <__exponent>
 800944e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009450:	4681      	mov	r9, r0
 8009452:	1813      	adds	r3, r2, r0
 8009454:	2a01      	cmp	r2, #1
 8009456:	6123      	str	r3, [r4, #16]
 8009458:	dc02      	bgt.n	8009460 <_printf_float+0x150>
 800945a:	6822      	ldr	r2, [r4, #0]
 800945c:	07d2      	lsls	r2, r2, #31
 800945e:	d501      	bpl.n	8009464 <_printf_float+0x154>
 8009460:	3301      	adds	r3, #1
 8009462:	6123      	str	r3, [r4, #16]
 8009464:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009468:	2b00      	cmp	r3, #0
 800946a:	d0a2      	beq.n	80093b2 <_printf_float+0xa2>
 800946c:	232d      	movs	r3, #45	@ 0x2d
 800946e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009472:	e79e      	b.n	80093b2 <_printf_float+0xa2>
 8009474:	9a06      	ldr	r2, [sp, #24]
 8009476:	2a47      	cmp	r2, #71	@ 0x47
 8009478:	d1c2      	bne.n	8009400 <_printf_float+0xf0>
 800947a:	2b00      	cmp	r3, #0
 800947c:	d1c0      	bne.n	8009400 <_printf_float+0xf0>
 800947e:	2301      	movs	r3, #1
 8009480:	e7bd      	b.n	80093fe <_printf_float+0xee>
 8009482:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009486:	d9db      	bls.n	8009440 <_printf_float+0x130>
 8009488:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800948c:	d118      	bne.n	80094c0 <_printf_float+0x1b0>
 800948e:	2900      	cmp	r1, #0
 8009490:	6863      	ldr	r3, [r4, #4]
 8009492:	dd0b      	ble.n	80094ac <_printf_float+0x19c>
 8009494:	6121      	str	r1, [r4, #16]
 8009496:	b913      	cbnz	r3, 800949e <_printf_float+0x18e>
 8009498:	6822      	ldr	r2, [r4, #0]
 800949a:	07d0      	lsls	r0, r2, #31
 800949c:	d502      	bpl.n	80094a4 <_printf_float+0x194>
 800949e:	3301      	adds	r3, #1
 80094a0:	440b      	add	r3, r1
 80094a2:	6123      	str	r3, [r4, #16]
 80094a4:	f04f 0900 	mov.w	r9, #0
 80094a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80094aa:	e7db      	b.n	8009464 <_printf_float+0x154>
 80094ac:	b913      	cbnz	r3, 80094b4 <_printf_float+0x1a4>
 80094ae:	6822      	ldr	r2, [r4, #0]
 80094b0:	07d2      	lsls	r2, r2, #31
 80094b2:	d501      	bpl.n	80094b8 <_printf_float+0x1a8>
 80094b4:	3302      	adds	r3, #2
 80094b6:	e7f4      	b.n	80094a2 <_printf_float+0x192>
 80094b8:	2301      	movs	r3, #1
 80094ba:	e7f2      	b.n	80094a2 <_printf_float+0x192>
 80094bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80094c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094c2:	4299      	cmp	r1, r3
 80094c4:	db05      	blt.n	80094d2 <_printf_float+0x1c2>
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	6121      	str	r1, [r4, #16]
 80094ca:	07d8      	lsls	r0, r3, #31
 80094cc:	d5ea      	bpl.n	80094a4 <_printf_float+0x194>
 80094ce:	1c4b      	adds	r3, r1, #1
 80094d0:	e7e7      	b.n	80094a2 <_printf_float+0x192>
 80094d2:	2900      	cmp	r1, #0
 80094d4:	bfd4      	ite	le
 80094d6:	f1c1 0202 	rsble	r2, r1, #2
 80094da:	2201      	movgt	r2, #1
 80094dc:	4413      	add	r3, r2
 80094de:	e7e0      	b.n	80094a2 <_printf_float+0x192>
 80094e0:	6823      	ldr	r3, [r4, #0]
 80094e2:	055a      	lsls	r2, r3, #21
 80094e4:	d407      	bmi.n	80094f6 <_printf_float+0x1e6>
 80094e6:	6923      	ldr	r3, [r4, #16]
 80094e8:	4642      	mov	r2, r8
 80094ea:	4631      	mov	r1, r6
 80094ec:	4628      	mov	r0, r5
 80094ee:	47b8      	blx	r7
 80094f0:	3001      	adds	r0, #1
 80094f2:	d12b      	bne.n	800954c <_printf_float+0x23c>
 80094f4:	e767      	b.n	80093c6 <_printf_float+0xb6>
 80094f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80094fa:	f240 80dd 	bls.w	80096b8 <_printf_float+0x3a8>
 80094fe:	2200      	movs	r2, #0
 8009500:	2300      	movs	r3, #0
 8009502:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009506:	f7f7 fae3 	bl	8000ad0 <__aeabi_dcmpeq>
 800950a:	2800      	cmp	r0, #0
 800950c:	d033      	beq.n	8009576 <_printf_float+0x266>
 800950e:	2301      	movs	r3, #1
 8009510:	4a36      	ldr	r2, [pc, #216]	@ (80095ec <_printf_float+0x2dc>)
 8009512:	4631      	mov	r1, r6
 8009514:	4628      	mov	r0, r5
 8009516:	47b8      	blx	r7
 8009518:	3001      	adds	r0, #1
 800951a:	f43f af54 	beq.w	80093c6 <_printf_float+0xb6>
 800951e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009522:	4543      	cmp	r3, r8
 8009524:	db02      	blt.n	800952c <_printf_float+0x21c>
 8009526:	6823      	ldr	r3, [r4, #0]
 8009528:	07d8      	lsls	r0, r3, #31
 800952a:	d50f      	bpl.n	800954c <_printf_float+0x23c>
 800952c:	4631      	mov	r1, r6
 800952e:	4628      	mov	r0, r5
 8009530:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009534:	47b8      	blx	r7
 8009536:	3001      	adds	r0, #1
 8009538:	f43f af45 	beq.w	80093c6 <_printf_float+0xb6>
 800953c:	f04f 0900 	mov.w	r9, #0
 8009540:	f108 38ff 	add.w	r8, r8, #4294967295
 8009544:	f104 0a1a 	add.w	sl, r4, #26
 8009548:	45c8      	cmp	r8, r9
 800954a:	dc09      	bgt.n	8009560 <_printf_float+0x250>
 800954c:	6823      	ldr	r3, [r4, #0]
 800954e:	079b      	lsls	r3, r3, #30
 8009550:	f100 8103 	bmi.w	800975a <_printf_float+0x44a>
 8009554:	68e0      	ldr	r0, [r4, #12]
 8009556:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009558:	4298      	cmp	r0, r3
 800955a:	bfb8      	it	lt
 800955c:	4618      	movlt	r0, r3
 800955e:	e734      	b.n	80093ca <_printf_float+0xba>
 8009560:	2301      	movs	r3, #1
 8009562:	4652      	mov	r2, sl
 8009564:	4631      	mov	r1, r6
 8009566:	4628      	mov	r0, r5
 8009568:	47b8      	blx	r7
 800956a:	3001      	adds	r0, #1
 800956c:	f43f af2b 	beq.w	80093c6 <_printf_float+0xb6>
 8009570:	f109 0901 	add.w	r9, r9, #1
 8009574:	e7e8      	b.n	8009548 <_printf_float+0x238>
 8009576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009578:	2b00      	cmp	r3, #0
 800957a:	dc39      	bgt.n	80095f0 <_printf_float+0x2e0>
 800957c:	2301      	movs	r3, #1
 800957e:	4a1b      	ldr	r2, [pc, #108]	@ (80095ec <_printf_float+0x2dc>)
 8009580:	4631      	mov	r1, r6
 8009582:	4628      	mov	r0, r5
 8009584:	47b8      	blx	r7
 8009586:	3001      	adds	r0, #1
 8009588:	f43f af1d 	beq.w	80093c6 <_printf_float+0xb6>
 800958c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009590:	ea59 0303 	orrs.w	r3, r9, r3
 8009594:	d102      	bne.n	800959c <_printf_float+0x28c>
 8009596:	6823      	ldr	r3, [r4, #0]
 8009598:	07d9      	lsls	r1, r3, #31
 800959a:	d5d7      	bpl.n	800954c <_printf_float+0x23c>
 800959c:	4631      	mov	r1, r6
 800959e:	4628      	mov	r0, r5
 80095a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095a4:	47b8      	blx	r7
 80095a6:	3001      	adds	r0, #1
 80095a8:	f43f af0d 	beq.w	80093c6 <_printf_float+0xb6>
 80095ac:	f04f 0a00 	mov.w	sl, #0
 80095b0:	f104 0b1a 	add.w	fp, r4, #26
 80095b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095b6:	425b      	negs	r3, r3
 80095b8:	4553      	cmp	r3, sl
 80095ba:	dc01      	bgt.n	80095c0 <_printf_float+0x2b0>
 80095bc:	464b      	mov	r3, r9
 80095be:	e793      	b.n	80094e8 <_printf_float+0x1d8>
 80095c0:	2301      	movs	r3, #1
 80095c2:	465a      	mov	r2, fp
 80095c4:	4631      	mov	r1, r6
 80095c6:	4628      	mov	r0, r5
 80095c8:	47b8      	blx	r7
 80095ca:	3001      	adds	r0, #1
 80095cc:	f43f aefb 	beq.w	80093c6 <_printf_float+0xb6>
 80095d0:	f10a 0a01 	add.w	sl, sl, #1
 80095d4:	e7ee      	b.n	80095b4 <_printf_float+0x2a4>
 80095d6:	bf00      	nop
 80095d8:	7fefffff 	.word	0x7fefffff
 80095dc:	0800bedc 	.word	0x0800bedc
 80095e0:	0800bee0 	.word	0x0800bee0
 80095e4:	0800bee4 	.word	0x0800bee4
 80095e8:	0800bee8 	.word	0x0800bee8
 80095ec:	0800beec 	.word	0x0800beec
 80095f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80095f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80095f6:	4553      	cmp	r3, sl
 80095f8:	bfa8      	it	ge
 80095fa:	4653      	movge	r3, sl
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	4699      	mov	r9, r3
 8009600:	dc36      	bgt.n	8009670 <_printf_float+0x360>
 8009602:	f04f 0b00 	mov.w	fp, #0
 8009606:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800960a:	f104 021a 	add.w	r2, r4, #26
 800960e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009610:	9306      	str	r3, [sp, #24]
 8009612:	eba3 0309 	sub.w	r3, r3, r9
 8009616:	455b      	cmp	r3, fp
 8009618:	dc31      	bgt.n	800967e <_printf_float+0x36e>
 800961a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800961c:	459a      	cmp	sl, r3
 800961e:	dc3a      	bgt.n	8009696 <_printf_float+0x386>
 8009620:	6823      	ldr	r3, [r4, #0]
 8009622:	07da      	lsls	r2, r3, #31
 8009624:	d437      	bmi.n	8009696 <_printf_float+0x386>
 8009626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009628:	ebaa 0903 	sub.w	r9, sl, r3
 800962c:	9b06      	ldr	r3, [sp, #24]
 800962e:	ebaa 0303 	sub.w	r3, sl, r3
 8009632:	4599      	cmp	r9, r3
 8009634:	bfa8      	it	ge
 8009636:	4699      	movge	r9, r3
 8009638:	f1b9 0f00 	cmp.w	r9, #0
 800963c:	dc33      	bgt.n	80096a6 <_printf_float+0x396>
 800963e:	f04f 0800 	mov.w	r8, #0
 8009642:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009646:	f104 0b1a 	add.w	fp, r4, #26
 800964a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800964c:	ebaa 0303 	sub.w	r3, sl, r3
 8009650:	eba3 0309 	sub.w	r3, r3, r9
 8009654:	4543      	cmp	r3, r8
 8009656:	f77f af79 	ble.w	800954c <_printf_float+0x23c>
 800965a:	2301      	movs	r3, #1
 800965c:	465a      	mov	r2, fp
 800965e:	4631      	mov	r1, r6
 8009660:	4628      	mov	r0, r5
 8009662:	47b8      	blx	r7
 8009664:	3001      	adds	r0, #1
 8009666:	f43f aeae 	beq.w	80093c6 <_printf_float+0xb6>
 800966a:	f108 0801 	add.w	r8, r8, #1
 800966e:	e7ec      	b.n	800964a <_printf_float+0x33a>
 8009670:	4642      	mov	r2, r8
 8009672:	4631      	mov	r1, r6
 8009674:	4628      	mov	r0, r5
 8009676:	47b8      	blx	r7
 8009678:	3001      	adds	r0, #1
 800967a:	d1c2      	bne.n	8009602 <_printf_float+0x2f2>
 800967c:	e6a3      	b.n	80093c6 <_printf_float+0xb6>
 800967e:	2301      	movs	r3, #1
 8009680:	4631      	mov	r1, r6
 8009682:	4628      	mov	r0, r5
 8009684:	9206      	str	r2, [sp, #24]
 8009686:	47b8      	blx	r7
 8009688:	3001      	adds	r0, #1
 800968a:	f43f ae9c 	beq.w	80093c6 <_printf_float+0xb6>
 800968e:	f10b 0b01 	add.w	fp, fp, #1
 8009692:	9a06      	ldr	r2, [sp, #24]
 8009694:	e7bb      	b.n	800960e <_printf_float+0x2fe>
 8009696:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800969a:	4631      	mov	r1, r6
 800969c:	4628      	mov	r0, r5
 800969e:	47b8      	blx	r7
 80096a0:	3001      	adds	r0, #1
 80096a2:	d1c0      	bne.n	8009626 <_printf_float+0x316>
 80096a4:	e68f      	b.n	80093c6 <_printf_float+0xb6>
 80096a6:	9a06      	ldr	r2, [sp, #24]
 80096a8:	464b      	mov	r3, r9
 80096aa:	4631      	mov	r1, r6
 80096ac:	4628      	mov	r0, r5
 80096ae:	4442      	add	r2, r8
 80096b0:	47b8      	blx	r7
 80096b2:	3001      	adds	r0, #1
 80096b4:	d1c3      	bne.n	800963e <_printf_float+0x32e>
 80096b6:	e686      	b.n	80093c6 <_printf_float+0xb6>
 80096b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80096bc:	f1ba 0f01 	cmp.w	sl, #1
 80096c0:	dc01      	bgt.n	80096c6 <_printf_float+0x3b6>
 80096c2:	07db      	lsls	r3, r3, #31
 80096c4:	d536      	bpl.n	8009734 <_printf_float+0x424>
 80096c6:	2301      	movs	r3, #1
 80096c8:	4642      	mov	r2, r8
 80096ca:	4631      	mov	r1, r6
 80096cc:	4628      	mov	r0, r5
 80096ce:	47b8      	blx	r7
 80096d0:	3001      	adds	r0, #1
 80096d2:	f43f ae78 	beq.w	80093c6 <_printf_float+0xb6>
 80096d6:	4631      	mov	r1, r6
 80096d8:	4628      	mov	r0, r5
 80096da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096de:	47b8      	blx	r7
 80096e0:	3001      	adds	r0, #1
 80096e2:	f43f ae70 	beq.w	80093c6 <_printf_float+0xb6>
 80096e6:	2200      	movs	r2, #0
 80096e8:	2300      	movs	r3, #0
 80096ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80096f2:	f7f7 f9ed 	bl	8000ad0 <__aeabi_dcmpeq>
 80096f6:	b9c0      	cbnz	r0, 800972a <_printf_float+0x41a>
 80096f8:	4653      	mov	r3, sl
 80096fa:	f108 0201 	add.w	r2, r8, #1
 80096fe:	4631      	mov	r1, r6
 8009700:	4628      	mov	r0, r5
 8009702:	47b8      	blx	r7
 8009704:	3001      	adds	r0, #1
 8009706:	d10c      	bne.n	8009722 <_printf_float+0x412>
 8009708:	e65d      	b.n	80093c6 <_printf_float+0xb6>
 800970a:	2301      	movs	r3, #1
 800970c:	465a      	mov	r2, fp
 800970e:	4631      	mov	r1, r6
 8009710:	4628      	mov	r0, r5
 8009712:	47b8      	blx	r7
 8009714:	3001      	adds	r0, #1
 8009716:	f43f ae56 	beq.w	80093c6 <_printf_float+0xb6>
 800971a:	f108 0801 	add.w	r8, r8, #1
 800971e:	45d0      	cmp	r8, sl
 8009720:	dbf3      	blt.n	800970a <_printf_float+0x3fa>
 8009722:	464b      	mov	r3, r9
 8009724:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009728:	e6df      	b.n	80094ea <_printf_float+0x1da>
 800972a:	f04f 0800 	mov.w	r8, #0
 800972e:	f104 0b1a 	add.w	fp, r4, #26
 8009732:	e7f4      	b.n	800971e <_printf_float+0x40e>
 8009734:	2301      	movs	r3, #1
 8009736:	4642      	mov	r2, r8
 8009738:	e7e1      	b.n	80096fe <_printf_float+0x3ee>
 800973a:	2301      	movs	r3, #1
 800973c:	464a      	mov	r2, r9
 800973e:	4631      	mov	r1, r6
 8009740:	4628      	mov	r0, r5
 8009742:	47b8      	blx	r7
 8009744:	3001      	adds	r0, #1
 8009746:	f43f ae3e 	beq.w	80093c6 <_printf_float+0xb6>
 800974a:	f108 0801 	add.w	r8, r8, #1
 800974e:	68e3      	ldr	r3, [r4, #12]
 8009750:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009752:	1a5b      	subs	r3, r3, r1
 8009754:	4543      	cmp	r3, r8
 8009756:	dcf0      	bgt.n	800973a <_printf_float+0x42a>
 8009758:	e6fc      	b.n	8009554 <_printf_float+0x244>
 800975a:	f04f 0800 	mov.w	r8, #0
 800975e:	f104 0919 	add.w	r9, r4, #25
 8009762:	e7f4      	b.n	800974e <_printf_float+0x43e>

08009764 <_printf_common>:
 8009764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009768:	4616      	mov	r6, r2
 800976a:	4698      	mov	r8, r3
 800976c:	688a      	ldr	r2, [r1, #8]
 800976e:	4607      	mov	r7, r0
 8009770:	690b      	ldr	r3, [r1, #16]
 8009772:	460c      	mov	r4, r1
 8009774:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009778:	4293      	cmp	r3, r2
 800977a:	bfb8      	it	lt
 800977c:	4613      	movlt	r3, r2
 800977e:	6033      	str	r3, [r6, #0]
 8009780:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009784:	b10a      	cbz	r2, 800978a <_printf_common+0x26>
 8009786:	3301      	adds	r3, #1
 8009788:	6033      	str	r3, [r6, #0]
 800978a:	6823      	ldr	r3, [r4, #0]
 800978c:	0699      	lsls	r1, r3, #26
 800978e:	bf42      	ittt	mi
 8009790:	6833      	ldrmi	r3, [r6, #0]
 8009792:	3302      	addmi	r3, #2
 8009794:	6033      	strmi	r3, [r6, #0]
 8009796:	6825      	ldr	r5, [r4, #0]
 8009798:	f015 0506 	ands.w	r5, r5, #6
 800979c:	d106      	bne.n	80097ac <_printf_common+0x48>
 800979e:	f104 0a19 	add.w	sl, r4, #25
 80097a2:	68e3      	ldr	r3, [r4, #12]
 80097a4:	6832      	ldr	r2, [r6, #0]
 80097a6:	1a9b      	subs	r3, r3, r2
 80097a8:	42ab      	cmp	r3, r5
 80097aa:	dc2b      	bgt.n	8009804 <_printf_common+0xa0>
 80097ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80097b0:	6822      	ldr	r2, [r4, #0]
 80097b2:	3b00      	subs	r3, #0
 80097b4:	bf18      	it	ne
 80097b6:	2301      	movne	r3, #1
 80097b8:	0692      	lsls	r2, r2, #26
 80097ba:	d430      	bmi.n	800981e <_printf_common+0xba>
 80097bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80097c0:	4641      	mov	r1, r8
 80097c2:	4638      	mov	r0, r7
 80097c4:	47c8      	blx	r9
 80097c6:	3001      	adds	r0, #1
 80097c8:	d023      	beq.n	8009812 <_printf_common+0xae>
 80097ca:	6823      	ldr	r3, [r4, #0]
 80097cc:	341a      	adds	r4, #26
 80097ce:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80097d2:	f003 0306 	and.w	r3, r3, #6
 80097d6:	2b04      	cmp	r3, #4
 80097d8:	bf0a      	itet	eq
 80097da:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 80097de:	2500      	movne	r5, #0
 80097e0:	6833      	ldreq	r3, [r6, #0]
 80097e2:	f04f 0600 	mov.w	r6, #0
 80097e6:	bf08      	it	eq
 80097e8:	1aed      	subeq	r5, r5, r3
 80097ea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80097ee:	bf08      	it	eq
 80097f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097f4:	4293      	cmp	r3, r2
 80097f6:	bfc4      	itt	gt
 80097f8:	1a9b      	subgt	r3, r3, r2
 80097fa:	18ed      	addgt	r5, r5, r3
 80097fc:	42b5      	cmp	r5, r6
 80097fe:	d11a      	bne.n	8009836 <_printf_common+0xd2>
 8009800:	2000      	movs	r0, #0
 8009802:	e008      	b.n	8009816 <_printf_common+0xb2>
 8009804:	2301      	movs	r3, #1
 8009806:	4652      	mov	r2, sl
 8009808:	4641      	mov	r1, r8
 800980a:	4638      	mov	r0, r7
 800980c:	47c8      	blx	r9
 800980e:	3001      	adds	r0, #1
 8009810:	d103      	bne.n	800981a <_printf_common+0xb6>
 8009812:	f04f 30ff 	mov.w	r0, #4294967295
 8009816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800981a:	3501      	adds	r5, #1
 800981c:	e7c1      	b.n	80097a2 <_printf_common+0x3e>
 800981e:	18e1      	adds	r1, r4, r3
 8009820:	1c5a      	adds	r2, r3, #1
 8009822:	2030      	movs	r0, #48	@ 0x30
 8009824:	3302      	adds	r3, #2
 8009826:	4422      	add	r2, r4
 8009828:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800982c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009830:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009834:	e7c2      	b.n	80097bc <_printf_common+0x58>
 8009836:	2301      	movs	r3, #1
 8009838:	4622      	mov	r2, r4
 800983a:	4641      	mov	r1, r8
 800983c:	4638      	mov	r0, r7
 800983e:	47c8      	blx	r9
 8009840:	3001      	adds	r0, #1
 8009842:	d0e6      	beq.n	8009812 <_printf_common+0xae>
 8009844:	3601      	adds	r6, #1
 8009846:	e7d9      	b.n	80097fc <_printf_common+0x98>

08009848 <_printf_i>:
 8009848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800984c:	7e0f      	ldrb	r7, [r1, #24]
 800984e:	4691      	mov	r9, r2
 8009850:	4680      	mov	r8, r0
 8009852:	460c      	mov	r4, r1
 8009854:	2f78      	cmp	r7, #120	@ 0x78
 8009856:	469a      	mov	sl, r3
 8009858:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800985a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800985e:	d807      	bhi.n	8009870 <_printf_i+0x28>
 8009860:	2f62      	cmp	r7, #98	@ 0x62
 8009862:	d80a      	bhi.n	800987a <_printf_i+0x32>
 8009864:	2f00      	cmp	r7, #0
 8009866:	f000 80d2 	beq.w	8009a0e <_printf_i+0x1c6>
 800986a:	2f58      	cmp	r7, #88	@ 0x58
 800986c:	f000 80b9 	beq.w	80099e2 <_printf_i+0x19a>
 8009870:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009874:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009878:	e03a      	b.n	80098f0 <_printf_i+0xa8>
 800987a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800987e:	2b15      	cmp	r3, #21
 8009880:	d8f6      	bhi.n	8009870 <_printf_i+0x28>
 8009882:	a101      	add	r1, pc, #4	@ (adr r1, 8009888 <_printf_i+0x40>)
 8009884:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009888:	080098e1 	.word	0x080098e1
 800988c:	080098f5 	.word	0x080098f5
 8009890:	08009871 	.word	0x08009871
 8009894:	08009871 	.word	0x08009871
 8009898:	08009871 	.word	0x08009871
 800989c:	08009871 	.word	0x08009871
 80098a0:	080098f5 	.word	0x080098f5
 80098a4:	08009871 	.word	0x08009871
 80098a8:	08009871 	.word	0x08009871
 80098ac:	08009871 	.word	0x08009871
 80098b0:	08009871 	.word	0x08009871
 80098b4:	080099f5 	.word	0x080099f5
 80098b8:	0800991f 	.word	0x0800991f
 80098bc:	080099af 	.word	0x080099af
 80098c0:	08009871 	.word	0x08009871
 80098c4:	08009871 	.word	0x08009871
 80098c8:	08009a17 	.word	0x08009a17
 80098cc:	08009871 	.word	0x08009871
 80098d0:	0800991f 	.word	0x0800991f
 80098d4:	08009871 	.word	0x08009871
 80098d8:	08009871 	.word	0x08009871
 80098dc:	080099b7 	.word	0x080099b7
 80098e0:	6833      	ldr	r3, [r6, #0]
 80098e2:	1d1a      	adds	r2, r3, #4
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	6032      	str	r2, [r6, #0]
 80098e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80098ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80098f0:	2301      	movs	r3, #1
 80098f2:	e09d      	b.n	8009a30 <_printf_i+0x1e8>
 80098f4:	6833      	ldr	r3, [r6, #0]
 80098f6:	6820      	ldr	r0, [r4, #0]
 80098f8:	1d19      	adds	r1, r3, #4
 80098fa:	6031      	str	r1, [r6, #0]
 80098fc:	0606      	lsls	r6, r0, #24
 80098fe:	d501      	bpl.n	8009904 <_printf_i+0xbc>
 8009900:	681d      	ldr	r5, [r3, #0]
 8009902:	e003      	b.n	800990c <_printf_i+0xc4>
 8009904:	0645      	lsls	r5, r0, #25
 8009906:	d5fb      	bpl.n	8009900 <_printf_i+0xb8>
 8009908:	f9b3 5000 	ldrsh.w	r5, [r3]
 800990c:	2d00      	cmp	r5, #0
 800990e:	da03      	bge.n	8009918 <_printf_i+0xd0>
 8009910:	232d      	movs	r3, #45	@ 0x2d
 8009912:	426d      	negs	r5, r5
 8009914:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009918:	4859      	ldr	r0, [pc, #356]	@ (8009a80 <_printf_i+0x238>)
 800991a:	230a      	movs	r3, #10
 800991c:	e011      	b.n	8009942 <_printf_i+0xfa>
 800991e:	6821      	ldr	r1, [r4, #0]
 8009920:	6833      	ldr	r3, [r6, #0]
 8009922:	0608      	lsls	r0, r1, #24
 8009924:	f853 5b04 	ldr.w	r5, [r3], #4
 8009928:	d402      	bmi.n	8009930 <_printf_i+0xe8>
 800992a:	0649      	lsls	r1, r1, #25
 800992c:	bf48      	it	mi
 800992e:	b2ad      	uxthmi	r5, r5
 8009930:	2f6f      	cmp	r7, #111	@ 0x6f
 8009932:	6033      	str	r3, [r6, #0]
 8009934:	4852      	ldr	r0, [pc, #328]	@ (8009a80 <_printf_i+0x238>)
 8009936:	bf14      	ite	ne
 8009938:	230a      	movne	r3, #10
 800993a:	2308      	moveq	r3, #8
 800993c:	2100      	movs	r1, #0
 800993e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009942:	6866      	ldr	r6, [r4, #4]
 8009944:	2e00      	cmp	r6, #0
 8009946:	60a6      	str	r6, [r4, #8]
 8009948:	bfa2      	ittt	ge
 800994a:	6821      	ldrge	r1, [r4, #0]
 800994c:	f021 0104 	bicge.w	r1, r1, #4
 8009950:	6021      	strge	r1, [r4, #0]
 8009952:	b90d      	cbnz	r5, 8009958 <_printf_i+0x110>
 8009954:	2e00      	cmp	r6, #0
 8009956:	d04b      	beq.n	80099f0 <_printf_i+0x1a8>
 8009958:	4616      	mov	r6, r2
 800995a:	fbb5 f1f3 	udiv	r1, r5, r3
 800995e:	fb03 5711 	mls	r7, r3, r1, r5
 8009962:	5dc7      	ldrb	r7, [r0, r7]
 8009964:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009968:	462f      	mov	r7, r5
 800996a:	460d      	mov	r5, r1
 800996c:	42bb      	cmp	r3, r7
 800996e:	d9f4      	bls.n	800995a <_printf_i+0x112>
 8009970:	2b08      	cmp	r3, #8
 8009972:	d10b      	bne.n	800998c <_printf_i+0x144>
 8009974:	6823      	ldr	r3, [r4, #0]
 8009976:	07df      	lsls	r7, r3, #31
 8009978:	d508      	bpl.n	800998c <_printf_i+0x144>
 800997a:	6923      	ldr	r3, [r4, #16]
 800997c:	6861      	ldr	r1, [r4, #4]
 800997e:	4299      	cmp	r1, r3
 8009980:	bfde      	ittt	le
 8009982:	2330      	movle	r3, #48	@ 0x30
 8009984:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009988:	f106 36ff 	addle.w	r6, r6, #4294967295
 800998c:	1b92      	subs	r2, r2, r6
 800998e:	6122      	str	r2, [r4, #16]
 8009990:	464b      	mov	r3, r9
 8009992:	aa03      	add	r2, sp, #12
 8009994:	4621      	mov	r1, r4
 8009996:	4640      	mov	r0, r8
 8009998:	f8cd a000 	str.w	sl, [sp]
 800999c:	f7ff fee2 	bl	8009764 <_printf_common>
 80099a0:	3001      	adds	r0, #1
 80099a2:	d14a      	bne.n	8009a3a <_printf_i+0x1f2>
 80099a4:	f04f 30ff 	mov.w	r0, #4294967295
 80099a8:	b004      	add	sp, #16
 80099aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ae:	6823      	ldr	r3, [r4, #0]
 80099b0:	f043 0320 	orr.w	r3, r3, #32
 80099b4:	6023      	str	r3, [r4, #0]
 80099b6:	2778      	movs	r7, #120	@ 0x78
 80099b8:	4832      	ldr	r0, [pc, #200]	@ (8009a84 <_printf_i+0x23c>)
 80099ba:	6823      	ldr	r3, [r4, #0]
 80099bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80099c0:	061f      	lsls	r7, r3, #24
 80099c2:	6831      	ldr	r1, [r6, #0]
 80099c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80099c8:	d402      	bmi.n	80099d0 <_printf_i+0x188>
 80099ca:	065f      	lsls	r7, r3, #25
 80099cc:	bf48      	it	mi
 80099ce:	b2ad      	uxthmi	r5, r5
 80099d0:	6031      	str	r1, [r6, #0]
 80099d2:	07d9      	lsls	r1, r3, #31
 80099d4:	bf44      	itt	mi
 80099d6:	f043 0320 	orrmi.w	r3, r3, #32
 80099da:	6023      	strmi	r3, [r4, #0]
 80099dc:	b11d      	cbz	r5, 80099e6 <_printf_i+0x19e>
 80099de:	2310      	movs	r3, #16
 80099e0:	e7ac      	b.n	800993c <_printf_i+0xf4>
 80099e2:	4827      	ldr	r0, [pc, #156]	@ (8009a80 <_printf_i+0x238>)
 80099e4:	e7e9      	b.n	80099ba <_printf_i+0x172>
 80099e6:	6823      	ldr	r3, [r4, #0]
 80099e8:	f023 0320 	bic.w	r3, r3, #32
 80099ec:	6023      	str	r3, [r4, #0]
 80099ee:	e7f6      	b.n	80099de <_printf_i+0x196>
 80099f0:	4616      	mov	r6, r2
 80099f2:	e7bd      	b.n	8009970 <_printf_i+0x128>
 80099f4:	6833      	ldr	r3, [r6, #0]
 80099f6:	6825      	ldr	r5, [r4, #0]
 80099f8:	1d18      	adds	r0, r3, #4
 80099fa:	6961      	ldr	r1, [r4, #20]
 80099fc:	6030      	str	r0, [r6, #0]
 80099fe:	062e      	lsls	r6, r5, #24
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	d501      	bpl.n	8009a08 <_printf_i+0x1c0>
 8009a04:	6019      	str	r1, [r3, #0]
 8009a06:	e002      	b.n	8009a0e <_printf_i+0x1c6>
 8009a08:	0668      	lsls	r0, r5, #25
 8009a0a:	d5fb      	bpl.n	8009a04 <_printf_i+0x1bc>
 8009a0c:	8019      	strh	r1, [r3, #0]
 8009a0e:	2300      	movs	r3, #0
 8009a10:	4616      	mov	r6, r2
 8009a12:	6123      	str	r3, [r4, #16]
 8009a14:	e7bc      	b.n	8009990 <_printf_i+0x148>
 8009a16:	6833      	ldr	r3, [r6, #0]
 8009a18:	2100      	movs	r1, #0
 8009a1a:	1d1a      	adds	r2, r3, #4
 8009a1c:	6032      	str	r2, [r6, #0]
 8009a1e:	681e      	ldr	r6, [r3, #0]
 8009a20:	6862      	ldr	r2, [r4, #4]
 8009a22:	4630      	mov	r0, r6
 8009a24:	f000 fab9 	bl	8009f9a <memchr>
 8009a28:	b108      	cbz	r0, 8009a2e <_printf_i+0x1e6>
 8009a2a:	1b80      	subs	r0, r0, r6
 8009a2c:	6060      	str	r0, [r4, #4]
 8009a2e:	6863      	ldr	r3, [r4, #4]
 8009a30:	6123      	str	r3, [r4, #16]
 8009a32:	2300      	movs	r3, #0
 8009a34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a38:	e7aa      	b.n	8009990 <_printf_i+0x148>
 8009a3a:	6923      	ldr	r3, [r4, #16]
 8009a3c:	4632      	mov	r2, r6
 8009a3e:	4649      	mov	r1, r9
 8009a40:	4640      	mov	r0, r8
 8009a42:	47d0      	blx	sl
 8009a44:	3001      	adds	r0, #1
 8009a46:	d0ad      	beq.n	80099a4 <_printf_i+0x15c>
 8009a48:	6823      	ldr	r3, [r4, #0]
 8009a4a:	079b      	lsls	r3, r3, #30
 8009a4c:	d413      	bmi.n	8009a76 <_printf_i+0x22e>
 8009a4e:	68e0      	ldr	r0, [r4, #12]
 8009a50:	9b03      	ldr	r3, [sp, #12]
 8009a52:	4298      	cmp	r0, r3
 8009a54:	bfb8      	it	lt
 8009a56:	4618      	movlt	r0, r3
 8009a58:	e7a6      	b.n	80099a8 <_printf_i+0x160>
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	4632      	mov	r2, r6
 8009a5e:	4649      	mov	r1, r9
 8009a60:	4640      	mov	r0, r8
 8009a62:	47d0      	blx	sl
 8009a64:	3001      	adds	r0, #1
 8009a66:	d09d      	beq.n	80099a4 <_printf_i+0x15c>
 8009a68:	3501      	adds	r5, #1
 8009a6a:	68e3      	ldr	r3, [r4, #12]
 8009a6c:	9903      	ldr	r1, [sp, #12]
 8009a6e:	1a5b      	subs	r3, r3, r1
 8009a70:	42ab      	cmp	r3, r5
 8009a72:	dcf2      	bgt.n	8009a5a <_printf_i+0x212>
 8009a74:	e7eb      	b.n	8009a4e <_printf_i+0x206>
 8009a76:	2500      	movs	r5, #0
 8009a78:	f104 0619 	add.w	r6, r4, #25
 8009a7c:	e7f5      	b.n	8009a6a <_printf_i+0x222>
 8009a7e:	bf00      	nop
 8009a80:	0800beee 	.word	0x0800beee
 8009a84:	0800beff 	.word	0x0800beff

08009a88 <std>:
 8009a88:	2300      	movs	r3, #0
 8009a8a:	b510      	push	{r4, lr}
 8009a8c:	4604      	mov	r4, r0
 8009a8e:	6083      	str	r3, [r0, #8]
 8009a90:	8181      	strh	r1, [r0, #12]
 8009a92:	4619      	mov	r1, r3
 8009a94:	6643      	str	r3, [r0, #100]	@ 0x64
 8009a96:	81c2      	strh	r2, [r0, #14]
 8009a98:	2208      	movs	r2, #8
 8009a9a:	6183      	str	r3, [r0, #24]
 8009a9c:	e9c0 3300 	strd	r3, r3, [r0]
 8009aa0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009aa4:	305c      	adds	r0, #92	@ 0x5c
 8009aa6:	f000 f9f9 	bl	8009e9c <memset>
 8009aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8009ae0 <std+0x58>)
 8009aac:	6224      	str	r4, [r4, #32]
 8009aae:	6263      	str	r3, [r4, #36]	@ 0x24
 8009ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8009ae4 <std+0x5c>)
 8009ab2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8009ae8 <std+0x60>)
 8009ab6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8009aec <std+0x64>)
 8009aba:	6323      	str	r3, [r4, #48]	@ 0x30
 8009abc:	4b0c      	ldr	r3, [pc, #48]	@ (8009af0 <std+0x68>)
 8009abe:	429c      	cmp	r4, r3
 8009ac0:	d006      	beq.n	8009ad0 <std+0x48>
 8009ac2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009ac6:	4294      	cmp	r4, r2
 8009ac8:	d002      	beq.n	8009ad0 <std+0x48>
 8009aca:	33d0      	adds	r3, #208	@ 0xd0
 8009acc:	429c      	cmp	r4, r3
 8009ace:	d105      	bne.n	8009adc <std+0x54>
 8009ad0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ad8:	f000 ba5c 	b.w	8009f94 <__retarget_lock_init_recursive>
 8009adc:	bd10      	pop	{r4, pc}
 8009ade:	bf00      	nop
 8009ae0:	08009ced 	.word	0x08009ced
 8009ae4:	08009d0f 	.word	0x08009d0f
 8009ae8:	08009d47 	.word	0x08009d47
 8009aec:	08009d6b 	.word	0x08009d6b
 8009af0:	20003d58 	.word	0x20003d58

08009af4 <stdio_exit_handler>:
 8009af4:	4a02      	ldr	r2, [pc, #8]	@ (8009b00 <stdio_exit_handler+0xc>)
 8009af6:	4903      	ldr	r1, [pc, #12]	@ (8009b04 <stdio_exit_handler+0x10>)
 8009af8:	4803      	ldr	r0, [pc, #12]	@ (8009b08 <stdio_exit_handler+0x14>)
 8009afa:	f000 b869 	b.w	8009bd0 <_fwalk_sglue>
 8009afe:	bf00      	nop
 8009b00:	20000024 	.word	0x20000024
 8009b04:	0800b8f5 	.word	0x0800b8f5
 8009b08:	20000034 	.word	0x20000034

08009b0c <cleanup_stdio>:
 8009b0c:	6841      	ldr	r1, [r0, #4]
 8009b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8009b40 <cleanup_stdio+0x34>)
 8009b10:	4299      	cmp	r1, r3
 8009b12:	b510      	push	{r4, lr}
 8009b14:	4604      	mov	r4, r0
 8009b16:	d001      	beq.n	8009b1c <cleanup_stdio+0x10>
 8009b18:	f001 feec 	bl	800b8f4 <_fflush_r>
 8009b1c:	68a1      	ldr	r1, [r4, #8]
 8009b1e:	4b09      	ldr	r3, [pc, #36]	@ (8009b44 <cleanup_stdio+0x38>)
 8009b20:	4299      	cmp	r1, r3
 8009b22:	d002      	beq.n	8009b2a <cleanup_stdio+0x1e>
 8009b24:	4620      	mov	r0, r4
 8009b26:	f001 fee5 	bl	800b8f4 <_fflush_r>
 8009b2a:	68e1      	ldr	r1, [r4, #12]
 8009b2c:	4b06      	ldr	r3, [pc, #24]	@ (8009b48 <cleanup_stdio+0x3c>)
 8009b2e:	4299      	cmp	r1, r3
 8009b30:	d004      	beq.n	8009b3c <cleanup_stdio+0x30>
 8009b32:	4620      	mov	r0, r4
 8009b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b38:	f001 bedc 	b.w	800b8f4 <_fflush_r>
 8009b3c:	bd10      	pop	{r4, pc}
 8009b3e:	bf00      	nop
 8009b40:	20003d58 	.word	0x20003d58
 8009b44:	20003dc0 	.word	0x20003dc0
 8009b48:	20003e28 	.word	0x20003e28

08009b4c <global_stdio_init.part.0>:
 8009b4c:	b510      	push	{r4, lr}
 8009b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8009b7c <global_stdio_init.part.0+0x30>)
 8009b50:	2104      	movs	r1, #4
 8009b52:	4c0b      	ldr	r4, [pc, #44]	@ (8009b80 <global_stdio_init.part.0+0x34>)
 8009b54:	4a0b      	ldr	r2, [pc, #44]	@ (8009b84 <global_stdio_init.part.0+0x38>)
 8009b56:	4620      	mov	r0, r4
 8009b58:	601a      	str	r2, [r3, #0]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f7ff ff94 	bl	8009a88 <std>
 8009b60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009b64:	2201      	movs	r2, #1
 8009b66:	2109      	movs	r1, #9
 8009b68:	f7ff ff8e 	bl	8009a88 <std>
 8009b6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009b70:	2202      	movs	r2, #2
 8009b72:	2112      	movs	r1, #18
 8009b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b78:	f7ff bf86 	b.w	8009a88 <std>
 8009b7c:	20003e90 	.word	0x20003e90
 8009b80:	20003d58 	.word	0x20003d58
 8009b84:	08009af5 	.word	0x08009af5

08009b88 <__sfp_lock_acquire>:
 8009b88:	4801      	ldr	r0, [pc, #4]	@ (8009b90 <__sfp_lock_acquire+0x8>)
 8009b8a:	f000 ba04 	b.w	8009f96 <__retarget_lock_acquire_recursive>
 8009b8e:	bf00      	nop
 8009b90:	20003e99 	.word	0x20003e99

08009b94 <__sfp_lock_release>:
 8009b94:	4801      	ldr	r0, [pc, #4]	@ (8009b9c <__sfp_lock_release+0x8>)
 8009b96:	f000 b9ff 	b.w	8009f98 <__retarget_lock_release_recursive>
 8009b9a:	bf00      	nop
 8009b9c:	20003e99 	.word	0x20003e99

08009ba0 <__sinit>:
 8009ba0:	b510      	push	{r4, lr}
 8009ba2:	4604      	mov	r4, r0
 8009ba4:	f7ff fff0 	bl	8009b88 <__sfp_lock_acquire>
 8009ba8:	6a23      	ldr	r3, [r4, #32]
 8009baa:	b11b      	cbz	r3, 8009bb4 <__sinit+0x14>
 8009bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bb0:	f7ff bff0 	b.w	8009b94 <__sfp_lock_release>
 8009bb4:	4b04      	ldr	r3, [pc, #16]	@ (8009bc8 <__sinit+0x28>)
 8009bb6:	6223      	str	r3, [r4, #32]
 8009bb8:	4b04      	ldr	r3, [pc, #16]	@ (8009bcc <__sinit+0x2c>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d1f5      	bne.n	8009bac <__sinit+0xc>
 8009bc0:	f7ff ffc4 	bl	8009b4c <global_stdio_init.part.0>
 8009bc4:	e7f2      	b.n	8009bac <__sinit+0xc>
 8009bc6:	bf00      	nop
 8009bc8:	08009b0d 	.word	0x08009b0d
 8009bcc:	20003e90 	.word	0x20003e90

08009bd0 <_fwalk_sglue>:
 8009bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bd4:	4607      	mov	r7, r0
 8009bd6:	4688      	mov	r8, r1
 8009bd8:	4614      	mov	r4, r2
 8009bda:	2600      	movs	r6, #0
 8009bdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009be0:	f1b9 0901 	subs.w	r9, r9, #1
 8009be4:	d505      	bpl.n	8009bf2 <_fwalk_sglue+0x22>
 8009be6:	6824      	ldr	r4, [r4, #0]
 8009be8:	2c00      	cmp	r4, #0
 8009bea:	d1f7      	bne.n	8009bdc <_fwalk_sglue+0xc>
 8009bec:	4630      	mov	r0, r6
 8009bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bf2:	89ab      	ldrh	r3, [r5, #12]
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d907      	bls.n	8009c08 <_fwalk_sglue+0x38>
 8009bf8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	d003      	beq.n	8009c08 <_fwalk_sglue+0x38>
 8009c00:	4629      	mov	r1, r5
 8009c02:	4638      	mov	r0, r7
 8009c04:	47c0      	blx	r8
 8009c06:	4306      	orrs	r6, r0
 8009c08:	3568      	adds	r5, #104	@ 0x68
 8009c0a:	e7e9      	b.n	8009be0 <_fwalk_sglue+0x10>

08009c0c <iprintf>:
 8009c0c:	b40f      	push	{r0, r1, r2, r3}
 8009c0e:	b507      	push	{r0, r1, r2, lr}
 8009c10:	4906      	ldr	r1, [pc, #24]	@ (8009c2c <iprintf+0x20>)
 8009c12:	ab04      	add	r3, sp, #16
 8009c14:	6808      	ldr	r0, [r1, #0]
 8009c16:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c1a:	6881      	ldr	r1, [r0, #8]
 8009c1c:	9301      	str	r3, [sp, #4]
 8009c1e:	f001 fccd 	bl	800b5bc <_vfiprintf_r>
 8009c22:	b003      	add	sp, #12
 8009c24:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c28:	b004      	add	sp, #16
 8009c2a:	4770      	bx	lr
 8009c2c:	20000030 	.word	0x20000030

08009c30 <_puts_r>:
 8009c30:	6a03      	ldr	r3, [r0, #32]
 8009c32:	b570      	push	{r4, r5, r6, lr}
 8009c34:	4605      	mov	r5, r0
 8009c36:	460e      	mov	r6, r1
 8009c38:	6884      	ldr	r4, [r0, #8]
 8009c3a:	b90b      	cbnz	r3, 8009c40 <_puts_r+0x10>
 8009c3c:	f7ff ffb0 	bl	8009ba0 <__sinit>
 8009c40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c42:	07db      	lsls	r3, r3, #31
 8009c44:	d405      	bmi.n	8009c52 <_puts_r+0x22>
 8009c46:	89a3      	ldrh	r3, [r4, #12]
 8009c48:	0598      	lsls	r0, r3, #22
 8009c4a:	d402      	bmi.n	8009c52 <_puts_r+0x22>
 8009c4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c4e:	f000 f9a2 	bl	8009f96 <__retarget_lock_acquire_recursive>
 8009c52:	89a3      	ldrh	r3, [r4, #12]
 8009c54:	0719      	lsls	r1, r3, #28
 8009c56:	d502      	bpl.n	8009c5e <_puts_r+0x2e>
 8009c58:	6923      	ldr	r3, [r4, #16]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d135      	bne.n	8009cca <_puts_r+0x9a>
 8009c5e:	4621      	mov	r1, r4
 8009c60:	4628      	mov	r0, r5
 8009c62:	f000 f8c5 	bl	8009df0 <__swsetup_r>
 8009c66:	b380      	cbz	r0, 8009cca <_puts_r+0x9a>
 8009c68:	f04f 35ff 	mov.w	r5, #4294967295
 8009c6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c6e:	07da      	lsls	r2, r3, #31
 8009c70:	d405      	bmi.n	8009c7e <_puts_r+0x4e>
 8009c72:	89a3      	ldrh	r3, [r4, #12]
 8009c74:	059b      	lsls	r3, r3, #22
 8009c76:	d402      	bmi.n	8009c7e <_puts_r+0x4e>
 8009c78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c7a:	f000 f98d 	bl	8009f98 <__retarget_lock_release_recursive>
 8009c7e:	4628      	mov	r0, r5
 8009c80:	bd70      	pop	{r4, r5, r6, pc}
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	da04      	bge.n	8009c90 <_puts_r+0x60>
 8009c86:	69a2      	ldr	r2, [r4, #24]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	dc17      	bgt.n	8009cbc <_puts_r+0x8c>
 8009c8c:	290a      	cmp	r1, #10
 8009c8e:	d015      	beq.n	8009cbc <_puts_r+0x8c>
 8009c90:	6823      	ldr	r3, [r4, #0]
 8009c92:	1c5a      	adds	r2, r3, #1
 8009c94:	6022      	str	r2, [r4, #0]
 8009c96:	7019      	strb	r1, [r3, #0]
 8009c98:	68a3      	ldr	r3, [r4, #8]
 8009c9a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	60a3      	str	r3, [r4, #8]
 8009ca2:	2900      	cmp	r1, #0
 8009ca4:	d1ed      	bne.n	8009c82 <_puts_r+0x52>
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	da11      	bge.n	8009cce <_puts_r+0x9e>
 8009caa:	4622      	mov	r2, r4
 8009cac:	210a      	movs	r1, #10
 8009cae:	4628      	mov	r0, r5
 8009cb0:	f000 f85f 	bl	8009d72 <__swbuf_r>
 8009cb4:	3001      	adds	r0, #1
 8009cb6:	d0d7      	beq.n	8009c68 <_puts_r+0x38>
 8009cb8:	250a      	movs	r5, #10
 8009cba:	e7d7      	b.n	8009c6c <_puts_r+0x3c>
 8009cbc:	4622      	mov	r2, r4
 8009cbe:	4628      	mov	r0, r5
 8009cc0:	f000 f857 	bl	8009d72 <__swbuf_r>
 8009cc4:	3001      	adds	r0, #1
 8009cc6:	d1e7      	bne.n	8009c98 <_puts_r+0x68>
 8009cc8:	e7ce      	b.n	8009c68 <_puts_r+0x38>
 8009cca:	3e01      	subs	r6, #1
 8009ccc:	e7e4      	b.n	8009c98 <_puts_r+0x68>
 8009cce:	6823      	ldr	r3, [r4, #0]
 8009cd0:	1c5a      	adds	r2, r3, #1
 8009cd2:	6022      	str	r2, [r4, #0]
 8009cd4:	220a      	movs	r2, #10
 8009cd6:	701a      	strb	r2, [r3, #0]
 8009cd8:	e7ee      	b.n	8009cb8 <_puts_r+0x88>
	...

08009cdc <puts>:
 8009cdc:	4b02      	ldr	r3, [pc, #8]	@ (8009ce8 <puts+0xc>)
 8009cde:	4601      	mov	r1, r0
 8009ce0:	6818      	ldr	r0, [r3, #0]
 8009ce2:	f7ff bfa5 	b.w	8009c30 <_puts_r>
 8009ce6:	bf00      	nop
 8009ce8:	20000030 	.word	0x20000030

08009cec <__sread>:
 8009cec:	b510      	push	{r4, lr}
 8009cee:	460c      	mov	r4, r1
 8009cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cf4:	f000 f900 	bl	8009ef8 <_read_r>
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	bfab      	itete	ge
 8009cfc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009cfe:	89a3      	ldrhlt	r3, [r4, #12]
 8009d00:	181b      	addge	r3, r3, r0
 8009d02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009d06:	bfac      	ite	ge
 8009d08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009d0a:	81a3      	strhlt	r3, [r4, #12]
 8009d0c:	bd10      	pop	{r4, pc}

08009d0e <__swrite>:
 8009d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d12:	461f      	mov	r7, r3
 8009d14:	898b      	ldrh	r3, [r1, #12]
 8009d16:	4605      	mov	r5, r0
 8009d18:	460c      	mov	r4, r1
 8009d1a:	05db      	lsls	r3, r3, #23
 8009d1c:	4616      	mov	r6, r2
 8009d1e:	d505      	bpl.n	8009d2c <__swrite+0x1e>
 8009d20:	2302      	movs	r3, #2
 8009d22:	2200      	movs	r2, #0
 8009d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d28:	f000 f8d4 	bl	8009ed4 <_lseek_r>
 8009d2c:	89a3      	ldrh	r3, [r4, #12]
 8009d2e:	4632      	mov	r2, r6
 8009d30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d34:	4628      	mov	r0, r5
 8009d36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009d3a:	81a3      	strh	r3, [r4, #12]
 8009d3c:	463b      	mov	r3, r7
 8009d3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d42:	f000 b8eb 	b.w	8009f1c <_write_r>

08009d46 <__sseek>:
 8009d46:	b510      	push	{r4, lr}
 8009d48:	460c      	mov	r4, r1
 8009d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d4e:	f000 f8c1 	bl	8009ed4 <_lseek_r>
 8009d52:	1c43      	adds	r3, r0, #1
 8009d54:	89a3      	ldrh	r3, [r4, #12]
 8009d56:	bf15      	itete	ne
 8009d58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009d5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009d5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009d62:	81a3      	strheq	r3, [r4, #12]
 8009d64:	bf18      	it	ne
 8009d66:	81a3      	strhne	r3, [r4, #12]
 8009d68:	bd10      	pop	{r4, pc}

08009d6a <__sclose>:
 8009d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d6e:	f000 b8a1 	b.w	8009eb4 <_close_r>

08009d72 <__swbuf_r>:
 8009d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d74:	460e      	mov	r6, r1
 8009d76:	4614      	mov	r4, r2
 8009d78:	4605      	mov	r5, r0
 8009d7a:	b118      	cbz	r0, 8009d84 <__swbuf_r+0x12>
 8009d7c:	6a03      	ldr	r3, [r0, #32]
 8009d7e:	b90b      	cbnz	r3, 8009d84 <__swbuf_r+0x12>
 8009d80:	f7ff ff0e 	bl	8009ba0 <__sinit>
 8009d84:	69a3      	ldr	r3, [r4, #24]
 8009d86:	60a3      	str	r3, [r4, #8]
 8009d88:	89a3      	ldrh	r3, [r4, #12]
 8009d8a:	071a      	lsls	r2, r3, #28
 8009d8c:	d501      	bpl.n	8009d92 <__swbuf_r+0x20>
 8009d8e:	6923      	ldr	r3, [r4, #16]
 8009d90:	b943      	cbnz	r3, 8009da4 <__swbuf_r+0x32>
 8009d92:	4621      	mov	r1, r4
 8009d94:	4628      	mov	r0, r5
 8009d96:	f000 f82b 	bl	8009df0 <__swsetup_r>
 8009d9a:	b118      	cbz	r0, 8009da4 <__swbuf_r+0x32>
 8009d9c:	f04f 37ff 	mov.w	r7, #4294967295
 8009da0:	4638      	mov	r0, r7
 8009da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009da4:	6823      	ldr	r3, [r4, #0]
 8009da6:	b2f6      	uxtb	r6, r6
 8009da8:	6922      	ldr	r2, [r4, #16]
 8009daa:	4637      	mov	r7, r6
 8009dac:	1a98      	subs	r0, r3, r2
 8009dae:	6963      	ldr	r3, [r4, #20]
 8009db0:	4283      	cmp	r3, r0
 8009db2:	dc05      	bgt.n	8009dc0 <__swbuf_r+0x4e>
 8009db4:	4621      	mov	r1, r4
 8009db6:	4628      	mov	r0, r5
 8009db8:	f001 fd9c 	bl	800b8f4 <_fflush_r>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	d1ed      	bne.n	8009d9c <__swbuf_r+0x2a>
 8009dc0:	68a3      	ldr	r3, [r4, #8]
 8009dc2:	3b01      	subs	r3, #1
 8009dc4:	60a3      	str	r3, [r4, #8]
 8009dc6:	6823      	ldr	r3, [r4, #0]
 8009dc8:	1c5a      	adds	r2, r3, #1
 8009dca:	6022      	str	r2, [r4, #0]
 8009dcc:	701e      	strb	r6, [r3, #0]
 8009dce:	1c43      	adds	r3, r0, #1
 8009dd0:	6962      	ldr	r2, [r4, #20]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d004      	beq.n	8009de0 <__swbuf_r+0x6e>
 8009dd6:	89a3      	ldrh	r3, [r4, #12]
 8009dd8:	07db      	lsls	r3, r3, #31
 8009dda:	d5e1      	bpl.n	8009da0 <__swbuf_r+0x2e>
 8009ddc:	2e0a      	cmp	r6, #10
 8009dde:	d1df      	bne.n	8009da0 <__swbuf_r+0x2e>
 8009de0:	4621      	mov	r1, r4
 8009de2:	4628      	mov	r0, r5
 8009de4:	f001 fd86 	bl	800b8f4 <_fflush_r>
 8009de8:	2800      	cmp	r0, #0
 8009dea:	d0d9      	beq.n	8009da0 <__swbuf_r+0x2e>
 8009dec:	e7d6      	b.n	8009d9c <__swbuf_r+0x2a>
	...

08009df0 <__swsetup_r>:
 8009df0:	b538      	push	{r3, r4, r5, lr}
 8009df2:	4b29      	ldr	r3, [pc, #164]	@ (8009e98 <__swsetup_r+0xa8>)
 8009df4:	4605      	mov	r5, r0
 8009df6:	460c      	mov	r4, r1
 8009df8:	6818      	ldr	r0, [r3, #0]
 8009dfa:	b118      	cbz	r0, 8009e04 <__swsetup_r+0x14>
 8009dfc:	6a03      	ldr	r3, [r0, #32]
 8009dfe:	b90b      	cbnz	r3, 8009e04 <__swsetup_r+0x14>
 8009e00:	f7ff fece 	bl	8009ba0 <__sinit>
 8009e04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e08:	0719      	lsls	r1, r3, #28
 8009e0a:	d422      	bmi.n	8009e52 <__swsetup_r+0x62>
 8009e0c:	06da      	lsls	r2, r3, #27
 8009e0e:	d407      	bmi.n	8009e20 <__swsetup_r+0x30>
 8009e10:	2209      	movs	r2, #9
 8009e12:	602a      	str	r2, [r5, #0]
 8009e14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e18:	f04f 30ff 	mov.w	r0, #4294967295
 8009e1c:	81a3      	strh	r3, [r4, #12]
 8009e1e:	e033      	b.n	8009e88 <__swsetup_r+0x98>
 8009e20:	0758      	lsls	r0, r3, #29
 8009e22:	d512      	bpl.n	8009e4a <__swsetup_r+0x5a>
 8009e24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e26:	b141      	cbz	r1, 8009e3a <__swsetup_r+0x4a>
 8009e28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e2c:	4299      	cmp	r1, r3
 8009e2e:	d002      	beq.n	8009e36 <__swsetup_r+0x46>
 8009e30:	4628      	mov	r0, r5
 8009e32:	f000 ff11 	bl	800ac58 <_free_r>
 8009e36:	2300      	movs	r3, #0
 8009e38:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e3a:	89a3      	ldrh	r3, [r4, #12]
 8009e3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009e40:	81a3      	strh	r3, [r4, #12]
 8009e42:	2300      	movs	r3, #0
 8009e44:	6063      	str	r3, [r4, #4]
 8009e46:	6923      	ldr	r3, [r4, #16]
 8009e48:	6023      	str	r3, [r4, #0]
 8009e4a:	89a3      	ldrh	r3, [r4, #12]
 8009e4c:	f043 0308 	orr.w	r3, r3, #8
 8009e50:	81a3      	strh	r3, [r4, #12]
 8009e52:	6923      	ldr	r3, [r4, #16]
 8009e54:	b94b      	cbnz	r3, 8009e6a <__swsetup_r+0x7a>
 8009e56:	89a3      	ldrh	r3, [r4, #12]
 8009e58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009e5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e60:	d003      	beq.n	8009e6a <__swsetup_r+0x7a>
 8009e62:	4621      	mov	r1, r4
 8009e64:	4628      	mov	r0, r5
 8009e66:	f001 fd92 	bl	800b98e <__smakebuf_r>
 8009e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e6e:	f013 0201 	ands.w	r2, r3, #1
 8009e72:	d00a      	beq.n	8009e8a <__swsetup_r+0x9a>
 8009e74:	2200      	movs	r2, #0
 8009e76:	60a2      	str	r2, [r4, #8]
 8009e78:	6962      	ldr	r2, [r4, #20]
 8009e7a:	4252      	negs	r2, r2
 8009e7c:	61a2      	str	r2, [r4, #24]
 8009e7e:	6922      	ldr	r2, [r4, #16]
 8009e80:	b942      	cbnz	r2, 8009e94 <__swsetup_r+0xa4>
 8009e82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009e86:	d1c5      	bne.n	8009e14 <__swsetup_r+0x24>
 8009e88:	bd38      	pop	{r3, r4, r5, pc}
 8009e8a:	0799      	lsls	r1, r3, #30
 8009e8c:	bf58      	it	pl
 8009e8e:	6962      	ldrpl	r2, [r4, #20]
 8009e90:	60a2      	str	r2, [r4, #8]
 8009e92:	e7f4      	b.n	8009e7e <__swsetup_r+0x8e>
 8009e94:	2000      	movs	r0, #0
 8009e96:	e7f7      	b.n	8009e88 <__swsetup_r+0x98>
 8009e98:	20000030 	.word	0x20000030

08009e9c <memset>:
 8009e9c:	4402      	add	r2, r0
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d100      	bne.n	8009ea6 <memset+0xa>
 8009ea4:	4770      	bx	lr
 8009ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8009eaa:	e7f9      	b.n	8009ea0 <memset+0x4>

08009eac <_localeconv_r>:
 8009eac:	4800      	ldr	r0, [pc, #0]	@ (8009eb0 <_localeconv_r+0x4>)
 8009eae:	4770      	bx	lr
 8009eb0:	20000170 	.word	0x20000170

08009eb4 <_close_r>:
 8009eb4:	b538      	push	{r3, r4, r5, lr}
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	4d05      	ldr	r5, [pc, #20]	@ (8009ed0 <_close_r+0x1c>)
 8009eba:	4604      	mov	r4, r0
 8009ebc:	4608      	mov	r0, r1
 8009ebe:	602b      	str	r3, [r5, #0]
 8009ec0:	f7f8 f911 	bl	80020e6 <_close>
 8009ec4:	1c43      	adds	r3, r0, #1
 8009ec6:	d102      	bne.n	8009ece <_close_r+0x1a>
 8009ec8:	682b      	ldr	r3, [r5, #0]
 8009eca:	b103      	cbz	r3, 8009ece <_close_r+0x1a>
 8009ecc:	6023      	str	r3, [r4, #0]
 8009ece:	bd38      	pop	{r3, r4, r5, pc}
 8009ed0:	20003e94 	.word	0x20003e94

08009ed4 <_lseek_r>:
 8009ed4:	b538      	push	{r3, r4, r5, lr}
 8009ed6:	4604      	mov	r4, r0
 8009ed8:	4d06      	ldr	r5, [pc, #24]	@ (8009ef4 <_lseek_r+0x20>)
 8009eda:	4608      	mov	r0, r1
 8009edc:	4611      	mov	r1, r2
 8009ede:	2200      	movs	r2, #0
 8009ee0:	602a      	str	r2, [r5, #0]
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	f7f8 f926 	bl	8002134 <_lseek>
 8009ee8:	1c43      	adds	r3, r0, #1
 8009eea:	d102      	bne.n	8009ef2 <_lseek_r+0x1e>
 8009eec:	682b      	ldr	r3, [r5, #0]
 8009eee:	b103      	cbz	r3, 8009ef2 <_lseek_r+0x1e>
 8009ef0:	6023      	str	r3, [r4, #0]
 8009ef2:	bd38      	pop	{r3, r4, r5, pc}
 8009ef4:	20003e94 	.word	0x20003e94

08009ef8 <_read_r>:
 8009ef8:	b538      	push	{r3, r4, r5, lr}
 8009efa:	4604      	mov	r4, r0
 8009efc:	4d06      	ldr	r5, [pc, #24]	@ (8009f18 <_read_r+0x20>)
 8009efe:	4608      	mov	r0, r1
 8009f00:	4611      	mov	r1, r2
 8009f02:	2200      	movs	r2, #0
 8009f04:	602a      	str	r2, [r5, #0]
 8009f06:	461a      	mov	r2, r3
 8009f08:	f7f8 f8b4 	bl	8002074 <_read>
 8009f0c:	1c43      	adds	r3, r0, #1
 8009f0e:	d102      	bne.n	8009f16 <_read_r+0x1e>
 8009f10:	682b      	ldr	r3, [r5, #0]
 8009f12:	b103      	cbz	r3, 8009f16 <_read_r+0x1e>
 8009f14:	6023      	str	r3, [r4, #0]
 8009f16:	bd38      	pop	{r3, r4, r5, pc}
 8009f18:	20003e94 	.word	0x20003e94

08009f1c <_write_r>:
 8009f1c:	b538      	push	{r3, r4, r5, lr}
 8009f1e:	4604      	mov	r4, r0
 8009f20:	4d06      	ldr	r5, [pc, #24]	@ (8009f3c <_write_r+0x20>)
 8009f22:	4608      	mov	r0, r1
 8009f24:	4611      	mov	r1, r2
 8009f26:	2200      	movs	r2, #0
 8009f28:	602a      	str	r2, [r5, #0]
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	f7f8 f8bf 	bl	80020ae <_write>
 8009f30:	1c43      	adds	r3, r0, #1
 8009f32:	d102      	bne.n	8009f3a <_write_r+0x1e>
 8009f34:	682b      	ldr	r3, [r5, #0]
 8009f36:	b103      	cbz	r3, 8009f3a <_write_r+0x1e>
 8009f38:	6023      	str	r3, [r4, #0]
 8009f3a:	bd38      	pop	{r3, r4, r5, pc}
 8009f3c:	20003e94 	.word	0x20003e94

08009f40 <__errno>:
 8009f40:	4b01      	ldr	r3, [pc, #4]	@ (8009f48 <__errno+0x8>)
 8009f42:	6818      	ldr	r0, [r3, #0]
 8009f44:	4770      	bx	lr
 8009f46:	bf00      	nop
 8009f48:	20000030 	.word	0x20000030

08009f4c <__libc_init_array>:
 8009f4c:	b570      	push	{r4, r5, r6, lr}
 8009f4e:	4d0d      	ldr	r5, [pc, #52]	@ (8009f84 <__libc_init_array+0x38>)
 8009f50:	2600      	movs	r6, #0
 8009f52:	4c0d      	ldr	r4, [pc, #52]	@ (8009f88 <__libc_init_array+0x3c>)
 8009f54:	1b64      	subs	r4, r4, r5
 8009f56:	10a4      	asrs	r4, r4, #2
 8009f58:	42a6      	cmp	r6, r4
 8009f5a:	d109      	bne.n	8009f70 <__libc_init_array+0x24>
 8009f5c:	4d0b      	ldr	r5, [pc, #44]	@ (8009f8c <__libc_init_array+0x40>)
 8009f5e:	2600      	movs	r6, #0
 8009f60:	4c0b      	ldr	r4, [pc, #44]	@ (8009f90 <__libc_init_array+0x44>)
 8009f62:	f001 fe41 	bl	800bbe8 <_init>
 8009f66:	1b64      	subs	r4, r4, r5
 8009f68:	10a4      	asrs	r4, r4, #2
 8009f6a:	42a6      	cmp	r6, r4
 8009f6c:	d105      	bne.n	8009f7a <__libc_init_array+0x2e>
 8009f6e:	bd70      	pop	{r4, r5, r6, pc}
 8009f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f74:	3601      	adds	r6, #1
 8009f76:	4798      	blx	r3
 8009f78:	e7ee      	b.n	8009f58 <__libc_init_array+0xc>
 8009f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f7e:	3601      	adds	r6, #1
 8009f80:	4798      	blx	r3
 8009f82:	e7f2      	b.n	8009f6a <__libc_init_array+0x1e>
 8009f84:	0800c258 	.word	0x0800c258
 8009f88:	0800c258 	.word	0x0800c258
 8009f8c:	0800c258 	.word	0x0800c258
 8009f90:	0800c25c 	.word	0x0800c25c

08009f94 <__retarget_lock_init_recursive>:
 8009f94:	4770      	bx	lr

08009f96 <__retarget_lock_acquire_recursive>:
 8009f96:	4770      	bx	lr

08009f98 <__retarget_lock_release_recursive>:
 8009f98:	4770      	bx	lr

08009f9a <memchr>:
 8009f9a:	b2c9      	uxtb	r1, r1
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	4402      	add	r2, r0
 8009fa0:	b510      	push	{r4, lr}
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	d101      	bne.n	8009fac <memchr+0x12>
 8009fa8:	2000      	movs	r0, #0
 8009faa:	e003      	b.n	8009fb4 <memchr+0x1a>
 8009fac:	7804      	ldrb	r4, [r0, #0]
 8009fae:	3301      	adds	r3, #1
 8009fb0:	428c      	cmp	r4, r1
 8009fb2:	d1f6      	bne.n	8009fa2 <memchr+0x8>
 8009fb4:	bd10      	pop	{r4, pc}

08009fb6 <quorem>:
 8009fb6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fba:	6903      	ldr	r3, [r0, #16]
 8009fbc:	4607      	mov	r7, r0
 8009fbe:	690c      	ldr	r4, [r1, #16]
 8009fc0:	42a3      	cmp	r3, r4
 8009fc2:	f2c0 8083 	blt.w	800a0cc <quorem+0x116>
 8009fc6:	3c01      	subs	r4, #1
 8009fc8:	f100 0514 	add.w	r5, r0, #20
 8009fcc:	f101 0814 	add.w	r8, r1, #20
 8009fd0:	00a3      	lsls	r3, r4, #2
 8009fd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009fd6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009fda:	9300      	str	r3, [sp, #0]
 8009fdc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009fe0:	9301      	str	r3, [sp, #4]
 8009fe2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	fbb2 f6f3 	udiv	r6, r2, r3
 8009fee:	d331      	bcc.n	800a054 <quorem+0x9e>
 8009ff0:	f04f 0a00 	mov.w	sl, #0
 8009ff4:	46c4      	mov	ip, r8
 8009ff6:	46ae      	mov	lr, r5
 8009ff8:	46d3      	mov	fp, sl
 8009ffa:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009ffe:	b298      	uxth	r0, r3
 800a000:	45e1      	cmp	r9, ip
 800a002:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800a006:	fb06 a000 	mla	r0, r6, r0, sl
 800a00a:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800a00e:	b280      	uxth	r0, r0
 800a010:	fb06 2303 	mla	r3, r6, r3, r2
 800a014:	f8de 2000 	ldr.w	r2, [lr]
 800a018:	b292      	uxth	r2, r2
 800a01a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a01e:	eba2 0200 	sub.w	r2, r2, r0
 800a022:	b29b      	uxth	r3, r3
 800a024:	f8de 0000 	ldr.w	r0, [lr]
 800a028:	445a      	add	r2, fp
 800a02a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a02e:	b292      	uxth	r2, r2
 800a030:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a034:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a038:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a03c:	f84e 2b04 	str.w	r2, [lr], #4
 800a040:	d2db      	bcs.n	8009ffa <quorem+0x44>
 800a042:	9b00      	ldr	r3, [sp, #0]
 800a044:	58eb      	ldr	r3, [r5, r3]
 800a046:	b92b      	cbnz	r3, 800a054 <quorem+0x9e>
 800a048:	9b01      	ldr	r3, [sp, #4]
 800a04a:	3b04      	subs	r3, #4
 800a04c:	429d      	cmp	r5, r3
 800a04e:	461a      	mov	r2, r3
 800a050:	d330      	bcc.n	800a0b4 <quorem+0xfe>
 800a052:	613c      	str	r4, [r7, #16]
 800a054:	4638      	mov	r0, r7
 800a056:	f001 f97b 	bl	800b350 <__mcmp>
 800a05a:	2800      	cmp	r0, #0
 800a05c:	db26      	blt.n	800a0ac <quorem+0xf6>
 800a05e:	4629      	mov	r1, r5
 800a060:	2000      	movs	r0, #0
 800a062:	f858 2b04 	ldr.w	r2, [r8], #4
 800a066:	f8d1 c000 	ldr.w	ip, [r1]
 800a06a:	fa1f fe82 	uxth.w	lr, r2
 800a06e:	45c1      	cmp	r9, r8
 800a070:	fa1f f38c 	uxth.w	r3, ip
 800a074:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800a078:	eba3 030e 	sub.w	r3, r3, lr
 800a07c:	4403      	add	r3, r0
 800a07e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a082:	b29b      	uxth	r3, r3
 800a084:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a088:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a08c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a090:	f841 3b04 	str.w	r3, [r1], #4
 800a094:	d2e5      	bcs.n	800a062 <quorem+0xac>
 800a096:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a09a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a09e:	b922      	cbnz	r2, 800a0aa <quorem+0xf4>
 800a0a0:	3b04      	subs	r3, #4
 800a0a2:	429d      	cmp	r5, r3
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	d30b      	bcc.n	800a0c0 <quorem+0x10a>
 800a0a8:	613c      	str	r4, [r7, #16]
 800a0aa:	3601      	adds	r6, #1
 800a0ac:	4630      	mov	r0, r6
 800a0ae:	b003      	add	sp, #12
 800a0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0b4:	6812      	ldr	r2, [r2, #0]
 800a0b6:	3b04      	subs	r3, #4
 800a0b8:	2a00      	cmp	r2, #0
 800a0ba:	d1ca      	bne.n	800a052 <quorem+0x9c>
 800a0bc:	3c01      	subs	r4, #1
 800a0be:	e7c5      	b.n	800a04c <quorem+0x96>
 800a0c0:	6812      	ldr	r2, [r2, #0]
 800a0c2:	3b04      	subs	r3, #4
 800a0c4:	2a00      	cmp	r2, #0
 800a0c6:	d1ef      	bne.n	800a0a8 <quorem+0xf2>
 800a0c8:	3c01      	subs	r4, #1
 800a0ca:	e7ea      	b.n	800a0a2 <quorem+0xec>
 800a0cc:	2000      	movs	r0, #0
 800a0ce:	e7ee      	b.n	800a0ae <quorem+0xf8>

0800a0d0 <_dtoa_r>:
 800a0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d4:	69c7      	ldr	r7, [r0, #28]
 800a0d6:	b099      	sub	sp, #100	@ 0x64
 800a0d8:	4683      	mov	fp, r0
 800a0da:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a0dc:	9109      	str	r1, [sp, #36]	@ 0x24
 800a0de:	920e      	str	r2, [sp, #56]	@ 0x38
 800a0e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a0e2:	ec55 4b10 	vmov	r4, r5, d0
 800a0e6:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a0ea:	b97f      	cbnz	r7, 800a10c <_dtoa_r+0x3c>
 800a0ec:	2010      	movs	r0, #16
 800a0ee:	f000 fdfd 	bl	800acec <malloc>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	f8cb 001c 	str.w	r0, [fp, #28]
 800a0f8:	b920      	cbnz	r0, 800a104 <_dtoa_r+0x34>
 800a0fa:	4ba7      	ldr	r3, [pc, #668]	@ (800a398 <_dtoa_r+0x2c8>)
 800a0fc:	21ef      	movs	r1, #239	@ 0xef
 800a0fe:	48a7      	ldr	r0, [pc, #668]	@ (800a39c <_dtoa_r+0x2cc>)
 800a100:	f001 fcc2 	bl	800ba88 <__assert_func>
 800a104:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a108:	6007      	str	r7, [r0, #0]
 800a10a:	60c7      	str	r7, [r0, #12]
 800a10c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a110:	6819      	ldr	r1, [r3, #0]
 800a112:	b159      	cbz	r1, 800a12c <_dtoa_r+0x5c>
 800a114:	685a      	ldr	r2, [r3, #4]
 800a116:	2301      	movs	r3, #1
 800a118:	4658      	mov	r0, fp
 800a11a:	4093      	lsls	r3, r2
 800a11c:	604a      	str	r2, [r1, #4]
 800a11e:	608b      	str	r3, [r1, #8]
 800a120:	f000 feda 	bl	800aed8 <_Bfree>
 800a124:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a128:	2200      	movs	r2, #0
 800a12a:	601a      	str	r2, [r3, #0]
 800a12c:	1e2b      	subs	r3, r5, #0
 800a12e:	bfb7      	itett	lt
 800a130:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a134:	2300      	movge	r3, #0
 800a136:	2201      	movlt	r2, #1
 800a138:	9303      	strlt	r3, [sp, #12]
 800a13a:	bfa8      	it	ge
 800a13c:	6033      	strge	r3, [r6, #0]
 800a13e:	9f03      	ldr	r7, [sp, #12]
 800a140:	4b97      	ldr	r3, [pc, #604]	@ (800a3a0 <_dtoa_r+0x2d0>)
 800a142:	bfb8      	it	lt
 800a144:	6032      	strlt	r2, [r6, #0]
 800a146:	43bb      	bics	r3, r7
 800a148:	d112      	bne.n	800a170 <_dtoa_r+0xa0>
 800a14a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a14e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a150:	6013      	str	r3, [r2, #0]
 800a152:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a156:	4323      	orrs	r3, r4
 800a158:	f000 854c 	beq.w	800abf4 <_dtoa_r+0xb24>
 800a15c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a15e:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a3b4 <_dtoa_r+0x2e4>
 800a162:	2b00      	cmp	r3, #0
 800a164:	f000 854e 	beq.w	800ac04 <_dtoa_r+0xb34>
 800a168:	f10a 0303 	add.w	r3, sl, #3
 800a16c:	f000 bd48 	b.w	800ac00 <_dtoa_r+0xb30>
 800a170:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a174:	2200      	movs	r2, #0
 800a176:	2300      	movs	r3, #0
 800a178:	ec51 0b17 	vmov	r0, r1, d7
 800a17c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a180:	f7f6 fca6 	bl	8000ad0 <__aeabi_dcmpeq>
 800a184:	4680      	mov	r8, r0
 800a186:	b158      	cbz	r0, 800a1a0 <_dtoa_r+0xd0>
 800a188:	2301      	movs	r3, #1
 800a18a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a18c:	6013      	str	r3, [r2, #0]
 800a18e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a190:	b113      	cbz	r3, 800a198 <_dtoa_r+0xc8>
 800a192:	4b84      	ldr	r3, [pc, #528]	@ (800a3a4 <_dtoa_r+0x2d4>)
 800a194:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a196:	6013      	str	r3, [r2, #0]
 800a198:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800a3b8 <_dtoa_r+0x2e8>
 800a19c:	f000 bd32 	b.w	800ac04 <_dtoa_r+0xb34>
 800a1a0:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a1a4:	aa16      	add	r2, sp, #88	@ 0x58
 800a1a6:	a917      	add	r1, sp, #92	@ 0x5c
 800a1a8:	4658      	mov	r0, fp
 800a1aa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a1ae:	f001 f983 	bl	800b4b8 <__d2b>
 800a1b2:	4681      	mov	r9, r0
 800a1b4:	2e00      	cmp	r6, #0
 800a1b6:	d075      	beq.n	800a2a4 <_dtoa_r+0x1d4>
 800a1b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a1ba:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a1be:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a1c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1c6:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a1ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a1ce:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	4b74      	ldr	r3, [pc, #464]	@ (800a3a8 <_dtoa_r+0x2d8>)
 800a1d8:	f7f6 f85a 	bl	8000290 <__aeabi_dsub>
 800a1dc:	a368      	add	r3, pc, #416	@ (adr r3, 800a380 <_dtoa_r+0x2b0>)
 800a1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e2:	f7f6 fa0d 	bl	8000600 <__aeabi_dmul>
 800a1e6:	a368      	add	r3, pc, #416	@ (adr r3, 800a388 <_dtoa_r+0x2b8>)
 800a1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ec:	f7f6 f852 	bl	8000294 <__adddf3>
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	460d      	mov	r5, r1
 800a1f4:	4630      	mov	r0, r6
 800a1f6:	f7f6 f999 	bl	800052c <__aeabi_i2d>
 800a1fa:	a365      	add	r3, pc, #404	@ (adr r3, 800a390 <_dtoa_r+0x2c0>)
 800a1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a200:	f7f6 f9fe 	bl	8000600 <__aeabi_dmul>
 800a204:	4602      	mov	r2, r0
 800a206:	460b      	mov	r3, r1
 800a208:	4620      	mov	r0, r4
 800a20a:	4629      	mov	r1, r5
 800a20c:	f7f6 f842 	bl	8000294 <__adddf3>
 800a210:	4604      	mov	r4, r0
 800a212:	460d      	mov	r5, r1
 800a214:	f7f6 fca4 	bl	8000b60 <__aeabi_d2iz>
 800a218:	2200      	movs	r2, #0
 800a21a:	4607      	mov	r7, r0
 800a21c:	2300      	movs	r3, #0
 800a21e:	4620      	mov	r0, r4
 800a220:	4629      	mov	r1, r5
 800a222:	f7f6 fc5f 	bl	8000ae4 <__aeabi_dcmplt>
 800a226:	b140      	cbz	r0, 800a23a <_dtoa_r+0x16a>
 800a228:	4638      	mov	r0, r7
 800a22a:	f7f6 f97f 	bl	800052c <__aeabi_i2d>
 800a22e:	4622      	mov	r2, r4
 800a230:	462b      	mov	r3, r5
 800a232:	f7f6 fc4d 	bl	8000ad0 <__aeabi_dcmpeq>
 800a236:	b900      	cbnz	r0, 800a23a <_dtoa_r+0x16a>
 800a238:	3f01      	subs	r7, #1
 800a23a:	2f16      	cmp	r7, #22
 800a23c:	d851      	bhi.n	800a2e2 <_dtoa_r+0x212>
 800a23e:	4b5b      	ldr	r3, [pc, #364]	@ (800a3ac <_dtoa_r+0x2dc>)
 800a240:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a244:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24c:	f7f6 fc4a 	bl	8000ae4 <__aeabi_dcmplt>
 800a250:	2800      	cmp	r0, #0
 800a252:	d048      	beq.n	800a2e6 <_dtoa_r+0x216>
 800a254:	3f01      	subs	r7, #1
 800a256:	2300      	movs	r3, #0
 800a258:	9312      	str	r3, [sp, #72]	@ 0x48
 800a25a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a25c:	1b9b      	subs	r3, r3, r6
 800a25e:	1e5a      	subs	r2, r3, #1
 800a260:	bf46      	itte	mi
 800a262:	f1c3 0801 	rsbmi	r8, r3, #1
 800a266:	2300      	movmi	r3, #0
 800a268:	f04f 0800 	movpl.w	r8, #0
 800a26c:	9208      	str	r2, [sp, #32]
 800a26e:	bf48      	it	mi
 800a270:	9308      	strmi	r3, [sp, #32]
 800a272:	2f00      	cmp	r7, #0
 800a274:	db39      	blt.n	800a2ea <_dtoa_r+0x21a>
 800a276:	9b08      	ldr	r3, [sp, #32]
 800a278:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a27a:	443b      	add	r3, r7
 800a27c:	9308      	str	r3, [sp, #32]
 800a27e:	2300      	movs	r3, #0
 800a280:	930a      	str	r3, [sp, #40]	@ 0x28
 800a282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a284:	2b09      	cmp	r3, #9
 800a286:	d864      	bhi.n	800a352 <_dtoa_r+0x282>
 800a288:	2b05      	cmp	r3, #5
 800a28a:	bfc5      	ittet	gt
 800a28c:	3b04      	subgt	r3, #4
 800a28e:	2400      	movgt	r4, #0
 800a290:	2401      	movle	r4, #1
 800a292:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a296:	3b02      	subs	r3, #2
 800a298:	2b03      	cmp	r3, #3
 800a29a:	d865      	bhi.n	800a368 <_dtoa_r+0x298>
 800a29c:	e8df f003 	tbb	[pc, r3]
 800a2a0:	5737392c 	.word	0x5737392c
 800a2a4:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a2a8:	441e      	add	r6, r3
 800a2aa:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a2ae:	2b20      	cmp	r3, #32
 800a2b0:	bfc9      	itett	gt
 800a2b2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a2b6:	f1c3 0320 	rsble	r3, r3, #32
 800a2ba:	409f      	lslgt	r7, r3
 800a2bc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a2c0:	bfd8      	it	le
 800a2c2:	fa04 f003 	lslle.w	r0, r4, r3
 800a2c6:	f106 36ff 	add.w	r6, r6, #4294967295
 800a2ca:	bfc4      	itt	gt
 800a2cc:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a2d0:	ea47 0003 	orrgt.w	r0, r7, r3
 800a2d4:	f7f6 f91a 	bl	800050c <__aeabi_ui2d>
 800a2d8:	2201      	movs	r2, #1
 800a2da:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a2de:	9214      	str	r2, [sp, #80]	@ 0x50
 800a2e0:	e777      	b.n	800a1d2 <_dtoa_r+0x102>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	e7b8      	b.n	800a258 <_dtoa_r+0x188>
 800a2e6:	9012      	str	r0, [sp, #72]	@ 0x48
 800a2e8:	e7b7      	b.n	800a25a <_dtoa_r+0x18a>
 800a2ea:	427b      	negs	r3, r7
 800a2ec:	eba8 0807 	sub.w	r8, r8, r7
 800a2f0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a2f6:	e7c4      	b.n	800a282 <_dtoa_r+0x1b2>
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a2fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	dc35      	bgt.n	800a36e <_dtoa_r+0x29e>
 800a302:	2301      	movs	r3, #1
 800a304:	461a      	mov	r2, r3
 800a306:	9300      	str	r3, [sp, #0]
 800a308:	9307      	str	r3, [sp, #28]
 800a30a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a30c:	e00b      	b.n	800a326 <_dtoa_r+0x256>
 800a30e:	2301      	movs	r3, #1
 800a310:	e7f3      	b.n	800a2fa <_dtoa_r+0x22a>
 800a312:	2300      	movs	r3, #0
 800a314:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a316:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a318:	18fb      	adds	r3, r7, r3
 800a31a:	9300      	str	r3, [sp, #0]
 800a31c:	3301      	adds	r3, #1
 800a31e:	2b01      	cmp	r3, #1
 800a320:	9307      	str	r3, [sp, #28]
 800a322:	bfb8      	it	lt
 800a324:	2301      	movlt	r3, #1
 800a326:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a32a:	2100      	movs	r1, #0
 800a32c:	2204      	movs	r2, #4
 800a32e:	f102 0514 	add.w	r5, r2, #20
 800a332:	429d      	cmp	r5, r3
 800a334:	d91f      	bls.n	800a376 <_dtoa_r+0x2a6>
 800a336:	6041      	str	r1, [r0, #4]
 800a338:	4658      	mov	r0, fp
 800a33a:	f000 fd8d 	bl	800ae58 <_Balloc>
 800a33e:	4682      	mov	sl, r0
 800a340:	2800      	cmp	r0, #0
 800a342:	d13b      	bne.n	800a3bc <_dtoa_r+0x2ec>
 800a344:	4b1a      	ldr	r3, [pc, #104]	@ (800a3b0 <_dtoa_r+0x2e0>)
 800a346:	4602      	mov	r2, r0
 800a348:	f240 11af 	movw	r1, #431	@ 0x1af
 800a34c:	e6d7      	b.n	800a0fe <_dtoa_r+0x2e>
 800a34e:	2301      	movs	r3, #1
 800a350:	e7e0      	b.n	800a314 <_dtoa_r+0x244>
 800a352:	2401      	movs	r4, #1
 800a354:	2300      	movs	r3, #0
 800a356:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a358:	9309      	str	r3, [sp, #36]	@ 0x24
 800a35a:	f04f 33ff 	mov.w	r3, #4294967295
 800a35e:	2200      	movs	r2, #0
 800a360:	9300      	str	r3, [sp, #0]
 800a362:	9307      	str	r3, [sp, #28]
 800a364:	2312      	movs	r3, #18
 800a366:	e7d0      	b.n	800a30a <_dtoa_r+0x23a>
 800a368:	2301      	movs	r3, #1
 800a36a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a36c:	e7f5      	b.n	800a35a <_dtoa_r+0x28a>
 800a36e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a370:	9300      	str	r3, [sp, #0]
 800a372:	9307      	str	r3, [sp, #28]
 800a374:	e7d7      	b.n	800a326 <_dtoa_r+0x256>
 800a376:	3101      	adds	r1, #1
 800a378:	0052      	lsls	r2, r2, #1
 800a37a:	e7d8      	b.n	800a32e <_dtoa_r+0x25e>
 800a37c:	f3af 8000 	nop.w
 800a380:	636f4361 	.word	0x636f4361
 800a384:	3fd287a7 	.word	0x3fd287a7
 800a388:	8b60c8b3 	.word	0x8b60c8b3
 800a38c:	3fc68a28 	.word	0x3fc68a28
 800a390:	509f79fb 	.word	0x509f79fb
 800a394:	3fd34413 	.word	0x3fd34413
 800a398:	0800bf1d 	.word	0x0800bf1d
 800a39c:	0800bf34 	.word	0x0800bf34
 800a3a0:	7ff00000 	.word	0x7ff00000
 800a3a4:	0800beed 	.word	0x0800beed
 800a3a8:	3ff80000 	.word	0x3ff80000
 800a3ac:	0800c030 	.word	0x0800c030
 800a3b0:	0800bf8c 	.word	0x0800bf8c
 800a3b4:	0800bf19 	.word	0x0800bf19
 800a3b8:	0800beec 	.word	0x0800beec
 800a3bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a3c0:	6018      	str	r0, [r3, #0]
 800a3c2:	9b07      	ldr	r3, [sp, #28]
 800a3c4:	2b0e      	cmp	r3, #14
 800a3c6:	f200 80a4 	bhi.w	800a512 <_dtoa_r+0x442>
 800a3ca:	2c00      	cmp	r4, #0
 800a3cc:	f000 80a1 	beq.w	800a512 <_dtoa_r+0x442>
 800a3d0:	2f00      	cmp	r7, #0
 800a3d2:	dd33      	ble.n	800a43c <_dtoa_r+0x36c>
 800a3d4:	f007 020f 	and.w	r2, r7, #15
 800a3d8:	4bac      	ldr	r3, [pc, #688]	@ (800a68c <_dtoa_r+0x5bc>)
 800a3da:	05f8      	lsls	r0, r7, #23
 800a3dc:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a3e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3e4:	ed93 7b00 	vldr	d7, [r3]
 800a3e8:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a3ec:	d516      	bpl.n	800a41c <_dtoa_r+0x34c>
 800a3ee:	4ba8      	ldr	r3, [pc, #672]	@ (800a690 <_dtoa_r+0x5c0>)
 800a3f0:	f004 040f 	and.w	r4, r4, #15
 800a3f4:	2603      	movs	r6, #3
 800a3f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a3fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3fe:	f7f6 fa29 	bl	8000854 <__aeabi_ddiv>
 800a402:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a406:	4da2      	ldr	r5, [pc, #648]	@ (800a690 <_dtoa_r+0x5c0>)
 800a408:	b954      	cbnz	r4, 800a420 <_dtoa_r+0x350>
 800a40a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a40e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a412:	f7f6 fa1f 	bl	8000854 <__aeabi_ddiv>
 800a416:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a41a:	e028      	b.n	800a46e <_dtoa_r+0x39e>
 800a41c:	2602      	movs	r6, #2
 800a41e:	e7f2      	b.n	800a406 <_dtoa_r+0x336>
 800a420:	07e1      	lsls	r1, r4, #31
 800a422:	d508      	bpl.n	800a436 <_dtoa_r+0x366>
 800a424:	3601      	adds	r6, #1
 800a426:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a42a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a42e:	f7f6 f8e7 	bl	8000600 <__aeabi_dmul>
 800a432:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a436:	1064      	asrs	r4, r4, #1
 800a438:	3508      	adds	r5, #8
 800a43a:	e7e5      	b.n	800a408 <_dtoa_r+0x338>
 800a43c:	f000 80d2 	beq.w	800a5e4 <_dtoa_r+0x514>
 800a440:	427c      	negs	r4, r7
 800a442:	4b92      	ldr	r3, [pc, #584]	@ (800a68c <_dtoa_r+0x5bc>)
 800a444:	4d92      	ldr	r5, [pc, #584]	@ (800a690 <_dtoa_r+0x5c0>)
 800a446:	2602      	movs	r6, #2
 800a448:	f004 020f 	and.w	r2, r4, #15
 800a44c:	1124      	asrs	r4, r4, #4
 800a44e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a452:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45a:	f7f6 f8d1 	bl	8000600 <__aeabi_dmul>
 800a45e:	2300      	movs	r3, #0
 800a460:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a464:	2c00      	cmp	r4, #0
 800a466:	f040 80b2 	bne.w	800a5ce <_dtoa_r+0x4fe>
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d1d3      	bne.n	800a416 <_dtoa_r+0x346>
 800a46e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a470:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a474:	2b00      	cmp	r3, #0
 800a476:	f000 80b7 	beq.w	800a5e8 <_dtoa_r+0x518>
 800a47a:	2200      	movs	r2, #0
 800a47c:	4b85      	ldr	r3, [pc, #532]	@ (800a694 <_dtoa_r+0x5c4>)
 800a47e:	4620      	mov	r0, r4
 800a480:	4629      	mov	r1, r5
 800a482:	f7f6 fb2f 	bl	8000ae4 <__aeabi_dcmplt>
 800a486:	2800      	cmp	r0, #0
 800a488:	f000 80ae 	beq.w	800a5e8 <_dtoa_r+0x518>
 800a48c:	9b07      	ldr	r3, [sp, #28]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	f000 80aa 	beq.w	800a5e8 <_dtoa_r+0x518>
 800a494:	9b00      	ldr	r3, [sp, #0]
 800a496:	2b00      	cmp	r3, #0
 800a498:	dd37      	ble.n	800a50a <_dtoa_r+0x43a>
 800a49a:	1e7b      	subs	r3, r7, #1
 800a49c:	4620      	mov	r0, r4
 800a49e:	2200      	movs	r2, #0
 800a4a0:	4629      	mov	r1, r5
 800a4a2:	9304      	str	r3, [sp, #16]
 800a4a4:	3601      	adds	r6, #1
 800a4a6:	4b7c      	ldr	r3, [pc, #496]	@ (800a698 <_dtoa_r+0x5c8>)
 800a4a8:	f7f6 f8aa 	bl	8000600 <__aeabi_dmul>
 800a4ac:	9c00      	ldr	r4, [sp, #0]
 800a4ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4b2:	4630      	mov	r0, r6
 800a4b4:	f7f6 f83a 	bl	800052c <__aeabi_i2d>
 800a4b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4bc:	f7f6 f8a0 	bl	8000600 <__aeabi_dmul>
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	4b76      	ldr	r3, [pc, #472]	@ (800a69c <_dtoa_r+0x5cc>)
 800a4c4:	f7f5 fee6 	bl	8000294 <__adddf3>
 800a4c8:	4605      	mov	r5, r0
 800a4ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a4ce:	2c00      	cmp	r4, #0
 800a4d0:	f040 808d 	bne.w	800a5ee <_dtoa_r+0x51e>
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	4b72      	ldr	r3, [pc, #456]	@ (800a6a0 <_dtoa_r+0x5d0>)
 800a4d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4dc:	f7f5 fed8 	bl	8000290 <__aeabi_dsub>
 800a4e0:	4602      	mov	r2, r0
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a4e8:	462a      	mov	r2, r5
 800a4ea:	4633      	mov	r3, r6
 800a4ec:	f7f6 fb18 	bl	8000b20 <__aeabi_dcmpgt>
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	f040 828b 	bne.w	800aa0c <_dtoa_r+0x93c>
 800a4f6:	462a      	mov	r2, r5
 800a4f8:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a4fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a500:	f7f6 faf0 	bl	8000ae4 <__aeabi_dcmplt>
 800a504:	2800      	cmp	r0, #0
 800a506:	f040 8128 	bne.w	800a75a <_dtoa_r+0x68a>
 800a50a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a50e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a512:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a514:	2b00      	cmp	r3, #0
 800a516:	f2c0 815a 	blt.w	800a7ce <_dtoa_r+0x6fe>
 800a51a:	2f0e      	cmp	r7, #14
 800a51c:	f300 8157 	bgt.w	800a7ce <_dtoa_r+0x6fe>
 800a520:	4b5a      	ldr	r3, [pc, #360]	@ (800a68c <_dtoa_r+0x5bc>)
 800a522:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a526:	ed93 7b00 	vldr	d7, [r3]
 800a52a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	ed8d 7b00 	vstr	d7, [sp]
 800a532:	da03      	bge.n	800a53c <_dtoa_r+0x46c>
 800a534:	9b07      	ldr	r3, [sp, #28]
 800a536:	2b00      	cmp	r3, #0
 800a538:	f340 8101 	ble.w	800a73e <_dtoa_r+0x66e>
 800a53c:	4656      	mov	r6, sl
 800a53e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a542:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a546:	4620      	mov	r0, r4
 800a548:	4629      	mov	r1, r5
 800a54a:	f7f6 f983 	bl	8000854 <__aeabi_ddiv>
 800a54e:	f7f6 fb07 	bl	8000b60 <__aeabi_d2iz>
 800a552:	4680      	mov	r8, r0
 800a554:	f7f5 ffea 	bl	800052c <__aeabi_i2d>
 800a558:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a55c:	f7f6 f850 	bl	8000600 <__aeabi_dmul>
 800a560:	4602      	mov	r2, r0
 800a562:	4620      	mov	r0, r4
 800a564:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a568:	460b      	mov	r3, r1
 800a56a:	4629      	mov	r1, r5
 800a56c:	f7f5 fe90 	bl	8000290 <__aeabi_dsub>
 800a570:	9d07      	ldr	r5, [sp, #28]
 800a572:	f806 4b01 	strb.w	r4, [r6], #1
 800a576:	eba6 040a 	sub.w	r4, r6, sl
 800a57a:	4602      	mov	r2, r0
 800a57c:	460b      	mov	r3, r1
 800a57e:	42a5      	cmp	r5, r4
 800a580:	f040 8117 	bne.w	800a7b2 <_dtoa_r+0x6e2>
 800a584:	f7f5 fe86 	bl	8000294 <__adddf3>
 800a588:	4604      	mov	r4, r0
 800a58a:	460d      	mov	r5, r1
 800a58c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a590:	f7f6 fac6 	bl	8000b20 <__aeabi_dcmpgt>
 800a594:	2800      	cmp	r0, #0
 800a596:	f040 80f9 	bne.w	800a78c <_dtoa_r+0x6bc>
 800a59a:	4620      	mov	r0, r4
 800a59c:	4629      	mov	r1, r5
 800a59e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5a2:	f7f6 fa95 	bl	8000ad0 <__aeabi_dcmpeq>
 800a5a6:	b118      	cbz	r0, 800a5b0 <_dtoa_r+0x4e0>
 800a5a8:	f018 0f01 	tst.w	r8, #1
 800a5ac:	f040 80ee 	bne.w	800a78c <_dtoa_r+0x6bc>
 800a5b0:	4649      	mov	r1, r9
 800a5b2:	4658      	mov	r0, fp
 800a5b4:	f000 fc90 	bl	800aed8 <_Bfree>
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	3701      	adds	r7, #1
 800a5bc:	7033      	strb	r3, [r6, #0]
 800a5be:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a5c0:	601f      	str	r7, [r3, #0]
 800a5c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	f000 831d 	beq.w	800ac04 <_dtoa_r+0xb34>
 800a5ca:	601e      	str	r6, [r3, #0]
 800a5cc:	e31a      	b.n	800ac04 <_dtoa_r+0xb34>
 800a5ce:	07e2      	lsls	r2, r4, #31
 800a5d0:	d505      	bpl.n	800a5de <_dtoa_r+0x50e>
 800a5d2:	3601      	adds	r6, #1
 800a5d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a5d8:	f7f6 f812 	bl	8000600 <__aeabi_dmul>
 800a5dc:	2301      	movs	r3, #1
 800a5de:	1064      	asrs	r4, r4, #1
 800a5e0:	3508      	adds	r5, #8
 800a5e2:	e73f      	b.n	800a464 <_dtoa_r+0x394>
 800a5e4:	2602      	movs	r6, #2
 800a5e6:	e742      	b.n	800a46e <_dtoa_r+0x39e>
 800a5e8:	9c07      	ldr	r4, [sp, #28]
 800a5ea:	9704      	str	r7, [sp, #16]
 800a5ec:	e761      	b.n	800a4b2 <_dtoa_r+0x3e2>
 800a5ee:	4b27      	ldr	r3, [pc, #156]	@ (800a68c <_dtoa_r+0x5bc>)
 800a5f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a5f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a5f6:	4454      	add	r4, sl
 800a5f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a5fc:	2900      	cmp	r1, #0
 800a5fe:	d053      	beq.n	800a6a8 <_dtoa_r+0x5d8>
 800a600:	2000      	movs	r0, #0
 800a602:	4928      	ldr	r1, [pc, #160]	@ (800a6a4 <_dtoa_r+0x5d4>)
 800a604:	f7f6 f926 	bl	8000854 <__aeabi_ddiv>
 800a608:	4633      	mov	r3, r6
 800a60a:	4656      	mov	r6, sl
 800a60c:	462a      	mov	r2, r5
 800a60e:	f7f5 fe3f 	bl	8000290 <__aeabi_dsub>
 800a612:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a616:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a61a:	f7f6 faa1 	bl	8000b60 <__aeabi_d2iz>
 800a61e:	4605      	mov	r5, r0
 800a620:	f7f5 ff84 	bl	800052c <__aeabi_i2d>
 800a624:	4602      	mov	r2, r0
 800a626:	460b      	mov	r3, r1
 800a628:	3530      	adds	r5, #48	@ 0x30
 800a62a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a62e:	f7f5 fe2f 	bl	8000290 <__aeabi_dsub>
 800a632:	4602      	mov	r2, r0
 800a634:	460b      	mov	r3, r1
 800a636:	f806 5b01 	strb.w	r5, [r6], #1
 800a63a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a63e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a642:	f7f6 fa4f 	bl	8000ae4 <__aeabi_dcmplt>
 800a646:	2800      	cmp	r0, #0
 800a648:	d171      	bne.n	800a72e <_dtoa_r+0x65e>
 800a64a:	2000      	movs	r0, #0
 800a64c:	4911      	ldr	r1, [pc, #68]	@ (800a694 <_dtoa_r+0x5c4>)
 800a64e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a652:	f7f5 fe1d 	bl	8000290 <__aeabi_dsub>
 800a656:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a65a:	f7f6 fa43 	bl	8000ae4 <__aeabi_dcmplt>
 800a65e:	2800      	cmp	r0, #0
 800a660:	f040 8095 	bne.w	800a78e <_dtoa_r+0x6be>
 800a664:	42a6      	cmp	r6, r4
 800a666:	f43f af50 	beq.w	800a50a <_dtoa_r+0x43a>
 800a66a:	2200      	movs	r2, #0
 800a66c:	4b0a      	ldr	r3, [pc, #40]	@ (800a698 <_dtoa_r+0x5c8>)
 800a66e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a672:	f7f5 ffc5 	bl	8000600 <__aeabi_dmul>
 800a676:	2200      	movs	r2, #0
 800a678:	4b07      	ldr	r3, [pc, #28]	@ (800a698 <_dtoa_r+0x5c8>)
 800a67a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a67e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a682:	f7f5 ffbd 	bl	8000600 <__aeabi_dmul>
 800a686:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a68a:	e7c4      	b.n	800a616 <_dtoa_r+0x546>
 800a68c:	0800c030 	.word	0x0800c030
 800a690:	0800c008 	.word	0x0800c008
 800a694:	3ff00000 	.word	0x3ff00000
 800a698:	40240000 	.word	0x40240000
 800a69c:	401c0000 	.word	0x401c0000
 800a6a0:	40140000 	.word	0x40140000
 800a6a4:	3fe00000 	.word	0x3fe00000
 800a6a8:	4631      	mov	r1, r6
 800a6aa:	4656      	mov	r6, sl
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	f7f5 ffa7 	bl	8000600 <__aeabi_dmul>
 800a6b2:	9415      	str	r4, [sp, #84]	@ 0x54
 800a6b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a6b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6bc:	f7f6 fa50 	bl	8000b60 <__aeabi_d2iz>
 800a6c0:	4605      	mov	r5, r0
 800a6c2:	f7f5 ff33 	bl	800052c <__aeabi_i2d>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	3530      	adds	r5, #48	@ 0x30
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6d0:	f7f5 fdde 	bl	8000290 <__aeabi_dsub>
 800a6d4:	f806 5b01 	strb.w	r5, [r6], #1
 800a6d8:	4602      	mov	r2, r0
 800a6da:	460b      	mov	r3, r1
 800a6dc:	42a6      	cmp	r6, r4
 800a6de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a6e2:	f04f 0200 	mov.w	r2, #0
 800a6e6:	d124      	bne.n	800a732 <_dtoa_r+0x662>
 800a6e8:	4bac      	ldr	r3, [pc, #688]	@ (800a99c <_dtoa_r+0x8cc>)
 800a6ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a6ee:	f7f5 fdd1 	bl	8000294 <__adddf3>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6fa:	f7f6 fa11 	bl	8000b20 <__aeabi_dcmpgt>
 800a6fe:	2800      	cmp	r0, #0
 800a700:	d145      	bne.n	800a78e <_dtoa_r+0x6be>
 800a702:	2000      	movs	r0, #0
 800a704:	49a5      	ldr	r1, [pc, #660]	@ (800a99c <_dtoa_r+0x8cc>)
 800a706:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a70a:	f7f5 fdc1 	bl	8000290 <__aeabi_dsub>
 800a70e:	4602      	mov	r2, r0
 800a710:	460b      	mov	r3, r1
 800a712:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a716:	f7f6 f9e5 	bl	8000ae4 <__aeabi_dcmplt>
 800a71a:	2800      	cmp	r0, #0
 800a71c:	f43f aef5 	beq.w	800a50a <_dtoa_r+0x43a>
 800a720:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a722:	1e73      	subs	r3, r6, #1
 800a724:	9315      	str	r3, [sp, #84]	@ 0x54
 800a726:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a72a:	2b30      	cmp	r3, #48	@ 0x30
 800a72c:	d0f8      	beq.n	800a720 <_dtoa_r+0x650>
 800a72e:	9f04      	ldr	r7, [sp, #16]
 800a730:	e73e      	b.n	800a5b0 <_dtoa_r+0x4e0>
 800a732:	4b9b      	ldr	r3, [pc, #620]	@ (800a9a0 <_dtoa_r+0x8d0>)
 800a734:	f7f5 ff64 	bl	8000600 <__aeabi_dmul>
 800a738:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a73c:	e7bc      	b.n	800a6b8 <_dtoa_r+0x5e8>
 800a73e:	d10c      	bne.n	800a75a <_dtoa_r+0x68a>
 800a740:	2200      	movs	r2, #0
 800a742:	4b98      	ldr	r3, [pc, #608]	@ (800a9a4 <_dtoa_r+0x8d4>)
 800a744:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a748:	f7f5 ff5a 	bl	8000600 <__aeabi_dmul>
 800a74c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a750:	f7f6 f9dc 	bl	8000b0c <__aeabi_dcmpge>
 800a754:	2800      	cmp	r0, #0
 800a756:	f000 8157 	beq.w	800aa08 <_dtoa_r+0x938>
 800a75a:	2400      	movs	r4, #0
 800a75c:	4625      	mov	r5, r4
 800a75e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a760:	4656      	mov	r6, sl
 800a762:	43db      	mvns	r3, r3
 800a764:	9304      	str	r3, [sp, #16]
 800a766:	2700      	movs	r7, #0
 800a768:	4621      	mov	r1, r4
 800a76a:	4658      	mov	r0, fp
 800a76c:	f000 fbb4 	bl	800aed8 <_Bfree>
 800a770:	2d00      	cmp	r5, #0
 800a772:	d0dc      	beq.n	800a72e <_dtoa_r+0x65e>
 800a774:	b12f      	cbz	r7, 800a782 <_dtoa_r+0x6b2>
 800a776:	42af      	cmp	r7, r5
 800a778:	d003      	beq.n	800a782 <_dtoa_r+0x6b2>
 800a77a:	4639      	mov	r1, r7
 800a77c:	4658      	mov	r0, fp
 800a77e:	f000 fbab 	bl	800aed8 <_Bfree>
 800a782:	4629      	mov	r1, r5
 800a784:	4658      	mov	r0, fp
 800a786:	f000 fba7 	bl	800aed8 <_Bfree>
 800a78a:	e7d0      	b.n	800a72e <_dtoa_r+0x65e>
 800a78c:	9704      	str	r7, [sp, #16]
 800a78e:	4633      	mov	r3, r6
 800a790:	461e      	mov	r6, r3
 800a792:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a796:	2a39      	cmp	r2, #57	@ 0x39
 800a798:	d107      	bne.n	800a7aa <_dtoa_r+0x6da>
 800a79a:	459a      	cmp	sl, r3
 800a79c:	d1f8      	bne.n	800a790 <_dtoa_r+0x6c0>
 800a79e:	9a04      	ldr	r2, [sp, #16]
 800a7a0:	3201      	adds	r2, #1
 800a7a2:	9204      	str	r2, [sp, #16]
 800a7a4:	2230      	movs	r2, #48	@ 0x30
 800a7a6:	f88a 2000 	strb.w	r2, [sl]
 800a7aa:	781a      	ldrb	r2, [r3, #0]
 800a7ac:	3201      	adds	r2, #1
 800a7ae:	701a      	strb	r2, [r3, #0]
 800a7b0:	e7bd      	b.n	800a72e <_dtoa_r+0x65e>
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	4b7a      	ldr	r3, [pc, #488]	@ (800a9a0 <_dtoa_r+0x8d0>)
 800a7b6:	f7f5 ff23 	bl	8000600 <__aeabi_dmul>
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	2300      	movs	r3, #0
 800a7be:	4604      	mov	r4, r0
 800a7c0:	460d      	mov	r5, r1
 800a7c2:	f7f6 f985 	bl	8000ad0 <__aeabi_dcmpeq>
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	f43f aebb 	beq.w	800a542 <_dtoa_r+0x472>
 800a7cc:	e6f0      	b.n	800a5b0 <_dtoa_r+0x4e0>
 800a7ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a7d0:	2a00      	cmp	r2, #0
 800a7d2:	f000 80db 	beq.w	800a98c <_dtoa_r+0x8bc>
 800a7d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7d8:	2a01      	cmp	r2, #1
 800a7da:	f300 80bf 	bgt.w	800a95c <_dtoa_r+0x88c>
 800a7de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a7e0:	2a00      	cmp	r2, #0
 800a7e2:	f000 80b7 	beq.w	800a954 <_dtoa_r+0x884>
 800a7e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a7ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a7ec:	4646      	mov	r6, r8
 800a7ee:	9a08      	ldr	r2, [sp, #32]
 800a7f0:	2101      	movs	r1, #1
 800a7f2:	4658      	mov	r0, fp
 800a7f4:	4498      	add	r8, r3
 800a7f6:	441a      	add	r2, r3
 800a7f8:	9208      	str	r2, [sp, #32]
 800a7fa:	f000 fc23 	bl	800b044 <__i2b>
 800a7fe:	4605      	mov	r5, r0
 800a800:	b15e      	cbz	r6, 800a81a <_dtoa_r+0x74a>
 800a802:	9b08      	ldr	r3, [sp, #32]
 800a804:	2b00      	cmp	r3, #0
 800a806:	dd08      	ble.n	800a81a <_dtoa_r+0x74a>
 800a808:	42b3      	cmp	r3, r6
 800a80a:	9a08      	ldr	r2, [sp, #32]
 800a80c:	bfa8      	it	ge
 800a80e:	4633      	movge	r3, r6
 800a810:	eba8 0803 	sub.w	r8, r8, r3
 800a814:	1af6      	subs	r6, r6, r3
 800a816:	1ad3      	subs	r3, r2, r3
 800a818:	9308      	str	r3, [sp, #32]
 800a81a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a81c:	b1f3      	cbz	r3, 800a85c <_dtoa_r+0x78c>
 800a81e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a820:	2b00      	cmp	r3, #0
 800a822:	f000 80b7 	beq.w	800a994 <_dtoa_r+0x8c4>
 800a826:	b18c      	cbz	r4, 800a84c <_dtoa_r+0x77c>
 800a828:	4629      	mov	r1, r5
 800a82a:	4622      	mov	r2, r4
 800a82c:	4658      	mov	r0, fp
 800a82e:	f000 fcc9 	bl	800b1c4 <__pow5mult>
 800a832:	464a      	mov	r2, r9
 800a834:	4601      	mov	r1, r0
 800a836:	4605      	mov	r5, r0
 800a838:	4658      	mov	r0, fp
 800a83a:	f000 fc19 	bl	800b070 <__multiply>
 800a83e:	4649      	mov	r1, r9
 800a840:	9004      	str	r0, [sp, #16]
 800a842:	4658      	mov	r0, fp
 800a844:	f000 fb48 	bl	800aed8 <_Bfree>
 800a848:	9b04      	ldr	r3, [sp, #16]
 800a84a:	4699      	mov	r9, r3
 800a84c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a84e:	1b1a      	subs	r2, r3, r4
 800a850:	d004      	beq.n	800a85c <_dtoa_r+0x78c>
 800a852:	4649      	mov	r1, r9
 800a854:	4658      	mov	r0, fp
 800a856:	f000 fcb5 	bl	800b1c4 <__pow5mult>
 800a85a:	4681      	mov	r9, r0
 800a85c:	2101      	movs	r1, #1
 800a85e:	4658      	mov	r0, fp
 800a860:	f000 fbf0 	bl	800b044 <__i2b>
 800a864:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a866:	4604      	mov	r4, r0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	f000 81cf 	beq.w	800ac0c <_dtoa_r+0xb3c>
 800a86e:	461a      	mov	r2, r3
 800a870:	4601      	mov	r1, r0
 800a872:	4658      	mov	r0, fp
 800a874:	f000 fca6 	bl	800b1c4 <__pow5mult>
 800a878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a87a:	4604      	mov	r4, r0
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	f300 8095 	bgt.w	800a9ac <_dtoa_r+0x8dc>
 800a882:	9b02      	ldr	r3, [sp, #8]
 800a884:	2b00      	cmp	r3, #0
 800a886:	f040 8087 	bne.w	800a998 <_dtoa_r+0x8c8>
 800a88a:	9b03      	ldr	r3, [sp, #12]
 800a88c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a890:	2b00      	cmp	r3, #0
 800a892:	f040 8089 	bne.w	800a9a8 <_dtoa_r+0x8d8>
 800a896:	9b03      	ldr	r3, [sp, #12]
 800a898:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a89c:	0d1b      	lsrs	r3, r3, #20
 800a89e:	051b      	lsls	r3, r3, #20
 800a8a0:	b12b      	cbz	r3, 800a8ae <_dtoa_r+0x7de>
 800a8a2:	9b08      	ldr	r3, [sp, #32]
 800a8a4:	f108 0801 	add.w	r8, r8, #1
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	9308      	str	r3, [sp, #32]
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	f000 81b0 	beq.w	800ac18 <_dtoa_r+0xb48>
 800a8b8:	6923      	ldr	r3, [r4, #16]
 800a8ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a8be:	6918      	ldr	r0, [r3, #16]
 800a8c0:	f000 fb74 	bl	800afac <__hi0bits>
 800a8c4:	f1c0 0020 	rsb	r0, r0, #32
 800a8c8:	9b08      	ldr	r3, [sp, #32]
 800a8ca:	4418      	add	r0, r3
 800a8cc:	f010 001f 	ands.w	r0, r0, #31
 800a8d0:	d077      	beq.n	800a9c2 <_dtoa_r+0x8f2>
 800a8d2:	f1c0 0320 	rsb	r3, r0, #32
 800a8d6:	2b04      	cmp	r3, #4
 800a8d8:	dd6b      	ble.n	800a9b2 <_dtoa_r+0x8e2>
 800a8da:	f1c0 001c 	rsb	r0, r0, #28
 800a8de:	9b08      	ldr	r3, [sp, #32]
 800a8e0:	4480      	add	r8, r0
 800a8e2:	4403      	add	r3, r0
 800a8e4:	4406      	add	r6, r0
 800a8e6:	9308      	str	r3, [sp, #32]
 800a8e8:	f1b8 0f00 	cmp.w	r8, #0
 800a8ec:	dd05      	ble.n	800a8fa <_dtoa_r+0x82a>
 800a8ee:	4649      	mov	r1, r9
 800a8f0:	4642      	mov	r2, r8
 800a8f2:	4658      	mov	r0, fp
 800a8f4:	f000 fcc0 	bl	800b278 <__lshift>
 800a8f8:	4681      	mov	r9, r0
 800a8fa:	9b08      	ldr	r3, [sp, #32]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	dd05      	ble.n	800a90c <_dtoa_r+0x83c>
 800a900:	4621      	mov	r1, r4
 800a902:	461a      	mov	r2, r3
 800a904:	4658      	mov	r0, fp
 800a906:	f000 fcb7 	bl	800b278 <__lshift>
 800a90a:	4604      	mov	r4, r0
 800a90c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d059      	beq.n	800a9c6 <_dtoa_r+0x8f6>
 800a912:	4621      	mov	r1, r4
 800a914:	4648      	mov	r0, r9
 800a916:	f000 fd1b 	bl	800b350 <__mcmp>
 800a91a:	2800      	cmp	r0, #0
 800a91c:	da53      	bge.n	800a9c6 <_dtoa_r+0x8f6>
 800a91e:	1e7b      	subs	r3, r7, #1
 800a920:	4649      	mov	r1, r9
 800a922:	220a      	movs	r2, #10
 800a924:	4658      	mov	r0, fp
 800a926:	9304      	str	r3, [sp, #16]
 800a928:	2300      	movs	r3, #0
 800a92a:	f000 faf7 	bl	800af1c <__multadd>
 800a92e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a930:	4681      	mov	r9, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	f000 8172 	beq.w	800ac1c <_dtoa_r+0xb4c>
 800a938:	2300      	movs	r3, #0
 800a93a:	4629      	mov	r1, r5
 800a93c:	220a      	movs	r2, #10
 800a93e:	4658      	mov	r0, fp
 800a940:	f000 faec 	bl	800af1c <__multadd>
 800a944:	9b00      	ldr	r3, [sp, #0]
 800a946:	4605      	mov	r5, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	dc67      	bgt.n	800aa1c <_dtoa_r+0x94c>
 800a94c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a94e:	2b02      	cmp	r3, #2
 800a950:	dc41      	bgt.n	800a9d6 <_dtoa_r+0x906>
 800a952:	e063      	b.n	800aa1c <_dtoa_r+0x94c>
 800a954:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a956:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a95a:	e746      	b.n	800a7ea <_dtoa_r+0x71a>
 800a95c:	9b07      	ldr	r3, [sp, #28]
 800a95e:	1e5c      	subs	r4, r3, #1
 800a960:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a962:	42a3      	cmp	r3, r4
 800a964:	bfb7      	itett	lt
 800a966:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a968:	1b1c      	subge	r4, r3, r4
 800a96a:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a96c:	1ae3      	sublt	r3, r4, r3
 800a96e:	bfbe      	ittt	lt
 800a970:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a972:	2400      	movlt	r4, #0
 800a974:	18d2      	addlt	r2, r2, r3
 800a976:	9b07      	ldr	r3, [sp, #28]
 800a978:	bfb8      	it	lt
 800a97a:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	bfb5      	itete	lt
 800a980:	eba8 0603 	sublt.w	r6, r8, r3
 800a984:	4646      	movge	r6, r8
 800a986:	2300      	movlt	r3, #0
 800a988:	9b07      	ldrge	r3, [sp, #28]
 800a98a:	e730      	b.n	800a7ee <_dtoa_r+0x71e>
 800a98c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a98e:	4646      	mov	r6, r8
 800a990:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a992:	e735      	b.n	800a800 <_dtoa_r+0x730>
 800a994:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a996:	e75c      	b.n	800a852 <_dtoa_r+0x782>
 800a998:	2300      	movs	r3, #0
 800a99a:	e788      	b.n	800a8ae <_dtoa_r+0x7de>
 800a99c:	3fe00000 	.word	0x3fe00000
 800a9a0:	40240000 	.word	0x40240000
 800a9a4:	40140000 	.word	0x40140000
 800a9a8:	9b02      	ldr	r3, [sp, #8]
 800a9aa:	e780      	b.n	800a8ae <_dtoa_r+0x7de>
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9b0:	e782      	b.n	800a8b8 <_dtoa_r+0x7e8>
 800a9b2:	d099      	beq.n	800a8e8 <_dtoa_r+0x818>
 800a9b4:	331c      	adds	r3, #28
 800a9b6:	9a08      	ldr	r2, [sp, #32]
 800a9b8:	441a      	add	r2, r3
 800a9ba:	4498      	add	r8, r3
 800a9bc:	441e      	add	r6, r3
 800a9be:	9208      	str	r2, [sp, #32]
 800a9c0:	e792      	b.n	800a8e8 <_dtoa_r+0x818>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	e7f6      	b.n	800a9b4 <_dtoa_r+0x8e4>
 800a9c6:	9b07      	ldr	r3, [sp, #28]
 800a9c8:	9704      	str	r7, [sp, #16]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	dc20      	bgt.n	800aa10 <_dtoa_r+0x940>
 800a9ce:	9300      	str	r3, [sp, #0]
 800a9d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9d2:	2b02      	cmp	r3, #2
 800a9d4:	dd1e      	ble.n	800aa14 <_dtoa_r+0x944>
 800a9d6:	9b00      	ldr	r3, [sp, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	f47f aec0 	bne.w	800a75e <_dtoa_r+0x68e>
 800a9de:	4621      	mov	r1, r4
 800a9e0:	2205      	movs	r2, #5
 800a9e2:	4658      	mov	r0, fp
 800a9e4:	f000 fa9a 	bl	800af1c <__multadd>
 800a9e8:	4601      	mov	r1, r0
 800a9ea:	4604      	mov	r4, r0
 800a9ec:	4648      	mov	r0, r9
 800a9ee:	f000 fcaf 	bl	800b350 <__mcmp>
 800a9f2:	2800      	cmp	r0, #0
 800a9f4:	f77f aeb3 	ble.w	800a75e <_dtoa_r+0x68e>
 800a9f8:	2331      	movs	r3, #49	@ 0x31
 800a9fa:	4656      	mov	r6, sl
 800a9fc:	f806 3b01 	strb.w	r3, [r6], #1
 800aa00:	9b04      	ldr	r3, [sp, #16]
 800aa02:	3301      	adds	r3, #1
 800aa04:	9304      	str	r3, [sp, #16]
 800aa06:	e6ae      	b.n	800a766 <_dtoa_r+0x696>
 800aa08:	9c07      	ldr	r4, [sp, #28]
 800aa0a:	9704      	str	r7, [sp, #16]
 800aa0c:	4625      	mov	r5, r4
 800aa0e:	e7f3      	b.n	800a9f8 <_dtoa_r+0x928>
 800aa10:	9b07      	ldr	r3, [sp, #28]
 800aa12:	9300      	str	r3, [sp, #0]
 800aa14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	f000 8104 	beq.w	800ac24 <_dtoa_r+0xb54>
 800aa1c:	2e00      	cmp	r6, #0
 800aa1e:	dd05      	ble.n	800aa2c <_dtoa_r+0x95c>
 800aa20:	4629      	mov	r1, r5
 800aa22:	4632      	mov	r2, r6
 800aa24:	4658      	mov	r0, fp
 800aa26:	f000 fc27 	bl	800b278 <__lshift>
 800aa2a:	4605      	mov	r5, r0
 800aa2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d05a      	beq.n	800aae8 <_dtoa_r+0xa18>
 800aa32:	6869      	ldr	r1, [r5, #4]
 800aa34:	4658      	mov	r0, fp
 800aa36:	f000 fa0f 	bl	800ae58 <_Balloc>
 800aa3a:	4606      	mov	r6, r0
 800aa3c:	b928      	cbnz	r0, 800aa4a <_dtoa_r+0x97a>
 800aa3e:	4b84      	ldr	r3, [pc, #528]	@ (800ac50 <_dtoa_r+0xb80>)
 800aa40:	4602      	mov	r2, r0
 800aa42:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800aa46:	f7ff bb5a 	b.w	800a0fe <_dtoa_r+0x2e>
 800aa4a:	692a      	ldr	r2, [r5, #16]
 800aa4c:	f105 010c 	add.w	r1, r5, #12
 800aa50:	300c      	adds	r0, #12
 800aa52:	3202      	adds	r2, #2
 800aa54:	0092      	lsls	r2, r2, #2
 800aa56:	f001 f809 	bl	800ba6c <memcpy>
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	4631      	mov	r1, r6
 800aa5e:	4658      	mov	r0, fp
 800aa60:	f000 fc0a 	bl	800b278 <__lshift>
 800aa64:	f10a 0301 	add.w	r3, sl, #1
 800aa68:	462f      	mov	r7, r5
 800aa6a:	4605      	mov	r5, r0
 800aa6c:	9307      	str	r3, [sp, #28]
 800aa6e:	9b00      	ldr	r3, [sp, #0]
 800aa70:	4453      	add	r3, sl
 800aa72:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa74:	9b02      	ldr	r3, [sp, #8]
 800aa76:	f003 0301 	and.w	r3, r3, #1
 800aa7a:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa7c:	9b07      	ldr	r3, [sp, #28]
 800aa7e:	4621      	mov	r1, r4
 800aa80:	4648      	mov	r0, r9
 800aa82:	3b01      	subs	r3, #1
 800aa84:	9300      	str	r3, [sp, #0]
 800aa86:	f7ff fa96 	bl	8009fb6 <quorem>
 800aa8a:	4639      	mov	r1, r7
 800aa8c:	9002      	str	r0, [sp, #8]
 800aa8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800aa92:	4648      	mov	r0, r9
 800aa94:	f000 fc5c 	bl	800b350 <__mcmp>
 800aa98:	462a      	mov	r2, r5
 800aa9a:	9008      	str	r0, [sp, #32]
 800aa9c:	4621      	mov	r1, r4
 800aa9e:	4658      	mov	r0, fp
 800aaa0:	f000 fc72 	bl	800b388 <__mdiff>
 800aaa4:	68c2      	ldr	r2, [r0, #12]
 800aaa6:	4606      	mov	r6, r0
 800aaa8:	bb02      	cbnz	r2, 800aaec <_dtoa_r+0xa1c>
 800aaaa:	4601      	mov	r1, r0
 800aaac:	4648      	mov	r0, r9
 800aaae:	f000 fc4f 	bl	800b350 <__mcmp>
 800aab2:	4602      	mov	r2, r0
 800aab4:	4631      	mov	r1, r6
 800aab6:	4658      	mov	r0, fp
 800aab8:	920e      	str	r2, [sp, #56]	@ 0x38
 800aaba:	f000 fa0d 	bl	800aed8 <_Bfree>
 800aabe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aac0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aac2:	9e07      	ldr	r6, [sp, #28]
 800aac4:	ea43 0102 	orr.w	r1, r3, r2
 800aac8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aaca:	4319      	orrs	r1, r3
 800aacc:	d110      	bne.n	800aaf0 <_dtoa_r+0xa20>
 800aace:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800aad2:	d029      	beq.n	800ab28 <_dtoa_r+0xa58>
 800aad4:	9b08      	ldr	r3, [sp, #32]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	dd02      	ble.n	800aae0 <_dtoa_r+0xa10>
 800aada:	9b02      	ldr	r3, [sp, #8]
 800aadc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800aae0:	9b00      	ldr	r3, [sp, #0]
 800aae2:	f883 8000 	strb.w	r8, [r3]
 800aae6:	e63f      	b.n	800a768 <_dtoa_r+0x698>
 800aae8:	4628      	mov	r0, r5
 800aaea:	e7bb      	b.n	800aa64 <_dtoa_r+0x994>
 800aaec:	2201      	movs	r2, #1
 800aaee:	e7e1      	b.n	800aab4 <_dtoa_r+0x9e4>
 800aaf0:	9b08      	ldr	r3, [sp, #32]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	db04      	blt.n	800ab00 <_dtoa_r+0xa30>
 800aaf6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aaf8:	430b      	orrs	r3, r1
 800aafa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aafc:	430b      	orrs	r3, r1
 800aafe:	d120      	bne.n	800ab42 <_dtoa_r+0xa72>
 800ab00:	2a00      	cmp	r2, #0
 800ab02:	dded      	ble.n	800aae0 <_dtoa_r+0xa10>
 800ab04:	4649      	mov	r1, r9
 800ab06:	2201      	movs	r2, #1
 800ab08:	4658      	mov	r0, fp
 800ab0a:	f000 fbb5 	bl	800b278 <__lshift>
 800ab0e:	4621      	mov	r1, r4
 800ab10:	4681      	mov	r9, r0
 800ab12:	f000 fc1d 	bl	800b350 <__mcmp>
 800ab16:	2800      	cmp	r0, #0
 800ab18:	dc03      	bgt.n	800ab22 <_dtoa_r+0xa52>
 800ab1a:	d1e1      	bne.n	800aae0 <_dtoa_r+0xa10>
 800ab1c:	f018 0f01 	tst.w	r8, #1
 800ab20:	d0de      	beq.n	800aae0 <_dtoa_r+0xa10>
 800ab22:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ab26:	d1d8      	bne.n	800aada <_dtoa_r+0xa0a>
 800ab28:	2339      	movs	r3, #57	@ 0x39
 800ab2a:	9a00      	ldr	r2, [sp, #0]
 800ab2c:	7013      	strb	r3, [r2, #0]
 800ab2e:	4633      	mov	r3, r6
 800ab30:	461e      	mov	r6, r3
 800ab32:	3b01      	subs	r3, #1
 800ab34:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ab38:	2a39      	cmp	r2, #57	@ 0x39
 800ab3a:	d052      	beq.n	800abe2 <_dtoa_r+0xb12>
 800ab3c:	3201      	adds	r2, #1
 800ab3e:	701a      	strb	r2, [r3, #0]
 800ab40:	e612      	b.n	800a768 <_dtoa_r+0x698>
 800ab42:	2a00      	cmp	r2, #0
 800ab44:	dd07      	ble.n	800ab56 <_dtoa_r+0xa86>
 800ab46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ab4a:	d0ed      	beq.n	800ab28 <_dtoa_r+0xa58>
 800ab4c:	f108 0301 	add.w	r3, r8, #1
 800ab50:	9a00      	ldr	r2, [sp, #0]
 800ab52:	7013      	strb	r3, [r2, #0]
 800ab54:	e608      	b.n	800a768 <_dtoa_r+0x698>
 800ab56:	9b07      	ldr	r3, [sp, #28]
 800ab58:	9a07      	ldr	r2, [sp, #28]
 800ab5a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ab5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d028      	beq.n	800abb6 <_dtoa_r+0xae6>
 800ab64:	4649      	mov	r1, r9
 800ab66:	2300      	movs	r3, #0
 800ab68:	220a      	movs	r2, #10
 800ab6a:	4658      	mov	r0, fp
 800ab6c:	f000 f9d6 	bl	800af1c <__multadd>
 800ab70:	42af      	cmp	r7, r5
 800ab72:	4681      	mov	r9, r0
 800ab74:	f04f 0300 	mov.w	r3, #0
 800ab78:	f04f 020a 	mov.w	r2, #10
 800ab7c:	4639      	mov	r1, r7
 800ab7e:	4658      	mov	r0, fp
 800ab80:	d107      	bne.n	800ab92 <_dtoa_r+0xac2>
 800ab82:	f000 f9cb 	bl	800af1c <__multadd>
 800ab86:	4607      	mov	r7, r0
 800ab88:	4605      	mov	r5, r0
 800ab8a:	9b07      	ldr	r3, [sp, #28]
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	9307      	str	r3, [sp, #28]
 800ab90:	e774      	b.n	800aa7c <_dtoa_r+0x9ac>
 800ab92:	f000 f9c3 	bl	800af1c <__multadd>
 800ab96:	4629      	mov	r1, r5
 800ab98:	4607      	mov	r7, r0
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	220a      	movs	r2, #10
 800ab9e:	4658      	mov	r0, fp
 800aba0:	f000 f9bc 	bl	800af1c <__multadd>
 800aba4:	4605      	mov	r5, r0
 800aba6:	e7f0      	b.n	800ab8a <_dtoa_r+0xaba>
 800aba8:	9b00      	ldr	r3, [sp, #0]
 800abaa:	2700      	movs	r7, #0
 800abac:	2b00      	cmp	r3, #0
 800abae:	bfcc      	ite	gt
 800abb0:	461e      	movgt	r6, r3
 800abb2:	2601      	movle	r6, #1
 800abb4:	4456      	add	r6, sl
 800abb6:	4649      	mov	r1, r9
 800abb8:	2201      	movs	r2, #1
 800abba:	4658      	mov	r0, fp
 800abbc:	f000 fb5c 	bl	800b278 <__lshift>
 800abc0:	4621      	mov	r1, r4
 800abc2:	4681      	mov	r9, r0
 800abc4:	f000 fbc4 	bl	800b350 <__mcmp>
 800abc8:	2800      	cmp	r0, #0
 800abca:	dcb0      	bgt.n	800ab2e <_dtoa_r+0xa5e>
 800abcc:	d102      	bne.n	800abd4 <_dtoa_r+0xb04>
 800abce:	f018 0f01 	tst.w	r8, #1
 800abd2:	d1ac      	bne.n	800ab2e <_dtoa_r+0xa5e>
 800abd4:	4633      	mov	r3, r6
 800abd6:	461e      	mov	r6, r3
 800abd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800abdc:	2a30      	cmp	r2, #48	@ 0x30
 800abde:	d0fa      	beq.n	800abd6 <_dtoa_r+0xb06>
 800abe0:	e5c2      	b.n	800a768 <_dtoa_r+0x698>
 800abe2:	459a      	cmp	sl, r3
 800abe4:	d1a4      	bne.n	800ab30 <_dtoa_r+0xa60>
 800abe6:	9b04      	ldr	r3, [sp, #16]
 800abe8:	3301      	adds	r3, #1
 800abea:	9304      	str	r3, [sp, #16]
 800abec:	2331      	movs	r3, #49	@ 0x31
 800abee:	f88a 3000 	strb.w	r3, [sl]
 800abf2:	e5b9      	b.n	800a768 <_dtoa_r+0x698>
 800abf4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800abf6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ac54 <_dtoa_r+0xb84>
 800abfa:	b11b      	cbz	r3, 800ac04 <_dtoa_r+0xb34>
 800abfc:	f10a 0308 	add.w	r3, sl, #8
 800ac00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ac02:	6013      	str	r3, [r2, #0]
 800ac04:	4650      	mov	r0, sl
 800ac06:	b019      	add	sp, #100	@ 0x64
 800ac08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	f77f ae37 	ble.w	800a882 <_dtoa_r+0x7b2>
 800ac14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac16:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac18:	2001      	movs	r0, #1
 800ac1a:	e655      	b.n	800a8c8 <_dtoa_r+0x7f8>
 800ac1c:	9b00      	ldr	r3, [sp, #0]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	f77f aed6 	ble.w	800a9d0 <_dtoa_r+0x900>
 800ac24:	4656      	mov	r6, sl
 800ac26:	4621      	mov	r1, r4
 800ac28:	4648      	mov	r0, r9
 800ac2a:	f7ff f9c4 	bl	8009fb6 <quorem>
 800ac2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ac32:	9b00      	ldr	r3, [sp, #0]
 800ac34:	f806 8b01 	strb.w	r8, [r6], #1
 800ac38:	eba6 020a 	sub.w	r2, r6, sl
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	ddb3      	ble.n	800aba8 <_dtoa_r+0xad8>
 800ac40:	4649      	mov	r1, r9
 800ac42:	2300      	movs	r3, #0
 800ac44:	220a      	movs	r2, #10
 800ac46:	4658      	mov	r0, fp
 800ac48:	f000 f968 	bl	800af1c <__multadd>
 800ac4c:	4681      	mov	r9, r0
 800ac4e:	e7ea      	b.n	800ac26 <_dtoa_r+0xb56>
 800ac50:	0800bf8c 	.word	0x0800bf8c
 800ac54:	0800bf10 	.word	0x0800bf10

0800ac58 <_free_r>:
 800ac58:	b538      	push	{r3, r4, r5, lr}
 800ac5a:	4605      	mov	r5, r0
 800ac5c:	2900      	cmp	r1, #0
 800ac5e:	d041      	beq.n	800ace4 <_free_r+0x8c>
 800ac60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac64:	1f0c      	subs	r4, r1, #4
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	bfb8      	it	lt
 800ac6a:	18e4      	addlt	r4, r4, r3
 800ac6c:	f000 f8e8 	bl	800ae40 <__malloc_lock>
 800ac70:	4a1d      	ldr	r2, [pc, #116]	@ (800ace8 <_free_r+0x90>)
 800ac72:	6813      	ldr	r3, [r2, #0]
 800ac74:	b933      	cbnz	r3, 800ac84 <_free_r+0x2c>
 800ac76:	6063      	str	r3, [r4, #4]
 800ac78:	6014      	str	r4, [r2, #0]
 800ac7a:	4628      	mov	r0, r5
 800ac7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac80:	f000 b8e4 	b.w	800ae4c <__malloc_unlock>
 800ac84:	42a3      	cmp	r3, r4
 800ac86:	d908      	bls.n	800ac9a <_free_r+0x42>
 800ac88:	6820      	ldr	r0, [r4, #0]
 800ac8a:	1821      	adds	r1, r4, r0
 800ac8c:	428b      	cmp	r3, r1
 800ac8e:	bf01      	itttt	eq
 800ac90:	6819      	ldreq	r1, [r3, #0]
 800ac92:	685b      	ldreq	r3, [r3, #4]
 800ac94:	1809      	addeq	r1, r1, r0
 800ac96:	6021      	streq	r1, [r4, #0]
 800ac98:	e7ed      	b.n	800ac76 <_free_r+0x1e>
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	b10b      	cbz	r3, 800aca4 <_free_r+0x4c>
 800aca0:	42a3      	cmp	r3, r4
 800aca2:	d9fa      	bls.n	800ac9a <_free_r+0x42>
 800aca4:	6811      	ldr	r1, [r2, #0]
 800aca6:	1850      	adds	r0, r2, r1
 800aca8:	42a0      	cmp	r0, r4
 800acaa:	d10b      	bne.n	800acc4 <_free_r+0x6c>
 800acac:	6820      	ldr	r0, [r4, #0]
 800acae:	4401      	add	r1, r0
 800acb0:	1850      	adds	r0, r2, r1
 800acb2:	6011      	str	r1, [r2, #0]
 800acb4:	4283      	cmp	r3, r0
 800acb6:	d1e0      	bne.n	800ac7a <_free_r+0x22>
 800acb8:	6818      	ldr	r0, [r3, #0]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	4408      	add	r0, r1
 800acbe:	6053      	str	r3, [r2, #4]
 800acc0:	6010      	str	r0, [r2, #0]
 800acc2:	e7da      	b.n	800ac7a <_free_r+0x22>
 800acc4:	d902      	bls.n	800accc <_free_r+0x74>
 800acc6:	230c      	movs	r3, #12
 800acc8:	602b      	str	r3, [r5, #0]
 800acca:	e7d6      	b.n	800ac7a <_free_r+0x22>
 800accc:	6820      	ldr	r0, [r4, #0]
 800acce:	1821      	adds	r1, r4, r0
 800acd0:	428b      	cmp	r3, r1
 800acd2:	bf02      	ittt	eq
 800acd4:	6819      	ldreq	r1, [r3, #0]
 800acd6:	685b      	ldreq	r3, [r3, #4]
 800acd8:	1809      	addeq	r1, r1, r0
 800acda:	6063      	str	r3, [r4, #4]
 800acdc:	bf08      	it	eq
 800acde:	6021      	streq	r1, [r4, #0]
 800ace0:	6054      	str	r4, [r2, #4]
 800ace2:	e7ca      	b.n	800ac7a <_free_r+0x22>
 800ace4:	bd38      	pop	{r3, r4, r5, pc}
 800ace6:	bf00      	nop
 800ace8:	20003ea0 	.word	0x20003ea0

0800acec <malloc>:
 800acec:	4b02      	ldr	r3, [pc, #8]	@ (800acf8 <malloc+0xc>)
 800acee:	4601      	mov	r1, r0
 800acf0:	6818      	ldr	r0, [r3, #0]
 800acf2:	f000 b825 	b.w	800ad40 <_malloc_r>
 800acf6:	bf00      	nop
 800acf8:	20000030 	.word	0x20000030

0800acfc <sbrk_aligned>:
 800acfc:	b570      	push	{r4, r5, r6, lr}
 800acfe:	4e0f      	ldr	r6, [pc, #60]	@ (800ad3c <sbrk_aligned+0x40>)
 800ad00:	460c      	mov	r4, r1
 800ad02:	4605      	mov	r5, r0
 800ad04:	6831      	ldr	r1, [r6, #0]
 800ad06:	b911      	cbnz	r1, 800ad0e <sbrk_aligned+0x12>
 800ad08:	f000 fea0 	bl	800ba4c <_sbrk_r>
 800ad0c:	6030      	str	r0, [r6, #0]
 800ad0e:	4621      	mov	r1, r4
 800ad10:	4628      	mov	r0, r5
 800ad12:	f000 fe9b 	bl	800ba4c <_sbrk_r>
 800ad16:	1c43      	adds	r3, r0, #1
 800ad18:	d103      	bne.n	800ad22 <sbrk_aligned+0x26>
 800ad1a:	f04f 34ff 	mov.w	r4, #4294967295
 800ad1e:	4620      	mov	r0, r4
 800ad20:	bd70      	pop	{r4, r5, r6, pc}
 800ad22:	1cc4      	adds	r4, r0, #3
 800ad24:	f024 0403 	bic.w	r4, r4, #3
 800ad28:	42a0      	cmp	r0, r4
 800ad2a:	d0f8      	beq.n	800ad1e <sbrk_aligned+0x22>
 800ad2c:	1a21      	subs	r1, r4, r0
 800ad2e:	4628      	mov	r0, r5
 800ad30:	f000 fe8c 	bl	800ba4c <_sbrk_r>
 800ad34:	3001      	adds	r0, #1
 800ad36:	d1f2      	bne.n	800ad1e <sbrk_aligned+0x22>
 800ad38:	e7ef      	b.n	800ad1a <sbrk_aligned+0x1e>
 800ad3a:	bf00      	nop
 800ad3c:	20003e9c 	.word	0x20003e9c

0800ad40 <_malloc_r>:
 800ad40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad44:	1ccd      	adds	r5, r1, #3
 800ad46:	4606      	mov	r6, r0
 800ad48:	f025 0503 	bic.w	r5, r5, #3
 800ad4c:	3508      	adds	r5, #8
 800ad4e:	2d0c      	cmp	r5, #12
 800ad50:	bf38      	it	cc
 800ad52:	250c      	movcc	r5, #12
 800ad54:	2d00      	cmp	r5, #0
 800ad56:	db01      	blt.n	800ad5c <_malloc_r+0x1c>
 800ad58:	42a9      	cmp	r1, r5
 800ad5a:	d904      	bls.n	800ad66 <_malloc_r+0x26>
 800ad5c:	230c      	movs	r3, #12
 800ad5e:	6033      	str	r3, [r6, #0]
 800ad60:	2000      	movs	r0, #0
 800ad62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ae3c <_malloc_r+0xfc>
 800ad6a:	f000 f869 	bl	800ae40 <__malloc_lock>
 800ad6e:	f8d8 3000 	ldr.w	r3, [r8]
 800ad72:	461c      	mov	r4, r3
 800ad74:	bb44      	cbnz	r4, 800adc8 <_malloc_r+0x88>
 800ad76:	4629      	mov	r1, r5
 800ad78:	4630      	mov	r0, r6
 800ad7a:	f7ff ffbf 	bl	800acfc <sbrk_aligned>
 800ad7e:	1c43      	adds	r3, r0, #1
 800ad80:	4604      	mov	r4, r0
 800ad82:	d158      	bne.n	800ae36 <_malloc_r+0xf6>
 800ad84:	f8d8 4000 	ldr.w	r4, [r8]
 800ad88:	4627      	mov	r7, r4
 800ad8a:	2f00      	cmp	r7, #0
 800ad8c:	d143      	bne.n	800ae16 <_malloc_r+0xd6>
 800ad8e:	2c00      	cmp	r4, #0
 800ad90:	d04b      	beq.n	800ae2a <_malloc_r+0xea>
 800ad92:	6823      	ldr	r3, [r4, #0]
 800ad94:	4639      	mov	r1, r7
 800ad96:	4630      	mov	r0, r6
 800ad98:	eb04 0903 	add.w	r9, r4, r3
 800ad9c:	f000 fe56 	bl	800ba4c <_sbrk_r>
 800ada0:	4581      	cmp	r9, r0
 800ada2:	d142      	bne.n	800ae2a <_malloc_r+0xea>
 800ada4:	6821      	ldr	r1, [r4, #0]
 800ada6:	4630      	mov	r0, r6
 800ada8:	1a6d      	subs	r5, r5, r1
 800adaa:	4629      	mov	r1, r5
 800adac:	f7ff ffa6 	bl	800acfc <sbrk_aligned>
 800adb0:	3001      	adds	r0, #1
 800adb2:	d03a      	beq.n	800ae2a <_malloc_r+0xea>
 800adb4:	6823      	ldr	r3, [r4, #0]
 800adb6:	442b      	add	r3, r5
 800adb8:	6023      	str	r3, [r4, #0]
 800adba:	f8d8 3000 	ldr.w	r3, [r8]
 800adbe:	685a      	ldr	r2, [r3, #4]
 800adc0:	bb62      	cbnz	r2, 800ae1c <_malloc_r+0xdc>
 800adc2:	f8c8 7000 	str.w	r7, [r8]
 800adc6:	e00f      	b.n	800ade8 <_malloc_r+0xa8>
 800adc8:	6822      	ldr	r2, [r4, #0]
 800adca:	1b52      	subs	r2, r2, r5
 800adcc:	d420      	bmi.n	800ae10 <_malloc_r+0xd0>
 800adce:	2a0b      	cmp	r2, #11
 800add0:	d917      	bls.n	800ae02 <_malloc_r+0xc2>
 800add2:	1961      	adds	r1, r4, r5
 800add4:	42a3      	cmp	r3, r4
 800add6:	6025      	str	r5, [r4, #0]
 800add8:	bf18      	it	ne
 800adda:	6059      	strne	r1, [r3, #4]
 800addc:	6863      	ldr	r3, [r4, #4]
 800adde:	bf08      	it	eq
 800ade0:	f8c8 1000 	streq.w	r1, [r8]
 800ade4:	5162      	str	r2, [r4, r5]
 800ade6:	604b      	str	r3, [r1, #4]
 800ade8:	4630      	mov	r0, r6
 800adea:	f000 f82f 	bl	800ae4c <__malloc_unlock>
 800adee:	f104 000b 	add.w	r0, r4, #11
 800adf2:	1d23      	adds	r3, r4, #4
 800adf4:	f020 0007 	bic.w	r0, r0, #7
 800adf8:	1ac2      	subs	r2, r0, r3
 800adfa:	bf1c      	itt	ne
 800adfc:	1a1b      	subne	r3, r3, r0
 800adfe:	50a3      	strne	r3, [r4, r2]
 800ae00:	e7af      	b.n	800ad62 <_malloc_r+0x22>
 800ae02:	6862      	ldr	r2, [r4, #4]
 800ae04:	42a3      	cmp	r3, r4
 800ae06:	bf0c      	ite	eq
 800ae08:	f8c8 2000 	streq.w	r2, [r8]
 800ae0c:	605a      	strne	r2, [r3, #4]
 800ae0e:	e7eb      	b.n	800ade8 <_malloc_r+0xa8>
 800ae10:	4623      	mov	r3, r4
 800ae12:	6864      	ldr	r4, [r4, #4]
 800ae14:	e7ae      	b.n	800ad74 <_malloc_r+0x34>
 800ae16:	463c      	mov	r4, r7
 800ae18:	687f      	ldr	r7, [r7, #4]
 800ae1a:	e7b6      	b.n	800ad8a <_malloc_r+0x4a>
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	42a3      	cmp	r3, r4
 800ae22:	d1fb      	bne.n	800ae1c <_malloc_r+0xdc>
 800ae24:	2300      	movs	r3, #0
 800ae26:	6053      	str	r3, [r2, #4]
 800ae28:	e7de      	b.n	800ade8 <_malloc_r+0xa8>
 800ae2a:	230c      	movs	r3, #12
 800ae2c:	4630      	mov	r0, r6
 800ae2e:	6033      	str	r3, [r6, #0]
 800ae30:	f000 f80c 	bl	800ae4c <__malloc_unlock>
 800ae34:	e794      	b.n	800ad60 <_malloc_r+0x20>
 800ae36:	6005      	str	r5, [r0, #0]
 800ae38:	e7d6      	b.n	800ade8 <_malloc_r+0xa8>
 800ae3a:	bf00      	nop
 800ae3c:	20003ea0 	.word	0x20003ea0

0800ae40 <__malloc_lock>:
 800ae40:	4801      	ldr	r0, [pc, #4]	@ (800ae48 <__malloc_lock+0x8>)
 800ae42:	f7ff b8a8 	b.w	8009f96 <__retarget_lock_acquire_recursive>
 800ae46:	bf00      	nop
 800ae48:	20003e98 	.word	0x20003e98

0800ae4c <__malloc_unlock>:
 800ae4c:	4801      	ldr	r0, [pc, #4]	@ (800ae54 <__malloc_unlock+0x8>)
 800ae4e:	f7ff b8a3 	b.w	8009f98 <__retarget_lock_release_recursive>
 800ae52:	bf00      	nop
 800ae54:	20003e98 	.word	0x20003e98

0800ae58 <_Balloc>:
 800ae58:	b570      	push	{r4, r5, r6, lr}
 800ae5a:	69c6      	ldr	r6, [r0, #28]
 800ae5c:	4604      	mov	r4, r0
 800ae5e:	460d      	mov	r5, r1
 800ae60:	b976      	cbnz	r6, 800ae80 <_Balloc+0x28>
 800ae62:	2010      	movs	r0, #16
 800ae64:	f7ff ff42 	bl	800acec <malloc>
 800ae68:	4602      	mov	r2, r0
 800ae6a:	61e0      	str	r0, [r4, #28]
 800ae6c:	b920      	cbnz	r0, 800ae78 <_Balloc+0x20>
 800ae6e:	4b18      	ldr	r3, [pc, #96]	@ (800aed0 <_Balloc+0x78>)
 800ae70:	216b      	movs	r1, #107	@ 0x6b
 800ae72:	4818      	ldr	r0, [pc, #96]	@ (800aed4 <_Balloc+0x7c>)
 800ae74:	f000 fe08 	bl	800ba88 <__assert_func>
 800ae78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae7c:	6006      	str	r6, [r0, #0]
 800ae7e:	60c6      	str	r6, [r0, #12]
 800ae80:	69e6      	ldr	r6, [r4, #28]
 800ae82:	68f3      	ldr	r3, [r6, #12]
 800ae84:	b183      	cbz	r3, 800aea8 <_Balloc+0x50>
 800ae86:	69e3      	ldr	r3, [r4, #28]
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae8e:	b9b8      	cbnz	r0, 800aec0 <_Balloc+0x68>
 800ae90:	2101      	movs	r1, #1
 800ae92:	4620      	mov	r0, r4
 800ae94:	fa01 f605 	lsl.w	r6, r1, r5
 800ae98:	1d72      	adds	r2, r6, #5
 800ae9a:	0092      	lsls	r2, r2, #2
 800ae9c:	f000 fe12 	bl	800bac4 <_calloc_r>
 800aea0:	b160      	cbz	r0, 800aebc <_Balloc+0x64>
 800aea2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aea6:	e00e      	b.n	800aec6 <_Balloc+0x6e>
 800aea8:	2221      	movs	r2, #33	@ 0x21
 800aeaa:	2104      	movs	r1, #4
 800aeac:	4620      	mov	r0, r4
 800aeae:	f000 fe09 	bl	800bac4 <_calloc_r>
 800aeb2:	69e3      	ldr	r3, [r4, #28]
 800aeb4:	60f0      	str	r0, [r6, #12]
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d1e4      	bne.n	800ae86 <_Balloc+0x2e>
 800aebc:	2000      	movs	r0, #0
 800aebe:	bd70      	pop	{r4, r5, r6, pc}
 800aec0:	6802      	ldr	r2, [r0, #0]
 800aec2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aec6:	2300      	movs	r3, #0
 800aec8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aecc:	e7f7      	b.n	800aebe <_Balloc+0x66>
 800aece:	bf00      	nop
 800aed0:	0800bf1d 	.word	0x0800bf1d
 800aed4:	0800bf9d 	.word	0x0800bf9d

0800aed8 <_Bfree>:
 800aed8:	b570      	push	{r4, r5, r6, lr}
 800aeda:	69c6      	ldr	r6, [r0, #28]
 800aedc:	4605      	mov	r5, r0
 800aede:	460c      	mov	r4, r1
 800aee0:	b976      	cbnz	r6, 800af00 <_Bfree+0x28>
 800aee2:	2010      	movs	r0, #16
 800aee4:	f7ff ff02 	bl	800acec <malloc>
 800aee8:	4602      	mov	r2, r0
 800aeea:	61e8      	str	r0, [r5, #28]
 800aeec:	b920      	cbnz	r0, 800aef8 <_Bfree+0x20>
 800aeee:	4b09      	ldr	r3, [pc, #36]	@ (800af14 <_Bfree+0x3c>)
 800aef0:	218f      	movs	r1, #143	@ 0x8f
 800aef2:	4809      	ldr	r0, [pc, #36]	@ (800af18 <_Bfree+0x40>)
 800aef4:	f000 fdc8 	bl	800ba88 <__assert_func>
 800aef8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aefc:	6006      	str	r6, [r0, #0]
 800aefe:	60c6      	str	r6, [r0, #12]
 800af00:	b13c      	cbz	r4, 800af12 <_Bfree+0x3a>
 800af02:	69eb      	ldr	r3, [r5, #28]
 800af04:	6862      	ldr	r2, [r4, #4]
 800af06:	68db      	ldr	r3, [r3, #12]
 800af08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af0c:	6021      	str	r1, [r4, #0]
 800af0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af12:	bd70      	pop	{r4, r5, r6, pc}
 800af14:	0800bf1d 	.word	0x0800bf1d
 800af18:	0800bf9d 	.word	0x0800bf9d

0800af1c <__multadd>:
 800af1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af20:	f101 0c14 	add.w	ip, r1, #20
 800af24:	4607      	mov	r7, r0
 800af26:	460c      	mov	r4, r1
 800af28:	461e      	mov	r6, r3
 800af2a:	690d      	ldr	r5, [r1, #16]
 800af2c:	2000      	movs	r0, #0
 800af2e:	f8dc 3000 	ldr.w	r3, [ip]
 800af32:	3001      	adds	r0, #1
 800af34:	b299      	uxth	r1, r3
 800af36:	4285      	cmp	r5, r0
 800af38:	fb02 6101 	mla	r1, r2, r1, r6
 800af3c:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800af40:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800af44:	b289      	uxth	r1, r1
 800af46:	fb02 3306 	mla	r3, r2, r6, r3
 800af4a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800af4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800af52:	f84c 1b04 	str.w	r1, [ip], #4
 800af56:	dcea      	bgt.n	800af2e <__multadd+0x12>
 800af58:	b30e      	cbz	r6, 800af9e <__multadd+0x82>
 800af5a:	68a3      	ldr	r3, [r4, #8]
 800af5c:	42ab      	cmp	r3, r5
 800af5e:	dc19      	bgt.n	800af94 <__multadd+0x78>
 800af60:	6861      	ldr	r1, [r4, #4]
 800af62:	4638      	mov	r0, r7
 800af64:	3101      	adds	r1, #1
 800af66:	f7ff ff77 	bl	800ae58 <_Balloc>
 800af6a:	4680      	mov	r8, r0
 800af6c:	b928      	cbnz	r0, 800af7a <__multadd+0x5e>
 800af6e:	4602      	mov	r2, r0
 800af70:	4b0c      	ldr	r3, [pc, #48]	@ (800afa4 <__multadd+0x88>)
 800af72:	21ba      	movs	r1, #186	@ 0xba
 800af74:	480c      	ldr	r0, [pc, #48]	@ (800afa8 <__multadd+0x8c>)
 800af76:	f000 fd87 	bl	800ba88 <__assert_func>
 800af7a:	6922      	ldr	r2, [r4, #16]
 800af7c:	f104 010c 	add.w	r1, r4, #12
 800af80:	300c      	adds	r0, #12
 800af82:	3202      	adds	r2, #2
 800af84:	0092      	lsls	r2, r2, #2
 800af86:	f000 fd71 	bl	800ba6c <memcpy>
 800af8a:	4621      	mov	r1, r4
 800af8c:	4644      	mov	r4, r8
 800af8e:	4638      	mov	r0, r7
 800af90:	f7ff ffa2 	bl	800aed8 <_Bfree>
 800af94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af98:	3501      	adds	r5, #1
 800af9a:	615e      	str	r6, [r3, #20]
 800af9c:	6125      	str	r5, [r4, #16]
 800af9e:	4620      	mov	r0, r4
 800afa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afa4:	0800bf8c 	.word	0x0800bf8c
 800afa8:	0800bf9d 	.word	0x0800bf9d

0800afac <__hi0bits>:
 800afac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800afb0:	4603      	mov	r3, r0
 800afb2:	bf36      	itet	cc
 800afb4:	0403      	lslcc	r3, r0, #16
 800afb6:	2000      	movcs	r0, #0
 800afb8:	2010      	movcc	r0, #16
 800afba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800afbe:	bf3c      	itt	cc
 800afc0:	021b      	lslcc	r3, r3, #8
 800afc2:	3008      	addcc	r0, #8
 800afc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800afc8:	bf3c      	itt	cc
 800afca:	011b      	lslcc	r3, r3, #4
 800afcc:	3004      	addcc	r0, #4
 800afce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afd2:	bf3c      	itt	cc
 800afd4:	009b      	lslcc	r3, r3, #2
 800afd6:	3002      	addcc	r0, #2
 800afd8:	2b00      	cmp	r3, #0
 800afda:	db05      	blt.n	800afe8 <__hi0bits+0x3c>
 800afdc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800afe0:	f100 0001 	add.w	r0, r0, #1
 800afe4:	bf08      	it	eq
 800afe6:	2020      	moveq	r0, #32
 800afe8:	4770      	bx	lr

0800afea <__lo0bits>:
 800afea:	6803      	ldr	r3, [r0, #0]
 800afec:	4602      	mov	r2, r0
 800afee:	f013 0007 	ands.w	r0, r3, #7
 800aff2:	d00b      	beq.n	800b00c <__lo0bits+0x22>
 800aff4:	07d9      	lsls	r1, r3, #31
 800aff6:	d421      	bmi.n	800b03c <__lo0bits+0x52>
 800aff8:	0798      	lsls	r0, r3, #30
 800affa:	bf47      	ittee	mi
 800affc:	085b      	lsrmi	r3, r3, #1
 800affe:	2001      	movmi	r0, #1
 800b000:	089b      	lsrpl	r3, r3, #2
 800b002:	2002      	movpl	r0, #2
 800b004:	bf4c      	ite	mi
 800b006:	6013      	strmi	r3, [r2, #0]
 800b008:	6013      	strpl	r3, [r2, #0]
 800b00a:	4770      	bx	lr
 800b00c:	b299      	uxth	r1, r3
 800b00e:	b909      	cbnz	r1, 800b014 <__lo0bits+0x2a>
 800b010:	0c1b      	lsrs	r3, r3, #16
 800b012:	2010      	movs	r0, #16
 800b014:	b2d9      	uxtb	r1, r3
 800b016:	b909      	cbnz	r1, 800b01c <__lo0bits+0x32>
 800b018:	3008      	adds	r0, #8
 800b01a:	0a1b      	lsrs	r3, r3, #8
 800b01c:	0719      	lsls	r1, r3, #28
 800b01e:	bf04      	itt	eq
 800b020:	091b      	lsreq	r3, r3, #4
 800b022:	3004      	addeq	r0, #4
 800b024:	0799      	lsls	r1, r3, #30
 800b026:	bf04      	itt	eq
 800b028:	089b      	lsreq	r3, r3, #2
 800b02a:	3002      	addeq	r0, #2
 800b02c:	07d9      	lsls	r1, r3, #31
 800b02e:	d403      	bmi.n	800b038 <__lo0bits+0x4e>
 800b030:	085b      	lsrs	r3, r3, #1
 800b032:	f100 0001 	add.w	r0, r0, #1
 800b036:	d003      	beq.n	800b040 <__lo0bits+0x56>
 800b038:	6013      	str	r3, [r2, #0]
 800b03a:	4770      	bx	lr
 800b03c:	2000      	movs	r0, #0
 800b03e:	4770      	bx	lr
 800b040:	2020      	movs	r0, #32
 800b042:	4770      	bx	lr

0800b044 <__i2b>:
 800b044:	b510      	push	{r4, lr}
 800b046:	460c      	mov	r4, r1
 800b048:	2101      	movs	r1, #1
 800b04a:	f7ff ff05 	bl	800ae58 <_Balloc>
 800b04e:	4602      	mov	r2, r0
 800b050:	b928      	cbnz	r0, 800b05e <__i2b+0x1a>
 800b052:	4b05      	ldr	r3, [pc, #20]	@ (800b068 <__i2b+0x24>)
 800b054:	f240 1145 	movw	r1, #325	@ 0x145
 800b058:	4804      	ldr	r0, [pc, #16]	@ (800b06c <__i2b+0x28>)
 800b05a:	f000 fd15 	bl	800ba88 <__assert_func>
 800b05e:	2301      	movs	r3, #1
 800b060:	6144      	str	r4, [r0, #20]
 800b062:	6103      	str	r3, [r0, #16]
 800b064:	bd10      	pop	{r4, pc}
 800b066:	bf00      	nop
 800b068:	0800bf8c 	.word	0x0800bf8c
 800b06c:	0800bf9d 	.word	0x0800bf9d

0800b070 <__multiply>:
 800b070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b074:	4614      	mov	r4, r2
 800b076:	690a      	ldr	r2, [r1, #16]
 800b078:	460f      	mov	r7, r1
 800b07a:	b085      	sub	sp, #20
 800b07c:	6923      	ldr	r3, [r4, #16]
 800b07e:	429a      	cmp	r2, r3
 800b080:	bfa2      	ittt	ge
 800b082:	4623      	movge	r3, r4
 800b084:	460c      	movge	r4, r1
 800b086:	461f      	movge	r7, r3
 800b088:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b08c:	68a3      	ldr	r3, [r4, #8]
 800b08e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b092:	6861      	ldr	r1, [r4, #4]
 800b094:	eb0a 0609 	add.w	r6, sl, r9
 800b098:	42b3      	cmp	r3, r6
 800b09a:	bfb8      	it	lt
 800b09c:	3101      	addlt	r1, #1
 800b09e:	f7ff fedb 	bl	800ae58 <_Balloc>
 800b0a2:	b930      	cbnz	r0, 800b0b2 <__multiply+0x42>
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	4b45      	ldr	r3, [pc, #276]	@ (800b1bc <__multiply+0x14c>)
 800b0a8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b0ac:	4844      	ldr	r0, [pc, #272]	@ (800b1c0 <__multiply+0x150>)
 800b0ae:	f000 fceb 	bl	800ba88 <__assert_func>
 800b0b2:	f100 0514 	add.w	r5, r0, #20
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b0bc:	462b      	mov	r3, r5
 800b0be:	4543      	cmp	r3, r8
 800b0c0:	d321      	bcc.n	800b106 <__multiply+0x96>
 800b0c2:	f107 0114 	add.w	r1, r7, #20
 800b0c6:	f104 0214 	add.w	r2, r4, #20
 800b0ca:	f104 0715 	add.w	r7, r4, #21
 800b0ce:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b0d2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b0d6:	9302      	str	r3, [sp, #8]
 800b0d8:	1b13      	subs	r3, r2, r4
 800b0da:	3b15      	subs	r3, #21
 800b0dc:	f023 0303 	bic.w	r3, r3, #3
 800b0e0:	3304      	adds	r3, #4
 800b0e2:	42ba      	cmp	r2, r7
 800b0e4:	bf38      	it	cc
 800b0e6:	2304      	movcc	r3, #4
 800b0e8:	9301      	str	r3, [sp, #4]
 800b0ea:	9b02      	ldr	r3, [sp, #8]
 800b0ec:	9103      	str	r1, [sp, #12]
 800b0ee:	428b      	cmp	r3, r1
 800b0f0:	d80c      	bhi.n	800b10c <__multiply+0x9c>
 800b0f2:	2e00      	cmp	r6, #0
 800b0f4:	dd03      	ble.n	800b0fe <__multiply+0x8e>
 800b0f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d05b      	beq.n	800b1b6 <__multiply+0x146>
 800b0fe:	6106      	str	r6, [r0, #16]
 800b100:	b005      	add	sp, #20
 800b102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b106:	f843 2b04 	str.w	r2, [r3], #4
 800b10a:	e7d8      	b.n	800b0be <__multiply+0x4e>
 800b10c:	f8b1 a000 	ldrh.w	sl, [r1]
 800b110:	f1ba 0f00 	cmp.w	sl, #0
 800b114:	d024      	beq.n	800b160 <__multiply+0xf0>
 800b116:	f104 0e14 	add.w	lr, r4, #20
 800b11a:	46a9      	mov	r9, r5
 800b11c:	f04f 0c00 	mov.w	ip, #0
 800b120:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b124:	f8d9 3000 	ldr.w	r3, [r9]
 800b128:	fa1f fb87 	uxth.w	fp, r7
 800b12c:	4572      	cmp	r2, lr
 800b12e:	b29b      	uxth	r3, r3
 800b130:	fb0a 330b 	mla	r3, sl, fp, r3
 800b134:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b138:	f8d9 7000 	ldr.w	r7, [r9]
 800b13c:	4463      	add	r3, ip
 800b13e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b142:	fb0a c70b 	mla	r7, sl, fp, ip
 800b146:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b150:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b154:	f849 3b04 	str.w	r3, [r9], #4
 800b158:	d8e2      	bhi.n	800b120 <__multiply+0xb0>
 800b15a:	9b01      	ldr	r3, [sp, #4]
 800b15c:	f845 c003 	str.w	ip, [r5, r3]
 800b160:	9b03      	ldr	r3, [sp, #12]
 800b162:	3104      	adds	r1, #4
 800b164:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b168:	f1b9 0f00 	cmp.w	r9, #0
 800b16c:	d021      	beq.n	800b1b2 <__multiply+0x142>
 800b16e:	682b      	ldr	r3, [r5, #0]
 800b170:	f104 0c14 	add.w	ip, r4, #20
 800b174:	46ae      	mov	lr, r5
 800b176:	f04f 0a00 	mov.w	sl, #0
 800b17a:	f8bc b000 	ldrh.w	fp, [ip]
 800b17e:	b29b      	uxth	r3, r3
 800b180:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b184:	fb09 770b 	mla	r7, r9, fp, r7
 800b188:	4457      	add	r7, sl
 800b18a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b18e:	f84e 3b04 	str.w	r3, [lr], #4
 800b192:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b196:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b19a:	f8be 3000 	ldrh.w	r3, [lr]
 800b19e:	4562      	cmp	r2, ip
 800b1a0:	fb09 330a 	mla	r3, r9, sl, r3
 800b1a4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b1a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b1ac:	d8e5      	bhi.n	800b17a <__multiply+0x10a>
 800b1ae:	9f01      	ldr	r7, [sp, #4]
 800b1b0:	51eb      	str	r3, [r5, r7]
 800b1b2:	3504      	adds	r5, #4
 800b1b4:	e799      	b.n	800b0ea <__multiply+0x7a>
 800b1b6:	3e01      	subs	r6, #1
 800b1b8:	e79b      	b.n	800b0f2 <__multiply+0x82>
 800b1ba:	bf00      	nop
 800b1bc:	0800bf8c 	.word	0x0800bf8c
 800b1c0:	0800bf9d 	.word	0x0800bf9d

0800b1c4 <__pow5mult>:
 800b1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1c8:	4615      	mov	r5, r2
 800b1ca:	f012 0203 	ands.w	r2, r2, #3
 800b1ce:	4607      	mov	r7, r0
 800b1d0:	460e      	mov	r6, r1
 800b1d2:	d007      	beq.n	800b1e4 <__pow5mult+0x20>
 800b1d4:	3a01      	subs	r2, #1
 800b1d6:	4c25      	ldr	r4, [pc, #148]	@ (800b26c <__pow5mult+0xa8>)
 800b1d8:	2300      	movs	r3, #0
 800b1da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b1de:	f7ff fe9d 	bl	800af1c <__multadd>
 800b1e2:	4606      	mov	r6, r0
 800b1e4:	10ad      	asrs	r5, r5, #2
 800b1e6:	d03d      	beq.n	800b264 <__pow5mult+0xa0>
 800b1e8:	69fc      	ldr	r4, [r7, #28]
 800b1ea:	b97c      	cbnz	r4, 800b20c <__pow5mult+0x48>
 800b1ec:	2010      	movs	r0, #16
 800b1ee:	f7ff fd7d 	bl	800acec <malloc>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	61f8      	str	r0, [r7, #28]
 800b1f6:	b928      	cbnz	r0, 800b204 <__pow5mult+0x40>
 800b1f8:	4b1d      	ldr	r3, [pc, #116]	@ (800b270 <__pow5mult+0xac>)
 800b1fa:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b1fe:	481d      	ldr	r0, [pc, #116]	@ (800b274 <__pow5mult+0xb0>)
 800b200:	f000 fc42 	bl	800ba88 <__assert_func>
 800b204:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b208:	6004      	str	r4, [r0, #0]
 800b20a:	60c4      	str	r4, [r0, #12]
 800b20c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b210:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b214:	b94c      	cbnz	r4, 800b22a <__pow5mult+0x66>
 800b216:	f240 2171 	movw	r1, #625	@ 0x271
 800b21a:	4638      	mov	r0, r7
 800b21c:	f7ff ff12 	bl	800b044 <__i2b>
 800b220:	2300      	movs	r3, #0
 800b222:	4604      	mov	r4, r0
 800b224:	f8c8 0008 	str.w	r0, [r8, #8]
 800b228:	6003      	str	r3, [r0, #0]
 800b22a:	f04f 0900 	mov.w	r9, #0
 800b22e:	07eb      	lsls	r3, r5, #31
 800b230:	d50a      	bpl.n	800b248 <__pow5mult+0x84>
 800b232:	4631      	mov	r1, r6
 800b234:	4622      	mov	r2, r4
 800b236:	4638      	mov	r0, r7
 800b238:	f7ff ff1a 	bl	800b070 <__multiply>
 800b23c:	4680      	mov	r8, r0
 800b23e:	4631      	mov	r1, r6
 800b240:	4638      	mov	r0, r7
 800b242:	4646      	mov	r6, r8
 800b244:	f7ff fe48 	bl	800aed8 <_Bfree>
 800b248:	106d      	asrs	r5, r5, #1
 800b24a:	d00b      	beq.n	800b264 <__pow5mult+0xa0>
 800b24c:	6820      	ldr	r0, [r4, #0]
 800b24e:	b938      	cbnz	r0, 800b260 <__pow5mult+0x9c>
 800b250:	4622      	mov	r2, r4
 800b252:	4621      	mov	r1, r4
 800b254:	4638      	mov	r0, r7
 800b256:	f7ff ff0b 	bl	800b070 <__multiply>
 800b25a:	6020      	str	r0, [r4, #0]
 800b25c:	f8c0 9000 	str.w	r9, [r0]
 800b260:	4604      	mov	r4, r0
 800b262:	e7e4      	b.n	800b22e <__pow5mult+0x6a>
 800b264:	4630      	mov	r0, r6
 800b266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b26a:	bf00      	nop
 800b26c:	0800bff8 	.word	0x0800bff8
 800b270:	0800bf1d 	.word	0x0800bf1d
 800b274:	0800bf9d 	.word	0x0800bf9d

0800b278 <__lshift>:
 800b278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b27c:	460c      	mov	r4, r1
 800b27e:	4607      	mov	r7, r0
 800b280:	4691      	mov	r9, r2
 800b282:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b286:	6923      	ldr	r3, [r4, #16]
 800b288:	6849      	ldr	r1, [r1, #4]
 800b28a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b28e:	68a3      	ldr	r3, [r4, #8]
 800b290:	f108 0601 	add.w	r6, r8, #1
 800b294:	42b3      	cmp	r3, r6
 800b296:	db0b      	blt.n	800b2b0 <__lshift+0x38>
 800b298:	4638      	mov	r0, r7
 800b29a:	f7ff fddd 	bl	800ae58 <_Balloc>
 800b29e:	4605      	mov	r5, r0
 800b2a0:	b948      	cbnz	r0, 800b2b6 <__lshift+0x3e>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	4b28      	ldr	r3, [pc, #160]	@ (800b348 <__lshift+0xd0>)
 800b2a6:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b2aa:	4828      	ldr	r0, [pc, #160]	@ (800b34c <__lshift+0xd4>)
 800b2ac:	f000 fbec 	bl	800ba88 <__assert_func>
 800b2b0:	3101      	adds	r1, #1
 800b2b2:	005b      	lsls	r3, r3, #1
 800b2b4:	e7ee      	b.n	800b294 <__lshift+0x1c>
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	f100 0114 	add.w	r1, r0, #20
 800b2bc:	f100 0210 	add.w	r2, r0, #16
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	4553      	cmp	r3, sl
 800b2c4:	db33      	blt.n	800b32e <__lshift+0xb6>
 800b2c6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b2ca:	f104 0314 	add.w	r3, r4, #20
 800b2ce:	6920      	ldr	r0, [r4, #16]
 800b2d0:	f019 091f 	ands.w	r9, r9, #31
 800b2d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b2d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b2dc:	d02b      	beq.n	800b336 <__lshift+0xbe>
 800b2de:	f1c9 0e20 	rsb	lr, r9, #32
 800b2e2:	468a      	mov	sl, r1
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	6818      	ldr	r0, [r3, #0]
 800b2e8:	fa00 f009 	lsl.w	r0, r0, r9
 800b2ec:	4310      	orrs	r0, r2
 800b2ee:	f84a 0b04 	str.w	r0, [sl], #4
 800b2f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2f6:	459c      	cmp	ip, r3
 800b2f8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b2fc:	d8f3      	bhi.n	800b2e6 <__lshift+0x6e>
 800b2fe:	ebac 0304 	sub.w	r3, ip, r4
 800b302:	f104 0015 	add.w	r0, r4, #21
 800b306:	3b15      	subs	r3, #21
 800b308:	f023 0303 	bic.w	r3, r3, #3
 800b30c:	3304      	adds	r3, #4
 800b30e:	4584      	cmp	ip, r0
 800b310:	bf38      	it	cc
 800b312:	2304      	movcc	r3, #4
 800b314:	50ca      	str	r2, [r1, r3]
 800b316:	b10a      	cbz	r2, 800b31c <__lshift+0xa4>
 800b318:	f108 0602 	add.w	r6, r8, #2
 800b31c:	3e01      	subs	r6, #1
 800b31e:	4638      	mov	r0, r7
 800b320:	4621      	mov	r1, r4
 800b322:	612e      	str	r6, [r5, #16]
 800b324:	f7ff fdd8 	bl	800aed8 <_Bfree>
 800b328:	4628      	mov	r0, r5
 800b32a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b32e:	3301      	adds	r3, #1
 800b330:	f842 0f04 	str.w	r0, [r2, #4]!
 800b334:	e7c5      	b.n	800b2c2 <__lshift+0x4a>
 800b336:	3904      	subs	r1, #4
 800b338:	f853 2b04 	ldr.w	r2, [r3], #4
 800b33c:	459c      	cmp	ip, r3
 800b33e:	f841 2f04 	str.w	r2, [r1, #4]!
 800b342:	d8f9      	bhi.n	800b338 <__lshift+0xc0>
 800b344:	e7ea      	b.n	800b31c <__lshift+0xa4>
 800b346:	bf00      	nop
 800b348:	0800bf8c 	.word	0x0800bf8c
 800b34c:	0800bf9d 	.word	0x0800bf9d

0800b350 <__mcmp>:
 800b350:	4603      	mov	r3, r0
 800b352:	690a      	ldr	r2, [r1, #16]
 800b354:	6900      	ldr	r0, [r0, #16]
 800b356:	1a80      	subs	r0, r0, r2
 800b358:	b530      	push	{r4, r5, lr}
 800b35a:	d10e      	bne.n	800b37a <__mcmp+0x2a>
 800b35c:	3314      	adds	r3, #20
 800b35e:	3114      	adds	r1, #20
 800b360:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b364:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b368:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b36c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b370:	4295      	cmp	r5, r2
 800b372:	d003      	beq.n	800b37c <__mcmp+0x2c>
 800b374:	d205      	bcs.n	800b382 <__mcmp+0x32>
 800b376:	f04f 30ff 	mov.w	r0, #4294967295
 800b37a:	bd30      	pop	{r4, r5, pc}
 800b37c:	42a3      	cmp	r3, r4
 800b37e:	d3f3      	bcc.n	800b368 <__mcmp+0x18>
 800b380:	e7fb      	b.n	800b37a <__mcmp+0x2a>
 800b382:	2001      	movs	r0, #1
 800b384:	e7f9      	b.n	800b37a <__mcmp+0x2a>
	...

0800b388 <__mdiff>:
 800b388:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b38c:	4689      	mov	r9, r1
 800b38e:	4606      	mov	r6, r0
 800b390:	4611      	mov	r1, r2
 800b392:	4614      	mov	r4, r2
 800b394:	4648      	mov	r0, r9
 800b396:	f7ff ffdb 	bl	800b350 <__mcmp>
 800b39a:	1e05      	subs	r5, r0, #0
 800b39c:	d112      	bne.n	800b3c4 <__mdiff+0x3c>
 800b39e:	4629      	mov	r1, r5
 800b3a0:	4630      	mov	r0, r6
 800b3a2:	f7ff fd59 	bl	800ae58 <_Balloc>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	b928      	cbnz	r0, 800b3b6 <__mdiff+0x2e>
 800b3aa:	4b41      	ldr	r3, [pc, #260]	@ (800b4b0 <__mdiff+0x128>)
 800b3ac:	f240 2137 	movw	r1, #567	@ 0x237
 800b3b0:	4840      	ldr	r0, [pc, #256]	@ (800b4b4 <__mdiff+0x12c>)
 800b3b2:	f000 fb69 	bl	800ba88 <__assert_func>
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b3bc:	4610      	mov	r0, r2
 800b3be:	b003      	add	sp, #12
 800b3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3c4:	bfbc      	itt	lt
 800b3c6:	464b      	movlt	r3, r9
 800b3c8:	46a1      	movlt	r9, r4
 800b3ca:	4630      	mov	r0, r6
 800b3cc:	bfb8      	it	lt
 800b3ce:	2501      	movlt	r5, #1
 800b3d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b3d4:	bfb4      	ite	lt
 800b3d6:	461c      	movlt	r4, r3
 800b3d8:	2500      	movge	r5, #0
 800b3da:	f7ff fd3d 	bl	800ae58 <_Balloc>
 800b3de:	4602      	mov	r2, r0
 800b3e0:	b918      	cbnz	r0, 800b3ea <__mdiff+0x62>
 800b3e2:	4b33      	ldr	r3, [pc, #204]	@ (800b4b0 <__mdiff+0x128>)
 800b3e4:	f240 2145 	movw	r1, #581	@ 0x245
 800b3e8:	e7e2      	b.n	800b3b0 <__mdiff+0x28>
 800b3ea:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b3ee:	f104 0e14 	add.w	lr, r4, #20
 800b3f2:	6926      	ldr	r6, [r4, #16]
 800b3f4:	f100 0b14 	add.w	fp, r0, #20
 800b3f8:	60c5      	str	r5, [r0, #12]
 800b3fa:	f109 0514 	add.w	r5, r9, #20
 800b3fe:	f109 0310 	add.w	r3, r9, #16
 800b402:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b406:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b40a:	46d9      	mov	r9, fp
 800b40c:	f04f 0c00 	mov.w	ip, #0
 800b410:	9301      	str	r3, [sp, #4]
 800b412:	9b01      	ldr	r3, [sp, #4]
 800b414:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b418:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b41c:	4576      	cmp	r6, lr
 800b41e:	9301      	str	r3, [sp, #4]
 800b420:	fa1f f38a 	uxth.w	r3, sl
 800b424:	4619      	mov	r1, r3
 800b426:	b283      	uxth	r3, r0
 800b428:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800b42c:	eba1 0303 	sub.w	r3, r1, r3
 800b430:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b434:	4463      	add	r3, ip
 800b436:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b43a:	b29b      	uxth	r3, r3
 800b43c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b440:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b444:	f849 3b04 	str.w	r3, [r9], #4
 800b448:	d8e3      	bhi.n	800b412 <__mdiff+0x8a>
 800b44a:	1b33      	subs	r3, r6, r4
 800b44c:	3415      	adds	r4, #21
 800b44e:	3b15      	subs	r3, #21
 800b450:	f023 0303 	bic.w	r3, r3, #3
 800b454:	3304      	adds	r3, #4
 800b456:	42a6      	cmp	r6, r4
 800b458:	bf38      	it	cc
 800b45a:	2304      	movcc	r3, #4
 800b45c:	441d      	add	r5, r3
 800b45e:	445b      	add	r3, fp
 800b460:	462c      	mov	r4, r5
 800b462:	461e      	mov	r6, r3
 800b464:	4544      	cmp	r4, r8
 800b466:	d30e      	bcc.n	800b486 <__mdiff+0xfe>
 800b468:	f108 0103 	add.w	r1, r8, #3
 800b46c:	1b49      	subs	r1, r1, r5
 800b46e:	3d03      	subs	r5, #3
 800b470:	f021 0103 	bic.w	r1, r1, #3
 800b474:	45a8      	cmp	r8, r5
 800b476:	bf38      	it	cc
 800b478:	2100      	movcc	r1, #0
 800b47a:	440b      	add	r3, r1
 800b47c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b480:	b199      	cbz	r1, 800b4aa <__mdiff+0x122>
 800b482:	6117      	str	r7, [r2, #16]
 800b484:	e79a      	b.n	800b3bc <__mdiff+0x34>
 800b486:	f854 1b04 	ldr.w	r1, [r4], #4
 800b48a:	46e6      	mov	lr, ip
 800b48c:	fa1f fc81 	uxth.w	ip, r1
 800b490:	0c08      	lsrs	r0, r1, #16
 800b492:	4471      	add	r1, lr
 800b494:	44f4      	add	ip, lr
 800b496:	b289      	uxth	r1, r1
 800b498:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b49c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b4a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b4a4:	f846 1b04 	str.w	r1, [r6], #4
 800b4a8:	e7dc      	b.n	800b464 <__mdiff+0xdc>
 800b4aa:	3f01      	subs	r7, #1
 800b4ac:	e7e6      	b.n	800b47c <__mdiff+0xf4>
 800b4ae:	bf00      	nop
 800b4b0:	0800bf8c 	.word	0x0800bf8c
 800b4b4:	0800bf9d 	.word	0x0800bf9d

0800b4b8 <__d2b>:
 800b4b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b4bc:	460f      	mov	r7, r1
 800b4be:	2101      	movs	r1, #1
 800b4c0:	4616      	mov	r6, r2
 800b4c2:	ec59 8b10 	vmov	r8, r9, d0
 800b4c6:	f7ff fcc7 	bl	800ae58 <_Balloc>
 800b4ca:	4604      	mov	r4, r0
 800b4cc:	b930      	cbnz	r0, 800b4dc <__d2b+0x24>
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	4b23      	ldr	r3, [pc, #140]	@ (800b560 <__d2b+0xa8>)
 800b4d2:	f240 310f 	movw	r1, #783	@ 0x30f
 800b4d6:	4823      	ldr	r0, [pc, #140]	@ (800b564 <__d2b+0xac>)
 800b4d8:	f000 fad6 	bl	800ba88 <__assert_func>
 800b4dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b4e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b4e4:	b10d      	cbz	r5, 800b4ea <__d2b+0x32>
 800b4e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b4ea:	9301      	str	r3, [sp, #4]
 800b4ec:	f1b8 0300 	subs.w	r3, r8, #0
 800b4f0:	d023      	beq.n	800b53a <__d2b+0x82>
 800b4f2:	4668      	mov	r0, sp
 800b4f4:	9300      	str	r3, [sp, #0]
 800b4f6:	f7ff fd78 	bl	800afea <__lo0bits>
 800b4fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b4fe:	b1d0      	cbz	r0, 800b536 <__d2b+0x7e>
 800b500:	f1c0 0320 	rsb	r3, r0, #32
 800b504:	fa02 f303 	lsl.w	r3, r2, r3
 800b508:	40c2      	lsrs	r2, r0
 800b50a:	430b      	orrs	r3, r1
 800b50c:	9201      	str	r2, [sp, #4]
 800b50e:	6163      	str	r3, [r4, #20]
 800b510:	9b01      	ldr	r3, [sp, #4]
 800b512:	2b00      	cmp	r3, #0
 800b514:	61a3      	str	r3, [r4, #24]
 800b516:	bf0c      	ite	eq
 800b518:	2201      	moveq	r2, #1
 800b51a:	2202      	movne	r2, #2
 800b51c:	6122      	str	r2, [r4, #16]
 800b51e:	b1a5      	cbz	r5, 800b54a <__d2b+0x92>
 800b520:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b524:	4405      	add	r5, r0
 800b526:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b52a:	603d      	str	r5, [r7, #0]
 800b52c:	6030      	str	r0, [r6, #0]
 800b52e:	4620      	mov	r0, r4
 800b530:	b003      	add	sp, #12
 800b532:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b536:	6161      	str	r1, [r4, #20]
 800b538:	e7ea      	b.n	800b510 <__d2b+0x58>
 800b53a:	a801      	add	r0, sp, #4
 800b53c:	f7ff fd55 	bl	800afea <__lo0bits>
 800b540:	9b01      	ldr	r3, [sp, #4]
 800b542:	3020      	adds	r0, #32
 800b544:	2201      	movs	r2, #1
 800b546:	6163      	str	r3, [r4, #20]
 800b548:	e7e8      	b.n	800b51c <__d2b+0x64>
 800b54a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b54e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b552:	6038      	str	r0, [r7, #0]
 800b554:	6918      	ldr	r0, [r3, #16]
 800b556:	f7ff fd29 	bl	800afac <__hi0bits>
 800b55a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b55e:	e7e5      	b.n	800b52c <__d2b+0x74>
 800b560:	0800bf8c 	.word	0x0800bf8c
 800b564:	0800bf9d 	.word	0x0800bf9d

0800b568 <__sfputc_r>:
 800b568:	6893      	ldr	r3, [r2, #8]
 800b56a:	3b01      	subs	r3, #1
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	6093      	str	r3, [r2, #8]
 800b570:	b410      	push	{r4}
 800b572:	da08      	bge.n	800b586 <__sfputc_r+0x1e>
 800b574:	6994      	ldr	r4, [r2, #24]
 800b576:	42a3      	cmp	r3, r4
 800b578:	db01      	blt.n	800b57e <__sfputc_r+0x16>
 800b57a:	290a      	cmp	r1, #10
 800b57c:	d103      	bne.n	800b586 <__sfputc_r+0x1e>
 800b57e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b582:	f7fe bbf6 	b.w	8009d72 <__swbuf_r>
 800b586:	6813      	ldr	r3, [r2, #0]
 800b588:	1c58      	adds	r0, r3, #1
 800b58a:	6010      	str	r0, [r2, #0]
 800b58c:	4608      	mov	r0, r1
 800b58e:	7019      	strb	r1, [r3, #0]
 800b590:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b594:	4770      	bx	lr

0800b596 <__sfputs_r>:
 800b596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b598:	4606      	mov	r6, r0
 800b59a:	460f      	mov	r7, r1
 800b59c:	4614      	mov	r4, r2
 800b59e:	18d5      	adds	r5, r2, r3
 800b5a0:	42ac      	cmp	r4, r5
 800b5a2:	d101      	bne.n	800b5a8 <__sfputs_r+0x12>
 800b5a4:	2000      	movs	r0, #0
 800b5a6:	e007      	b.n	800b5b8 <__sfputs_r+0x22>
 800b5a8:	463a      	mov	r2, r7
 800b5aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ae:	4630      	mov	r0, r6
 800b5b0:	f7ff ffda 	bl	800b568 <__sfputc_r>
 800b5b4:	1c43      	adds	r3, r0, #1
 800b5b6:	d1f3      	bne.n	800b5a0 <__sfputs_r+0xa>
 800b5b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b5bc <_vfiprintf_r>:
 800b5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c0:	460d      	mov	r5, r1
 800b5c2:	b09d      	sub	sp, #116	@ 0x74
 800b5c4:	4614      	mov	r4, r2
 800b5c6:	4698      	mov	r8, r3
 800b5c8:	4606      	mov	r6, r0
 800b5ca:	b118      	cbz	r0, 800b5d4 <_vfiprintf_r+0x18>
 800b5cc:	6a03      	ldr	r3, [r0, #32]
 800b5ce:	b90b      	cbnz	r3, 800b5d4 <_vfiprintf_r+0x18>
 800b5d0:	f7fe fae6 	bl	8009ba0 <__sinit>
 800b5d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5d6:	07d9      	lsls	r1, r3, #31
 800b5d8:	d405      	bmi.n	800b5e6 <_vfiprintf_r+0x2a>
 800b5da:	89ab      	ldrh	r3, [r5, #12]
 800b5dc:	059a      	lsls	r2, r3, #22
 800b5de:	d402      	bmi.n	800b5e6 <_vfiprintf_r+0x2a>
 800b5e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5e2:	f7fe fcd8 	bl	8009f96 <__retarget_lock_acquire_recursive>
 800b5e6:	89ab      	ldrh	r3, [r5, #12]
 800b5e8:	071b      	lsls	r3, r3, #28
 800b5ea:	d501      	bpl.n	800b5f0 <_vfiprintf_r+0x34>
 800b5ec:	692b      	ldr	r3, [r5, #16]
 800b5ee:	b99b      	cbnz	r3, 800b618 <_vfiprintf_r+0x5c>
 800b5f0:	4629      	mov	r1, r5
 800b5f2:	4630      	mov	r0, r6
 800b5f4:	f7fe fbfc 	bl	8009df0 <__swsetup_r>
 800b5f8:	b170      	cbz	r0, 800b618 <_vfiprintf_r+0x5c>
 800b5fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5fc:	07dc      	lsls	r4, r3, #31
 800b5fe:	d504      	bpl.n	800b60a <_vfiprintf_r+0x4e>
 800b600:	f04f 30ff 	mov.w	r0, #4294967295
 800b604:	b01d      	add	sp, #116	@ 0x74
 800b606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b60a:	89ab      	ldrh	r3, [r5, #12]
 800b60c:	0598      	lsls	r0, r3, #22
 800b60e:	d4f7      	bmi.n	800b600 <_vfiprintf_r+0x44>
 800b610:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b612:	f7fe fcc1 	bl	8009f98 <__retarget_lock_release_recursive>
 800b616:	e7f3      	b.n	800b600 <_vfiprintf_r+0x44>
 800b618:	2300      	movs	r3, #0
 800b61a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b61e:	f04f 0901 	mov.w	r9, #1
 800b622:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800b7d8 <_vfiprintf_r+0x21c>
 800b626:	9309      	str	r3, [sp, #36]	@ 0x24
 800b628:	2320      	movs	r3, #32
 800b62a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b62e:	2330      	movs	r3, #48	@ 0x30
 800b630:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b634:	4623      	mov	r3, r4
 800b636:	469a      	mov	sl, r3
 800b638:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b63c:	b10a      	cbz	r2, 800b642 <_vfiprintf_r+0x86>
 800b63e:	2a25      	cmp	r2, #37	@ 0x25
 800b640:	d1f9      	bne.n	800b636 <_vfiprintf_r+0x7a>
 800b642:	ebba 0b04 	subs.w	fp, sl, r4
 800b646:	d00b      	beq.n	800b660 <_vfiprintf_r+0xa4>
 800b648:	465b      	mov	r3, fp
 800b64a:	4622      	mov	r2, r4
 800b64c:	4629      	mov	r1, r5
 800b64e:	4630      	mov	r0, r6
 800b650:	f7ff ffa1 	bl	800b596 <__sfputs_r>
 800b654:	3001      	adds	r0, #1
 800b656:	f000 80a7 	beq.w	800b7a8 <_vfiprintf_r+0x1ec>
 800b65a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b65c:	445a      	add	r2, fp
 800b65e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b660:	f89a 3000 	ldrb.w	r3, [sl]
 800b664:	2b00      	cmp	r3, #0
 800b666:	f000 809f 	beq.w	800b7a8 <_vfiprintf_r+0x1ec>
 800b66a:	2300      	movs	r3, #0
 800b66c:	f04f 32ff 	mov.w	r2, #4294967295
 800b670:	f10a 0a01 	add.w	sl, sl, #1
 800b674:	9304      	str	r3, [sp, #16]
 800b676:	9307      	str	r3, [sp, #28]
 800b678:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b67c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b67e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b682:	4654      	mov	r4, sl
 800b684:	2205      	movs	r2, #5
 800b686:	4854      	ldr	r0, [pc, #336]	@ (800b7d8 <_vfiprintf_r+0x21c>)
 800b688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b68c:	f7fe fc85 	bl	8009f9a <memchr>
 800b690:	9a04      	ldr	r2, [sp, #16]
 800b692:	b9d8      	cbnz	r0, 800b6cc <_vfiprintf_r+0x110>
 800b694:	06d1      	lsls	r1, r2, #27
 800b696:	bf44      	itt	mi
 800b698:	2320      	movmi	r3, #32
 800b69a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b69e:	0713      	lsls	r3, r2, #28
 800b6a0:	bf44      	itt	mi
 800b6a2:	232b      	movmi	r3, #43	@ 0x2b
 800b6a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6a8:	f89a 3000 	ldrb.w	r3, [sl]
 800b6ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6ae:	d015      	beq.n	800b6dc <_vfiprintf_r+0x120>
 800b6b0:	9a07      	ldr	r2, [sp, #28]
 800b6b2:	4654      	mov	r4, sl
 800b6b4:	2000      	movs	r0, #0
 800b6b6:	f04f 0c0a 	mov.w	ip, #10
 800b6ba:	4621      	mov	r1, r4
 800b6bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6c0:	3b30      	subs	r3, #48	@ 0x30
 800b6c2:	2b09      	cmp	r3, #9
 800b6c4:	d94b      	bls.n	800b75e <_vfiprintf_r+0x1a2>
 800b6c6:	b1b0      	cbz	r0, 800b6f6 <_vfiprintf_r+0x13a>
 800b6c8:	9207      	str	r2, [sp, #28]
 800b6ca:	e014      	b.n	800b6f6 <_vfiprintf_r+0x13a>
 800b6cc:	eba0 0308 	sub.w	r3, r0, r8
 800b6d0:	46a2      	mov	sl, r4
 800b6d2:	fa09 f303 	lsl.w	r3, r9, r3
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	9304      	str	r3, [sp, #16]
 800b6da:	e7d2      	b.n	800b682 <_vfiprintf_r+0xc6>
 800b6dc:	9b03      	ldr	r3, [sp, #12]
 800b6de:	1d19      	adds	r1, r3, #4
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	9103      	str	r1, [sp, #12]
 800b6e6:	bfbb      	ittet	lt
 800b6e8:	425b      	neglt	r3, r3
 800b6ea:	f042 0202 	orrlt.w	r2, r2, #2
 800b6ee:	9307      	strge	r3, [sp, #28]
 800b6f0:	9307      	strlt	r3, [sp, #28]
 800b6f2:	bfb8      	it	lt
 800b6f4:	9204      	strlt	r2, [sp, #16]
 800b6f6:	7823      	ldrb	r3, [r4, #0]
 800b6f8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b6fa:	d10a      	bne.n	800b712 <_vfiprintf_r+0x156>
 800b6fc:	7863      	ldrb	r3, [r4, #1]
 800b6fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800b700:	d132      	bne.n	800b768 <_vfiprintf_r+0x1ac>
 800b702:	9b03      	ldr	r3, [sp, #12]
 800b704:	3402      	adds	r4, #2
 800b706:	1d1a      	adds	r2, r3, #4
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b70e:	9203      	str	r2, [sp, #12]
 800b710:	9305      	str	r3, [sp, #20]
 800b712:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b7e8 <_vfiprintf_r+0x22c>
 800b716:	2203      	movs	r2, #3
 800b718:	7821      	ldrb	r1, [r4, #0]
 800b71a:	4650      	mov	r0, sl
 800b71c:	f7fe fc3d 	bl	8009f9a <memchr>
 800b720:	b138      	cbz	r0, 800b732 <_vfiprintf_r+0x176>
 800b722:	eba0 000a 	sub.w	r0, r0, sl
 800b726:	2240      	movs	r2, #64	@ 0x40
 800b728:	9b04      	ldr	r3, [sp, #16]
 800b72a:	3401      	adds	r4, #1
 800b72c:	4082      	lsls	r2, r0
 800b72e:	4313      	orrs	r3, r2
 800b730:	9304      	str	r3, [sp, #16]
 800b732:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b736:	2206      	movs	r2, #6
 800b738:	4828      	ldr	r0, [pc, #160]	@ (800b7dc <_vfiprintf_r+0x220>)
 800b73a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b73e:	f7fe fc2c 	bl	8009f9a <memchr>
 800b742:	2800      	cmp	r0, #0
 800b744:	d03f      	beq.n	800b7c6 <_vfiprintf_r+0x20a>
 800b746:	4b26      	ldr	r3, [pc, #152]	@ (800b7e0 <_vfiprintf_r+0x224>)
 800b748:	bb1b      	cbnz	r3, 800b792 <_vfiprintf_r+0x1d6>
 800b74a:	9b03      	ldr	r3, [sp, #12]
 800b74c:	3307      	adds	r3, #7
 800b74e:	f023 0307 	bic.w	r3, r3, #7
 800b752:	3308      	adds	r3, #8
 800b754:	9303      	str	r3, [sp, #12]
 800b756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b758:	443b      	add	r3, r7
 800b75a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b75c:	e76a      	b.n	800b634 <_vfiprintf_r+0x78>
 800b75e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b762:	460c      	mov	r4, r1
 800b764:	2001      	movs	r0, #1
 800b766:	e7a8      	b.n	800b6ba <_vfiprintf_r+0xfe>
 800b768:	2300      	movs	r3, #0
 800b76a:	3401      	adds	r4, #1
 800b76c:	f04f 0c0a 	mov.w	ip, #10
 800b770:	4619      	mov	r1, r3
 800b772:	9305      	str	r3, [sp, #20]
 800b774:	4620      	mov	r0, r4
 800b776:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b77a:	3a30      	subs	r2, #48	@ 0x30
 800b77c:	2a09      	cmp	r2, #9
 800b77e:	d903      	bls.n	800b788 <_vfiprintf_r+0x1cc>
 800b780:	2b00      	cmp	r3, #0
 800b782:	d0c6      	beq.n	800b712 <_vfiprintf_r+0x156>
 800b784:	9105      	str	r1, [sp, #20]
 800b786:	e7c4      	b.n	800b712 <_vfiprintf_r+0x156>
 800b788:	fb0c 2101 	mla	r1, ip, r1, r2
 800b78c:	4604      	mov	r4, r0
 800b78e:	2301      	movs	r3, #1
 800b790:	e7f0      	b.n	800b774 <_vfiprintf_r+0x1b8>
 800b792:	ab03      	add	r3, sp, #12
 800b794:	462a      	mov	r2, r5
 800b796:	a904      	add	r1, sp, #16
 800b798:	4630      	mov	r0, r6
 800b79a:	9300      	str	r3, [sp, #0]
 800b79c:	4b11      	ldr	r3, [pc, #68]	@ (800b7e4 <_vfiprintf_r+0x228>)
 800b79e:	f7fd fdb7 	bl	8009310 <_printf_float>
 800b7a2:	4607      	mov	r7, r0
 800b7a4:	1c78      	adds	r0, r7, #1
 800b7a6:	d1d6      	bne.n	800b756 <_vfiprintf_r+0x19a>
 800b7a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7aa:	07d9      	lsls	r1, r3, #31
 800b7ac:	d405      	bmi.n	800b7ba <_vfiprintf_r+0x1fe>
 800b7ae:	89ab      	ldrh	r3, [r5, #12]
 800b7b0:	059a      	lsls	r2, r3, #22
 800b7b2:	d402      	bmi.n	800b7ba <_vfiprintf_r+0x1fe>
 800b7b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7b6:	f7fe fbef 	bl	8009f98 <__retarget_lock_release_recursive>
 800b7ba:	89ab      	ldrh	r3, [r5, #12]
 800b7bc:	065b      	lsls	r3, r3, #25
 800b7be:	f53f af1f 	bmi.w	800b600 <_vfiprintf_r+0x44>
 800b7c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b7c4:	e71e      	b.n	800b604 <_vfiprintf_r+0x48>
 800b7c6:	ab03      	add	r3, sp, #12
 800b7c8:	462a      	mov	r2, r5
 800b7ca:	a904      	add	r1, sp, #16
 800b7cc:	4630      	mov	r0, r6
 800b7ce:	9300      	str	r3, [sp, #0]
 800b7d0:	4b04      	ldr	r3, [pc, #16]	@ (800b7e4 <_vfiprintf_r+0x228>)
 800b7d2:	f7fe f839 	bl	8009848 <_printf_i>
 800b7d6:	e7e4      	b.n	800b7a2 <_vfiprintf_r+0x1e6>
 800b7d8:	0800c0f8 	.word	0x0800c0f8
 800b7dc:	0800c102 	.word	0x0800c102
 800b7e0:	08009311 	.word	0x08009311
 800b7e4:	0800b597 	.word	0x0800b597
 800b7e8:	0800c0fe 	.word	0x0800c0fe

0800b7ec <__sflush_r>:
 800b7ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f4:	0716      	lsls	r6, r2, #28
 800b7f6:	4605      	mov	r5, r0
 800b7f8:	460c      	mov	r4, r1
 800b7fa:	d454      	bmi.n	800b8a6 <__sflush_r+0xba>
 800b7fc:	684b      	ldr	r3, [r1, #4]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	dc02      	bgt.n	800b808 <__sflush_r+0x1c>
 800b802:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b804:	2b00      	cmp	r3, #0
 800b806:	dd48      	ble.n	800b89a <__sflush_r+0xae>
 800b808:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b80a:	2e00      	cmp	r6, #0
 800b80c:	d045      	beq.n	800b89a <__sflush_r+0xae>
 800b80e:	2300      	movs	r3, #0
 800b810:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b814:	682f      	ldr	r7, [r5, #0]
 800b816:	6a21      	ldr	r1, [r4, #32]
 800b818:	602b      	str	r3, [r5, #0]
 800b81a:	d030      	beq.n	800b87e <__sflush_r+0x92>
 800b81c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b81e:	89a3      	ldrh	r3, [r4, #12]
 800b820:	0759      	lsls	r1, r3, #29
 800b822:	d505      	bpl.n	800b830 <__sflush_r+0x44>
 800b824:	6863      	ldr	r3, [r4, #4]
 800b826:	1ad2      	subs	r2, r2, r3
 800b828:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b82a:	b10b      	cbz	r3, 800b830 <__sflush_r+0x44>
 800b82c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b82e:	1ad2      	subs	r2, r2, r3
 800b830:	2300      	movs	r3, #0
 800b832:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b834:	6a21      	ldr	r1, [r4, #32]
 800b836:	4628      	mov	r0, r5
 800b838:	47b0      	blx	r6
 800b83a:	1c43      	adds	r3, r0, #1
 800b83c:	89a3      	ldrh	r3, [r4, #12]
 800b83e:	d106      	bne.n	800b84e <__sflush_r+0x62>
 800b840:	6829      	ldr	r1, [r5, #0]
 800b842:	291d      	cmp	r1, #29
 800b844:	d82b      	bhi.n	800b89e <__sflush_r+0xb2>
 800b846:	4a2a      	ldr	r2, [pc, #168]	@ (800b8f0 <__sflush_r+0x104>)
 800b848:	410a      	asrs	r2, r1
 800b84a:	07d6      	lsls	r6, r2, #31
 800b84c:	d427      	bmi.n	800b89e <__sflush_r+0xb2>
 800b84e:	2200      	movs	r2, #0
 800b850:	04d9      	lsls	r1, r3, #19
 800b852:	6062      	str	r2, [r4, #4]
 800b854:	6922      	ldr	r2, [r4, #16]
 800b856:	6022      	str	r2, [r4, #0]
 800b858:	d504      	bpl.n	800b864 <__sflush_r+0x78>
 800b85a:	1c42      	adds	r2, r0, #1
 800b85c:	d101      	bne.n	800b862 <__sflush_r+0x76>
 800b85e:	682b      	ldr	r3, [r5, #0]
 800b860:	b903      	cbnz	r3, 800b864 <__sflush_r+0x78>
 800b862:	6560      	str	r0, [r4, #84]	@ 0x54
 800b864:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b866:	602f      	str	r7, [r5, #0]
 800b868:	b1b9      	cbz	r1, 800b89a <__sflush_r+0xae>
 800b86a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b86e:	4299      	cmp	r1, r3
 800b870:	d002      	beq.n	800b878 <__sflush_r+0x8c>
 800b872:	4628      	mov	r0, r5
 800b874:	f7ff f9f0 	bl	800ac58 <_free_r>
 800b878:	2300      	movs	r3, #0
 800b87a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b87c:	e00d      	b.n	800b89a <__sflush_r+0xae>
 800b87e:	2301      	movs	r3, #1
 800b880:	4628      	mov	r0, r5
 800b882:	47b0      	blx	r6
 800b884:	4602      	mov	r2, r0
 800b886:	1c50      	adds	r0, r2, #1
 800b888:	d1c9      	bne.n	800b81e <__sflush_r+0x32>
 800b88a:	682b      	ldr	r3, [r5, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d0c6      	beq.n	800b81e <__sflush_r+0x32>
 800b890:	2b1d      	cmp	r3, #29
 800b892:	d001      	beq.n	800b898 <__sflush_r+0xac>
 800b894:	2b16      	cmp	r3, #22
 800b896:	d11d      	bne.n	800b8d4 <__sflush_r+0xe8>
 800b898:	602f      	str	r7, [r5, #0]
 800b89a:	2000      	movs	r0, #0
 800b89c:	e021      	b.n	800b8e2 <__sflush_r+0xf6>
 800b89e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8a2:	b21b      	sxth	r3, r3
 800b8a4:	e01a      	b.n	800b8dc <__sflush_r+0xf0>
 800b8a6:	690f      	ldr	r7, [r1, #16]
 800b8a8:	2f00      	cmp	r7, #0
 800b8aa:	d0f6      	beq.n	800b89a <__sflush_r+0xae>
 800b8ac:	0793      	lsls	r3, r2, #30
 800b8ae:	680e      	ldr	r6, [r1, #0]
 800b8b0:	600f      	str	r7, [r1, #0]
 800b8b2:	bf0c      	ite	eq
 800b8b4:	694b      	ldreq	r3, [r1, #20]
 800b8b6:	2300      	movne	r3, #0
 800b8b8:	eba6 0807 	sub.w	r8, r6, r7
 800b8bc:	608b      	str	r3, [r1, #8]
 800b8be:	f1b8 0f00 	cmp.w	r8, #0
 800b8c2:	ddea      	ble.n	800b89a <__sflush_r+0xae>
 800b8c4:	4643      	mov	r3, r8
 800b8c6:	463a      	mov	r2, r7
 800b8c8:	6a21      	ldr	r1, [r4, #32]
 800b8ca:	4628      	mov	r0, r5
 800b8cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b8ce:	47b0      	blx	r6
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	dc08      	bgt.n	800b8e6 <__sflush_r+0xfa>
 800b8d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b8e0:	81a3      	strh	r3, [r4, #12]
 800b8e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8e6:	4407      	add	r7, r0
 800b8e8:	eba8 0800 	sub.w	r8, r8, r0
 800b8ec:	e7e7      	b.n	800b8be <__sflush_r+0xd2>
 800b8ee:	bf00      	nop
 800b8f0:	dfbffffe 	.word	0xdfbffffe

0800b8f4 <_fflush_r>:
 800b8f4:	b538      	push	{r3, r4, r5, lr}
 800b8f6:	690b      	ldr	r3, [r1, #16]
 800b8f8:	4605      	mov	r5, r0
 800b8fa:	460c      	mov	r4, r1
 800b8fc:	b913      	cbnz	r3, 800b904 <_fflush_r+0x10>
 800b8fe:	2500      	movs	r5, #0
 800b900:	4628      	mov	r0, r5
 800b902:	bd38      	pop	{r3, r4, r5, pc}
 800b904:	b118      	cbz	r0, 800b90e <_fflush_r+0x1a>
 800b906:	6a03      	ldr	r3, [r0, #32]
 800b908:	b90b      	cbnz	r3, 800b90e <_fflush_r+0x1a>
 800b90a:	f7fe f949 	bl	8009ba0 <__sinit>
 800b90e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d0f3      	beq.n	800b8fe <_fflush_r+0xa>
 800b916:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b918:	07d0      	lsls	r0, r2, #31
 800b91a:	d404      	bmi.n	800b926 <_fflush_r+0x32>
 800b91c:	0599      	lsls	r1, r3, #22
 800b91e:	d402      	bmi.n	800b926 <_fflush_r+0x32>
 800b920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b922:	f7fe fb38 	bl	8009f96 <__retarget_lock_acquire_recursive>
 800b926:	4628      	mov	r0, r5
 800b928:	4621      	mov	r1, r4
 800b92a:	f7ff ff5f 	bl	800b7ec <__sflush_r>
 800b92e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b930:	4605      	mov	r5, r0
 800b932:	07da      	lsls	r2, r3, #31
 800b934:	d4e4      	bmi.n	800b900 <_fflush_r+0xc>
 800b936:	89a3      	ldrh	r3, [r4, #12]
 800b938:	059b      	lsls	r3, r3, #22
 800b93a:	d4e1      	bmi.n	800b900 <_fflush_r+0xc>
 800b93c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b93e:	f7fe fb2b 	bl	8009f98 <__retarget_lock_release_recursive>
 800b942:	e7dd      	b.n	800b900 <_fflush_r+0xc>

0800b944 <__swhatbuf_r>:
 800b944:	b570      	push	{r4, r5, r6, lr}
 800b946:	460c      	mov	r4, r1
 800b948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b94c:	b096      	sub	sp, #88	@ 0x58
 800b94e:	4615      	mov	r5, r2
 800b950:	2900      	cmp	r1, #0
 800b952:	461e      	mov	r6, r3
 800b954:	da0c      	bge.n	800b970 <__swhatbuf_r+0x2c>
 800b956:	89a3      	ldrh	r3, [r4, #12]
 800b958:	2100      	movs	r1, #0
 800b95a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b95e:	bf14      	ite	ne
 800b960:	2340      	movne	r3, #64	@ 0x40
 800b962:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b966:	2000      	movs	r0, #0
 800b968:	6031      	str	r1, [r6, #0]
 800b96a:	602b      	str	r3, [r5, #0]
 800b96c:	b016      	add	sp, #88	@ 0x58
 800b96e:	bd70      	pop	{r4, r5, r6, pc}
 800b970:	466a      	mov	r2, sp
 800b972:	f000 f849 	bl	800ba08 <_fstat_r>
 800b976:	2800      	cmp	r0, #0
 800b978:	dbed      	blt.n	800b956 <__swhatbuf_r+0x12>
 800b97a:	9901      	ldr	r1, [sp, #4]
 800b97c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b980:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b984:	4259      	negs	r1, r3
 800b986:	4159      	adcs	r1, r3
 800b988:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b98c:	e7eb      	b.n	800b966 <__swhatbuf_r+0x22>

0800b98e <__smakebuf_r>:
 800b98e:	898b      	ldrh	r3, [r1, #12]
 800b990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b992:	079d      	lsls	r5, r3, #30
 800b994:	4606      	mov	r6, r0
 800b996:	460c      	mov	r4, r1
 800b998:	d507      	bpl.n	800b9aa <__smakebuf_r+0x1c>
 800b99a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b99e:	6023      	str	r3, [r4, #0]
 800b9a0:	6123      	str	r3, [r4, #16]
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	6163      	str	r3, [r4, #20]
 800b9a6:	b003      	add	sp, #12
 800b9a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9aa:	ab01      	add	r3, sp, #4
 800b9ac:	466a      	mov	r2, sp
 800b9ae:	f7ff ffc9 	bl	800b944 <__swhatbuf_r>
 800b9b2:	9f00      	ldr	r7, [sp, #0]
 800b9b4:	4605      	mov	r5, r0
 800b9b6:	4630      	mov	r0, r6
 800b9b8:	4639      	mov	r1, r7
 800b9ba:	f7ff f9c1 	bl	800ad40 <_malloc_r>
 800b9be:	b948      	cbnz	r0, 800b9d4 <__smakebuf_r+0x46>
 800b9c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9c4:	059a      	lsls	r2, r3, #22
 800b9c6:	d4ee      	bmi.n	800b9a6 <__smakebuf_r+0x18>
 800b9c8:	f023 0303 	bic.w	r3, r3, #3
 800b9cc:	f043 0302 	orr.w	r3, r3, #2
 800b9d0:	81a3      	strh	r3, [r4, #12]
 800b9d2:	e7e2      	b.n	800b99a <__smakebuf_r+0xc>
 800b9d4:	89a3      	ldrh	r3, [r4, #12]
 800b9d6:	6020      	str	r0, [r4, #0]
 800b9d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9dc:	81a3      	strh	r3, [r4, #12]
 800b9de:	9b01      	ldr	r3, [sp, #4]
 800b9e0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b9e4:	b15b      	cbz	r3, 800b9fe <__smakebuf_r+0x70>
 800b9e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9ea:	4630      	mov	r0, r6
 800b9ec:	f000 f81e 	bl	800ba2c <_isatty_r>
 800b9f0:	b128      	cbz	r0, 800b9fe <__smakebuf_r+0x70>
 800b9f2:	89a3      	ldrh	r3, [r4, #12]
 800b9f4:	f023 0303 	bic.w	r3, r3, #3
 800b9f8:	f043 0301 	orr.w	r3, r3, #1
 800b9fc:	81a3      	strh	r3, [r4, #12]
 800b9fe:	89a3      	ldrh	r3, [r4, #12]
 800ba00:	431d      	orrs	r5, r3
 800ba02:	81a5      	strh	r5, [r4, #12]
 800ba04:	e7cf      	b.n	800b9a6 <__smakebuf_r+0x18>
	...

0800ba08 <_fstat_r>:
 800ba08:	b538      	push	{r3, r4, r5, lr}
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	4d06      	ldr	r5, [pc, #24]	@ (800ba28 <_fstat_r+0x20>)
 800ba0e:	4604      	mov	r4, r0
 800ba10:	4608      	mov	r0, r1
 800ba12:	4611      	mov	r1, r2
 800ba14:	602b      	str	r3, [r5, #0]
 800ba16:	f7f6 fb72 	bl	80020fe <_fstat>
 800ba1a:	1c43      	adds	r3, r0, #1
 800ba1c:	d102      	bne.n	800ba24 <_fstat_r+0x1c>
 800ba1e:	682b      	ldr	r3, [r5, #0]
 800ba20:	b103      	cbz	r3, 800ba24 <_fstat_r+0x1c>
 800ba22:	6023      	str	r3, [r4, #0]
 800ba24:	bd38      	pop	{r3, r4, r5, pc}
 800ba26:	bf00      	nop
 800ba28:	20003e94 	.word	0x20003e94

0800ba2c <_isatty_r>:
 800ba2c:	b538      	push	{r3, r4, r5, lr}
 800ba2e:	2300      	movs	r3, #0
 800ba30:	4d05      	ldr	r5, [pc, #20]	@ (800ba48 <_isatty_r+0x1c>)
 800ba32:	4604      	mov	r4, r0
 800ba34:	4608      	mov	r0, r1
 800ba36:	602b      	str	r3, [r5, #0]
 800ba38:	f7f6 fb71 	bl	800211e <_isatty>
 800ba3c:	1c43      	adds	r3, r0, #1
 800ba3e:	d102      	bne.n	800ba46 <_isatty_r+0x1a>
 800ba40:	682b      	ldr	r3, [r5, #0]
 800ba42:	b103      	cbz	r3, 800ba46 <_isatty_r+0x1a>
 800ba44:	6023      	str	r3, [r4, #0]
 800ba46:	bd38      	pop	{r3, r4, r5, pc}
 800ba48:	20003e94 	.word	0x20003e94

0800ba4c <_sbrk_r>:
 800ba4c:	b538      	push	{r3, r4, r5, lr}
 800ba4e:	2300      	movs	r3, #0
 800ba50:	4d05      	ldr	r5, [pc, #20]	@ (800ba68 <_sbrk_r+0x1c>)
 800ba52:	4604      	mov	r4, r0
 800ba54:	4608      	mov	r0, r1
 800ba56:	602b      	str	r3, [r5, #0]
 800ba58:	f7f6 fb7a 	bl	8002150 <_sbrk>
 800ba5c:	1c43      	adds	r3, r0, #1
 800ba5e:	d102      	bne.n	800ba66 <_sbrk_r+0x1a>
 800ba60:	682b      	ldr	r3, [r5, #0]
 800ba62:	b103      	cbz	r3, 800ba66 <_sbrk_r+0x1a>
 800ba64:	6023      	str	r3, [r4, #0]
 800ba66:	bd38      	pop	{r3, r4, r5, pc}
 800ba68:	20003e94 	.word	0x20003e94

0800ba6c <memcpy>:
 800ba6c:	440a      	add	r2, r1
 800ba6e:	1e43      	subs	r3, r0, #1
 800ba70:	4291      	cmp	r1, r2
 800ba72:	d100      	bne.n	800ba76 <memcpy+0xa>
 800ba74:	4770      	bx	lr
 800ba76:	b510      	push	{r4, lr}
 800ba78:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba7c:	4291      	cmp	r1, r2
 800ba7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba82:	d1f9      	bne.n	800ba78 <memcpy+0xc>
 800ba84:	bd10      	pop	{r4, pc}
	...

0800ba88 <__assert_func>:
 800ba88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba8a:	4614      	mov	r4, r2
 800ba8c:	461a      	mov	r2, r3
 800ba8e:	4b09      	ldr	r3, [pc, #36]	@ (800bab4 <__assert_func+0x2c>)
 800ba90:	4605      	mov	r5, r0
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	68d8      	ldr	r0, [r3, #12]
 800ba96:	b954      	cbnz	r4, 800baae <__assert_func+0x26>
 800ba98:	4b07      	ldr	r3, [pc, #28]	@ (800bab8 <__assert_func+0x30>)
 800ba9a:	461c      	mov	r4, r3
 800ba9c:	9100      	str	r1, [sp, #0]
 800ba9e:	4907      	ldr	r1, [pc, #28]	@ (800babc <__assert_func+0x34>)
 800baa0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800baa4:	462b      	mov	r3, r5
 800baa6:	f000 f841 	bl	800bb2c <fiprintf>
 800baaa:	f000 f851 	bl	800bb50 <abort>
 800baae:	4b04      	ldr	r3, [pc, #16]	@ (800bac0 <__assert_func+0x38>)
 800bab0:	e7f4      	b.n	800ba9c <__assert_func+0x14>
 800bab2:	bf00      	nop
 800bab4:	20000030 	.word	0x20000030
 800bab8:	0800c14e 	.word	0x0800c14e
 800babc:	0800c120 	.word	0x0800c120
 800bac0:	0800c113 	.word	0x0800c113

0800bac4 <_calloc_r>:
 800bac4:	b570      	push	{r4, r5, r6, lr}
 800bac6:	fba1 5402 	umull	r5, r4, r1, r2
 800baca:	b93c      	cbnz	r4, 800badc <_calloc_r+0x18>
 800bacc:	4629      	mov	r1, r5
 800bace:	f7ff f937 	bl	800ad40 <_malloc_r>
 800bad2:	4606      	mov	r6, r0
 800bad4:	b928      	cbnz	r0, 800bae2 <_calloc_r+0x1e>
 800bad6:	2600      	movs	r6, #0
 800bad8:	4630      	mov	r0, r6
 800bada:	bd70      	pop	{r4, r5, r6, pc}
 800badc:	220c      	movs	r2, #12
 800bade:	6002      	str	r2, [r0, #0]
 800bae0:	e7f9      	b.n	800bad6 <_calloc_r+0x12>
 800bae2:	462a      	mov	r2, r5
 800bae4:	4621      	mov	r1, r4
 800bae6:	f7fe f9d9 	bl	8009e9c <memset>
 800baea:	e7f5      	b.n	800bad8 <_calloc_r+0x14>

0800baec <__ascii_mbtowc>:
 800baec:	b082      	sub	sp, #8
 800baee:	b901      	cbnz	r1, 800baf2 <__ascii_mbtowc+0x6>
 800baf0:	a901      	add	r1, sp, #4
 800baf2:	b142      	cbz	r2, 800bb06 <__ascii_mbtowc+0x1a>
 800baf4:	b14b      	cbz	r3, 800bb0a <__ascii_mbtowc+0x1e>
 800baf6:	7813      	ldrb	r3, [r2, #0]
 800baf8:	600b      	str	r3, [r1, #0]
 800bafa:	7812      	ldrb	r2, [r2, #0]
 800bafc:	1e10      	subs	r0, r2, #0
 800bafe:	bf18      	it	ne
 800bb00:	2001      	movne	r0, #1
 800bb02:	b002      	add	sp, #8
 800bb04:	4770      	bx	lr
 800bb06:	4610      	mov	r0, r2
 800bb08:	e7fb      	b.n	800bb02 <__ascii_mbtowc+0x16>
 800bb0a:	f06f 0001 	mvn.w	r0, #1
 800bb0e:	e7f8      	b.n	800bb02 <__ascii_mbtowc+0x16>

0800bb10 <__ascii_wctomb>:
 800bb10:	4603      	mov	r3, r0
 800bb12:	4608      	mov	r0, r1
 800bb14:	b141      	cbz	r1, 800bb28 <__ascii_wctomb+0x18>
 800bb16:	2aff      	cmp	r2, #255	@ 0xff
 800bb18:	d904      	bls.n	800bb24 <__ascii_wctomb+0x14>
 800bb1a:	228a      	movs	r2, #138	@ 0x8a
 800bb1c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb20:	601a      	str	r2, [r3, #0]
 800bb22:	4770      	bx	lr
 800bb24:	2001      	movs	r0, #1
 800bb26:	700a      	strb	r2, [r1, #0]
 800bb28:	4770      	bx	lr
	...

0800bb2c <fiprintf>:
 800bb2c:	b40e      	push	{r1, r2, r3}
 800bb2e:	b503      	push	{r0, r1, lr}
 800bb30:	ab03      	add	r3, sp, #12
 800bb32:	4601      	mov	r1, r0
 800bb34:	4805      	ldr	r0, [pc, #20]	@ (800bb4c <fiprintf+0x20>)
 800bb36:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb3a:	6800      	ldr	r0, [r0, #0]
 800bb3c:	9301      	str	r3, [sp, #4]
 800bb3e:	f7ff fd3d 	bl	800b5bc <_vfiprintf_r>
 800bb42:	b002      	add	sp, #8
 800bb44:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb48:	b003      	add	sp, #12
 800bb4a:	4770      	bx	lr
 800bb4c:	20000030 	.word	0x20000030

0800bb50 <abort>:
 800bb50:	2006      	movs	r0, #6
 800bb52:	b508      	push	{r3, lr}
 800bb54:	f000 f82c 	bl	800bbb0 <raise>
 800bb58:	2001      	movs	r0, #1
 800bb5a:	f7f6 fa80 	bl	800205e <_exit>

0800bb5e <_raise_r>:
 800bb5e:	291f      	cmp	r1, #31
 800bb60:	b538      	push	{r3, r4, r5, lr}
 800bb62:	4605      	mov	r5, r0
 800bb64:	460c      	mov	r4, r1
 800bb66:	d904      	bls.n	800bb72 <_raise_r+0x14>
 800bb68:	2316      	movs	r3, #22
 800bb6a:	6003      	str	r3, [r0, #0]
 800bb6c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb70:	bd38      	pop	{r3, r4, r5, pc}
 800bb72:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bb74:	b112      	cbz	r2, 800bb7c <_raise_r+0x1e>
 800bb76:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb7a:	b94b      	cbnz	r3, 800bb90 <_raise_r+0x32>
 800bb7c:	4628      	mov	r0, r5
 800bb7e:	f000 f831 	bl	800bbe4 <_getpid_r>
 800bb82:	4622      	mov	r2, r4
 800bb84:	4601      	mov	r1, r0
 800bb86:	4628      	mov	r0, r5
 800bb88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb8c:	f000 b818 	b.w	800bbc0 <_kill_r>
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	d00a      	beq.n	800bbaa <_raise_r+0x4c>
 800bb94:	1c59      	adds	r1, r3, #1
 800bb96:	d103      	bne.n	800bba0 <_raise_r+0x42>
 800bb98:	2316      	movs	r3, #22
 800bb9a:	6003      	str	r3, [r0, #0]
 800bb9c:	2001      	movs	r0, #1
 800bb9e:	e7e7      	b.n	800bb70 <_raise_r+0x12>
 800bba0:	2100      	movs	r1, #0
 800bba2:	4620      	mov	r0, r4
 800bba4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bba8:	4798      	blx	r3
 800bbaa:	2000      	movs	r0, #0
 800bbac:	e7e0      	b.n	800bb70 <_raise_r+0x12>
	...

0800bbb0 <raise>:
 800bbb0:	4b02      	ldr	r3, [pc, #8]	@ (800bbbc <raise+0xc>)
 800bbb2:	4601      	mov	r1, r0
 800bbb4:	6818      	ldr	r0, [r3, #0]
 800bbb6:	f7ff bfd2 	b.w	800bb5e <_raise_r>
 800bbba:	bf00      	nop
 800bbbc:	20000030 	.word	0x20000030

0800bbc0 <_kill_r>:
 800bbc0:	b538      	push	{r3, r4, r5, lr}
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	4d06      	ldr	r5, [pc, #24]	@ (800bbe0 <_kill_r+0x20>)
 800bbc6:	4604      	mov	r4, r0
 800bbc8:	4608      	mov	r0, r1
 800bbca:	4611      	mov	r1, r2
 800bbcc:	602b      	str	r3, [r5, #0]
 800bbce:	f7f6 fa36 	bl	800203e <_kill>
 800bbd2:	1c43      	adds	r3, r0, #1
 800bbd4:	d102      	bne.n	800bbdc <_kill_r+0x1c>
 800bbd6:	682b      	ldr	r3, [r5, #0]
 800bbd8:	b103      	cbz	r3, 800bbdc <_kill_r+0x1c>
 800bbda:	6023      	str	r3, [r4, #0]
 800bbdc:	bd38      	pop	{r3, r4, r5, pc}
 800bbde:	bf00      	nop
 800bbe0:	20003e94 	.word	0x20003e94

0800bbe4 <_getpid_r>:
 800bbe4:	f7f6 ba23 	b.w	800202e <_getpid>

0800bbe8 <_init>:
 800bbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbea:	bf00      	nop
 800bbec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbee:	bc08      	pop	{r3}
 800bbf0:	469e      	mov	lr, r3
 800bbf2:	4770      	bx	lr

0800bbf4 <_fini>:
 800bbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbf6:	bf00      	nop
 800bbf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbfa:	bc08      	pop	{r3}
 800bbfc:	469e      	mov	lr, r3
 800bbfe:	4770      	bx	lr
