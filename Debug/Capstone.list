
Capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af78  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  0800b1b0  0800b1b0  0000c1b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b6a0  0800b6a0  0000c6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b6a8  0800b6a8  0000c6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b6ac  0800b6ac  0000c6ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e8  20000000  0800b6b0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000448  200001e8  0800b898  0000d1e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000630  0800b898  0000d630  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000d1e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000179f3  00000000  00000000  0000d21e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002e63  00000000  00000000  00024c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000012f8  00000000  00000000  00027a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ea6  00000000  00000000  00028d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002f7f3  00000000  00000000  00029c16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019d17  00000000  00000000  00059409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012421d  00000000  00000000  00073120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0019733d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006050  00000000  00000000  00197380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  0019d3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001e8 	.word	0x200001e8
 8000254:	00000000 	.word	0x00000000
 8000258:	0800b198 	.word	0x0800b198

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001ec 	.word	0x200001ec
 8000274:	0800b198 	.word	0x0800b198

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc4:	f000 b97e 	b.w	8000ec4 <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000be4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000be6:	460c      	mov	r4, r1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d14d      	bne.n	8000c88 <__udivmoddi4+0xa8>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	460f      	mov	r7, r1
 8000bf0:	4684      	mov	ip, r0
 8000bf2:	4696      	mov	lr, r2
 8000bf4:	fab2 f382 	clz	r3, r2
 8000bf8:	d960      	bls.n	8000cbc <__udivmoddi4+0xdc>
 8000bfa:	b14b      	cbz	r3, 8000c10 <__udivmoddi4+0x30>
 8000bfc:	fa02 fe03 	lsl.w	lr, r2, r3
 8000c00:	f1c3 0220 	rsb	r2, r3, #32
 8000c04:	409f      	lsls	r7, r3
 8000c06:	fa00 fc03 	lsl.w	ip, r0, r3
 8000c0a:	fa20 f202 	lsr.w	r2, r0, r2
 8000c0e:	4317      	orrs	r7, r2
 8000c10:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000c14:	fa1f f48e 	uxth.w	r4, lr
 8000c18:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000c1c:	fbb7 f1f6 	udiv	r1, r7, r6
 8000c20:	fb06 7711 	mls	r7, r6, r1, r7
 8000c24:	fb01 f004 	mul.w	r0, r1, r4
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	4290      	cmp	r0, r2
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x62>
 8000c30:	eb1e 0202 	adds.w	r2, lr, r2
 8000c34:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c38:	d202      	bcs.n	8000c40 <__udivmoddi4+0x60>
 8000c3a:	4290      	cmp	r0, r2
 8000c3c:	f200 812d 	bhi.w	8000e9a <__udivmoddi4+0x2ba>
 8000c40:	4639      	mov	r1, r7
 8000c42:	1a12      	subs	r2, r2, r0
 8000c44:	fa1f fc8c 	uxth.w	ip, ip
 8000c48:	fbb2 f0f6 	udiv	r0, r2, r6
 8000c4c:	fb06 2210 	mls	r2, r6, r0, r2
 8000c50:	fb00 f404 	mul.w	r4, r0, r4
 8000c54:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000c58:	4564      	cmp	r4, ip
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x8e>
 8000c5c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000c60:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c64:	d202      	bcs.n	8000c6c <__udivmoddi4+0x8c>
 8000c66:	4564      	cmp	r4, ip
 8000c68:	f200 811a 	bhi.w	8000ea0 <__udivmoddi4+0x2c0>
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c72:	ebac 0c04 	sub.w	ip, ip, r4
 8000c76:	2100      	movs	r1, #0
 8000c78:	b125      	cbz	r5, 8000c84 <__udivmoddi4+0xa4>
 8000c7a:	fa2c f303 	lsr.w	r3, ip, r3
 8000c7e:	2200      	movs	r2, #0
 8000c80:	e9c5 3200 	strd	r3, r2, [r5]
 8000c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d905      	bls.n	8000c98 <__udivmoddi4+0xb8>
 8000c8c:	b10d      	cbz	r5, 8000c92 <__udivmoddi4+0xb2>
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	2100      	movs	r1, #0
 8000c94:	4608      	mov	r0, r1
 8000c96:	e7f5      	b.n	8000c84 <__udivmoddi4+0xa4>
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	d14d      	bne.n	8000d3c <__udivmoddi4+0x15c>
 8000ca0:	42a3      	cmp	r3, r4
 8000ca2:	f0c0 80f2 	bcc.w	8000e8a <__udivmoddi4+0x2aa>
 8000ca6:	4290      	cmp	r0, r2
 8000ca8:	f080 80ef 	bcs.w	8000e8a <__udivmoddi4+0x2aa>
 8000cac:	4606      	mov	r6, r0
 8000cae:	4623      	mov	r3, r4
 8000cb0:	4608      	mov	r0, r1
 8000cb2:	2d00      	cmp	r5, #0
 8000cb4:	d0e6      	beq.n	8000c84 <__udivmoddi4+0xa4>
 8000cb6:	e9c5 6300 	strd	r6, r3, [r5]
 8000cba:	e7e3      	b.n	8000c84 <__udivmoddi4+0xa4>
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	f040 80a2 	bne.w	8000e06 <__udivmoddi4+0x226>
 8000cc2:	1a8a      	subs	r2, r1, r2
 8000cc4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000cc8:	fa1f f68e 	uxth.w	r6, lr
 8000ccc:	2101      	movs	r1, #1
 8000cce:	fbb2 f4f7 	udiv	r4, r2, r7
 8000cd2:	fb07 2014 	mls	r0, r7, r4, r2
 8000cd6:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000cda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cde:	fb06 f004 	mul.w	r0, r6, r4
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	d90f      	bls.n	8000d06 <__udivmoddi4+0x126>
 8000ce6:	eb1e 0202 	adds.w	r2, lr, r2
 8000cea:	f104 38ff 	add.w	r8, r4, #4294967295
 8000cee:	bf2c      	ite	cs
 8000cf0:	f04f 0901 	movcs.w	r9, #1
 8000cf4:	f04f 0900 	movcc.w	r9, #0
 8000cf8:	4290      	cmp	r0, r2
 8000cfa:	d903      	bls.n	8000d04 <__udivmoddi4+0x124>
 8000cfc:	f1b9 0f00 	cmp.w	r9, #0
 8000d00:	f000 80c8 	beq.w	8000e94 <__udivmoddi4+0x2b4>
 8000d04:	4644      	mov	r4, r8
 8000d06:	1a12      	subs	r2, r2, r0
 8000d08:	fa1f fc8c 	uxth.w	ip, ip
 8000d0c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d10:	fb07 2210 	mls	r2, r7, r0, r2
 8000d14:	fb00 f606 	mul.w	r6, r0, r6
 8000d18:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d1c:	4566      	cmp	r6, ip
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x152>
 8000d20:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d28:	d202      	bcs.n	8000d30 <__udivmoddi4+0x150>
 8000d2a:	4566      	cmp	r6, ip
 8000d2c:	f200 80bb 	bhi.w	8000ea6 <__udivmoddi4+0x2c6>
 8000d30:	4610      	mov	r0, r2
 8000d32:	ebac 0c06 	sub.w	ip, ip, r6
 8000d36:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d3a:	e79d      	b.n	8000c78 <__udivmoddi4+0x98>
 8000d3c:	f1c1 0620 	rsb	r6, r1, #32
 8000d40:	408b      	lsls	r3, r1
 8000d42:	fa04 fe01 	lsl.w	lr, r4, r1
 8000d46:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4a:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d4e:	40f4      	lsrs	r4, r6
 8000d50:	408a      	lsls	r2, r1
 8000d52:	431f      	orrs	r7, r3
 8000d54:	ea4e 030c 	orr.w	r3, lr, ip
 8000d58:	fa00 fe01 	lsl.w	lr, r0, r1
 8000d5c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d60:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d6c:	fb08 4410 	mls	r4, r8, r0, r4
 8000d70:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d74:	fb00 f90c 	mul.w	r9, r0, ip
 8000d78:	45a1      	cmp	r9, r4
 8000d7a:	d90e      	bls.n	8000d9a <__udivmoddi4+0x1ba>
 8000d7c:	193c      	adds	r4, r7, r4
 8000d7e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d82:	bf2c      	ite	cs
 8000d84:	f04f 0b01 	movcs.w	fp, #1
 8000d88:	f04f 0b00 	movcc.w	fp, #0
 8000d8c:	45a1      	cmp	r9, r4
 8000d8e:	d903      	bls.n	8000d98 <__udivmoddi4+0x1b8>
 8000d90:	f1bb 0f00 	cmp.w	fp, #0
 8000d94:	f000 8093 	beq.w	8000ebe <__udivmoddi4+0x2de>
 8000d98:	4650      	mov	r0, sl
 8000d9a:	eba4 0409 	sub.w	r4, r4, r9
 8000d9e:	fa1f f983 	uxth.w	r9, r3
 8000da2:	fbb4 f3f8 	udiv	r3, r4, r8
 8000da6:	fb08 4413 	mls	r4, r8, r3, r4
 8000daa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d906      	bls.n	8000dc4 <__udivmoddi4+0x1e4>
 8000db6:	193c      	adds	r4, r7, r4
 8000db8:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dbc:	d201      	bcs.n	8000dc2 <__udivmoddi4+0x1e2>
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d87a      	bhi.n	8000eb8 <__udivmoddi4+0x2d8>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dc8:	eba4 040c 	sub.w	r4, r4, ip
 8000dcc:	fba0 9802 	umull	r9, r8, r0, r2
 8000dd0:	4544      	cmp	r4, r8
 8000dd2:	46cc      	mov	ip, r9
 8000dd4:	4643      	mov	r3, r8
 8000dd6:	d302      	bcc.n	8000dde <__udivmoddi4+0x1fe>
 8000dd8:	d106      	bne.n	8000de8 <__udivmoddi4+0x208>
 8000dda:	45ce      	cmp	lr, r9
 8000ddc:	d204      	bcs.n	8000de8 <__udivmoddi4+0x208>
 8000dde:	3801      	subs	r0, #1
 8000de0:	ebb9 0c02 	subs.w	ip, r9, r2
 8000de4:	eb68 0307 	sbc.w	r3, r8, r7
 8000de8:	b15d      	cbz	r5, 8000e02 <__udivmoddi4+0x222>
 8000dea:	ebbe 020c 	subs.w	r2, lr, ip
 8000dee:	eb64 0403 	sbc.w	r4, r4, r3
 8000df2:	fa04 f606 	lsl.w	r6, r4, r6
 8000df6:	fa22 f301 	lsr.w	r3, r2, r1
 8000dfa:	40cc      	lsrs	r4, r1
 8000dfc:	431e      	orrs	r6, r3
 8000dfe:	e9c5 6400 	strd	r6, r4, [r5]
 8000e02:	2100      	movs	r1, #0
 8000e04:	e73e      	b.n	8000c84 <__udivmoddi4+0xa4>
 8000e06:	fa02 fe03 	lsl.w	lr, r2, r3
 8000e0a:	f1c3 0120 	rsb	r1, r3, #32
 8000e0e:	fa04 f203 	lsl.w	r2, r4, r3
 8000e12:	fa00 fc03 	lsl.w	ip, r0, r3
 8000e16:	40cc      	lsrs	r4, r1
 8000e18:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e1c:	fa20 f101 	lsr.w	r1, r0, r1
 8000e20:	fa1f f68e 	uxth.w	r6, lr
 8000e24:	fbb4 f0f7 	udiv	r0, r4, r7
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	fb07 4410 	mls	r4, r7, r0, r4
 8000e2e:	0c11      	lsrs	r1, r2, #16
 8000e30:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000e34:	fb00 f406 	mul.w	r4, r0, r6
 8000e38:	428c      	cmp	r4, r1
 8000e3a:	d90e      	bls.n	8000e5a <__udivmoddi4+0x27a>
 8000e3c:	eb1e 0101 	adds.w	r1, lr, r1
 8000e40:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e44:	bf2c      	ite	cs
 8000e46:	f04f 0901 	movcs.w	r9, #1
 8000e4a:	f04f 0900 	movcc.w	r9, #0
 8000e4e:	428c      	cmp	r4, r1
 8000e50:	d902      	bls.n	8000e58 <__udivmoddi4+0x278>
 8000e52:	f1b9 0f00 	cmp.w	r9, #0
 8000e56:	d02c      	beq.n	8000eb2 <__udivmoddi4+0x2d2>
 8000e58:	4640      	mov	r0, r8
 8000e5a:	1b09      	subs	r1, r1, r4
 8000e5c:	b292      	uxth	r2, r2
 8000e5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e62:	fb07 1114 	mls	r1, r7, r4, r1
 8000e66:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e6a:	fb04 f106 	mul.w	r1, r4, r6
 8000e6e:	4291      	cmp	r1, r2
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x2a2>
 8000e72:	eb1e 0202 	adds.w	r2, lr, r2
 8000e76:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e7a:	d201      	bcs.n	8000e80 <__udivmoddi4+0x2a0>
 8000e7c:	4291      	cmp	r1, r2
 8000e7e:	d815      	bhi.n	8000eac <__udivmoddi4+0x2cc>
 8000e80:	4644      	mov	r4, r8
 8000e82:	1a52      	subs	r2, r2, r1
 8000e84:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000e88:	e721      	b.n	8000cce <__udivmoddi4+0xee>
 8000e8a:	1a86      	subs	r6, r0, r2
 8000e8c:	eb64 0303 	sbc.w	r3, r4, r3
 8000e90:	2001      	movs	r0, #1
 8000e92:	e70e      	b.n	8000cb2 <__udivmoddi4+0xd2>
 8000e94:	3c02      	subs	r4, #2
 8000e96:	4472      	add	r2, lr
 8000e98:	e735      	b.n	8000d06 <__udivmoddi4+0x126>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4472      	add	r2, lr
 8000e9e:	e6d0      	b.n	8000c42 <__udivmoddi4+0x62>
 8000ea0:	44f4      	add	ip, lr
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	e6e3      	b.n	8000c6e <__udivmoddi4+0x8e>
 8000ea6:	44f4      	add	ip, lr
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e742      	b.n	8000d32 <__udivmoddi4+0x152>
 8000eac:	3c02      	subs	r4, #2
 8000eae:	4472      	add	r2, lr
 8000eb0:	e7e7      	b.n	8000e82 <__udivmoddi4+0x2a2>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4471      	add	r1, lr
 8000eb6:	e7d0      	b.n	8000e5a <__udivmoddi4+0x27a>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	443c      	add	r4, r7
 8000ebc:	e782      	b.n	8000dc4 <__udivmoddi4+0x1e4>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	443c      	add	r4, r7
 8000ec2:	e76a      	b.n	8000d9a <__udivmoddi4+0x1ba>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	@ 0x28
 8000ecc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ece:	f001 f825 	bl	8001f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed2:	f000 f8d9 	bl	8001088 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000ed6:	f000 f920 	bl	800111a <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eda:	f000 fab3 	bl	8001444 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000ede:	f000 f9e3 	bl	80012a8 <MX_ICACHE_Init>
  MX_I2C1_Init();
 8000ee2:	f000 f927 	bl	8001134 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000ee6:	f000 f963 	bl	80011b0 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000eea:	f000 f99f 	bl	800122c <MX_I2C3_Init>
  MX_SPI1_Init();
 8000eee:	f000 f9ef 	bl	80012d0 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000ef2:	f000 fa5b 	bl	80013ac <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f000 fe66 	bl	8001bc8 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000efc:	2101      	movs	r1, #1
 8000efe:	2000      	movs	r0, #0
 8000f00:	f000 fe9e 	bl	8001c40 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000f04:	4b53      	ldr	r3, [pc, #332]	@ (8001054 <main+0x18c>)
 8000f06:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f0a:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000f0c:	4b51      	ldr	r3, [pc, #324]	@ (8001054 <main+0x18c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000f12:	4b50      	ldr	r3, [pc, #320]	@ (8001054 <main+0x18c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000f18:	4b4e      	ldr	r3, [pc, #312]	@ (8001054 <main+0x18c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000f1e:	4b4d      	ldr	r3, [pc, #308]	@ (8001054 <main+0x18c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000f24:	494b      	ldr	r1, [pc, #300]	@ (8001054 <main+0x18c>)
 8000f26:	2000      	movs	r0, #0
 8000f28:	f000 ff18 	bl	8001d5c <BSP_COM_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <main+0x6e>
  {
    Error_Handler();
 8000f32:	f000 faf1 	bl	8001518 <Error_Handler>

  /* USER CODE END BSP */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t SEND_DATA[2] = {0x24, 0x16}; //LOW REPEATABILITY, CLOCK STRETCHING DISSABLED
 8000f36:	f241 6324 	movw	r3, #5668	@ 0x1624
 8000f3a:	823b      	strh	r3, [r7, #16]
  uint8_t HUM_TEMP_DATA[6] = {}; //2 bytes for temp, 2 bytes for humid, then checksum
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	2300      	movs	r3, #0
 8000f42:	81bb      	strh	r3, [r7, #12]
	  	           // uint32_t error = HAL_UART_GetError(&huart3);

	  	            // Place a breakpoint here or use a method to inspect `error`
	  	//}

	  	HAL_Delay(100);
 8000f44:	2064      	movs	r0, #100	@ 0x64
 8000f46:	f001 f8af 	bl	80020a8 <HAL_Delay>
	  		HAL_Delay(1000);
	  	} else{
	  		HAL_Delay(1000);
	  	}*/
	  	 //printf("Hello World!\n");
	  	 if(HAL_I2C_Master_Transmit(&hi2c1, I2C1_SLAVE_ADDR, SEND_DATA, 2, HAL_MAX_DELAY) != HAL_OK){
 8000f4a:	f107 0210 	add.w	r2, r7, #16
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	2302      	movs	r3, #2
 8000f56:	2188      	movs	r1, #136	@ 0x88
 8000f58:	483f      	ldr	r0, [pc, #252]	@ (8001058 <main+0x190>)
 8000f5a:	f001 fd8b 	bl	8002a74 <HAL_I2C_Master_Transmit>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d008      	beq.n	8000f76 <main+0xae>
	  		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //Check for transmission errors to the temperature and humidity sensor
 8000f64:	2120      	movs	r1, #32
 8000f66:	483d      	ldr	r0, [pc, #244]	@ (800105c <main+0x194>)
 8000f68:	f001 fcce 	bl	8002908 <HAL_GPIO_TogglePin>
	  		printf("Error Transmittiing to sensor\n");
 8000f6c:	483c      	ldr	r0, [pc, #240]	@ (8001060 <main+0x198>)
 8000f6e:	f008 f98b 	bl	8009288 <puts>
	  		return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e069      	b.n	800104a <main+0x182>
	  	    HAL_Delay(1000);
	  	 }
	  	 HAL_Delay(100);
 8000f76:	2064      	movs	r0, #100	@ 0x64
 8000f78:	f001 f896 	bl	80020a8 <HAL_Delay>

	  	 if(HAL_I2C_Master_Receive(&hi2c1, (I2C1_SLAVE_ADDR | 0x01), HUM_TEMP_DATA, 6, HAL_MAX_DELAY)!=HAL_OK){
 8000f7c:	f107 0208 	add.w	r2, r7, #8
 8000f80:	f04f 33ff 	mov.w	r3, #4294967295
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2306      	movs	r3, #6
 8000f88:	2189      	movs	r1, #137	@ 0x89
 8000f8a:	4833      	ldr	r0, [pc, #204]	@ (8001058 <main+0x190>)
 8000f8c:	f001 fe66 	bl	8002c5c <HAL_I2C_Master_Receive>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d004      	beq.n	8000fa0 <main+0xd8>
	  		 printf("Error in Recieving Temperature and Humidity data\n");
 8000f96:	4833      	ldr	r0, [pc, #204]	@ (8001064 <main+0x19c>)
 8000f98:	f008 f976 	bl	8009288 <puts>
	  		 return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e054      	b.n	800104a <main+0x182>
	  		 HAL_Delay(10);
	  	 }
	  	 uint16_t temp_raw = HUM_TEMP_DATA[0] << 8 | HUM_TEMP_DATA[1]; //Combine the two bytes into one temp value
 8000fa0:	7a3b      	ldrb	r3, [r7, #8]
 8000fa2:	021b      	lsls	r3, r3, #8
 8000fa4:	b21a      	sxth	r2, r3
 8000fa6:	7a7b      	ldrb	r3, [r7, #9]
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	4313      	orrs	r3, r2
 8000fac:	b21b      	sxth	r3, r3
 8000fae:	83fb      	strh	r3, [r7, #30]
	  	 //HAL_Delay(1000);
	  	 //printf("TEMPERATURE: %d\n", temp_raw);
	  	 //HAL_Delay(500);
	  	 uint16_t humidity_raw = HUM_TEMP_DATA[3] << 8 | HUM_TEMP_DATA[4]; //Combine the humidity values raw
 8000fb0:	7afb      	ldrb	r3, [r7, #11]
 8000fb2:	021b      	lsls	r3, r3, #8
 8000fb4:	b21a      	sxth	r2, r3
 8000fb6:	7b3b      	ldrb	r3, [r7, #12]
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	83bb      	strh	r3, [r7, #28]
		 //printf("HUMIDITY: %d\n", humidity_raw);
	  	 float temp_F = -49 + 315*((float)temp_raw/65535);
 8000fc0:	8bfb      	ldrh	r3, [r7, #30]
 8000fc2:	ee07 3a90 	vmov	s15, r3
 8000fc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fca:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8001068 <main+0x1a0>
 8000fce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fd2:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800106c <main+0x1a4>
 8000fd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fda:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001070 <main+0x1a8>
 8000fde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fe2:	edc7 7a06 	vstr	s15, [r7, #24]
		 float rel_humidity = 100*((float)humidity_raw/65535);
 8000fe6:	8bbb      	ldrh	r3, [r7, #28]
 8000fe8:	ee07 3a90 	vmov	s15, r3
 8000fec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ff0:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8001068 <main+0x1a0>
 8000ff4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff8:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001074 <main+0x1ac>
 8000ffc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001000:	edc7 7a05 	vstr	s15, [r7, #20]
		 printf("TEMPERATURE: %f\n", temp_F);
 8001004:	69b8      	ldr	r0, [r7, #24]
 8001006:	f7ff faa3 	bl	8000550 <__aeabi_f2d>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	481a      	ldr	r0, [pc, #104]	@ (8001078 <main+0x1b0>)
 8001010:	f008 f8d2 	bl	80091b8 <iprintf>
		 HAL_Delay(500);
 8001014:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001018:	f001 f846 	bl	80020a8 <HAL_Delay>
		 printf("HUMIDITY: %f\n", rel_humidity);
 800101c:	6978      	ldr	r0, [r7, #20]
 800101e:	f7ff fa97 	bl	8000550 <__aeabi_f2d>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4815      	ldr	r0, [pc, #84]	@ (800107c <main+0x1b4>)
 8001028:	f008 f8c6 	bl	80091b8 <iprintf>
	  	 //printf("Temp: %d, Humidity: %d\n", temp_F, rel_humidity);
	  	 HAL_Delay(1000);
 800102c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001030:	f001 f83a 	bl	80020a8 <HAL_Delay>
	  	 char data = "F";
 8001034:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <main+0x1b8>)
 8001036:	b2db      	uxtb	r3, r3
 8001038:	71fb      	strb	r3, [r7, #7]
	  	 //uint8_t TEST[] = {"A", "B"};
	  	 HAL_SPI_Transmit(&hspi1, (const uint8_t *)&data, 1, HAL_MAX_DELAY);
 800103a:	1df9      	adds	r1, r7, #7
 800103c:	f04f 33ff 	mov.w	r3, #4294967295
 8001040:	2201      	movs	r2, #1
 8001042:	4810      	ldr	r0, [pc, #64]	@ (8001084 <main+0x1bc>)
 8001044:	f006 faca 	bl	80075dc <HAL_SPI_Transmit>
  {
 8001048:	e77c      	b.n	8000f44 <main+0x7c>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800104a:	4618      	mov	r0, r3
 800104c:	3720      	adds	r7, #32
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000204 	.word	0x20000204
 8001058:	20000218 	.word	0x20000218
 800105c:	42020000 	.word	0x42020000
 8001060:	0800b1b0 	.word	0x0800b1b0
 8001064:	0800b1d0 	.word	0x0800b1d0
 8001068:	477fff00 	.word	0x477fff00
 800106c:	439d8000 	.word	0x439d8000
 8001070:	42440000 	.word	0x42440000
 8001074:	42c80000 	.word	0x42c80000
 8001078:	0800b204 	.word	0x0800b204
 800107c:	0800b218 	.word	0x0800b218
 8001080:	0800b228 	.word	0x0800b228
 8001084:	20000314 	.word	0x20000314

08001088 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b09e      	sub	sp, #120	@ 0x78
 800108c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108e:	f107 0318 	add.w	r3, r7, #24
 8001092:	2260      	movs	r2, #96	@ 0x60
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f008 f9d6 	bl	8009448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800109c:	463b      	mov	r3, r7
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]
 80010aa:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 80010ac:	2000      	movs	r0, #0
 80010ae:	f002 fa39 	bl	8003524 <HAL_PWREx_ControlVoltageScaling>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010b8:	f000 fa2e 	bl	8001518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80010bc:	2310      	movs	r3, #16
 80010be:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010c0:	2301      	movs	r3, #1
 80010c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80010c4:	2310      	movs	r3, #16
 80010c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80010c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d2:	f107 0318 	add.w	r3, r7, #24
 80010d6:	4618      	mov	r0, r3
 80010d8:	f002 fb00 	bl	80036dc <HAL_RCC_OscConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80010e2:	f000 fa19 	bl	8001518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e6:	231f      	movs	r3, #31
 80010e8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010fe:	463b      	mov	r3, r7
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f003 f9c6 	bl	8004494 <HAL_RCC_ClockConfig>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800110e:	f000 fa03 	bl	8001518 <Error_Handler>
  }
}
 8001112:	bf00      	nop
 8001114:	3778      	adds	r7, #120	@ 0x78
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	af00      	add	r7, sp, #0

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800111e:	2002      	movs	r0, #2
 8001120:	f002 fa8c 	bl	800363c <HAL_PWREx_ConfigSupply>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemPower_Config+0x14>
  {
    Error_Handler();
 800112a:	f000 f9f5 	bl	8001518 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001138:	4b1b      	ldr	r3, [pc, #108]	@ (80011a8 <MX_I2C1_Init+0x74>)
 800113a:	4a1c      	ldr	r2, [pc, #112]	@ (80011ac <MX_I2C1_Init+0x78>)
 800113c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800113e:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <MX_I2C1_Init+0x74>)
 8001140:	f640 6214 	movw	r2, #3604	@ 0xe14
 8001144:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001146:	4b18      	ldr	r3, [pc, #96]	@ (80011a8 <MX_I2C1_Init+0x74>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800114c:	4b16      	ldr	r3, [pc, #88]	@ (80011a8 <MX_I2C1_Init+0x74>)
 800114e:	2201      	movs	r2, #1
 8001150:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001152:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <MX_I2C1_Init+0x74>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001158:	4b13      	ldr	r3, [pc, #76]	@ (80011a8 <MX_I2C1_Init+0x74>)
 800115a:	2200      	movs	r2, #0
 800115c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800115e:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <MX_I2C1_Init+0x74>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001164:	4b10      	ldr	r3, [pc, #64]	@ (80011a8 <MX_I2C1_Init+0x74>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800116a:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <MX_I2C1_Init+0x74>)
 800116c:	2200      	movs	r2, #0
 800116e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001170:	480d      	ldr	r0, [pc, #52]	@ (80011a8 <MX_I2C1_Init+0x74>)
 8001172:	f001 fbe3 	bl	800293c <HAL_I2C_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800117c:	f000 f9cc 	bl	8001518 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001180:	2100      	movs	r1, #0
 8001182:	4809      	ldr	r0, [pc, #36]	@ (80011a8 <MX_I2C1_Init+0x74>)
 8001184:	f002 f906 	bl	8003394 <HAL_I2CEx_ConfigAnalogFilter>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800118e:	f000 f9c3 	bl	8001518 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001192:	2100      	movs	r1, #0
 8001194:	4804      	ldr	r0, [pc, #16]	@ (80011a8 <MX_I2C1_Init+0x74>)
 8001196:	f002 f948 	bl	800342a <HAL_I2CEx_ConfigDigitalFilter>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80011a0:	f000 f9ba 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000218 	.word	0x20000218
 80011ac:	40005400 	.word	0x40005400

080011b0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001224 <MX_I2C2_Init+0x74>)
 80011b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001228 <MX_I2C2_Init+0x78>)
 80011b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80011ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001224 <MX_I2C2_Init+0x74>)
 80011bc:	f640 6214 	movw	r2, #3604	@ 0xe14
 80011c0:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80011c2:	4b18      	ldr	r3, [pc, #96]	@ (8001224 <MX_I2C2_Init+0x74>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c8:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <MX_I2C2_Init+0x74>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ce:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <MX_I2C2_Init+0x74>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80011d4:	4b13      	ldr	r3, [pc, #76]	@ (8001224 <MX_I2C2_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011da:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <MX_I2C2_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e0:	4b10      	ldr	r3, [pc, #64]	@ (8001224 <MX_I2C2_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001224 <MX_I2C2_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011ec:	480d      	ldr	r0, [pc, #52]	@ (8001224 <MX_I2C2_Init+0x74>)
 80011ee:	f001 fba5 	bl	800293c <HAL_I2C_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011f8:	f000 f98e 	bl	8001518 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011fc:	2100      	movs	r1, #0
 80011fe:	4809      	ldr	r0, [pc, #36]	@ (8001224 <MX_I2C2_Init+0x74>)
 8001200:	f002 f8c8 	bl	8003394 <HAL_I2CEx_ConfigAnalogFilter>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800120a:	f000 f985 	bl	8001518 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800120e:	2100      	movs	r1, #0
 8001210:	4804      	ldr	r0, [pc, #16]	@ (8001224 <MX_I2C2_Init+0x74>)
 8001212:	f002 f90a 	bl	800342a <HAL_I2CEx_ConfigDigitalFilter>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800121c:	f000 f97c 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	2000026c 	.word	0x2000026c
 8001228:	40005800 	.word	0x40005800

0800122c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001230:	4b1b      	ldr	r3, [pc, #108]	@ (80012a0 <MX_I2C3_Init+0x74>)
 8001232:	4a1c      	ldr	r2, [pc, #112]	@ (80012a4 <MX_I2C3_Init+0x78>)
 8001234:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 8001236:	4b1a      	ldr	r3, [pc, #104]	@ (80012a0 <MX_I2C3_Init+0x74>)
 8001238:	f640 6214 	movw	r2, #3604	@ 0xe14
 800123c:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800123e:	4b18      	ldr	r3, [pc, #96]	@ (80012a0 <MX_I2C3_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001244:	4b16      	ldr	r3, [pc, #88]	@ (80012a0 <MX_I2C3_Init+0x74>)
 8001246:	2201      	movs	r2, #1
 8001248:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800124a:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <MX_I2C3_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001250:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <MX_I2C3_Init+0x74>)
 8001252:	2200      	movs	r2, #0
 8001254:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001256:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <MX_I2C3_Init+0x74>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800125c:	4b10      	ldr	r3, [pc, #64]	@ (80012a0 <MX_I2C3_Init+0x74>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001262:	4b0f      	ldr	r3, [pc, #60]	@ (80012a0 <MX_I2C3_Init+0x74>)
 8001264:	2200      	movs	r2, #0
 8001266:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001268:	480d      	ldr	r0, [pc, #52]	@ (80012a0 <MX_I2C3_Init+0x74>)
 800126a:	f001 fb67 	bl	800293c <HAL_I2C_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001274:	f000 f950 	bl	8001518 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001278:	2100      	movs	r1, #0
 800127a:	4809      	ldr	r0, [pc, #36]	@ (80012a0 <MX_I2C3_Init+0x74>)
 800127c:	f002 f88a 	bl	8003394 <HAL_I2CEx_ConfigAnalogFilter>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001286:	f000 f947 	bl	8001518 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800128a:	2100      	movs	r1, #0
 800128c:	4804      	ldr	r0, [pc, #16]	@ (80012a0 <MX_I2C3_Init+0x74>)
 800128e:	f002 f8cc 	bl	800342a <HAL_I2CEx_ConfigDigitalFilter>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001298:	f000 f93e 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200002c0 	.word	0x200002c0
 80012a4:	46002800 	.word	0x46002800

080012a8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80012ac:	2000      	movs	r0, #0
 80012ae:	f002 f909 	bl	80034c4 <HAL_ICACHE_ConfigAssociativityMode>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80012b8:	f000 f92e 	bl	8001518 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80012bc:	f002 f922 	bl	8003504 <HAL_ICACHE_Enable>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80012c6:	f000 f927 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012e0:	4b30      	ldr	r3, [pc, #192]	@ (80013a4 <MX_SPI1_Init+0xd4>)
 80012e2:	4a31      	ldr	r2, [pc, #196]	@ (80013a8 <MX_SPI1_Init+0xd8>)
 80012e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012e6:	4b2f      	ldr	r3, [pc, #188]	@ (80013a4 <MX_SPI1_Init+0xd4>)
 80012e8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80012ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012ee:	4b2d      	ldr	r3, [pc, #180]	@ (80013a4 <MX_SPI1_Init+0xd4>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80012f4:	4b2b      	ldr	r3, [pc, #172]	@ (80013a4 <MX_SPI1_Init+0xd4>)
 80012f6:	2203      	movs	r2, #3
 80012f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012fa:	4b2a      	ldr	r3, [pc, #168]	@ (80013a4 <MX_SPI1_Init+0xd4>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001300:	4b28      	ldr	r3, [pc, #160]	@ (80013a4 <MX_SPI1_Init+0xd4>)
 8001302:	2200      	movs	r2, #0
 8001304:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001306:	4b27      	ldr	r3, [pc, #156]	@ (80013a4 <MX_SPI1_Init+0xd4>)
 8001308:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800130c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800130e:	4b25      	ldr	r3, [pc, #148]	@ (80013a4 <MX_SPI1_Init+0xd4>)
 8001310:	2200      	movs	r2, #0
 8001312:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001314:	4b23      	ldr	r3, [pc, #140]	@ (80013a4 <MX_SPI1_Init+0xd4>)
 8001316:	2200      	movs	r2, #0
 8001318:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800131a:	4b22      	ldr	r3, [pc, #136]	@ (80013a4 <MX_SPI1_Init+0xd4>)
 800131c:	2200      	movs	r2, #0
 800131e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001320:	4b20      	ldr	r3, [pc, #128]	@ (80013a4 <MX_SPI1_Init+0xd4>)
 8001322:	2200      	movs	r2, #0
 8001324:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001326:	4b1f      	ldr	r3, [pc, #124]	@ (80013a4 <MX_SPI1_Init+0xd4>)
 8001328:	2207      	movs	r2, #7
 800132a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800132c:	4b1d      	ldr	r3, [pc, #116]	@ (80013a4 <MX_SPI1_Init+0xd4>)
 800132e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001332:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001334:	4b1b      	ldr	r3, [pc, #108]	@ (80013a4 <MX_SPI1_Init+0xd4>)
 8001336:	2200      	movs	r2, #0
 8001338:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800133a:	4b1a      	ldr	r3, [pc, #104]	@ (80013a4 <MX_SPI1_Init+0xd4>)
 800133c:	2200      	movs	r2, #0
 800133e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001340:	4b18      	ldr	r3, [pc, #96]	@ (80013a4 <MX_SPI1_Init+0xd4>)
 8001342:	2200      	movs	r2, #0
 8001344:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001346:	4b17      	ldr	r3, [pc, #92]	@ (80013a4 <MX_SPI1_Init+0xd4>)
 8001348:	2200      	movs	r2, #0
 800134a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800134c:	4b15      	ldr	r3, [pc, #84]	@ (80013a4 <MX_SPI1_Init+0xd4>)
 800134e:	2200      	movs	r2, #0
 8001350:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001352:	4b14      	ldr	r3, [pc, #80]	@ (80013a4 <MX_SPI1_Init+0xd4>)
 8001354:	2200      	movs	r2, #0
 8001356:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001358:	4b12      	ldr	r3, [pc, #72]	@ (80013a4 <MX_SPI1_Init+0xd4>)
 800135a:	2200      	movs	r2, #0
 800135c:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800135e:	4b11      	ldr	r3, [pc, #68]	@ (80013a4 <MX_SPI1_Init+0xd4>)
 8001360:	2200      	movs	r2, #0
 8001362:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001364:	4b0f      	ldr	r3, [pc, #60]	@ (80013a4 <MX_SPI1_Init+0xd4>)
 8001366:	2200      	movs	r2, #0
 8001368:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800136a:	480e      	ldr	r0, [pc, #56]	@ (80013a4 <MX_SPI1_Init+0xd4>)
 800136c:	f006 f820 	bl	80073b0 <HAL_SPI_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 8001376:	f000 f8cf 	bl	8001518 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 800137e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001382:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	4619      	mov	r1, r3
 800138c:	4805      	ldr	r0, [pc, #20]	@ (80013a4 <MX_SPI1_Init+0xd4>)
 800138e:	f006 fc1e 	bl	8007bce <HAL_SPIEx_SetConfigAutonomousMode>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 8001398:	f000 f8be 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800139c:	bf00      	nop
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000314 	.word	0x20000314
 80013a8:	40013000 	.word	0x40013000

080013ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013b0:	4b22      	ldr	r3, [pc, #136]	@ (800143c <MX_USART3_UART_Init+0x90>)
 80013b2:	4a23      	ldr	r2, [pc, #140]	@ (8001440 <MX_USART3_UART_Init+0x94>)
 80013b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013b6:	4b21      	ldr	r3, [pc, #132]	@ (800143c <MX_USART3_UART_Init+0x90>)
 80013b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013be:	4b1f      	ldr	r3, [pc, #124]	@ (800143c <MX_USART3_UART_Init+0x90>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013c4:	4b1d      	ldr	r3, [pc, #116]	@ (800143c <MX_USART3_UART_Init+0x90>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013ca:	4b1c      	ldr	r3, [pc, #112]	@ (800143c <MX_USART3_UART_Init+0x90>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013d0:	4b1a      	ldr	r3, [pc, #104]	@ (800143c <MX_USART3_UART_Init+0x90>)
 80013d2:	220c      	movs	r2, #12
 80013d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d6:	4b19      	ldr	r3, [pc, #100]	@ (800143c <MX_USART3_UART_Init+0x90>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013dc:	4b17      	ldr	r3, [pc, #92]	@ (800143c <MX_USART3_UART_Init+0x90>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013e2:	4b16      	ldr	r3, [pc, #88]	@ (800143c <MX_USART3_UART_Init+0x90>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013e8:	4b14      	ldr	r3, [pc, #80]	@ (800143c <MX_USART3_UART_Init+0x90>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ee:	4b13      	ldr	r3, [pc, #76]	@ (800143c <MX_USART3_UART_Init+0x90>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013f4:	4811      	ldr	r0, [pc, #68]	@ (800143c <MX_USART3_UART_Init+0x90>)
 80013f6:	f006 fc2b 	bl	8007c50 <HAL_UART_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001400:	f000 f88a 	bl	8001518 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001404:	2100      	movs	r1, #0
 8001406:	480d      	ldr	r0, [pc, #52]	@ (800143c <MX_USART3_UART_Init+0x90>)
 8001408:	f007 f8f0 	bl	80085ec <HAL_UARTEx_SetTxFifoThreshold>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001412:	f000 f881 	bl	8001518 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001416:	2100      	movs	r1, #0
 8001418:	4808      	ldr	r0, [pc, #32]	@ (800143c <MX_USART3_UART_Init+0x90>)
 800141a:	f007 f925 	bl	8008668 <HAL_UARTEx_SetRxFifoThreshold>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001424:	f000 f878 	bl	8001518 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001428:	4804      	ldr	r0, [pc, #16]	@ (800143c <MX_USART3_UART_Init+0x90>)
 800142a:	f007 f8a6 	bl	800857a <HAL_UARTEx_DisableFifoMode>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001434:	f000 f870 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	200003a4 	.word	0x200003a4
 8001440:	40004800 	.word	0x40004800

08001444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144a:	f107 030c 	add.w	r3, r7, #12
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
 8001458:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800145a:	4b23      	ldr	r3, [pc, #140]	@ (80014e8 <MX_GPIO_Init+0xa4>)
 800145c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001460:	4a21      	ldr	r2, [pc, #132]	@ (80014e8 <MX_GPIO_Init+0xa4>)
 8001462:	f043 0304 	orr.w	r3, r3, #4
 8001466:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800146a:	4b1f      	ldr	r3, [pc, #124]	@ (80014e8 <MX_GPIO_Init+0xa4>)
 800146c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001470:	f003 0304 	and.w	r3, r3, #4
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001478:	4b1b      	ldr	r3, [pc, #108]	@ (80014e8 <MX_GPIO_Init+0xa4>)
 800147a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800147e:	4a1a      	ldr	r2, [pc, #104]	@ (80014e8 <MX_GPIO_Init+0xa4>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001488:	4b17      	ldr	r3, [pc, #92]	@ (80014e8 <MX_GPIO_Init+0xa4>)
 800148a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	4b14      	ldr	r3, [pc, #80]	@ (80014e8 <MX_GPIO_Init+0xa4>)
 8001498:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800149c:	4a12      	ldr	r2, [pc, #72]	@ (80014e8 <MX_GPIO_Init+0xa4>)
 800149e:	f043 0302 	orr.w	r3, r3, #2
 80014a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014a6:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <MX_GPIO_Init+0xa4>)
 80014a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	603b      	str	r3, [r7, #0]
 80014b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 80014ba:	480c      	ldr	r0, [pc, #48]	@ (80014ec <MX_GPIO_Init+0xa8>)
 80014bc:	f001 fa0c 	bl	80028d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80014c0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80014c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c6:	2301      	movs	r3, #1
 80014c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d2:	f107 030c 	add.w	r3, r7, #12
 80014d6:	4619      	mov	r1, r3
 80014d8:	4804      	ldr	r0, [pc, #16]	@ (80014ec <MX_GPIO_Init+0xa8>)
 80014da:	f001 f825 	bl	8002528 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014de:	bf00      	nop
 80014e0:	3720      	adds	r7, #32
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	46020c00 	.word	0x46020c00
 80014ec:	42020800 	.word	0x42020800

080014f0 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d102      	bne.n	8001506 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8001500:	4b04      	ldr	r3, [pc, #16]	@ (8001514 <BSP_PB_Callback+0x24>)
 8001502:	2201      	movs	r2, #1
 8001504:	601a      	str	r2, [r3, #0]
  }
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000214 	.word	0x20000214

08001518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800151c:	b672      	cpsid	i
}
 800151e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001520:	bf00      	nop
 8001522:	e7fd      	b.n	8001520 <Error_Handler+0x8>

08001524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	4b0a      	ldr	r3, [pc, #40]	@ (8001554 <HAL_MspInit+0x30>)
 800152c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001530:	4a08      	ldr	r2, [pc, #32]	@ (8001554 <HAL_MspInit+0x30>)
 8001532:	f043 0304 	orr.w	r3, r3, #4
 8001536:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800153a:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <HAL_MspInit+0x30>)
 800153c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	607b      	str	r3, [r7, #4]
 8001546:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	46020c00 	.word	0x46020c00

08001558 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b0be      	sub	sp, #248	@ 0xf8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001570:	f107 0320 	add.w	r3, r7, #32
 8001574:	22c0      	movs	r2, #192	@ 0xc0
 8001576:	2100      	movs	r1, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f007 ff65 	bl	8009448 <memset>
  if(hi2c->Instance==I2C1)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a73      	ldr	r2, [pc, #460]	@ (8001750 <HAL_I2C_MspInit+0x1f8>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d146      	bne.n	8001616 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001588:	f04f 0240 	mov.w	r2, #64	@ 0x40
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001594:	2300      	movs	r3, #0
 8001596:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800159a:	f107 0320 	add.w	r3, r7, #32
 800159e:	4618      	mov	r0, r3
 80015a0:	f003 fb48 	bl	8004c34 <HAL_RCCEx_PeriphCLKConfig>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80015aa:	f7ff ffb5 	bl	8001518 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ae:	4b69      	ldr	r3, [pc, #420]	@ (8001754 <HAL_I2C_MspInit+0x1fc>)
 80015b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015b4:	4a67      	ldr	r2, [pc, #412]	@ (8001754 <HAL_I2C_MspInit+0x1fc>)
 80015b6:	f043 0302 	orr.w	r3, r3, #2
 80015ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015be:	4b65      	ldr	r3, [pc, #404]	@ (8001754 <HAL_I2C_MspInit+0x1fc>)
 80015c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	61fb      	str	r3, [r7, #28]
 80015ca:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80015cc:	2348      	movs	r3, #72	@ 0x48
 80015ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015d2:	2312      	movs	r3, #18
 80015d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015e4:	2304      	movs	r3, #4
 80015e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ea:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80015ee:	4619      	mov	r1, r3
 80015f0:	4859      	ldr	r0, [pc, #356]	@ (8001758 <HAL_I2C_MspInit+0x200>)
 80015f2:	f000 ff99 	bl	8002528 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015f6:	4b57      	ldr	r3, [pc, #348]	@ (8001754 <HAL_I2C_MspInit+0x1fc>)
 80015f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015fc:	4a55      	ldr	r2, [pc, #340]	@ (8001754 <HAL_I2C_MspInit+0x1fc>)
 80015fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001602:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001606:	4b53      	ldr	r3, [pc, #332]	@ (8001754 <HAL_I2C_MspInit+0x1fc>)
 8001608:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800160c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001610:	61bb      	str	r3, [r7, #24]
 8001612:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001614:	e097      	b.n	8001746 <HAL_I2C_MspInit+0x1ee>
  else if(hi2c->Instance==I2C2)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a50      	ldr	r2, [pc, #320]	@ (800175c <HAL_I2C_MspInit+0x204>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d147      	bne.n	80016b0 <HAL_I2C_MspInit+0x158>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001620:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8001624:	f04f 0300 	mov.w	r3, #0
 8001628:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800162c:	2300      	movs	r3, #0
 800162e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001632:	f107 0320 	add.w	r3, r7, #32
 8001636:	4618      	mov	r0, r3
 8001638:	f003 fafc 	bl	8004c34 <HAL_RCCEx_PeriphCLKConfig>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8001642:	f7ff ff69 	bl	8001518 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001646:	4b43      	ldr	r3, [pc, #268]	@ (8001754 <HAL_I2C_MspInit+0x1fc>)
 8001648:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800164c:	4a41      	ldr	r2, [pc, #260]	@ (8001754 <HAL_I2C_MspInit+0x1fc>)
 800164e:	f043 0302 	orr.w	r3, r3, #2
 8001652:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001656:	4b3f      	ldr	r3, [pc, #252]	@ (8001754 <HAL_I2C_MspInit+0x1fc>)
 8001658:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	617b      	str	r3, [r7, #20]
 8001662:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
 8001664:	f44f 4388 	mov.w	r3, #17408	@ 0x4400
 8001668:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800166c:	2312      	movs	r3, #18
 800166e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800167e:	2304      	movs	r3, #4
 8001680:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001684:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001688:	4619      	mov	r1, r3
 800168a:	4833      	ldr	r0, [pc, #204]	@ (8001758 <HAL_I2C_MspInit+0x200>)
 800168c:	f000 ff4c 	bl	8002528 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001690:	4b30      	ldr	r3, [pc, #192]	@ (8001754 <HAL_I2C_MspInit+0x1fc>)
 8001692:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001696:	4a2f      	ldr	r2, [pc, #188]	@ (8001754 <HAL_I2C_MspInit+0x1fc>)
 8001698:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800169c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80016a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001754 <HAL_I2C_MspInit+0x1fc>)
 80016a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80016a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]
}
 80016ae:	e04a      	b.n	8001746 <HAL_I2C_MspInit+0x1ee>
  else if(hi2c->Instance==I2C3)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a2a      	ldr	r2, [pc, #168]	@ (8001760 <HAL_I2C_MspInit+0x208>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d145      	bne.n	8001746 <HAL_I2C_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80016ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016be:	f04f 0300 	mov.w	r3, #0
 80016c2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016cc:	f107 0320 	add.w	r3, r7, #32
 80016d0:	4618      	mov	r0, r3
 80016d2:	f003 faaf 	bl	8004c34 <HAL_RCCEx_PeriphCLKConfig>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <HAL_I2C_MspInit+0x188>
      Error_Handler();
 80016dc:	f7ff ff1c 	bl	8001518 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001754 <HAL_I2C_MspInit+0x1fc>)
 80016e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001754 <HAL_I2C_MspInit+0x1fc>)
 80016e8:	f043 0304 	orr.w	r3, r3, #4
 80016ec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016f0:	4b18      	ldr	r3, [pc, #96]	@ (8001754 <HAL_I2C_MspInit+0x1fc>)
 80016f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016f6:	f003 0304 	and.w	r3, r3, #4
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016fe:	2303      	movs	r3, #3
 8001700:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001704:	2312      	movs	r3, #18
 8001706:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001716:	2304      	movs	r3, #4
 8001718:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800171c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001720:	4619      	mov	r1, r3
 8001722:	4810      	ldr	r0, [pc, #64]	@ (8001764 <HAL_I2C_MspInit+0x20c>)
 8001724:	f000 ff00 	bl	8002528 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001728:	4b0a      	ldr	r3, [pc, #40]	@ (8001754 <HAL_I2C_MspInit+0x1fc>)
 800172a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800172e:	4a09      	ldr	r2, [pc, #36]	@ (8001754 <HAL_I2C_MspInit+0x1fc>)
 8001730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001734:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001738:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <HAL_I2C_MspInit+0x1fc>)
 800173a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800173e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
}
 8001746:	bf00      	nop
 8001748:	37f8      	adds	r7, #248	@ 0xf8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40005400 	.word	0x40005400
 8001754:	46020c00 	.word	0x46020c00
 8001758:	42020400 	.word	0x42020400
 800175c:	40005800 	.word	0x40005800
 8001760:	46002800 	.word	0x46002800
 8001764:	42020800 	.word	0x42020800

08001768 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b0ba      	sub	sp, #232	@ 0xe8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	22c0      	movs	r2, #192	@ 0xc0
 8001786:	2100      	movs	r1, #0
 8001788:	4618      	mov	r0, r3
 800178a:	f007 fe5d 	bl	8009448 <memset>
  if(hspi->Instance==SPI1)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a27      	ldr	r2, [pc, #156]	@ (8001830 <HAL_SPI_MspInit+0xc8>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d146      	bne.n	8001826 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001798:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800179c:	f04f 0300 	mov.w	r3, #0
 80017a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 80017a4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80017a8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017ac:	f107 0310 	add.w	r3, r7, #16
 80017b0:	4618      	mov	r0, r3
 80017b2:	f003 fa3f 	bl	8004c34 <HAL_RCCEx_PeriphCLKConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 80017bc:	f7ff feac 	bl	8001518 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001834 <HAL_SPI_MspInit+0xcc>)
 80017c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80017c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001834 <HAL_SPI_MspInit+0xcc>)
 80017c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017cc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80017d0:	4b18      	ldr	r3, [pc, #96]	@ (8001834 <HAL_SPI_MspInit+0xcc>)
 80017d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80017d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	4b15      	ldr	r3, [pc, #84]	@ (8001834 <HAL_SPI_MspInit+0xcc>)
 80017e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017e4:	4a13      	ldr	r2, [pc, #76]	@ (8001834 <HAL_SPI_MspInit+0xcc>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017ee:	4b11      	ldr	r3, [pc, #68]	@ (8001834 <HAL_SPI_MspInit+0xcc>)
 80017f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80017fc:	23c2      	movs	r3, #194	@ 0xc2
 80017fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001814:	2305      	movs	r3, #5
 8001816:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800181e:	4619      	mov	r1, r3
 8001820:	4805      	ldr	r0, [pc, #20]	@ (8001838 <HAL_SPI_MspInit+0xd0>)
 8001822:	f000 fe81 	bl	8002528 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001826:	bf00      	nop
 8001828:	37e8      	adds	r7, #232	@ 0xe8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40013000 	.word	0x40013000
 8001834:	46020c00 	.word	0x46020c00
 8001838:	42020000 	.word	0x42020000

0800183c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b0ba      	sub	sp, #232	@ 0xe8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001854:	f107 0310 	add.w	r3, r7, #16
 8001858:	22c0      	movs	r2, #192	@ 0xc0
 800185a:	2100      	movs	r1, #0
 800185c:	4618      	mov	r0, r3
 800185e:	f007 fdf3 	bl	8009448 <memset>
  if(huart->Instance==USART3)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a26      	ldr	r2, [pc, #152]	@ (8001900 <HAL_UART_MspInit+0xc4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d145      	bne.n	80018f8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800186c:	f04f 0204 	mov.w	r2, #4
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001878:	2300      	movs	r3, #0
 800187a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800187c:	f107 0310 	add.w	r3, r7, #16
 8001880:	4618      	mov	r0, r3
 8001882:	f003 f9d7 	bl	8004c34 <HAL_RCCEx_PeriphCLKConfig>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 800188c:	f7ff fe44 	bl	8001518 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001890:	4b1c      	ldr	r3, [pc, #112]	@ (8001904 <HAL_UART_MspInit+0xc8>)
 8001892:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001896:	4a1b      	ldr	r2, [pc, #108]	@ (8001904 <HAL_UART_MspInit+0xc8>)
 8001898:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800189c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80018a0:	4b18      	ldr	r3, [pc, #96]	@ (8001904 <HAL_UART_MspInit+0xc8>)
 80018a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80018a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ae:	4b15      	ldr	r3, [pc, #84]	@ (8001904 <HAL_UART_MspInit+0xc8>)
 80018b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018b4:	4a13      	ldr	r2, [pc, #76]	@ (8001904 <HAL_UART_MspInit+0xc8>)
 80018b6:	f043 0304 	orr.w	r3, r3, #4
 80018ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018be:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <HAL_UART_MspInit+0xc8>)
 80018c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018cc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80018d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d4:	2302      	movs	r3, #2
 80018d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018e6:	2307      	movs	r3, #7
 80018e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80018f0:	4619      	mov	r1, r3
 80018f2:	4805      	ldr	r0, [pc, #20]	@ (8001908 <HAL_UART_MspInit+0xcc>)
 80018f4:	f000 fe18 	bl	8002528 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80018f8:	bf00      	nop
 80018fa:	37e8      	adds	r7, #232	@ 0xe8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40004800 	.word	0x40004800
 8001904:	46020c00 	.word	0x46020c00
 8001908:	42020800 	.word	0x42020800

0800190c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <NMI_Handler+0x4>

08001914 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <HardFault_Handler+0x4>

0800191c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <MemManage_Handler+0x4>

08001924 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <BusFault_Handler+0x4>

0800192c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <UsageFault_Handler+0x4>

08001934 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001962:	f000 fb81 	bl	8002068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}

0800196a <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800196e:	2000      	movs	r0, #0
 8001970:	f000 f9de 	bl	8001d30 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}

08001978 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return 1;
 800197c:	2301      	movs	r3, #1
}
 800197e:	4618      	mov	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <_kill>:

int _kill(int pid, int sig)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001992:	f007 fdab 	bl	80094ec <__errno>
 8001996:	4603      	mov	r3, r0
 8001998:	2216      	movs	r2, #22
 800199a:	601a      	str	r2, [r3, #0]
  return -1;
 800199c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <_exit>:

void _exit (int status)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019b0:	f04f 31ff 	mov.w	r1, #4294967295
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ffe7 	bl	8001988 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019ba:	bf00      	nop
 80019bc:	e7fd      	b.n	80019ba <_exit+0x12>

080019be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b086      	sub	sp, #24
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	e00a      	b.n	80019e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019d0:	f3af 8000 	nop.w
 80019d4:	4601      	mov	r1, r0
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	60ba      	str	r2, [r7, #8]
 80019dc:	b2ca      	uxtb	r2, r1
 80019de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	3301      	adds	r3, #1
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	dbf0      	blt.n	80019d0 <_read+0x12>
  }

  return len;
 80019ee:	687b      	ldr	r3, [r7, #4]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	e009      	b.n	8001a1e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	1c5a      	adds	r2, r3, #1
 8001a0e:	60ba      	str	r2, [r7, #8]
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f000 fa06 	bl	8001e24 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	dbf1      	blt.n	8001a0a <_write+0x12>
  }
  return len;
 8001a26:	687b      	ldr	r3, [r7, #4]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <_close>:

int _close(int file)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a58:	605a      	str	r2, [r3, #4]
  return 0;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <_isatty>:

int _isatty(int file)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a70:	2301      	movs	r3, #1
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b085      	sub	sp, #20
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	60f8      	str	r0, [r7, #12]
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa0:	4a14      	ldr	r2, [pc, #80]	@ (8001af4 <_sbrk+0x5c>)
 8001aa2:	4b15      	ldr	r3, [pc, #84]	@ (8001af8 <_sbrk+0x60>)
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aac:	4b13      	ldr	r3, [pc, #76]	@ (8001afc <_sbrk+0x64>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d102      	bne.n	8001aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <_sbrk+0x64>)
 8001ab6:	4a12      	ldr	r2, [pc, #72]	@ (8001b00 <_sbrk+0x68>)
 8001ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aba:	4b10      	ldr	r3, [pc, #64]	@ (8001afc <_sbrk+0x64>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d207      	bcs.n	8001ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ac8:	f007 fd10 	bl	80094ec <__errno>
 8001acc:	4603      	mov	r3, r0
 8001ace:	220c      	movs	r2, #12
 8001ad0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad6:	e009      	b.n	8001aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ad8:	4b08      	ldr	r3, [pc, #32]	@ (8001afc <_sbrk+0x64>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ade:	4b07      	ldr	r3, [pc, #28]	@ (8001afc <_sbrk+0x64>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	4a05      	ldr	r2, [pc, #20]	@ (8001afc <_sbrk+0x64>)
 8001ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aea:	68fb      	ldr	r3, [r7, #12]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20040000 	.word	0x20040000
 8001af8:	00000400 	.word	0x00000400
 8001afc:	20000438 	.word	0x20000438
 8001b00:	20000630 	.word	0x20000630

08001b04 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b08:	4b18      	ldr	r3, [pc, #96]	@ (8001b6c <SystemInit+0x68>)
 8001b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b0e:	4a17      	ldr	r2, [pc, #92]	@ (8001b6c <SystemInit+0x68>)
 8001b10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001b18:	4b15      	ldr	r3, [pc, #84]	@ (8001b70 <SystemInit+0x6c>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001b1e:	4b14      	ldr	r3, [pc, #80]	@ (8001b70 <SystemInit+0x6c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001b24:	4b12      	ldr	r3, [pc, #72]	@ (8001b70 <SystemInit+0x6c>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001b2a:	4b11      	ldr	r3, [pc, #68]	@ (8001b70 <SystemInit+0x6c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001b30:	4b0f      	ldr	r3, [pc, #60]	@ (8001b70 <SystemInit+0x6c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0e      	ldr	r2, [pc, #56]	@ (8001b70 <SystemInit+0x6c>)
 8001b36:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001b3a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001b3e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001b40:	4b0b      	ldr	r3, [pc, #44]	@ (8001b70 <SystemInit+0x6c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001b46:	4b0a      	ldr	r3, [pc, #40]	@ (8001b70 <SystemInit+0x6c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a09      	ldr	r2, [pc, #36]	@ (8001b70 <SystemInit+0x6c>)
 8001b4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b50:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001b52:	4b07      	ldr	r3, [pc, #28]	@ (8001b70 <SystemInit+0x6c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b58:	4b04      	ldr	r3, [pc, #16]	@ (8001b6c <SystemInit+0x68>)
 8001b5a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b5e:	609a      	str	r2, [r3, #8]
  #endif
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000ed00 	.word	0xe000ed00
 8001b70:	46020c00 	.word	0x46020c00

08001b74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b74:	480d      	ldr	r0, [pc, #52]	@ (8001bac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b76:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b78:	f7ff ffc4 	bl	8001b04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b7c:	480c      	ldr	r0, [pc, #48]	@ (8001bb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b7e:	490d      	ldr	r1, [pc, #52]	@ (8001bb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b80:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb8 <LoopForever+0xe>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b84:	e002      	b.n	8001b8c <LoopCopyDataInit>

08001b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8a:	3304      	adds	r3, #4

08001b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b90:	d3f9      	bcc.n	8001b86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b92:	4a0a      	ldr	r2, [pc, #40]	@ (8001bbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b94:	4c0a      	ldr	r4, [pc, #40]	@ (8001bc0 <LoopForever+0x16>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b98:	e001      	b.n	8001b9e <LoopFillZerobss>

08001b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b9c:	3204      	adds	r2, #4

08001b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba0:	d3fb      	bcc.n	8001b9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ba2:	f007 fca9 	bl	80094f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ba6:	f7ff f98f 	bl	8000ec8 <main>

08001baa <LoopForever>:

LoopForever:
    b LoopForever
 8001baa:	e7fe      	b.n	8001baa <LoopForever>
  ldr   r0, =_estack
 8001bac:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001bb8:	0800b6b0 	.word	0x0800b6b0
  ldr r2, =_sbss
 8001bbc:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001bc0:	20000630 	.word	0x20000630

08001bc4 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bc4:	e7fe      	b.n	8001bc4 <ADC1_IRQHandler>
	...

08001bc8 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08a      	sub	sp, #40	@ 0x28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <BSP_LED_Init+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001bdc:	f06f 0301 	mvn.w	r3, #1
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001be2:	e023      	b.n	8001c2c <BSP_LED_Init+0x64>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10e      	bne.n	8001c08 <BSP_LED_Init+0x40>
    {
      LED2_GPIO_CLK_ENABLE();
 8001bea:	4b13      	ldr	r3, [pc, #76]	@ (8001c38 <BSP_LED_Init+0x70>)
 8001bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bf0:	4a11      	ldr	r2, [pc, #68]	@ (8001c38 <BSP_LED_Init+0x70>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001c38 <BSP_LED_Init+0x70>)
 8001bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	68fb      	ldr	r3, [r7, #12]

      LED3_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001c08:	2320      	movs	r3, #32
 8001c0a:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c14:	2303      	movs	r3, #3
 8001c16:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	4a08      	ldr	r2, [pc, #32]	@ (8001c3c <BSP_LED_Init+0x74>)
 8001c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c20:	f107 0210 	add.w	r2, r7, #16
 8001c24:	4611      	mov	r1, r2
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 fc7e 	bl	8002528 <HAL_GPIO_Init>
  }

  return ret;
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3728      	adds	r7, #40	@ 0x28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	46020c00 	.word	0x46020c00
 8001c3c:	20000008 	.word	0x20000008

08001c40 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	460a      	mov	r2, r1
 8001c4a:	71fb      	strb	r3, [r7, #7]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001c50:	4b30      	ldr	r3, [pc, #192]	@ (8001d14 <BSP_PB_Init+0xd4>)
 8001c52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c56:	4a2f      	ldr	r2, [pc, #188]	@ (8001d14 <BSP_PB_Init+0xd4>)
 8001c58:	f043 0304 	orr.w	r3, r3, #4
 8001c5c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c60:	4b2c      	ldr	r3, [pc, #176]	@ (8001d14 <BSP_PB_Init+0xd4>)
 8001c62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001c6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c72:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001c74:	2302      	movs	r3, #2
 8001c76:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001c7c:	79bb      	ldrb	r3, [r7, #6]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10c      	bne.n	8001c9c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	4a23      	ldr	r2, [pc, #140]	@ (8001d18 <BSP_PB_Init+0xd8>)
 8001c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8e:	f107 020c 	add.w	r2, r7, #12
 8001c92:	4611      	mov	r1, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 fc47 	bl	8002528 <HAL_GPIO_Init>
 8001c9a:	e036      	b.n	8001d0a <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001c9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001d1c <BSP_PB_Init+0xdc>)
 8001c9e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	4a1d      	ldr	r2, [pc, #116]	@ (8001d18 <BSP_PB_Init+0xd8>)
 8001ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca8:	f107 020c 	add.w	r2, r7, #12
 8001cac:	4611      	mov	r1, r2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 fc3a 	bl	8002528 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001cb4:	79fa      	ldrb	r2, [r7, #7]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	4413      	add	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4a18      	ldr	r2, [pc, #96]	@ (8001d20 <BSP_PB_Init+0xe0>)
 8001cc0:	441a      	add	r2, r3
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	4917      	ldr	r1, [pc, #92]	@ (8001d24 <BSP_PB_Init+0xe4>)
 8001cc6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4610      	mov	r0, r2
 8001cce:	f000 fbcf 	bl	8002470 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001cd2:	79fa      	ldrb	r2, [r7, #7]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4a10      	ldr	r2, [pc, #64]	@ (8001d20 <BSP_PB_Init+0xe0>)
 8001cde:	1898      	adds	r0, r3, r2
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	4a11      	ldr	r2, [pc, #68]	@ (8001d28 <BSP_PB_Init+0xe8>)
 8001ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	2100      	movs	r1, #0
 8001cec:	f000 fb94 	bl	8002418 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001cf0:	2018      	movs	r0, #24
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8001d2c <BSP_PB_Init+0xec>)
 8001cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f000 faaf 	bl	8002260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001d02:	2318      	movs	r3, #24
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 fac5 	bl	8002294 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3720      	adds	r7, #32
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	46020c00 	.word	0x46020c00
 8001d18:	2000000c 	.word	0x2000000c
 8001d1c:	10110000 	.word	0x10110000
 8001d20:	2000043c 	.word	0x2000043c
 8001d24:	0800b284 	.word	0x0800b284
 8001d28:	20000010 	.word	0x20000010
 8001d2c:	20000014 	.word	0x20000014

08001d30 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001d3a:	79fa      	ldrb	r2, [r7, #7]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4413      	add	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4a04      	ldr	r2, [pc, #16]	@ (8001d58 <BSP_PB_IRQHandler+0x28>)
 8001d46:	4413      	add	r3, r2
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 fba5 	bl	8002498 <HAL_EXTI_IRQHandler>
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	2000043c 	.word	0x2000043c

08001d5c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	6039      	str	r1, [r7, #0]
 8001d66:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001d72:	f06f 0301 	mvn.w	r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	e018      	b.n	8001dac <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	2294      	movs	r2, #148	@ 0x94
 8001d7e:	fb02 f303 	mul.w	r3, r2, r3
 8001d82:	4a0d      	ldr	r2, [pc, #52]	@ (8001db8 <BSP_COM_Init+0x5c>)
 8001d84:	4413      	add	r3, r2
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 f870 	bl	8001e6c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001d8c:	79fb      	ldrb	r3, [r7, #7]
 8001d8e:	2294      	movs	r2, #148	@ 0x94
 8001d90:	fb02 f303 	mul.w	r3, r2, r3
 8001d94:	4a08      	ldr	r2, [pc, #32]	@ (8001db8 <BSP_COM_Init+0x5c>)
 8001d96:	4413      	add	r3, r2
 8001d98:	6839      	ldr	r1, [r7, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 f80e 	bl	8001dbc <MX_USART1_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d002      	beq.n	8001dac <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001da6:	f06f 0303 	mvn.w	r3, #3
 8001daa:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001dac:	68fb      	ldr	r3, [r7, #12]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000448 	.word	0x20000448

08001dbc <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8001dc6:	4b16      	ldr	r3, [pc, #88]	@ (8001e20 <MX_USART1_Init+0x64>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	220c      	movs	r2, #12
 8001dda:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	895b      	ldrh	r3, [r3, #10]
 8001de0:	461a      	mov	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	891b      	ldrh	r3, [r3, #8]
 8001df2:	461a      	mov	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	899b      	ldrh	r3, [r3, #12]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e08:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f005 ff1d 	bl	8007c50 <HAL_UART_Init>
 8001e16:	4603      	mov	r3, r0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20000004 	.word	0x20000004

08001e24 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001e2c:	4b09      	ldr	r3, [pc, #36]	@ (8001e54 <__io_putchar+0x30>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	2394      	movs	r3, #148	@ 0x94
 8001e34:	fb02 f303 	mul.w	r3, r2, r3
 8001e38:	4a07      	ldr	r2, [pc, #28]	@ (8001e58 <__io_putchar+0x34>)
 8001e3a:	1898      	adds	r0, r3, r2
 8001e3c:	1d39      	adds	r1, r7, #4
 8001e3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e42:	2201      	movs	r2, #1
 8001e44:	f005 ff54 	bl	8007cf0 <HAL_UART_Transmit>
  return ch;
 8001e48:	687b      	ldr	r3, [r7, #4]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200004dc 	.word	0x200004dc
 8001e58:	20000448 	.word	0x20000448

08001e5c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001e60:	2000      	movs	r0, #0
 8001e62:	f7ff fb45 	bl	80014f0 <BSP_PB_Callback>
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08a      	sub	sp, #40	@ 0x28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001e74:	4b27      	ldr	r3, [pc, #156]	@ (8001f14 <COM1_MspInit+0xa8>)
 8001e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e7a:	4a26      	ldr	r2, [pc, #152]	@ (8001f14 <COM1_MspInit+0xa8>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e84:	4b23      	ldr	r3, [pc, #140]	@ (8001f14 <COM1_MspInit+0xa8>)
 8001e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001e92:	4b20      	ldr	r3, [pc, #128]	@ (8001f14 <COM1_MspInit+0xa8>)
 8001e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e98:	4a1e      	ldr	r2, [pc, #120]	@ (8001f14 <COM1_MspInit+0xa8>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f14 <COM1_MspInit+0xa8>)
 8001ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001eb0:	4b18      	ldr	r3, [pc, #96]	@ (8001f14 <COM1_MspInit+0xa8>)
 8001eb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001eb6:	4a17      	ldr	r2, [pc, #92]	@ (8001f14 <COM1_MspInit+0xa8>)
 8001eb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ebc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001ec0:	4b14      	ldr	r3, [pc, #80]	@ (8001f14 <COM1_MspInit+0xa8>)
 8001ec2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001ec6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001ece:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ed2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001edc:	2301      	movs	r3, #1
 8001ede:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001ee0:	2307      	movs	r3, #7
 8001ee2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	4619      	mov	r1, r3
 8001eea:	480b      	ldr	r0, [pc, #44]	@ (8001f18 <COM1_MspInit+0xac>)
 8001eec:	f000 fb1c 	bl	8002528 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001ef0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ef4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001efa:	2307      	movs	r3, #7
 8001efc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001efe:	f107 0314 	add.w	r3, r7, #20
 8001f02:	4619      	mov	r1, r3
 8001f04:	4804      	ldr	r0, [pc, #16]	@ (8001f18 <COM1_MspInit+0xac>)
 8001f06:	f000 fb0f 	bl	8002528 <HAL_GPIO_Init>
}
 8001f0a:	bf00      	nop
 8001f0c:	3728      	adds	r7, #40	@ 0x28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	46020c00 	.word	0x46020c00
 8001f18:	42020000 	.word	0x42020000

08001f1c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f20:	4b12      	ldr	r3, [pc, #72]	@ (8001f6c <HAL_Init+0x50>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a11      	ldr	r2, [pc, #68]	@ (8001f6c <HAL_Init+0x50>)
 8001f26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f2c:	2003      	movs	r0, #3
 8001f2e:	f000 f98c 	bl	800224a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001f32:	f002 fca1 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 8001f36:	4602      	mov	r2, r0
 8001f38:	4b0d      	ldr	r3, [pc, #52]	@ (8001f70 <HAL_Init+0x54>)
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	f003 030f 	and.w	r3, r3, #15
 8001f40:	490c      	ldr	r1, [pc, #48]	@ (8001f74 <HAL_Init+0x58>)
 8001f42:	5ccb      	ldrb	r3, [r1, r3]
 8001f44:	fa22 f303 	lsr.w	r3, r2, r3
 8001f48:	4a0b      	ldr	r2, [pc, #44]	@ (8001f78 <HAL_Init+0x5c>)
 8001f4a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001f4c:	2004      	movs	r0, #4
 8001f4e:	f000 f9d1 	bl	80022f4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f52:	200f      	movs	r0, #15
 8001f54:	f000 f812 	bl	8001f7c <HAL_InitTick>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e002      	b.n	8001f68 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f62:	f7ff fadf 	bl	8001524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40022000 	.word	0x40022000
 8001f70:	46020c00 	.word	0x46020c00
 8001f74:	0800b22c 	.word	0x0800b22c
 8001f78:	20000000 	.word	0x20000000

08001f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001f88:	4b33      	ldr	r3, [pc, #204]	@ (8002058 <HAL_InitTick+0xdc>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e05c      	b.n	800204e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001f94:	4b31      	ldr	r3, [pc, #196]	@ (800205c <HAL_InitTick+0xe0>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d10c      	bne.n	8001fba <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001fa0:	4b2f      	ldr	r3, [pc, #188]	@ (8002060 <HAL_InitTick+0xe4>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4b2c      	ldr	r3, [pc, #176]	@ (8002058 <HAL_InitTick+0xdc>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	e037      	b.n	800202a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001fba:	f000 f9f3 	bl	80023a4 <HAL_SYSTICK_GetCLKSourceConfig>
 8001fbe:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d023      	beq.n	800200e <HAL_InitTick+0x92>
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d82d      	bhi.n	8002028 <HAL_InitTick+0xac>
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_InitTick+0x5e>
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d00d      	beq.n	8001ff4 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001fd8:	e026      	b.n	8002028 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001fda:	4b21      	ldr	r3, [pc, #132]	@ (8002060 <HAL_InitTick+0xe4>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	4b1e      	ldr	r3, [pc, #120]	@ (8002058 <HAL_InitTick+0xdc>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001fe8:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff0:	60fb      	str	r3, [r7, #12]
        break;
 8001ff2:	e01a      	b.n	800202a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001ff4:	4b18      	ldr	r3, [pc, #96]	@ (8002058 <HAL_InitTick+0xdc>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ffe:	fbb3 f3f2 	udiv	r3, r3, r2
 8002002:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002006:	fbb2 f3f3 	udiv	r3, r2, r3
 800200a:	60fb      	str	r3, [r7, #12]
        break;
 800200c:	e00d      	b.n	800202a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800200e:	4b12      	ldr	r3, [pc, #72]	@ (8002058 <HAL_InitTick+0xdc>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002018:	fbb3 f3f2 	udiv	r3, r3, r2
 800201c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002020:	fbb2 f3f3 	udiv	r3, r2, r3
 8002024:	60fb      	str	r3, [r7, #12]
        break;
 8002026:	e000      	b.n	800202a <HAL_InitTick+0xae>
        break;
 8002028:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 f940 	bl	80022b0 <HAL_SYSTICK_Config>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e009      	b.n	800204e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800203a:	2200      	movs	r2, #0
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	f04f 30ff 	mov.w	r0, #4294967295
 8002042:	f000 f90d 	bl	8002260 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002046:	4a07      	ldr	r2, [pc, #28]	@ (8002064 <HAL_InitTick+0xe8>)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	2000001c 	.word	0x2000001c
 800205c:	e000e010 	.word	0xe000e010
 8002060:	20000000 	.word	0x20000000
 8002064:	20000018 	.word	0x20000018

08002068 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800206c:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <HAL_IncTick+0x20>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	4b06      	ldr	r3, [pc, #24]	@ (800208c <HAL_IncTick+0x24>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4413      	add	r3, r2
 8002078:	4a04      	ldr	r2, [pc, #16]	@ (800208c <HAL_IncTick+0x24>)
 800207a:	6013      	str	r3, [r2, #0]
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	2000001c 	.word	0x2000001c
 800208c:	200004e0 	.word	0x200004e0

08002090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return uwTick;
 8002094:	4b03      	ldr	r3, [pc, #12]	@ (80020a4 <HAL_GetTick+0x14>)
 8002096:	681b      	ldr	r3, [r3, #0]
}
 8002098:	4618      	mov	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	200004e0 	.word	0x200004e0

080020a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020b0:	f7ff ffee 	bl	8002090 <HAL_GetTick>
 80020b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c0:	d005      	beq.n	80020ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020c2:	4b0a      	ldr	r3, [pc, #40]	@ (80020ec <HAL_Delay+0x44>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4413      	add	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020ce:	bf00      	nop
 80020d0:	f7ff ffde 	bl	8002090 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d8f7      	bhi.n	80020d0 <HAL_Delay+0x28>
  {
  }
}
 80020e0:	bf00      	nop
 80020e2:	bf00      	nop
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	2000001c 	.word	0x2000001c

080020f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002100:	4b0c      	ldr	r3, [pc, #48]	@ (8002134 <__NVIC_SetPriorityGrouping+0x44>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800210c:	4013      	ands	r3, r2
 800210e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002118:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800211c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002122:	4a04      	ldr	r2, [pc, #16]	@ (8002134 <__NVIC_SetPriorityGrouping+0x44>)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	60d3      	str	r3, [r2, #12]
}
 8002128:	bf00      	nop
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800213c:	4b04      	ldr	r3, [pc, #16]	@ (8002150 <__NVIC_GetPriorityGrouping+0x18>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	0a1b      	lsrs	r3, r3, #8
 8002142:	f003 0307 	and.w	r3, r3, #7
}
 8002146:	4618      	mov	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	2b00      	cmp	r3, #0
 8002164:	db0b      	blt.n	800217e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002166:	79fb      	ldrb	r3, [r7, #7]
 8002168:	f003 021f 	and.w	r2, r3, #31
 800216c:	4907      	ldr	r1, [pc, #28]	@ (800218c <__NVIC_EnableIRQ+0x38>)
 800216e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002172:	095b      	lsrs	r3, r3, #5
 8002174:	2001      	movs	r0, #1
 8002176:	fa00 f202 	lsl.w	r2, r0, r2
 800217a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	e000e100 	.word	0xe000e100

08002190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	6039      	str	r1, [r7, #0]
 800219a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800219c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	db0a      	blt.n	80021ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	490c      	ldr	r1, [pc, #48]	@ (80021dc <__NVIC_SetPriority+0x4c>)
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	0112      	lsls	r2, r2, #4
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	440b      	add	r3, r1
 80021b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021b8:	e00a      	b.n	80021d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	4908      	ldr	r1, [pc, #32]	@ (80021e0 <__NVIC_SetPriority+0x50>)
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	3b04      	subs	r3, #4
 80021c8:	0112      	lsls	r2, r2, #4
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	440b      	add	r3, r1
 80021ce:	761a      	strb	r2, [r3, #24]
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000e100 	.word	0xe000e100
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b089      	sub	sp, #36	@ 0x24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f1c3 0307 	rsb	r3, r3, #7
 80021fe:	2b04      	cmp	r3, #4
 8002200:	bf28      	it	cs
 8002202:	2304      	movcs	r3, #4
 8002204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3304      	adds	r3, #4
 800220a:	2b06      	cmp	r3, #6
 800220c:	d902      	bls.n	8002214 <NVIC_EncodePriority+0x30>
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3b03      	subs	r3, #3
 8002212:	e000      	b.n	8002216 <NVIC_EncodePriority+0x32>
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002218:	f04f 32ff 	mov.w	r2, #4294967295
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43da      	mvns	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	401a      	ands	r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800222c:	f04f 31ff 	mov.w	r1, #4294967295
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	fa01 f303 	lsl.w	r3, r1, r3
 8002236:	43d9      	mvns	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800223c:	4313      	orrs	r3, r2
         );
}
 800223e:	4618      	mov	r0, r3
 8002240:	3724      	adds	r7, #36	@ 0x24
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff ff4c 	bl	80020f0 <__NVIC_SetPriorityGrouping>
}
 8002258:	bf00      	nop
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
 800226c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800226e:	f7ff ff63 	bl	8002138 <__NVIC_GetPriorityGrouping>
 8002272:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	68b9      	ldr	r1, [r7, #8]
 8002278:	6978      	ldr	r0, [r7, #20]
 800227a:	f7ff ffb3 	bl	80021e4 <NVIC_EncodePriority>
 800227e:	4602      	mov	r2, r0
 8002280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002284:	4611      	mov	r1, r2
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff ff82 	bl	8002190 <__NVIC_SetPriority>
}
 800228c:	bf00      	nop
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff ff56 	bl	8002154 <__NVIC_EnableIRQ>
}
 80022a8:	bf00      	nop
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3b01      	subs	r3, #1
 80022bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022c0:	d301      	bcc.n	80022c6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80022c2:	2301      	movs	r3, #1
 80022c4:	e00d      	b.n	80022e2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80022c6:	4a0a      	ldr	r2, [pc, #40]	@ (80022f0 <HAL_SYSTICK_Config+0x40>)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80022ce:	4b08      	ldr	r3, [pc, #32]	@ (80022f0 <HAL_SYSTICK_Config+0x40>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80022d4:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <HAL_SYSTICK_Config+0x40>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a05      	ldr	r2, [pc, #20]	@ (80022f0 <HAL_SYSTICK_Config+0x40>)
 80022da:	f043 0303 	orr.w	r3, r3, #3
 80022de:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	e000e010 	.word	0xe000e010

080022f4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d844      	bhi.n	800238c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002302:	a201      	add	r2, pc, #4	@ (adr r2, 8002308 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002308:	0800232b 	.word	0x0800232b
 800230c:	08002349 	.word	0x08002349
 8002310:	0800236b 	.word	0x0800236b
 8002314:	0800238d 	.word	0x0800238d
 8002318:	0800231d 	.word	0x0800231d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800231c:	4b1f      	ldr	r3, [pc, #124]	@ (800239c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a1e      	ldr	r2, [pc, #120]	@ (800239c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002322:	f043 0304 	orr.w	r3, r3, #4
 8002326:	6013      	str	r3, [r2, #0]
      break;
 8002328:	e031      	b.n	800238e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800232a:	4b1c      	ldr	r3, [pc, #112]	@ (800239c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a1b      	ldr	r2, [pc, #108]	@ (800239c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002330:	f023 0304 	bic.w	r3, r3, #4
 8002334:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002336:	4b1a      	ldr	r3, [pc, #104]	@ (80023a0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800233c:	4a18      	ldr	r2, [pc, #96]	@ (80023a0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800233e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002342:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002346:	e022      	b.n	800238e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002348:	4b14      	ldr	r3, [pc, #80]	@ (800239c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a13      	ldr	r2, [pc, #76]	@ (800239c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800234e:	f023 0304 	bic.w	r3, r3, #4
 8002352:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002354:	4b12      	ldr	r3, [pc, #72]	@ (80023a0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800235a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800235e:	4a10      	ldr	r2, [pc, #64]	@ (80023a0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002360:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002364:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002368:	e011      	b.n	800238e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800236a:	4b0c      	ldr	r3, [pc, #48]	@ (800239c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a0b      	ldr	r2, [pc, #44]	@ (800239c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002370:	f023 0304 	bic.w	r3, r3, #4
 8002374:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002376:	4b0a      	ldr	r3, [pc, #40]	@ (80023a0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800237c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002380:	4a07      	ldr	r2, [pc, #28]	@ (80023a0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002382:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002386:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800238a:	e000      	b.n	800238e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800238c:	bf00      	nop
  }
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000e010 	.word	0xe000e010
 80023a0:	46020c00 	.word	0x46020c00

080023a4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80023aa:	4b19      	ldr	r3, [pc, #100]	@ (8002410 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80023b6:	2304      	movs	r3, #4
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	e021      	b.n	8002400 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 80023bc:	4b15      	ldr	r3, [pc, #84]	@ (8002414 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 80023be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023c2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80023c6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023ce:	d011      	beq.n	80023f4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023d6:	d810      	bhi.n	80023fa <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d004      	beq.n	80023e8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023e4:	d003      	beq.n	80023ee <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80023e6:	e008      	b.n	80023fa <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80023e8:	2300      	movs	r3, #0
 80023ea:	607b      	str	r3, [r7, #4]
        break;
 80023ec:	e008      	b.n	8002400 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80023ee:	2301      	movs	r3, #1
 80023f0:	607b      	str	r3, [r7, #4]
        break;
 80023f2:	e005      	b.n	8002400 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80023f4:	2302      	movs	r3, #2
 80023f6:	607b      	str	r3, [r7, #4]
        break;
 80023f8:	e002      	b.n	8002400 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80023fa:	2300      	movs	r3, #0
 80023fc:	607b      	str	r3, [r7, #4]
        break;
 80023fe:	bf00      	nop
    }
  }
  return systick_source;
 8002400:	687b      	ldr	r3, [r7, #4]
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	e000e010 	.word	0xe000e010
 8002414:	46020c00 	.word	0x46020c00

08002418 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8002418:	b480      	push	{r7}
 800241a:	b087      	sub	sp, #28
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	460b      	mov	r3, r1
 8002422:	607a      	str	r2, [r7, #4]
 8002424:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800242a:	7afb      	ldrb	r3, [r7, #11]
 800242c:	2b02      	cmp	r3, #2
 800242e:	d011      	beq.n	8002454 <HAL_EXTI_RegisterCallback+0x3c>
 8002430:	2b02      	cmp	r3, #2
 8002432:	dc13      	bgt.n	800245c <HAL_EXTI_RegisterCallback+0x44>
 8002434:	2b00      	cmp	r3, #0
 8002436:	d002      	beq.n	800243e <HAL_EXTI_RegisterCallback+0x26>
 8002438:	2b01      	cmp	r3, #1
 800243a:	d007      	beq.n	800244c <HAL_EXTI_RegisterCallback+0x34>
 800243c:	e00e      	b.n	800245c <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	609a      	str	r2, [r3, #8]
      break;
 800244a:	e00a      	b.n	8002462 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	605a      	str	r2, [r3, #4]
      break;
 8002452:	e006      	b.n	8002462 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	609a      	str	r2, [r3, #8]
      break;
 800245a:	e002      	b.n	8002462 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	75fb      	strb	r3, [r7, #23]
      break;
 8002460:	bf00      	nop
  }

  return status;
 8002462:	7dfb      	ldrb	r3, [r7, #23]
}
 8002464:	4618      	mov	r0, r3
 8002466:	371c      	adds	r7, #28
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e003      	b.n	800248c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800248a:	2300      	movs	r3, #0
  }
}
 800248c:	4618      	mov	r0, r3
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	0c1b      	lsrs	r3, r3, #16
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 031f 	and.w	r3, r3, #31
 80024b4:	2201      	movs	r2, #1
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	015a      	lsls	r2, r3, #5
 80024c0:	4b17      	ldr	r3, [pc, #92]	@ (8002520 <HAL_EXTI_IRQHandler+0x88>)
 80024c2:	4413      	add	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d009      	beq.n	80024ea <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d002      	beq.n	80024ea <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002524 <HAL_EXTI_IRQHandler+0x8c>)
 80024f0:	4413      	add	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4013      	ands	r3, r2
 80024fc:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d009      	beq.n	8002518 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	4798      	blx	r3
    }
  }
}
 8002518:	bf00      	nop
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	4602200c 	.word	0x4602200c
 8002524:	46022010 	.word	0x46022010

08002528 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002528:	b480      	push	{r7}
 800252a:	b089      	sub	sp, #36	@ 0x24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800253a:	e1ba      	b.n	80028b2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	2101      	movs	r1, #1
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	fa01 f303 	lsl.w	r3, r1, r3
 8002548:	4013      	ands	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 81aa 	beq.w	80028ac <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a55      	ldr	r2, [pc, #340]	@ (80026b0 <HAL_GPIO_Init+0x188>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d15d      	bne.n	800261c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002566:	2201      	movs	r2, #1
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	69fa      	ldr	r2, [r7, #28]
 8002572:	4013      	ands	r3, r2
 8002574:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 0201 	and.w	r2, r3, #1
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69fa      	ldr	r2, [r7, #28]
 8002586:	4313      	orrs	r3, r2
 8002588:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69fa      	ldr	r2, [r7, #28]
 800258e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002590:	4a48      	ldr	r2, [pc, #288]	@ (80026b4 <HAL_GPIO_Init+0x18c>)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002598:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800259a:	4a46      	ldr	r2, [pc, #280]	@ (80026b4 <HAL_GPIO_Init+0x18c>)
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4413      	add	r3, r2
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	08da      	lsrs	r2, r3, #3
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	3208      	adds	r2, #8
 80025ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025b2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	220f      	movs	r2, #15
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69fa      	ldr	r2, [r7, #28]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	220b      	movs	r2, #11
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	69fa      	ldr	r2, [r7, #28]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	08da      	lsrs	r2, r3, #3
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	3208      	adds	r2, #8
 80025e6:	69f9      	ldr	r1, [r7, #28]
 80025e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	2203      	movs	r2, #3
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69fa      	ldr	r2, [r7, #28]
 8002600:	4013      	ands	r3, r2
 8002602:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	2202      	movs	r2, #2
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	69fa      	ldr	r2, [r7, #28]
 8002610:	4313      	orrs	r3, r2
 8002612:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	69fa      	ldr	r2, [r7, #28]
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	e067      	b.n	80026ec <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b02      	cmp	r3, #2
 8002622:	d003      	beq.n	800262c <HAL_GPIO_Init+0x104>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b12      	cmp	r3, #18
 800262a:	d145      	bne.n	80026b8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	08da      	lsrs	r2, r3, #3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3208      	adds	r2, #8
 8002634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002638:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	220f      	movs	r2, #15
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	69fa      	ldr	r2, [r7, #28]
 800264c:	4013      	ands	r3, r2
 800264e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	f003 020f 	and.w	r2, r3, #15
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	69fa      	ldr	r2, [r7, #28]
 8002666:	4313      	orrs	r3, r2
 8002668:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	08da      	lsrs	r2, r3, #3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3208      	adds	r2, #8
 8002672:	69f9      	ldr	r1, [r7, #28]
 8002674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	2203      	movs	r2, #3
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	69fa      	ldr	r2, [r7, #28]
 800268c:	4013      	ands	r3, r2
 800268e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 0203 	and.w	r2, r3, #3
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	69fa      	ldr	r2, [r7, #28]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	69fa      	ldr	r2, [r7, #28]
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	e01e      	b.n	80026ec <HAL_GPIO_Init+0x1c4>
 80026ae:	bf00      	nop
 80026b0:	46020000 	.word	0x46020000
 80026b4:	0800b288 	.word	0x0800b288
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	2203      	movs	r2, #3
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69fa      	ldr	r2, [r7, #28]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 0203 	and.w	r2, r3, #3
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	69fa      	ldr	r2, [r7, #28]
 80026ea:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d00b      	beq.n	800270c <HAL_GPIO_Init+0x1e4>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d007      	beq.n	800270c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002700:	2b11      	cmp	r3, #17
 8002702:	d003      	beq.n	800270c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b12      	cmp	r3, #18
 800270a:	d130      	bne.n	800276e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	2203      	movs	r2, #3
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	69fa      	ldr	r2, [r7, #28]
 8002720:	4013      	ands	r3, r2
 8002722:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	69fa      	ldr	r2, [r7, #28]
 8002732:	4313      	orrs	r3, r2
 8002734:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	69fa      	ldr	r2, [r7, #28]
 800273a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002742:	2201      	movs	r2, #1
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43db      	mvns	r3, r3
 800274c:	69fa      	ldr	r2, [r7, #28]
 800274e:	4013      	ands	r3, r2
 8002750:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	091b      	lsrs	r3, r3, #4
 8002758:	f003 0201 	and.w	r2, r3, #1
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	69fa      	ldr	r2, [r7, #28]
 8002764:	4313      	orrs	r3, r2
 8002766:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b03      	cmp	r3, #3
 8002774:	d017      	beq.n	80027a6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	2203      	movs	r2, #3
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	69fa      	ldr	r2, [r7, #28]
 800278a:	4013      	ands	r3, r2
 800278c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	69fa      	ldr	r2, [r7, #28]
 800279c:	4313      	orrs	r3, r2
 800279e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	69fa      	ldr	r2, [r7, #28]
 80027a4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d07c      	beq.n	80028ac <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80027b2:	4a47      	ldr	r2, [pc, #284]	@ (80028d0 <HAL_GPIO_Init+0x3a8>)
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	089b      	lsrs	r3, r3, #2
 80027b8:	3318      	adds	r3, #24
 80027ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027be:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	220f      	movs	r2, #15
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69fa      	ldr	r2, [r7, #28]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	0a9a      	lsrs	r2, r3, #10
 80027da:	4b3e      	ldr	r3, [pc, #248]	@ (80028d4 <HAL_GPIO_Init+0x3ac>)
 80027dc:	4013      	ands	r3, r2
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	f002 0203 	and.w	r2, r2, #3
 80027e4:	00d2      	lsls	r2, r2, #3
 80027e6:	4093      	lsls	r3, r2
 80027e8:	69fa      	ldr	r2, [r7, #28]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80027ee:	4938      	ldr	r1, [pc, #224]	@ (80028d0 <HAL_GPIO_Init+0x3a8>)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	089b      	lsrs	r3, r3, #2
 80027f4:	3318      	adds	r3, #24
 80027f6:	69fa      	ldr	r2, [r7, #28]
 80027f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80027fc:	4b34      	ldr	r3, [pc, #208]	@ (80028d0 <HAL_GPIO_Init+0x3a8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	43db      	mvns	r3, r3
 8002806:	69fa      	ldr	r2, [r7, #28]
 8002808:	4013      	ands	r3, r2
 800280a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002818:	69fa      	ldr	r2, [r7, #28]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4313      	orrs	r3, r2
 800281e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002820:	4a2b      	ldr	r2, [pc, #172]	@ (80028d0 <HAL_GPIO_Init+0x3a8>)
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002826:	4b2a      	ldr	r3, [pc, #168]	@ (80028d0 <HAL_GPIO_Init+0x3a8>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	43db      	mvns	r3, r3
 8002830:	69fa      	ldr	r2, [r7, #28]
 8002832:	4013      	ands	r3, r2
 8002834:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8002842:	69fa      	ldr	r2, [r7, #28]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4313      	orrs	r3, r2
 8002848:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800284a:	4a21      	ldr	r2, [pc, #132]	@ (80028d0 <HAL_GPIO_Init+0x3a8>)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002850:	4b1f      	ldr	r3, [pc, #124]	@ (80028d0 <HAL_GPIO_Init+0x3a8>)
 8002852:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002856:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	43db      	mvns	r3, r3
 800285c:	69fa      	ldr	r2, [r7, #28]
 800285e:	4013      	ands	r3, r2
 8002860:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800286e:	69fa      	ldr	r2, [r7, #28]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4313      	orrs	r3, r2
 8002874:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002876:	4a16      	ldr	r2, [pc, #88]	@ (80028d0 <HAL_GPIO_Init+0x3a8>)
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800287e:	4b14      	ldr	r3, [pc, #80]	@ (80028d0 <HAL_GPIO_Init+0x3a8>)
 8002880:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002884:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	43db      	mvns	r3, r3
 800288a:	69fa      	ldr	r2, [r7, #28]
 800288c:	4013      	ands	r3, r2
 800288e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800289c:	69fa      	ldr	r2, [r7, #28]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80028a4:	4a0a      	ldr	r2, [pc, #40]	@ (80028d0 <HAL_GPIO_Init+0x3a8>)
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	3301      	adds	r3, #1
 80028b0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	fa22 f303 	lsr.w	r3, r2, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f47f ae3d 	bne.w	800253c <HAL_GPIO_Init+0x14>
  }
}
 80028c2:	bf00      	nop
 80028c4:	bf00      	nop
 80028c6:	3724      	adds	r7, #36	@ 0x24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	46022000 	.word	0x46022000
 80028d4:	002f7f7f 	.word	0x002f7f7f

080028d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	807b      	strh	r3, [r7, #2]
 80028e4:	4613      	mov	r3, r2
 80028e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028e8:	787b      	ldrb	r3, [r7, #1]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028ee:	887a      	ldrh	r2, [r7, #2]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80028f4:	e002      	b.n	80028fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80028f6:	887a      	ldrh	r2, [r7, #2]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800291a:	887a      	ldrh	r2, [r7, #2]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4013      	ands	r3, r2
 8002920:	041a      	lsls	r2, r3, #16
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	43d9      	mvns	r1, r3
 8002926:	887b      	ldrh	r3, [r7, #2]
 8002928:	400b      	ands	r3, r1
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	619a      	str	r2, [r3, #24]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e08d      	b.n	8002a6a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7fe fdf8 	bl	8001558 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2224      	movs	r2, #36	@ 0x24
 800296c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0201 	bic.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800298c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800299c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d107      	bne.n	80029b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	e006      	b.n	80029c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80029c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d108      	bne.n	80029de <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029da:	605a      	str	r2, [r3, #4]
 80029dc:	e007      	b.n	80029ee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69d9      	ldr	r1, [r3, #28]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a1a      	ldr	r2, [r3, #32]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0201 	orr.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2220      	movs	r2, #32
 8002a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	607a      	str	r2, [r7, #4]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	460b      	mov	r3, r1
 8002a82:	817b      	strh	r3, [r7, #10]
 8002a84:	4613      	mov	r3, r2
 8002a86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b20      	cmp	r3, #32
 8002a92:	f040 80da 	bne.w	8002c4a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <HAL_I2C_Master_Transmit+0x30>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e0d3      	b.n	8002c4c <HAL_I2C_Master_Transmit+0x1d8>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002aac:	f7ff faf0 	bl	8002090 <HAL_GetTick>
 8002ab0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	2319      	movs	r3, #25
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 f9e6 	bl	8002e90 <I2C_WaitOnFlagUntilTimeout>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e0be      	b.n	8002c4c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2221      	movs	r2, #33	@ 0x21
 8002ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2210      	movs	r2, #16
 8002ada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	893a      	ldrh	r2, [r7, #8]
 8002aee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	2bff      	cmp	r3, #255	@ 0xff
 8002afe:	d90e      	bls.n	8002b1e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	22ff      	movs	r2, #255	@ 0xff
 8002b04:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	8979      	ldrh	r1, [r7, #10]
 8002b0e:	4b51      	ldr	r3, [pc, #324]	@ (8002c54 <HAL_I2C_Master_Transmit+0x1e0>)
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 fc0a 	bl	8003330 <I2C_TransferConfig>
 8002b1c:	e06c      	b.n	8002bf8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	8979      	ldrh	r1, [r7, #10]
 8002b30:	4b48      	ldr	r3, [pc, #288]	@ (8002c54 <HAL_I2C_Master_Transmit+0x1e0>)
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 fbf9 	bl	8003330 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002b3e:	e05b      	b.n	8002bf8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	6a39      	ldr	r1, [r7, #32]
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f9fc 	bl	8002f42 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e07b      	b.n	8002c4c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b58:	781a      	ldrb	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d034      	beq.n	8002bf8 <HAL_I2C_Master_Transmit+0x184>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d130      	bne.n	8002bf8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2180      	movs	r1, #128	@ 0x80
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 f975 	bl	8002e90 <I2C_WaitOnFlagUntilTimeout>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e04d      	b.n	8002c4c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	2bff      	cmp	r3, #255	@ 0xff
 8002bb8:	d90e      	bls.n	8002bd8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	22ff      	movs	r2, #255	@ 0xff
 8002bbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	8979      	ldrh	r1, [r7, #10]
 8002bc8:	2300      	movs	r3, #0
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 fbad 	bl	8003330 <I2C_TransferConfig>
 8002bd6:	e00f      	b.n	8002bf8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	8979      	ldrh	r1, [r7, #10]
 8002bea:	2300      	movs	r3, #0
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 fb9c 	bl	8003330 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d19e      	bne.n	8002b40 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	6a39      	ldr	r1, [r7, #32]
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 f9e2 	bl	8002fd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e01a      	b.n	8002c4c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6859      	ldr	r1, [r3, #4]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	4b0b      	ldr	r3, [pc, #44]	@ (8002c58 <HAL_I2C_Master_Transmit+0x1e4>)
 8002c2a:	400b      	ands	r3, r1
 8002c2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	e000      	b.n	8002c4c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002c4a:	2302      	movs	r3, #2
  }
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3718      	adds	r7, #24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	80002000 	.word	0x80002000
 8002c58:	fe00e800 	.word	0xfe00e800

08002c5c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b088      	sub	sp, #32
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	607a      	str	r2, [r7, #4]
 8002c66:	461a      	mov	r2, r3
 8002c68:	460b      	mov	r3, r1
 8002c6a:	817b      	strh	r3, [r7, #10]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b20      	cmp	r3, #32
 8002c7a:	f040 80db 	bne.w	8002e34 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_I2C_Master_Receive+0x30>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e0d4      	b.n	8002e36 <HAL_I2C_Master_Receive+0x1da>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c94:	f7ff f9fc 	bl	8002090 <HAL_GetTick>
 8002c98:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	2319      	movs	r3, #25
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 f8f2 	bl	8002e90 <I2C_WaitOnFlagUntilTimeout>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e0bf      	b.n	8002e36 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2222      	movs	r2, #34	@ 0x22
 8002cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2210      	movs	r2, #16
 8002cc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	893a      	ldrh	r2, [r7, #8]
 8002cd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	2bff      	cmp	r3, #255	@ 0xff
 8002ce6:	d90e      	bls.n	8002d06 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	22ff      	movs	r2, #255	@ 0xff
 8002cec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	8979      	ldrh	r1, [r7, #10]
 8002cf6:	4b52      	ldr	r3, [pc, #328]	@ (8002e40 <HAL_I2C_Master_Receive+0x1e4>)
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 fb16 	bl	8003330 <I2C_TransferConfig>
 8002d04:	e06d      	b.n	8002de2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	8979      	ldrh	r1, [r7, #10]
 8002d18:	4b49      	ldr	r3, [pc, #292]	@ (8002e40 <HAL_I2C_Master_Receive+0x1e4>)
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 fb05 	bl	8003330 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002d26:	e05c      	b.n	8002de2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	6a39      	ldr	r1, [r7, #32]
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 f993 	bl	8003058 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e07c      	b.n	8002e36 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	3b01      	subs	r3, #1
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d034      	beq.n	8002de2 <HAL_I2C_Master_Receive+0x186>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d130      	bne.n	8002de2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	2200      	movs	r2, #0
 8002d88:	2180      	movs	r1, #128	@ 0x80
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 f880 	bl	8002e90 <I2C_WaitOnFlagUntilTimeout>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e04d      	b.n	8002e36 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	2bff      	cmp	r3, #255	@ 0xff
 8002da2:	d90e      	bls.n	8002dc2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	22ff      	movs	r2, #255	@ 0xff
 8002da8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	8979      	ldrh	r1, [r7, #10]
 8002db2:	2300      	movs	r3, #0
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 fab8 	bl	8003330 <I2C_TransferConfig>
 8002dc0:	e00f      	b.n	8002de2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	8979      	ldrh	r1, [r7, #10]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 faa7 	bl	8003330 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d19d      	bne.n	8002d28 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	6a39      	ldr	r1, [r7, #32]
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 f8ed 	bl	8002fd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e01a      	b.n	8002e36 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2220      	movs	r2, #32
 8002e06:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6859      	ldr	r1, [r3, #4]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	4b0c      	ldr	r3, [pc, #48]	@ (8002e44 <HAL_I2C_Master_Receive+0x1e8>)
 8002e14:	400b      	ands	r3, r1
 8002e16:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	e000      	b.n	8002e36 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002e34:	2302      	movs	r3, #2
  }
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	80002400 	.word	0x80002400
 8002e44:	fe00e800 	.word	0xfe00e800

08002e48 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d103      	bne.n	8002e66 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2200      	movs	r2, #0
 8002e64:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d007      	beq.n	8002e84 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699a      	ldr	r2, [r3, #24]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	619a      	str	r2, [r3, #24]
  }
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	603b      	str	r3, [r7, #0]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ea0:	e03b      	b.n	8002f1a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	6839      	ldr	r1, [r7, #0]
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 f962 	bl	8003170 <I2C_IsErrorOccurred>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e041      	b.n	8002f3a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebc:	d02d      	beq.n	8002f1a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ebe:	f7ff f8e7 	bl	8002090 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d302      	bcc.n	8002ed4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d122      	bne.n	8002f1a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699a      	ldr	r2, [r3, #24]
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	4013      	ands	r3, r2
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	bf0c      	ite	eq
 8002ee4:	2301      	moveq	r3, #1
 8002ee6:	2300      	movne	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	461a      	mov	r2, r3
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d113      	bne.n	8002f1a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef6:	f043 0220 	orr.w	r2, r3, #32
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2220      	movs	r2, #32
 8002f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e00f      	b.n	8002f3a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699a      	ldr	r2, [r3, #24]
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4013      	ands	r3, r2
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	bf0c      	ite	eq
 8002f2a:	2301      	moveq	r3, #1
 8002f2c:	2300      	movne	r3, #0
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	461a      	mov	r2, r3
 8002f32:	79fb      	ldrb	r3, [r7, #7]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d0b4      	beq.n	8002ea2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b084      	sub	sp, #16
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f4e:	e033      	b.n	8002fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	68b9      	ldr	r1, [r7, #8]
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 f90b 	bl	8003170 <I2C_IsErrorOccurred>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e031      	b.n	8002fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6a:	d025      	beq.n	8002fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f6c:	f7ff f890 	bl	8002090 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d302      	bcc.n	8002f82 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d11a      	bne.n	8002fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d013      	beq.n	8002fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f94:	f043 0220 	orr.w	r2, r3, #32
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e007      	b.n	8002fc8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d1c4      	bne.n	8002f50 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fdc:	e02f      	b.n	800303e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	68b9      	ldr	r1, [r7, #8]
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 f8c4 	bl	8003170 <I2C_IsErrorOccurred>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e02d      	b.n	800304e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff2:	f7ff f84d 	bl	8002090 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d302      	bcc.n	8003008 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d11a      	bne.n	800303e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f003 0320 	and.w	r3, r3, #32
 8003012:	2b20      	cmp	r3, #32
 8003014:	d013      	beq.n	800303e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800301a:	f043 0220 	orr.w	r2, r3, #32
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2220      	movs	r2, #32
 8003026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e007      	b.n	800304e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	f003 0320 	and.w	r3, r3, #32
 8003048:	2b20      	cmp	r3, #32
 800304a:	d1c8      	bne.n	8002fde <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003064:	2300      	movs	r3, #0
 8003066:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003068:	e071      	b.n	800314e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	68b9      	ldr	r1, [r7, #8]
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 f87e 	bl	8003170 <I2C_IsErrorOccurred>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	f003 0320 	and.w	r3, r3, #32
 8003088:	2b20      	cmp	r3, #32
 800308a:	d13b      	bne.n	8003104 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800308c:	7dfb      	ldrb	r3, [r7, #23]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d138      	bne.n	8003104 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b04      	cmp	r3, #4
 800309e:	d105      	bne.n	80030ac <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	2b10      	cmp	r3, #16
 80030b8:	d121      	bne.n	80030fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2210      	movs	r2, #16
 80030c0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2204      	movs	r2, #4
 80030c6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2220      	movs	r2, #32
 80030ce:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6859      	ldr	r1, [r3, #4]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	4b24      	ldr	r3, [pc, #144]	@ (800316c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80030dc:	400b      	ands	r3, r1
 80030de:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	75fb      	strb	r3, [r7, #23]
 80030fc:	e002      	b.n	8003104 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003104:	f7fe ffc4 	bl	8002090 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	429a      	cmp	r2, r3
 8003112:	d302      	bcc.n	800311a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d119      	bne.n	800314e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800311a:	7dfb      	ldrb	r3, [r7, #23]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d116      	bne.n	800314e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	2b04      	cmp	r3, #4
 800312c:	d00f      	beq.n	800314e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003132:	f043 0220 	orr.w	r2, r3, #32
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b04      	cmp	r3, #4
 800315a:	d002      	beq.n	8003162 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800315c:	7dfb      	ldrb	r3, [r7, #23]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d083      	beq.n	800306a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003162:	7dfb      	ldrb	r3, [r7, #23]
}
 8003164:	4618      	mov	r0, r3
 8003166:	3718      	adds	r7, #24
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	fe00e800 	.word	0xfe00e800

08003170 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08a      	sub	sp, #40	@ 0x28
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800318a:	2300      	movs	r3, #0
 800318c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	2b00      	cmp	r3, #0
 800319a:	d068      	beq.n	800326e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2210      	movs	r2, #16
 80031a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031a4:	e049      	b.n	800323a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ac:	d045      	beq.n	800323a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031ae:	f7fe ff6f 	bl	8002090 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d302      	bcc.n	80031c4 <I2C_IsErrorOccurred+0x54>
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d13a      	bne.n	800323a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031e6:	d121      	bne.n	800322c <I2C_IsErrorOccurred+0xbc>
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031ee:	d01d      	beq.n	800322c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80031f0:	7cfb      	ldrb	r3, [r7, #19]
 80031f2:	2b20      	cmp	r3, #32
 80031f4:	d01a      	beq.n	800322c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003204:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003206:	f7fe ff43 	bl	8002090 <HAL_GetTick>
 800320a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800320c:	e00e      	b.n	800322c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800320e:	f7fe ff3f 	bl	8002090 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b19      	cmp	r3, #25
 800321a:	d907      	bls.n	800322c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	f043 0320 	orr.w	r3, r3, #32
 8003222:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800322a:	e006      	b.n	800323a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	f003 0320 	and.w	r3, r3, #32
 8003236:	2b20      	cmp	r3, #32
 8003238:	d1e9      	bne.n	800320e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b20      	cmp	r3, #32
 8003246:	d003      	beq.n	8003250 <I2C_IsErrorOccurred+0xe0>
 8003248:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0aa      	beq.n	80031a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003250:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003254:	2b00      	cmp	r3, #0
 8003256:	d103      	bne.n	8003260 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2220      	movs	r2, #32
 800325e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	f043 0304 	orr.w	r3, r3, #4
 8003266:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00b      	beq.n	8003298 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	f043 0301 	orr.w	r3, r3, #1
 8003286:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003290:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00b      	beq.n	80032ba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	f043 0308 	orr.w	r3, r3, #8
 80032a8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00b      	beq.n	80032dc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	f043 0302 	orr.w	r3, r3, #2
 80032ca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80032dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d01c      	beq.n	800331e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f7ff fdaf 	bl	8002e48 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6859      	ldr	r1, [r3, #4]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	4b0d      	ldr	r3, [pc, #52]	@ (800332c <I2C_IsErrorOccurred+0x1bc>)
 80032f6:	400b      	ands	r3, r1
 80032f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	431a      	orrs	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800331e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003322:	4618      	mov	r0, r3
 8003324:	3728      	adds	r7, #40	@ 0x28
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	fe00e800 	.word	0xfe00e800

08003330 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003330:	b480      	push	{r7}
 8003332:	b087      	sub	sp, #28
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	607b      	str	r3, [r7, #4]
 800333a:	460b      	mov	r3, r1
 800333c:	817b      	strh	r3, [r7, #10]
 800333e:	4613      	mov	r3, r2
 8003340:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003342:	897b      	ldrh	r3, [r7, #10]
 8003344:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003348:	7a7b      	ldrb	r3, [r7, #9]
 800334a:	041b      	lsls	r3, r3, #16
 800334c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003350:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	4313      	orrs	r3, r2
 800335a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800335e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	0d5b      	lsrs	r3, r3, #21
 800336a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800336e:	4b08      	ldr	r3, [pc, #32]	@ (8003390 <I2C_TransferConfig+0x60>)
 8003370:	430b      	orrs	r3, r1
 8003372:	43db      	mvns	r3, r3
 8003374:	ea02 0103 	and.w	r1, r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	430a      	orrs	r2, r1
 8003380:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003382:	bf00      	nop
 8003384:	371c      	adds	r7, #28
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	03ff63ff 	.word	0x03ff63ff

08003394 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b20      	cmp	r3, #32
 80033a8:	d138      	bne.n	800341c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d101      	bne.n	80033b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033b4:	2302      	movs	r3, #2
 80033b6:	e032      	b.n	800341e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2224      	movs	r2, #36	@ 0x24
 80033c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0201 	bic.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80033e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6819      	ldr	r1, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0201 	orr.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003418:	2300      	movs	r3, #0
 800341a:	e000      	b.n	800341e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800341c:	2302      	movs	r3, #2
  }
}
 800341e:	4618      	mov	r0, r3
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800342a:	b480      	push	{r7}
 800342c:	b085      	sub	sp, #20
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b20      	cmp	r3, #32
 800343e:	d139      	bne.n	80034b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800344a:	2302      	movs	r3, #2
 800344c:	e033      	b.n	80034b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2224      	movs	r2, #36	@ 0x24
 800345a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0201 	bic.w	r2, r2, #1
 800346c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800347c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	021b      	lsls	r3, r3, #8
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	4313      	orrs	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	e000      	b.n	80034b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034b4:	2302      	movs	r3, #2
  }
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
	...

080034c4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034cc:	2300      	movs	r3, #0
 80034ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80034d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003500 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	73fb      	strb	r3, [r7, #15]
 80034e0:	e007      	b.n	80034f2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80034e2:	4b07      	ldr	r3, [pc, #28]	@ (8003500 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 0204 	bic.w	r2, r3, #4
 80034ea:	4905      	ldr	r1, [pc, #20]	@ (8003500 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]
  }

  return status;
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	40030400 	.word	0x40030400

08003504 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003508:	4b05      	ldr	r3, [pc, #20]	@ (8003520 <HAL_ICACHE_Enable+0x1c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a04      	ldr	r2, [pc, #16]	@ (8003520 <HAL_ICACHE_Enable+0x1c>)
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	40030400 	.word	0x40030400

08003524 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800352c:	4b39      	ldr	r3, [pc, #228]	@ (8003614 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800352e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003530:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003534:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	429a      	cmp	r2, r3
 800353c:	d10b      	bne.n	8003556 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003544:	d905      	bls.n	8003552 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003546:	4b33      	ldr	r3, [pc, #204]	@ (8003614 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	4a32      	ldr	r2, [pc, #200]	@ (8003614 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800354c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003550:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003552:	2300      	movs	r3, #0
 8003554:	e057      	b.n	8003606 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800355c:	d90a      	bls.n	8003574 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800355e:	4b2d      	ldr	r3, [pc, #180]	@ (8003614 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4313      	orrs	r3, r2
 800356a:	4a2a      	ldr	r2, [pc, #168]	@ (8003614 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800356c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003570:	60d3      	str	r3, [r2, #12]
 8003572:	e007      	b.n	8003584 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003574:	4b27      	ldr	r3, [pc, #156]	@ (8003614 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800357c:	4925      	ldr	r1, [pc, #148]	@ (8003614 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4313      	orrs	r3, r2
 8003582:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003584:	4b24      	ldr	r3, [pc, #144]	@ (8003618 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a24      	ldr	r2, [pc, #144]	@ (800361c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800358a:	fba2 2303 	umull	r2, r3, r2, r3
 800358e:	099b      	lsrs	r3, r3, #6
 8003590:	2232      	movs	r2, #50	@ 0x32
 8003592:	fb02 f303 	mul.w	r3, r2, r3
 8003596:	4a21      	ldr	r2, [pc, #132]	@ (800361c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003598:	fba2 2303 	umull	r2, r3, r2, r3
 800359c:	099b      	lsrs	r3, r3, #6
 800359e:	3301      	adds	r3, #1
 80035a0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80035a2:	e002      	b.n	80035aa <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80035aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003614 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d102      	bne.n	80035bc <HAL_PWREx_ControlVoltageScaling+0x98>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1f3      	bne.n	80035a4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d01b      	beq.n	80035fa <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80035c2:	4b15      	ldr	r3, [pc, #84]	@ (8003618 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a15      	ldr	r2, [pc, #84]	@ (800361c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80035c8:	fba2 2303 	umull	r2, r3, r2, r3
 80035cc:	099b      	lsrs	r3, r3, #6
 80035ce:	2232      	movs	r2, #50	@ 0x32
 80035d0:	fb02 f303 	mul.w	r3, r2, r3
 80035d4:	4a11      	ldr	r2, [pc, #68]	@ (800361c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80035d6:	fba2 2303 	umull	r2, r3, r2, r3
 80035da:	099b      	lsrs	r3, r3, #6
 80035dc:	3301      	adds	r3, #1
 80035de:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80035e0:	e002      	b.n	80035e8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	3b01      	subs	r3, #1
 80035e6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80035e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003614 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d102      	bne.n	80035fa <HAL_PWREx_ControlVoltageScaling+0xd6>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f3      	bne.n	80035e2 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e000      	b.n	8003606 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	46020800 	.word	0x46020800
 8003618:	20000000 	.word	0x20000000
 800361c:	10624dd3 	.word	0x10624dd3

08003620 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003624:	4b04      	ldr	r3, [pc, #16]	@ (8003638 <HAL_PWREx_GetVoltageRange+0x18>)
 8003626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003628:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800362c:	4618      	mov	r0, r3
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	46020800 	.word	0x46020800

0800363c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003644:	4b22      	ldr	r3, [pc, #136]	@ (80036d0 <HAL_PWREx_ConfigSupply+0x94>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a22      	ldr	r2, [pc, #136]	@ (80036d4 <HAL_PWREx_ConfigSupply+0x98>)
 800364a:	fba2 2303 	umull	r2, r3, r2, r3
 800364e:	099b      	lsrs	r3, r3, #6
 8003650:	2232      	movs	r2, #50	@ 0x32
 8003652:	fb02 f303 	mul.w	r3, r2, r3
 8003656:	4a1f      	ldr	r2, [pc, #124]	@ (80036d4 <HAL_PWREx_ConfigSupply+0x98>)
 8003658:	fba2 2303 	umull	r2, r3, r2, r3
 800365c:	099b      	lsrs	r3, r3, #6
 800365e:	3301      	adds	r3, #1
 8003660:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d113      	bne.n	8003690 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003668:	4b1b      	ldr	r3, [pc, #108]	@ (80036d8 <HAL_PWREx_ConfigSupply+0x9c>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	4a1a      	ldr	r2, [pc, #104]	@ (80036d8 <HAL_PWREx_ConfigSupply+0x9c>)
 800366e:	f023 0302 	bic.w	r3, r3, #2
 8003672:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003674:	e002      	b.n	800367c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	3b01      	subs	r3, #1
 800367a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800367c:	4b16      	ldr	r3, [pc, #88]	@ (80036d8 <HAL_PWREx_ConfigSupply+0x9c>)
 800367e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b02      	cmp	r3, #2
 8003686:	d116      	bne.n	80036b6 <HAL_PWREx_ConfigSupply+0x7a>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f3      	bne.n	8003676 <HAL_PWREx_ConfigSupply+0x3a>
 800368e:	e012      	b.n	80036b6 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003690:	4b11      	ldr	r3, [pc, #68]	@ (80036d8 <HAL_PWREx_ConfigSupply+0x9c>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	4a10      	ldr	r2, [pc, #64]	@ (80036d8 <HAL_PWREx_ConfigSupply+0x9c>)
 8003696:	f043 0302 	orr.w	r3, r3, #2
 800369a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800369c:	e002      	b.n	80036a4 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	3b01      	subs	r3, #1
 80036a2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80036a4:	4b0c      	ldr	r3, [pc, #48]	@ (80036d8 <HAL_PWREx_ConfigSupply+0x9c>)
 80036a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d102      	bne.n	80036b6 <HAL_PWREx_ConfigSupply+0x7a>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f3      	bne.n	800369e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e000      	b.n	80036c2 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	20000000 	.word	0x20000000
 80036d4:	10624dd3 	.word	0x10624dd3
 80036d8:	46020800 	.word	0x46020800

080036dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08e      	sub	sp, #56	@ 0x38
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80036e4:	2300      	movs	r3, #0
 80036e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d102      	bne.n	80036f6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	f000 bec8 	b.w	8004486 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036f6:	4b99      	ldr	r3, [pc, #612]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	f003 030c 	and.w	r3, r3, #12
 80036fe:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003700:	4b96      	ldr	r3, [pc, #600]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 8003702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0310 	and.w	r3, r3, #16
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 816c 	beq.w	80039f0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371a:	2b00      	cmp	r3, #0
 800371c:	d007      	beq.n	800372e <HAL_RCC_OscConfig+0x52>
 800371e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003720:	2b0c      	cmp	r3, #12
 8003722:	f040 80de 	bne.w	80038e2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003728:	2b01      	cmp	r3, #1
 800372a:	f040 80da 	bne.w	80038e2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d102      	bne.n	800373c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	f000 bea5 	b.w	8004486 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003740:	4b86      	ldr	r3, [pc, #536]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d004      	beq.n	8003756 <HAL_RCC_OscConfig+0x7a>
 800374c:	4b83      	ldr	r3, [pc, #524]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003754:	e005      	b.n	8003762 <HAL_RCC_OscConfig+0x86>
 8003756:	4b81      	ldr	r3, [pc, #516]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 8003758:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800375c:	041b      	lsls	r3, r3, #16
 800375e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003762:	4293      	cmp	r3, r2
 8003764:	d255      	bcs.n	8003812 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10a      	bne.n	8003782 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003770:	4618      	mov	r0, r3
 8003772:	f001 f9d9 	bl	8004b28 <RCC_SetFlashLatencyFromMSIRange>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d002      	beq.n	8003782 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	f000 be82 	b.w	8004486 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003782:	4b76      	ldr	r3, [pc, #472]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	4a75      	ldr	r2, [pc, #468]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 8003788:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800378c:	6093      	str	r3, [r2, #8]
 800378e:	4b73      	ldr	r3, [pc, #460]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379a:	4970      	ldr	r1, [pc, #448]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 800379c:	4313      	orrs	r3, r2
 800379e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80037a8:	d309      	bcc.n	80037be <HAL_RCC_OscConfig+0xe2>
 80037aa:	4b6c      	ldr	r3, [pc, #432]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f023 021f 	bic.w	r2, r3, #31
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	4969      	ldr	r1, [pc, #420]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	60cb      	str	r3, [r1, #12]
 80037bc:	e07e      	b.n	80038bc <HAL_RCC_OscConfig+0x1e0>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	da0a      	bge.n	80037dc <HAL_RCC_OscConfig+0x100>
 80037c6:	4b65      	ldr	r3, [pc, #404]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	015b      	lsls	r3, r3, #5
 80037d4:	4961      	ldr	r1, [pc, #388]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60cb      	str	r3, [r1, #12]
 80037da:	e06f      	b.n	80038bc <HAL_RCC_OscConfig+0x1e0>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037e4:	d30a      	bcc.n	80037fc <HAL_RCC_OscConfig+0x120>
 80037e6:	4b5d      	ldr	r3, [pc, #372]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	029b      	lsls	r3, r3, #10
 80037f4:	4959      	ldr	r1, [pc, #356]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60cb      	str	r3, [r1, #12]
 80037fa:	e05f      	b.n	80038bc <HAL_RCC_OscConfig+0x1e0>
 80037fc:	4b57      	ldr	r3, [pc, #348]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	03db      	lsls	r3, r3, #15
 800380a:	4954      	ldr	r1, [pc, #336]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 800380c:	4313      	orrs	r3, r2
 800380e:	60cb      	str	r3, [r1, #12]
 8003810:	e054      	b.n	80038bc <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003812:	4b52      	ldr	r3, [pc, #328]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	4a51      	ldr	r2, [pc, #324]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 8003818:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800381c:	6093      	str	r3, [r2, #8]
 800381e:	4b4f      	ldr	r3, [pc, #316]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382a:	494c      	ldr	r1, [pc, #304]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 800382c:	4313      	orrs	r3, r2
 800382e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003834:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003838:	d309      	bcc.n	800384e <HAL_RCC_OscConfig+0x172>
 800383a:	4b48      	ldr	r3, [pc, #288]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f023 021f 	bic.w	r2, r3, #31
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	4945      	ldr	r1, [pc, #276]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 8003848:	4313      	orrs	r3, r2
 800384a:	60cb      	str	r3, [r1, #12]
 800384c:	e028      	b.n	80038a0 <HAL_RCC_OscConfig+0x1c4>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003852:	2b00      	cmp	r3, #0
 8003854:	da0a      	bge.n	800386c <HAL_RCC_OscConfig+0x190>
 8003856:	4b41      	ldr	r3, [pc, #260]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	015b      	lsls	r3, r3, #5
 8003864:	493d      	ldr	r1, [pc, #244]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 8003866:	4313      	orrs	r3, r2
 8003868:	60cb      	str	r3, [r1, #12]
 800386a:	e019      	b.n	80038a0 <HAL_RCC_OscConfig+0x1c4>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003874:	d30a      	bcc.n	800388c <HAL_RCC_OscConfig+0x1b0>
 8003876:	4b39      	ldr	r3, [pc, #228]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	029b      	lsls	r3, r3, #10
 8003884:	4935      	ldr	r1, [pc, #212]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 8003886:	4313      	orrs	r3, r2
 8003888:	60cb      	str	r3, [r1, #12]
 800388a:	e009      	b.n	80038a0 <HAL_RCC_OscConfig+0x1c4>
 800388c:	4b33      	ldr	r3, [pc, #204]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	03db      	lsls	r3, r3, #15
 800389a:	4930      	ldr	r1, [pc, #192]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 800389c:	4313      	orrs	r3, r2
 800389e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80038a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10a      	bne.n	80038bc <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038aa:	4618      	mov	r0, r3
 80038ac:	f001 f93c 	bl	8004b28 <RCC_SetFlashLatencyFromMSIRange>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	f000 bde5 	b.w	8004486 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80038bc:	f001 f8de 	bl	8004a7c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038c0:	4b27      	ldr	r3, [pc, #156]	@ (8003960 <HAL_RCC_OscConfig+0x284>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fe fb59 	bl	8001f7c <HAL_InitTick>
 80038ca:	4603      	mov	r3, r0
 80038cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80038d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 808a 	beq.w	80039ee <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80038da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038de:	f000 bdd2 	b.w	8004486 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d066      	beq.n	80039b8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80038ea:	4b1c      	ldr	r3, [pc, #112]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a1b      	ldr	r2, [pc, #108]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80038f6:	f7fe fbcb 	bl	8002090 <HAL_GetTick>
 80038fa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80038fc:	e009      	b.n	8003912 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038fe:	f7fe fbc7 	bl	8002090 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d902      	bls.n	8003912 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	f000 bdba 	b.w	8004486 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003912:	4b12      	ldr	r3, [pc, #72]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0304 	and.w	r3, r3, #4
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0ef      	beq.n	80038fe <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800391e:	4b0f      	ldr	r3, [pc, #60]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	4a0e      	ldr	r2, [pc, #56]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 8003924:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003928:	6093      	str	r3, [r2, #8]
 800392a:	4b0c      	ldr	r3, [pc, #48]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003936:	4909      	ldr	r1, [pc, #36]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 8003938:	4313      	orrs	r3, r2
 800393a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003940:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003944:	d30e      	bcc.n	8003964 <HAL_RCC_OscConfig+0x288>
 8003946:	4b05      	ldr	r3, [pc, #20]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f023 021f 	bic.w	r2, r3, #31
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	4902      	ldr	r1, [pc, #8]	@ (800395c <HAL_RCC_OscConfig+0x280>)
 8003954:	4313      	orrs	r3, r2
 8003956:	60cb      	str	r3, [r1, #12]
 8003958:	e04a      	b.n	80039f0 <HAL_RCC_OscConfig+0x314>
 800395a:	bf00      	nop
 800395c:	46020c00 	.word	0x46020c00
 8003960:	20000018 	.word	0x20000018
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003968:	2b00      	cmp	r3, #0
 800396a:	da0a      	bge.n	8003982 <HAL_RCC_OscConfig+0x2a6>
 800396c:	4b98      	ldr	r3, [pc, #608]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	015b      	lsls	r3, r3, #5
 800397a:	4995      	ldr	r1, [pc, #596]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 800397c:	4313      	orrs	r3, r2
 800397e:	60cb      	str	r3, [r1, #12]
 8003980:	e036      	b.n	80039f0 <HAL_RCC_OscConfig+0x314>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800398a:	d30a      	bcc.n	80039a2 <HAL_RCC_OscConfig+0x2c6>
 800398c:	4b90      	ldr	r3, [pc, #576]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	029b      	lsls	r3, r3, #10
 800399a:	498d      	ldr	r1, [pc, #564]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 800399c:	4313      	orrs	r3, r2
 800399e:	60cb      	str	r3, [r1, #12]
 80039a0:	e026      	b.n	80039f0 <HAL_RCC_OscConfig+0x314>
 80039a2:	4b8b      	ldr	r3, [pc, #556]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	03db      	lsls	r3, r3, #15
 80039b0:	4987      	ldr	r1, [pc, #540]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60cb      	str	r3, [r1, #12]
 80039b6:	e01b      	b.n	80039f0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80039b8:	4b85      	ldr	r3, [pc, #532]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a84      	ldr	r2, [pc, #528]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 80039be:	f023 0301 	bic.w	r3, r3, #1
 80039c2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80039c4:	f7fe fb64 	bl	8002090 <HAL_GetTick>
 80039c8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80039ca:	e009      	b.n	80039e0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039cc:	f7fe fb60 	bl	8002090 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d902      	bls.n	80039e0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	f000 bd53 	b.w	8004486 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80039e0:	4b7b      	ldr	r3, [pc, #492]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1ef      	bne.n	80039cc <HAL_RCC_OscConfig+0x2f0>
 80039ec:	e000      	b.n	80039f0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80039ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 808b 	beq.w	8003b14 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80039fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d005      	beq.n	8003a10 <HAL_RCC_OscConfig+0x334>
 8003a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a06:	2b0c      	cmp	r3, #12
 8003a08:	d109      	bne.n	8003a1e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a0c:	2b03      	cmp	r3, #3
 8003a0e:	d106      	bne.n	8003a1e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d17d      	bne.n	8003b14 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	f000 bd34 	b.w	8004486 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a26:	d106      	bne.n	8003a36 <HAL_RCC_OscConfig+0x35a>
 8003a28:	4b69      	ldr	r3, [pc, #420]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a68      	ldr	r2, [pc, #416]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 8003a2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a32:	6013      	str	r3, [r2, #0]
 8003a34:	e041      	b.n	8003aba <HAL_RCC_OscConfig+0x3de>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a3e:	d112      	bne.n	8003a66 <HAL_RCC_OscConfig+0x38a>
 8003a40:	4b63      	ldr	r3, [pc, #396]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a62      	ldr	r2, [pc, #392]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 8003a46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a4a:	6013      	str	r3, [r2, #0]
 8003a4c:	4b60      	ldr	r3, [pc, #384]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a5f      	ldr	r2, [pc, #380]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 8003a52:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	4b5d      	ldr	r3, [pc, #372]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a5c      	ldr	r2, [pc, #368]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 8003a5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a62:	6013      	str	r3, [r2, #0]
 8003a64:	e029      	b.n	8003aba <HAL_RCC_OscConfig+0x3de>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003a6e:	d112      	bne.n	8003a96 <HAL_RCC_OscConfig+0x3ba>
 8003a70:	4b57      	ldr	r3, [pc, #348]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a56      	ldr	r2, [pc, #344]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 8003a76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	4b54      	ldr	r3, [pc, #336]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a53      	ldr	r2, [pc, #332]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 8003a82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a86:	6013      	str	r3, [r2, #0]
 8003a88:	4b51      	ldr	r3, [pc, #324]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a50      	ldr	r2, [pc, #320]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 8003a8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	e011      	b.n	8003aba <HAL_RCC_OscConfig+0x3de>
 8003a96:	4b4e      	ldr	r3, [pc, #312]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a4d      	ldr	r2, [pc, #308]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 8003a9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	4b4b      	ldr	r3, [pc, #300]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a4a      	ldr	r2, [pc, #296]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 8003aa8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	4b48      	ldr	r3, [pc, #288]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a47      	ldr	r2, [pc, #284]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 8003ab4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003ab8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d014      	beq.n	8003aec <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003ac2:	f7fe fae5 	bl	8002090 <HAL_GetTick>
 8003ac6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ac8:	e009      	b.n	8003ade <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aca:	f7fe fae1 	bl	8002090 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b64      	cmp	r3, #100	@ 0x64
 8003ad6:	d902      	bls.n	8003ade <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	f000 bcd4 	b.w	8004486 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ade:	4b3c      	ldr	r3, [pc, #240]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0ef      	beq.n	8003aca <HAL_RCC_OscConfig+0x3ee>
 8003aea:	e013      	b.n	8003b14 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003aec:	f7fe fad0 	bl	8002090 <HAL_GetTick>
 8003af0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003af2:	e009      	b.n	8003b08 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003af4:	f7fe facc 	bl	8002090 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b64      	cmp	r3, #100	@ 0x64
 8003b00:	d902      	bls.n	8003b08 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	f000 bcbf 	b.w	8004486 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b08:	4b31      	ldr	r3, [pc, #196]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1ef      	bne.n	8003af4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d05f      	beq.n	8003be0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d005      	beq.n	8003b32 <HAL_RCC_OscConfig+0x456>
 8003b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b28:	2b0c      	cmp	r3, #12
 8003b2a:	d114      	bne.n	8003b56 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d111      	bne.n	8003b56 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d102      	bne.n	8003b40 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	f000 bca3 	b.w	8004486 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003b40:	4b23      	ldr	r3, [pc, #140]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	041b      	lsls	r3, r3, #16
 8003b4e:	4920      	ldr	r1, [pc, #128]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003b54:	e044      	b.n	8003be0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d024      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a1b      	ldr	r2, [pc, #108]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 8003b64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b68:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003b6a:	f7fe fa91 	bl	8002090 <HAL_GetTick>
 8003b6e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b70:	e009      	b.n	8003b86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b72:	f7fe fa8d 	bl	8002090 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d902      	bls.n	8003b86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	f000 bc80 	b.w	8004486 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b86:	4b12      	ldr	r3, [pc, #72]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0ef      	beq.n	8003b72 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003b92:	4b0f      	ldr	r3, [pc, #60]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	041b      	lsls	r3, r3, #16
 8003ba0:	490b      	ldr	r1, [pc, #44]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	610b      	str	r3, [r1, #16]
 8003ba6:	e01b      	b.n	8003be0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003ba8:	4b09      	ldr	r3, [pc, #36]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a08      	ldr	r2, [pc, #32]	@ (8003bd0 <HAL_RCC_OscConfig+0x4f4>)
 8003bae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bb2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003bb4:	f7fe fa6c 	bl	8002090 <HAL_GetTick>
 8003bb8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bba:	e00b      	b.n	8003bd4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bbc:	f7fe fa68 	bl	8002090 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d904      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	f000 bc5b 	b.w	8004486 <HAL_RCC_OscConfig+0xdaa>
 8003bd0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bd4:	4baf      	ldr	r3, [pc, #700]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1ed      	bne.n	8003bbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0308 	and.w	r3, r3, #8
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 80c8 	beq.w	8003d7e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bf4:	4ba7      	ldr	r3, [pc, #668]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d111      	bne.n	8003c26 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c02:	4ba4      	ldr	r3, [pc, #656]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c08:	4aa2      	ldr	r2, [pc, #648]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003c0a:	f043 0304 	orr.w	r3, r3, #4
 8003c0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003c12:	4ba0      	ldr	r3, [pc, #640]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	617b      	str	r3, [r7, #20]
 8003c1e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003c20:	2301      	movs	r3, #1
 8003c22:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c26:	4b9c      	ldr	r3, [pc, #624]	@ (8003e98 <HAL_RCC_OscConfig+0x7bc>)
 8003c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d119      	bne.n	8003c66 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003c32:	4b99      	ldr	r3, [pc, #612]	@ (8003e98 <HAL_RCC_OscConfig+0x7bc>)
 8003c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c36:	4a98      	ldr	r2, [pc, #608]	@ (8003e98 <HAL_RCC_OscConfig+0x7bc>)
 8003c38:	f043 0301 	orr.w	r3, r3, #1
 8003c3c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c3e:	f7fe fa27 	bl	8002090 <HAL_GetTick>
 8003c42:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c44:	e009      	b.n	8003c5a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c46:	f7fe fa23 	bl	8002090 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d902      	bls.n	8003c5a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	f000 bc16 	b.w	8004486 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c5a:	4b8f      	ldr	r3, [pc, #572]	@ (8003e98 <HAL_RCC_OscConfig+0x7bc>)
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0ef      	beq.n	8003c46 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d05f      	beq.n	8003d2e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003c6e:	4b89      	ldr	r3, [pc, #548]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003c70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c74:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699a      	ldr	r2, [r3, #24]
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d037      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d006      	beq.n	8003c9c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e3f4      	b.n	8004486 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d01b      	beq.n	8003cde <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003ca6:	4b7b      	ldr	r3, [pc, #492]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003ca8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cac:	4a79      	ldr	r2, [pc, #484]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003cae:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003cb2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8003cb6:	f7fe f9eb 	bl	8002090 <HAL_GetTick>
 8003cba:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cbe:	f7fe f9e7 	bl	8002090 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b05      	cmp	r3, #5
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e3da      	b.n	8004486 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003cd0:	4b70      	ldr	r3, [pc, #448]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003cd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cd6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1ef      	bne.n	8003cbe <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003cde:	4b6d      	ldr	r3, [pc, #436]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003ce0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ce4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	4969      	ldr	r1, [pc, #420]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003cf4:	4b67      	ldr	r3, [pc, #412]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003cf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cfa:	4a66      	ldr	r2, [pc, #408]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003cfc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d00:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003d04:	f7fe f9c4 	bl	8002090 <HAL_GetTick>
 8003d08:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d0c:	f7fe f9c0 	bl	8002090 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b05      	cmp	r3, #5
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e3b3      	b.n	8004486 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003d1e:	4b5d      	ldr	r3, [pc, #372]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003d20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0ef      	beq.n	8003d0c <HAL_RCC_OscConfig+0x630>
 8003d2c:	e01b      	b.n	8003d66 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003d2e:	4b59      	ldr	r3, [pc, #356]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003d30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d34:	4a57      	ldr	r2, [pc, #348]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003d36:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003d3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003d3e:	f7fe f9a7 	bl	8002090 <HAL_GetTick>
 8003d42:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d44:	e008      	b.n	8003d58 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d46:	f7fe f9a3 	bl	8002090 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b05      	cmp	r3, #5
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e396      	b.n	8004486 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d58:	4b4e      	ldr	r3, [pc, #312]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003d5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1ef      	bne.n	8003d46 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d66:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d107      	bne.n	8003d7e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d6e:	4b49      	ldr	r3, [pc, #292]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d74:	4a47      	ldr	r2, [pc, #284]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003d76:	f023 0304 	bic.w	r3, r3, #4
 8003d7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0304 	and.w	r3, r3, #4
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 8111 	beq.w	8003fae <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d92:	4b40      	ldr	r3, [pc, #256]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d111      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da0:	4b3c      	ldr	r3, [pc, #240]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003da6:	4a3b      	ldr	r2, [pc, #236]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003da8:	f043 0304 	orr.w	r3, r3, #4
 8003dac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003db0:	4b38      	ldr	r3, [pc, #224]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003db6:	f003 0304 	and.w	r3, r3, #4
 8003dba:	613b      	str	r3, [r7, #16]
 8003dbc:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003dc4:	4b34      	ldr	r3, [pc, #208]	@ (8003e98 <HAL_RCC_OscConfig+0x7bc>)
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d118      	bne.n	8003e02 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003dd0:	4b31      	ldr	r3, [pc, #196]	@ (8003e98 <HAL_RCC_OscConfig+0x7bc>)
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd4:	4a30      	ldr	r2, [pc, #192]	@ (8003e98 <HAL_RCC_OscConfig+0x7bc>)
 8003dd6:	f043 0301 	orr.w	r3, r3, #1
 8003dda:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ddc:	f7fe f958 	bl	8002090 <HAL_GetTick>
 8003de0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de4:	f7fe f954 	bl	8002090 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e347      	b.n	8004486 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003df6:	4b28      	ldr	r3, [pc, #160]	@ (8003e98 <HAL_RCC_OscConfig+0x7bc>)
 8003df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0f0      	beq.n	8003de4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d01f      	beq.n	8003e4e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 0304 	and.w	r3, r3, #4
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d010      	beq.n	8003e3c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003e1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e20:	4a1c      	ldr	r2, [pc, #112]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003e22:	f043 0304 	orr.w	r3, r3, #4
 8003e26:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003e2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e30:	4a18      	ldr	r2, [pc, #96]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e3a:	e018      	b.n	8003e6e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e3c:	4b15      	ldr	r3, [pc, #84]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003e3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e42:	4a14      	ldr	r2, [pc, #80]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e4c:	e00f      	b.n	8003e6e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e4e:	4b11      	ldr	r3, [pc, #68]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003e50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e54:	4a0f      	ldr	r2, [pc, #60]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003e56:	f023 0301 	bic.w	r3, r3, #1
 8003e5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003e60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e64:	4a0b      	ldr	r2, [pc, #44]	@ (8003e94 <HAL_RCC_OscConfig+0x7b8>)
 8003e66:	f023 0304 	bic.w	r3, r3, #4
 8003e6a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d057      	beq.n	8003f26 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003e76:	f7fe f90b 	bl	8002090 <HAL_GetTick>
 8003e7a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e7c:	e00e      	b.n	8003e9c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7e:	f7fe f907 	bl	8002090 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d905      	bls.n	8003e9c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e2f8      	b.n	8004486 <HAL_RCC_OscConfig+0xdaa>
 8003e94:	46020c00 	.word	0x46020c00
 8003e98:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e9c:	4b9c      	ldr	r3, [pc, #624]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 8003e9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0e9      	beq.n	8003e7e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d01b      	beq.n	8003eee <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003eb6:	4b96      	ldr	r3, [pc, #600]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 8003eb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ebc:	4a94      	ldr	r2, [pc, #592]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 8003ebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ec2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003ec6:	e00a      	b.n	8003ede <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec8:	f7fe f8e2 	bl	8002090 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e2d3      	b.n	8004486 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003ede:	4b8c      	ldr	r3, [pc, #560]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 8003ee0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ee4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0ed      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x7ec>
 8003eec:	e053      	b.n	8003f96 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003eee:	4b88      	ldr	r3, [pc, #544]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 8003ef0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ef4:	4a86      	ldr	r2, [pc, #536]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 8003ef6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003efa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003efe:	e00a      	b.n	8003f16 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f00:	f7fe f8c6 	bl	8002090 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e2b7      	b.n	8004486 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f16:	4b7e      	ldr	r3, [pc, #504]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 8003f18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1ed      	bne.n	8003f00 <HAL_RCC_OscConfig+0x824>
 8003f24:	e037      	b.n	8003f96 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003f26:	f7fe f8b3 	bl	8002090 <HAL_GetTick>
 8003f2a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f2c:	e00a      	b.n	8003f44 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f2e:	f7fe f8af 	bl	8002090 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e2a0      	b.n	8004486 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f44:	4b72      	ldr	r3, [pc, #456]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 8003f46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1ed      	bne.n	8003f2e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003f52:	4b6f      	ldr	r3, [pc, #444]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 8003f54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d01a      	beq.n	8003f96 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003f60:	4b6b      	ldr	r3, [pc, #428]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 8003f62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f66:	4a6a      	ldr	r2, [pc, #424]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 8003f68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f6c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f70:	e00a      	b.n	8003f88 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f72:	f7fe f88d 	bl	8002090 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e27e      	b.n	8004486 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f88:	4b61      	ldr	r3, [pc, #388]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 8003f8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1ed      	bne.n	8003f72 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f96:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d107      	bne.n	8003fae <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f9e:	4b5c      	ldr	r3, [pc, #368]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 8003fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fa4:	4a5a      	ldr	r2, [pc, #360]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 8003fa6:	f023 0304 	bic.w	r3, r3, #4
 8003faa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d036      	beq.n	8004028 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d019      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003fc2:	4b53      	ldr	r3, [pc, #332]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a52      	ldr	r2, [pc, #328]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 8003fc8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003fcc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003fce:	f7fe f85f 	bl	8002090 <HAL_GetTick>
 8003fd2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003fd4:	e008      	b.n	8003fe8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fd6:	f7fe f85b 	bl	8002090 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e24e      	b.n	8004486 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003fe8:	4b49      	ldr	r3, [pc, #292]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0f0      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x8fa>
 8003ff4:	e018      	b.n	8004028 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003ff6:	4b46      	ldr	r3, [pc, #280]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a45      	ldr	r2, [pc, #276]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 8003ffc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004000:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004002:	f7fe f845 	bl	8002090 <HAL_GetTick>
 8004006:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004008:	e008      	b.n	800401c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800400a:	f7fe f841 	bl	8002090 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e234      	b.n	8004486 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800401c:	4b3c      	ldr	r3, [pc, #240]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1f0      	bne.n	800400a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004030:	2b00      	cmp	r3, #0
 8004032:	d036      	beq.n	80040a2 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004038:	2b00      	cmp	r3, #0
 800403a:	d019      	beq.n	8004070 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800403c:	4b34      	ldr	r3, [pc, #208]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a33      	ldr	r2, [pc, #204]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 8004042:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004046:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004048:	f7fe f822 	bl	8002090 <HAL_GetTick>
 800404c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004050:	f7fe f81e 	bl	8002090 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e211      	b.n	8004486 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004062:	4b2b      	ldr	r3, [pc, #172]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0f0      	beq.n	8004050 <HAL_RCC_OscConfig+0x974>
 800406e:	e018      	b.n	80040a2 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004070:	4b27      	ldr	r3, [pc, #156]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a26      	ldr	r2, [pc, #152]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 8004076:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800407a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800407c:	f7fe f808 	bl	8002090 <HAL_GetTick>
 8004080:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004084:	f7fe f804 	bl	8002090 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e1f7      	b.n	8004486 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004096:	4b1e      	ldr	r3, [pc, #120]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1f0      	bne.n	8004084 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d07f      	beq.n	80041ae <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d062      	beq.n	800417c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80040b6:	4b16      	ldr	r3, [pc, #88]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	4a15      	ldr	r2, [pc, #84]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 80040bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80040c0:	6093      	str	r3, [r2, #8]
 80040c2:	4b13      	ldr	r3, [pc, #76]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ce:	4910      	ldr	r1, [pc, #64]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80040dc:	d309      	bcc.n	80040f2 <HAL_RCC_OscConfig+0xa16>
 80040de:	4b0c      	ldr	r3, [pc, #48]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f023 021f 	bic.w	r2, r3, #31
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	4909      	ldr	r1, [pc, #36]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	60cb      	str	r3, [r1, #12]
 80040f0:	e02a      	b.n	8004148 <HAL_RCC_OscConfig+0xa6c>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	da0c      	bge.n	8004114 <HAL_RCC_OscConfig+0xa38>
 80040fa:	4b05      	ldr	r3, [pc, #20]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	015b      	lsls	r3, r3, #5
 8004108:	4901      	ldr	r1, [pc, #4]	@ (8004110 <HAL_RCC_OscConfig+0xa34>)
 800410a:	4313      	orrs	r3, r2
 800410c:	60cb      	str	r3, [r1, #12]
 800410e:	e01b      	b.n	8004148 <HAL_RCC_OscConfig+0xa6c>
 8004110:	46020c00 	.word	0x46020c00
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800411c:	d30a      	bcc.n	8004134 <HAL_RCC_OscConfig+0xa58>
 800411e:	4ba1      	ldr	r3, [pc, #644]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	029b      	lsls	r3, r3, #10
 800412c:	499d      	ldr	r1, [pc, #628]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 800412e:	4313      	orrs	r3, r2
 8004130:	60cb      	str	r3, [r1, #12]
 8004132:	e009      	b.n	8004148 <HAL_RCC_OscConfig+0xa6c>
 8004134:	4b9b      	ldr	r3, [pc, #620]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	03db      	lsls	r3, r3, #15
 8004142:	4998      	ldr	r1, [pc, #608]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 8004144:	4313      	orrs	r3, r2
 8004146:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004148:	4b96      	ldr	r3, [pc, #600]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a95      	ldr	r2, [pc, #596]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 800414e:	f043 0310 	orr.w	r3, r3, #16
 8004152:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004154:	f7fd ff9c 	bl	8002090 <HAL_GetTick>
 8004158:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800415c:	f7fd ff98 	bl	8002090 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e18b      	b.n	8004486 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800416e:	4b8d      	ldr	r3, [pc, #564]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0320 	and.w	r3, r3, #32
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0f0      	beq.n	800415c <HAL_RCC_OscConfig+0xa80>
 800417a:	e018      	b.n	80041ae <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800417c:	4b89      	ldr	r3, [pc, #548]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a88      	ldr	r2, [pc, #544]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 8004182:	f023 0310 	bic.w	r3, r3, #16
 8004186:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004188:	f7fd ff82 	bl	8002090 <HAL_GetTick>
 800418c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004190:	f7fd ff7e 	bl	8002090 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e171      	b.n	8004486 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80041a2:	4b80      	ldr	r3, [pc, #512]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0320 	and.w	r3, r3, #32
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1f0      	bne.n	8004190 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 8166 	beq.w	8004484 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80041b8:	2300      	movs	r3, #0
 80041ba:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041be:	4b79      	ldr	r3, [pc, #484]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	f003 030c 	and.w	r3, r3, #12
 80041c6:	2b0c      	cmp	r3, #12
 80041c8:	f000 80f2 	beq.w	80043b0 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	f040 80c5 	bne.w	8004360 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80041d6:	4b73      	ldr	r3, [pc, #460]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a72      	ldr	r2, [pc, #456]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 80041dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041e0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80041e2:	f7fd ff55 	bl	8002090 <HAL_GetTick>
 80041e6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80041e8:	e008      	b.n	80041fc <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ea:	f7fd ff51 	bl	8002090 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e144      	b.n	8004486 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80041fc:	4b69      	ldr	r3, [pc, #420]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1f0      	bne.n	80041ea <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004208:	4b66      	ldr	r3, [pc, #408]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 800420a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800420e:	f003 0304 	and.w	r3, r3, #4
 8004212:	2b00      	cmp	r3, #0
 8004214:	d111      	bne.n	800423a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004216:	4b63      	ldr	r3, [pc, #396]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 8004218:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800421c:	4a61      	ldr	r2, [pc, #388]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 800421e:	f043 0304 	orr.w	r3, r3, #4
 8004222:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004226:	4b5f      	ldr	r3, [pc, #380]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 8004228:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004234:	2301      	movs	r3, #1
 8004236:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800423a:	4b5b      	ldr	r3, [pc, #364]	@ (80043a8 <HAL_RCC_OscConfig+0xccc>)
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004242:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004246:	d102      	bne.n	800424e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004248:	2301      	movs	r3, #1
 800424a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800424e:	4b56      	ldr	r3, [pc, #344]	@ (80043a8 <HAL_RCC_OscConfig+0xccc>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	4a55      	ldr	r2, [pc, #340]	@ (80043a8 <HAL_RCC_OscConfig+0xccc>)
 8004254:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004258:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800425a:	4b52      	ldr	r3, [pc, #328]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 800425c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800425e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004262:	f023 0303 	bic.w	r3, r3, #3
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800426e:	3a01      	subs	r2, #1
 8004270:	0212      	lsls	r2, r2, #8
 8004272:	4311      	orrs	r1, r2
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004278:	430a      	orrs	r2, r1
 800427a:	494a      	ldr	r1, [pc, #296]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 800427c:	4313      	orrs	r3, r2
 800427e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004280:	4b48      	ldr	r3, [pc, #288]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 8004282:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004284:	4b49      	ldr	r3, [pc, #292]	@ (80043ac <HAL_RCC_OscConfig+0xcd0>)
 8004286:	4013      	ands	r3, r2
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800428c:	3a01      	subs	r2, #1
 800428e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004296:	3a01      	subs	r2, #1
 8004298:	0252      	lsls	r2, r2, #9
 800429a:	b292      	uxth	r2, r2
 800429c:	4311      	orrs	r1, r2
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80042a2:	3a01      	subs	r2, #1
 80042a4:	0412      	lsls	r2, r2, #16
 80042a6:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80042aa:	4311      	orrs	r1, r2
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80042b0:	3a01      	subs	r2, #1
 80042b2:	0612      	lsls	r2, r2, #24
 80042b4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80042b8:	430a      	orrs	r2, r1
 80042ba:	493a      	ldr	r1, [pc, #232]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80042c0:	4b38      	ldr	r3, [pc, #224]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 80042c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c4:	4a37      	ldr	r2, [pc, #220]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 80042c6:	f023 0310 	bic.w	r3, r3, #16
 80042ca:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d0:	4a34      	ldr	r2, [pc, #208]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80042d6:	4b33      	ldr	r3, [pc, #204]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 80042d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042da:	4a32      	ldr	r2, [pc, #200]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 80042dc:	f043 0310 	orr.w	r3, r3, #16
 80042e0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80042e2:	4b30      	ldr	r3, [pc, #192]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 80042e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e6:	f023 020c 	bic.w	r2, r3, #12
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ee:	492d      	ldr	r1, [pc, #180]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80042f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d105      	bne.n	8004308 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80042fc:	4b2a      	ldr	r3, [pc, #168]	@ (80043a8 <HAL_RCC_OscConfig+0xccc>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	4a29      	ldr	r2, [pc, #164]	@ (80043a8 <HAL_RCC_OscConfig+0xccc>)
 8004302:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004306:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004308:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800430c:	2b01      	cmp	r3, #1
 800430e:	d107      	bne.n	8004320 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004310:	4b24      	ldr	r3, [pc, #144]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 8004312:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004316:	4a23      	ldr	r2, [pc, #140]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 8004318:	f023 0304 	bic.w	r3, r3, #4
 800431c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004320:	4b20      	ldr	r3, [pc, #128]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a1f      	ldr	r2, [pc, #124]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 8004326:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800432a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800432c:	f7fd feb0 	bl	8002090 <HAL_GetTick>
 8004330:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004334:	f7fd feac 	bl	8002090 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e09f      	b.n	8004486 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004346:	4b17      	ldr	r3, [pc, #92]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0f0      	beq.n	8004334 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004352:	4b14      	ldr	r3, [pc, #80]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 8004354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004356:	4a13      	ldr	r2, [pc, #76]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 8004358:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800435c:	6293      	str	r3, [r2, #40]	@ 0x28
 800435e:	e091      	b.n	8004484 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004360:	4b10      	ldr	r3, [pc, #64]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a0f      	ldr	r2, [pc, #60]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 8004366:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800436a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800436c:	f7fd fe90 	bl	8002090 <HAL_GetTick>
 8004370:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004374:	f7fd fe8c 	bl	8002090 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e07f      	b.n	8004486 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004386:	4b07      	ldr	r3, [pc, #28]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1f0      	bne.n	8004374 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004392:	4b04      	ldr	r3, [pc, #16]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 8004394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004396:	4a03      	ldr	r2, [pc, #12]	@ (80043a4 <HAL_RCC_OscConfig+0xcc8>)
 8004398:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800439c:	f023 0303 	bic.w	r3, r3, #3
 80043a0:	6293      	str	r3, [r2, #40]	@ 0x28
 80043a2:	e06f      	b.n	8004484 <HAL_RCC_OscConfig+0xda8>
 80043a4:	46020c00 	.word	0x46020c00
 80043a8:	46020800 	.word	0x46020800
 80043ac:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80043b0:	4b37      	ldr	r3, [pc, #220]	@ (8004490 <HAL_RCC_OscConfig+0xdb4>)
 80043b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80043b6:	4b36      	ldr	r3, [pc, #216]	@ (8004490 <HAL_RCC_OscConfig+0xdb4>)
 80043b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ba:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d039      	beq.n	8004438 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	f003 0203 	and.w	r2, r3, #3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d132      	bne.n	8004438 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	0a1b      	lsrs	r3, r3, #8
 80043d6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043de:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d129      	bne.n	8004438 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d122      	bne.n	8004438 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043fc:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80043fe:	429a      	cmp	r2, r3
 8004400:	d11a      	bne.n	8004438 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	0a5b      	lsrs	r3, r3, #9
 8004406:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800440e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004410:	429a      	cmp	r2, r3
 8004412:	d111      	bne.n	8004438 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	0c1b      	lsrs	r3, r3, #16
 8004418:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004420:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004422:	429a      	cmp	r2, r3
 8004424:	d108      	bne.n	8004438 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	0e1b      	lsrs	r3, r3, #24
 800442a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004432:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004434:	429a      	cmp	r2, r3
 8004436:	d001      	beq.n	800443c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e024      	b.n	8004486 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800443c:	4b14      	ldr	r3, [pc, #80]	@ (8004490 <HAL_RCC_OscConfig+0xdb4>)
 800443e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004440:	08db      	lsrs	r3, r3, #3
 8004442:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800444a:	429a      	cmp	r2, r3
 800444c:	d01a      	beq.n	8004484 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800444e:	4b10      	ldr	r3, [pc, #64]	@ (8004490 <HAL_RCC_OscConfig+0xdb4>)
 8004450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004452:	4a0f      	ldr	r2, [pc, #60]	@ (8004490 <HAL_RCC_OscConfig+0xdb4>)
 8004454:	f023 0310 	bic.w	r3, r3, #16
 8004458:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445a:	f7fd fe19 	bl	8002090 <HAL_GetTick>
 800445e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004460:	bf00      	nop
 8004462:	f7fd fe15 	bl	8002090 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800446a:	4293      	cmp	r3, r2
 800446c:	d0f9      	beq.n	8004462 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004472:	4a07      	ldr	r2, [pc, #28]	@ (8004490 <HAL_RCC_OscConfig+0xdb4>)
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004478:	4b05      	ldr	r3, [pc, #20]	@ (8004490 <HAL_RCC_OscConfig+0xdb4>)
 800447a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800447c:	4a04      	ldr	r2, [pc, #16]	@ (8004490 <HAL_RCC_OscConfig+0xdb4>)
 800447e:	f043 0310 	orr.w	r3, r3, #16
 8004482:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3738      	adds	r7, #56	@ 0x38
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	46020c00 	.word	0x46020c00

08004494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e1d9      	b.n	800485c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044a8:	4b9b      	ldr	r3, [pc, #620]	@ (8004718 <HAL_RCC_ClockConfig+0x284>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d910      	bls.n	80044d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b6:	4b98      	ldr	r3, [pc, #608]	@ (8004718 <HAL_RCC_ClockConfig+0x284>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f023 020f 	bic.w	r2, r3, #15
 80044be:	4996      	ldr	r1, [pc, #600]	@ (8004718 <HAL_RCC_ClockConfig+0x284>)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c6:	4b94      	ldr	r3, [pc, #592]	@ (8004718 <HAL_RCC_ClockConfig+0x284>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 030f 	and.w	r3, r3, #15
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d001      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e1c1      	b.n	800485c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0310 	and.w	r3, r3, #16
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d010      	beq.n	8004506 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	695a      	ldr	r2, [r3, #20]
 80044e8:	4b8c      	ldr	r3, [pc, #560]	@ (800471c <HAL_RCC_ClockConfig+0x288>)
 80044ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d908      	bls.n	8004506 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80044f4:	4b89      	ldr	r3, [pc, #548]	@ (800471c <HAL_RCC_ClockConfig+0x288>)
 80044f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	4986      	ldr	r1, [pc, #536]	@ (800471c <HAL_RCC_ClockConfig+0x288>)
 8004502:	4313      	orrs	r3, r2
 8004504:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d012      	beq.n	8004538 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	691a      	ldr	r2, [r3, #16]
 8004516:	4b81      	ldr	r3, [pc, #516]	@ (800471c <HAL_RCC_ClockConfig+0x288>)
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	091b      	lsrs	r3, r3, #4
 800451c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004520:	429a      	cmp	r2, r3
 8004522:	d909      	bls.n	8004538 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004524:	4b7d      	ldr	r3, [pc, #500]	@ (800471c <HAL_RCC_ClockConfig+0x288>)
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	497a      	ldr	r1, [pc, #488]	@ (800471c <HAL_RCC_ClockConfig+0x288>)
 8004534:	4313      	orrs	r3, r2
 8004536:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	d010      	beq.n	8004566 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	4b74      	ldr	r3, [pc, #464]	@ (800471c <HAL_RCC_ClockConfig+0x288>)
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004550:	429a      	cmp	r2, r3
 8004552:	d908      	bls.n	8004566 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004554:	4b71      	ldr	r3, [pc, #452]	@ (800471c <HAL_RCC_ClockConfig+0x288>)
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	496e      	ldr	r1, [pc, #440]	@ (800471c <HAL_RCC_ClockConfig+0x288>)
 8004562:	4313      	orrs	r3, r2
 8004564:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d010      	beq.n	8004594 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	4b69      	ldr	r3, [pc, #420]	@ (800471c <HAL_RCC_ClockConfig+0x288>)
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	429a      	cmp	r2, r3
 8004580:	d908      	bls.n	8004594 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004582:	4b66      	ldr	r3, [pc, #408]	@ (800471c <HAL_RCC_ClockConfig+0x288>)
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	f023 020f 	bic.w	r2, r3, #15
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	4963      	ldr	r1, [pc, #396]	@ (800471c <HAL_RCC_ClockConfig+0x288>)
 8004590:	4313      	orrs	r3, r2
 8004592:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 80d2 	beq.w	8004746 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80045a2:	2300      	movs	r3, #0
 80045a4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	d143      	bne.n	8004636 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ae:	4b5b      	ldr	r3, [pc, #364]	@ (800471c <HAL_RCC_ClockConfig+0x288>)
 80045b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d110      	bne.n	80045de <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80045bc:	4b57      	ldr	r3, [pc, #348]	@ (800471c <HAL_RCC_ClockConfig+0x288>)
 80045be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045c2:	4a56      	ldr	r2, [pc, #344]	@ (800471c <HAL_RCC_ClockConfig+0x288>)
 80045c4:	f043 0304 	orr.w	r3, r3, #4
 80045c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80045cc:	4b53      	ldr	r3, [pc, #332]	@ (800471c <HAL_RCC_ClockConfig+0x288>)
 80045ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045d2:	f003 0304 	and.w	r3, r3, #4
 80045d6:	60bb      	str	r3, [r7, #8]
 80045d8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80045da:	2301      	movs	r3, #1
 80045dc:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80045de:	f7fd fd57 	bl	8002090 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80045e4:	4b4e      	ldr	r3, [pc, #312]	@ (8004720 <HAL_RCC_ClockConfig+0x28c>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00f      	beq.n	8004610 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80045f2:	f7fd fd4d 	bl	8002090 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e12b      	b.n	800485c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004604:	4b46      	ldr	r3, [pc, #280]	@ (8004720 <HAL_RCC_ClockConfig+0x28c>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0f0      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004610:	7dfb      	ldrb	r3, [r7, #23]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d107      	bne.n	8004626 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004616:	4b41      	ldr	r3, [pc, #260]	@ (800471c <HAL_RCC_ClockConfig+0x288>)
 8004618:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800461c:	4a3f      	ldr	r2, [pc, #252]	@ (800471c <HAL_RCC_ClockConfig+0x288>)
 800461e:	f023 0304 	bic.w	r3, r3, #4
 8004622:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004626:	4b3d      	ldr	r3, [pc, #244]	@ (800471c <HAL_RCC_ClockConfig+0x288>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d121      	bne.n	8004676 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e112      	b.n	800485c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d107      	bne.n	800464e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800463e:	4b37      	ldr	r3, [pc, #220]	@ (800471c <HAL_RCC_ClockConfig+0x288>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d115      	bne.n	8004676 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e106      	b.n	800485c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d107      	bne.n	8004666 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004656:	4b31      	ldr	r3, [pc, #196]	@ (800471c <HAL_RCC_ClockConfig+0x288>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0304 	and.w	r3, r3, #4
 800465e:	2b00      	cmp	r3, #0
 8004660:	d109      	bne.n	8004676 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e0fa      	b.n	800485c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004666:	4b2d      	ldr	r3, [pc, #180]	@ (800471c <HAL_RCC_ClockConfig+0x288>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e0f2      	b.n	800485c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004676:	4b29      	ldr	r3, [pc, #164]	@ (800471c <HAL_RCC_ClockConfig+0x288>)
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	f023 0203 	bic.w	r2, r3, #3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	4926      	ldr	r1, [pc, #152]	@ (800471c <HAL_RCC_ClockConfig+0x288>)
 8004684:	4313      	orrs	r3, r2
 8004686:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004688:	f7fd fd02 	bl	8002090 <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b03      	cmp	r3, #3
 8004694:	d112      	bne.n	80046bc <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004696:	e00a      	b.n	80046ae <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004698:	f7fd fcfa 	bl	8002090 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e0d6      	b.n	800485c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046ae:	4b1b      	ldr	r3, [pc, #108]	@ (800471c <HAL_RCC_ClockConfig+0x288>)
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	f003 030c 	and.w	r3, r3, #12
 80046b6:	2b0c      	cmp	r3, #12
 80046b8:	d1ee      	bne.n	8004698 <HAL_RCC_ClockConfig+0x204>
 80046ba:	e044      	b.n	8004746 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d112      	bne.n	80046ea <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80046c4:	e00a      	b.n	80046dc <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046c6:	f7fd fce3 	bl	8002090 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e0bf      	b.n	800485c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80046dc:	4b0f      	ldr	r3, [pc, #60]	@ (800471c <HAL_RCC_ClockConfig+0x288>)
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	f003 030c 	and.w	r3, r3, #12
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d1ee      	bne.n	80046c6 <HAL_RCC_ClockConfig+0x232>
 80046e8:	e02d      	b.n	8004746 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d123      	bne.n	800473a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80046f2:	e00a      	b.n	800470a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046f4:	f7fd fccc 	bl	8002090 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004702:	4293      	cmp	r3, r2
 8004704:	d901      	bls.n	800470a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e0a8      	b.n	800485c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800470a:	4b04      	ldr	r3, [pc, #16]	@ (800471c <HAL_RCC_ClockConfig+0x288>)
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	f003 030c 	and.w	r3, r3, #12
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1ee      	bne.n	80046f4 <HAL_RCC_ClockConfig+0x260>
 8004716:	e016      	b.n	8004746 <HAL_RCC_ClockConfig+0x2b2>
 8004718:	40022000 	.word	0x40022000
 800471c:	46020c00 	.word	0x46020c00
 8004720:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004724:	f7fd fcb4 	bl	8002090 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004732:	4293      	cmp	r3, r2
 8004734:	d901      	bls.n	800473a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e090      	b.n	800485c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800473a:	4b4a      	ldr	r3, [pc, #296]	@ (8004864 <HAL_RCC_ClockConfig+0x3d0>)
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	f003 030c 	and.w	r3, r3, #12
 8004742:	2b04      	cmp	r3, #4
 8004744:	d1ee      	bne.n	8004724 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d010      	beq.n	8004774 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	4b43      	ldr	r3, [pc, #268]	@ (8004864 <HAL_RCC_ClockConfig+0x3d0>)
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	f003 030f 	and.w	r3, r3, #15
 800475e:	429a      	cmp	r2, r3
 8004760:	d208      	bcs.n	8004774 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004762:	4b40      	ldr	r3, [pc, #256]	@ (8004864 <HAL_RCC_ClockConfig+0x3d0>)
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	f023 020f 	bic.w	r2, r3, #15
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	493d      	ldr	r1, [pc, #244]	@ (8004864 <HAL_RCC_ClockConfig+0x3d0>)
 8004770:	4313      	orrs	r3, r2
 8004772:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004774:	4b3c      	ldr	r3, [pc, #240]	@ (8004868 <HAL_RCC_ClockConfig+0x3d4>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 030f 	and.w	r3, r3, #15
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d210      	bcs.n	80047a4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004782:	4b39      	ldr	r3, [pc, #228]	@ (8004868 <HAL_RCC_ClockConfig+0x3d4>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f023 020f 	bic.w	r2, r3, #15
 800478a:	4937      	ldr	r1, [pc, #220]	@ (8004868 <HAL_RCC_ClockConfig+0x3d4>)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	4313      	orrs	r3, r2
 8004790:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004792:	4b35      	ldr	r3, [pc, #212]	@ (8004868 <HAL_RCC_ClockConfig+0x3d4>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 030f 	and.w	r3, r3, #15
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	429a      	cmp	r2, r3
 800479e:	d001      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e05b      	b.n	800485c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d010      	beq.n	80047d2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68da      	ldr	r2, [r3, #12]
 80047b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004864 <HAL_RCC_ClockConfig+0x3d0>)
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047bc:	429a      	cmp	r2, r3
 80047be:	d208      	bcs.n	80047d2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80047c0:	4b28      	ldr	r3, [pc, #160]	@ (8004864 <HAL_RCC_ClockConfig+0x3d0>)
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	4925      	ldr	r1, [pc, #148]	@ (8004864 <HAL_RCC_ClockConfig+0x3d0>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0308 	and.w	r3, r3, #8
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d012      	beq.n	8004804 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691a      	ldr	r2, [r3, #16]
 80047e2:	4b20      	ldr	r3, [pc, #128]	@ (8004864 <HAL_RCC_ClockConfig+0x3d0>)
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	091b      	lsrs	r3, r3, #4
 80047e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d209      	bcs.n	8004804 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80047f0:	4b1c      	ldr	r3, [pc, #112]	@ (8004864 <HAL_RCC_ClockConfig+0x3d0>)
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	4919      	ldr	r1, [pc, #100]	@ (8004864 <HAL_RCC_ClockConfig+0x3d0>)
 8004800:	4313      	orrs	r3, r2
 8004802:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0310 	and.w	r3, r3, #16
 800480c:	2b00      	cmp	r3, #0
 800480e:	d010      	beq.n	8004832 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	695a      	ldr	r2, [r3, #20]
 8004814:	4b13      	ldr	r3, [pc, #76]	@ (8004864 <HAL_RCC_ClockConfig+0x3d0>)
 8004816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004818:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800481c:	429a      	cmp	r2, r3
 800481e:	d208      	bcs.n	8004832 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004820:	4b10      	ldr	r3, [pc, #64]	@ (8004864 <HAL_RCC_ClockConfig+0x3d0>)
 8004822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004824:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	490d      	ldr	r1, [pc, #52]	@ (8004864 <HAL_RCC_ClockConfig+0x3d0>)
 800482e:	4313      	orrs	r3, r2
 8004830:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004832:	f000 f821 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 8004836:	4602      	mov	r2, r0
 8004838:	4b0a      	ldr	r3, [pc, #40]	@ (8004864 <HAL_RCC_ClockConfig+0x3d0>)
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	f003 030f 	and.w	r3, r3, #15
 8004840:	490a      	ldr	r1, [pc, #40]	@ (800486c <HAL_RCC_ClockConfig+0x3d8>)
 8004842:	5ccb      	ldrb	r3, [r1, r3]
 8004844:	fa22 f303 	lsr.w	r3, r2, r3
 8004848:	4a09      	ldr	r2, [pc, #36]	@ (8004870 <HAL_RCC_ClockConfig+0x3dc>)
 800484a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800484c:	4b09      	ldr	r3, [pc, #36]	@ (8004874 <HAL_RCC_ClockConfig+0x3e0>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4618      	mov	r0, r3
 8004852:	f7fd fb93 	bl	8001f7c <HAL_InitTick>
 8004856:	4603      	mov	r3, r0
 8004858:	73fb      	strb	r3, [r7, #15]

  return status;
 800485a:	7bfb      	ldrb	r3, [r7, #15]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3718      	adds	r7, #24
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	46020c00 	.word	0x46020c00
 8004868:	40022000 	.word	0x40022000
 800486c:	0800b22c 	.word	0x0800b22c
 8004870:	20000000 	.word	0x20000000
 8004874:	20000018 	.word	0x20000018

08004878 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004878:	b480      	push	{r7}
 800487a:	b08b      	sub	sp, #44	@ 0x2c
 800487c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800487e:	2300      	movs	r3, #0
 8004880:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004886:	4b78      	ldr	r3, [pc, #480]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	f003 030c 	and.w	r3, r3, #12
 800488e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004890:	4b75      	ldr	r3, [pc, #468]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004894:	f003 0303 	and.w	r3, r3, #3
 8004898:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d005      	beq.n	80048ac <HAL_RCC_GetSysClockFreq+0x34>
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	2b0c      	cmp	r3, #12
 80048a4:	d121      	bne.n	80048ea <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d11e      	bne.n	80048ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80048ac:	4b6e      	ldr	r3, [pc, #440]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d107      	bne.n	80048c8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80048b8:	4b6b      	ldr	r3, [pc, #428]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80048be:	0b1b      	lsrs	r3, r3, #12
 80048c0:	f003 030f 	and.w	r3, r3, #15
 80048c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80048c6:	e005      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80048c8:	4b67      	ldr	r3, [pc, #412]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	0f1b      	lsrs	r3, r3, #28
 80048ce:	f003 030f 	and.w	r3, r3, #15
 80048d2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80048d4:	4a65      	ldr	r2, [pc, #404]	@ (8004a6c <HAL_RCC_GetSysClockFreq+0x1f4>)
 80048d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048dc:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d110      	bne.n	8004906 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80048e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80048e8:	e00d      	b.n	8004906 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048ea:	4b5f      	ldr	r3, [pc, #380]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	f003 030c 	and.w	r3, r3, #12
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d102      	bne.n	80048fc <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048f6:	4b5e      	ldr	r3, [pc, #376]	@ (8004a70 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80048f8:	623b      	str	r3, [r7, #32]
 80048fa:	e004      	b.n	8004906 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2b08      	cmp	r3, #8
 8004900:	d101      	bne.n	8004906 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004902:	4b5b      	ldr	r3, [pc, #364]	@ (8004a70 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004904:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	2b0c      	cmp	r3, #12
 800490a:	f040 80a5 	bne.w	8004a58 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800490e:	4b56      	ldr	r3, [pc, #344]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004918:	4b53      	ldr	r3, [pc, #332]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800491a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800491c:	0a1b      	lsrs	r3, r3, #8
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	3301      	adds	r3, #1
 8004924:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004926:	4b50      	ldr	r3, [pc, #320]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800492a:	091b      	lsrs	r3, r3, #4
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004932:	4b4d      	ldr	r3, [pc, #308]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004936:	08db      	lsrs	r3, r3, #3
 8004938:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	fb02 f303 	mul.w	r3, r2, r3
 8004942:	ee07 3a90 	vmov	s15, r3
 8004946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800494a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	2b02      	cmp	r3, #2
 8004952:	d003      	beq.n	800495c <HAL_RCC_GetSysClockFreq+0xe4>
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	2b03      	cmp	r3, #3
 8004958:	d022      	beq.n	80049a0 <HAL_RCC_GetSysClockFreq+0x128>
 800495a:	e043      	b.n	80049e4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	ee07 3a90 	vmov	s15, r3
 8004962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004966:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8004a74 <HAL_RCC_GetSysClockFreq+0x1fc>
 800496a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800496e:	4b3e      	ldr	r3, [pc, #248]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004976:	ee07 3a90 	vmov	s15, r3
 800497a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800497e:	ed97 6a01 	vldr	s12, [r7, #4]
 8004982:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8004a78 <HAL_RCC_GetSysClockFreq+0x200>
 8004986:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800498a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800498e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004992:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800499a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800499e:	e046      	b.n	8004a2e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	ee07 3a90 	vmov	s15, r3
 80049a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049aa:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8004a74 <HAL_RCC_GetSysClockFreq+0x1fc>
 80049ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049b2:	4b2d      	ldr	r3, [pc, #180]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ba:	ee07 3a90 	vmov	s15, r3
 80049be:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80049c2:	ed97 6a01 	vldr	s12, [r7, #4]
 80049c6:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8004a78 <HAL_RCC_GetSysClockFreq+0x200>
 80049ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80049d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049e2:	e024      	b.n	8004a2e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e6:	ee07 3a90 	vmov	s15, r3
 80049ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	ee07 3a90 	vmov	s15, r3
 80049f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a04:	ee07 3a90 	vmov	s15, r3
 8004a08:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a0c:	ed97 6a01 	vldr	s12, [r7, #4]
 8004a10:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8004a78 <HAL_RCC_GetSysClockFreq+0x200>
 8004a14:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a18:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a20:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a2c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8004a68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a32:	0e1b      	lsrs	r3, r3, #24
 8004a34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a38:	3301      	adds	r3, #1
 8004a3a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	ee07 3a90 	vmov	s15, r3
 8004a42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a46:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a52:	ee17 3a90 	vmov	r3, s15
 8004a56:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004a58:	6a3b      	ldr	r3, [r7, #32]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	372c      	adds	r7, #44	@ 0x2c
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	46020c00 	.word	0x46020c00
 8004a6c:	0800b244 	.word	0x0800b244
 8004a70:	00f42400 	.word	0x00f42400
 8004a74:	4b742400 	.word	0x4b742400
 8004a78:	46000000 	.word	0x46000000

08004a7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004a80:	f7ff fefa 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 8004a84:	4602      	mov	r2, r0
 8004a86:	4b07      	ldr	r3, [pc, #28]	@ (8004aa4 <HAL_RCC_GetHCLKFreq+0x28>)
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	f003 030f 	and.w	r3, r3, #15
 8004a8e:	4906      	ldr	r1, [pc, #24]	@ (8004aa8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004a90:	5ccb      	ldrb	r3, [r1, r3]
 8004a92:	fa22 f303 	lsr.w	r3, r2, r3
 8004a96:	4a05      	ldr	r2, [pc, #20]	@ (8004aac <HAL_RCC_GetHCLKFreq+0x30>)
 8004a98:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004a9a:	4b04      	ldr	r3, [pc, #16]	@ (8004aac <HAL_RCC_GetHCLKFreq+0x30>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	46020c00 	.word	0x46020c00
 8004aa8:	0800b22c 	.word	0x0800b22c
 8004aac:	20000000 	.word	0x20000000

08004ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004ab4:	f7ff ffe2 	bl	8004a7c <HAL_RCC_GetHCLKFreq>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	4b05      	ldr	r3, [pc, #20]	@ (8004ad0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	091b      	lsrs	r3, r3, #4
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	4903      	ldr	r1, [pc, #12]	@ (8004ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ac6:	5ccb      	ldrb	r3, [r1, r3]
 8004ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	46020c00 	.word	0x46020c00
 8004ad4:	0800b23c 	.word	0x0800b23c

08004ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004adc:	f7ff ffce 	bl	8004a7c <HAL_RCC_GetHCLKFreq>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	4b05      	ldr	r3, [pc, #20]	@ (8004af8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	0a1b      	lsrs	r3, r3, #8
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	4903      	ldr	r1, [pc, #12]	@ (8004afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004aee:	5ccb      	ldrb	r3, [r1, r3]
 8004af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	46020c00 	.word	0x46020c00
 8004afc:	0800b23c 	.word	0x0800b23c

08004b00 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004b04:	f7ff ffba 	bl	8004a7c <HAL_RCC_GetHCLKFreq>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	4b05      	ldr	r3, [pc, #20]	@ (8004b20 <HAL_RCC_GetPCLK3Freq+0x20>)
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0e:	091b      	lsrs	r3, r3, #4
 8004b10:	f003 0307 	and.w	r3, r3, #7
 8004b14:	4903      	ldr	r1, [pc, #12]	@ (8004b24 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004b16:	5ccb      	ldrb	r3, [r1, r3]
 8004b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	46020c00 	.word	0x46020c00
 8004b24:	0800b23c 	.word	0x0800b23c

08004b28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b30:	4b3e      	ldr	r3, [pc, #248]	@ (8004c2c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b36:	f003 0304 	and.w	r3, r3, #4
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b3e:	f7fe fd6f 	bl	8003620 <HAL_PWREx_GetVoltageRange>
 8004b42:	6178      	str	r0, [r7, #20]
 8004b44:	e019      	b.n	8004b7a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b46:	4b39      	ldr	r3, [pc, #228]	@ (8004c2c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b4c:	4a37      	ldr	r2, [pc, #220]	@ (8004c2c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b4e:	f043 0304 	orr.w	r3, r3, #4
 8004b52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004b56:	4b35      	ldr	r3, [pc, #212]	@ (8004c2c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	60fb      	str	r3, [r7, #12]
 8004b62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b64:	f7fe fd5c 	bl	8003620 <HAL_PWREx_GetVoltageRange>
 8004b68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b6a:	4b30      	ldr	r3, [pc, #192]	@ (8004c2c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b70:	4a2e      	ldr	r2, [pc, #184]	@ (8004c2c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b72:	f023 0304 	bic.w	r3, r3, #4
 8004b76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b80:	d003      	beq.n	8004b8a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b88:	d109      	bne.n	8004b9e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b90:	d202      	bcs.n	8004b98 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004b92:	2301      	movs	r3, #1
 8004b94:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004b96:	e033      	b.n	8004c00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004b98:	2300      	movs	r3, #0
 8004b9a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004b9c:	e030      	b.n	8004c00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ba4:	d208      	bcs.n	8004bb8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bac:	d102      	bne.n	8004bb4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004bae:	2303      	movs	r3, #3
 8004bb0:	613b      	str	r3, [r7, #16]
 8004bb2:	e025      	b.n	8004c00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e035      	b.n	8004c24 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bbe:	d90f      	bls.n	8004be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d109      	bne.n	8004bda <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004bcc:	d902      	bls.n	8004bd4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004bce:	2300      	movs	r3, #0
 8004bd0:	613b      	str	r3, [r7, #16]
 8004bd2:	e015      	b.n	8004c00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	613b      	str	r3, [r7, #16]
 8004bd8:	e012      	b.n	8004c00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004bda:	2300      	movs	r3, #0
 8004bdc:	613b      	str	r3, [r7, #16]
 8004bde:	e00f      	b.n	8004c00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004be6:	d109      	bne.n	8004bfc <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bee:	d102      	bne.n	8004bf6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	613b      	str	r3, [r7, #16]
 8004bf4:	e004      	b.n	8004c00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	613b      	str	r3, [r7, #16]
 8004bfa:	e001      	b.n	8004c00 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c00:	4b0b      	ldr	r3, [pc, #44]	@ (8004c30 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f023 020f 	bic.w	r2, r3, #15
 8004c08:	4909      	ldr	r1, [pc, #36]	@ (8004c30 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004c10:	4b07      	ldr	r3, [pc, #28]	@ (8004c30 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 030f 	and.w	r3, r3, #15
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d001      	beq.n	8004c22 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e000      	b.n	8004c24 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3718      	adds	r7, #24
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	46020c00 	.word	0x46020c00
 8004c30:	40022000 	.word	0x40022000

08004c34 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c38:	b0b6      	sub	sp, #216	@ 0xd8
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c40:	2300      	movs	r3, #0
 8004c42:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c46:	2300      	movs	r3, #0
 8004c48:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c54:	f002 0401 	and.w	r4, r2, #1
 8004c58:	2500      	movs	r5, #0
 8004c5a:	ea54 0305 	orrs.w	r3, r4, r5
 8004c5e:	d00b      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004c60:	4bc5      	ldr	r3, [pc, #788]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c66:	f023 0103 	bic.w	r1, r3, #3
 8004c6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c70:	4ac1      	ldr	r2, [pc, #772]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004c72:	430b      	orrs	r3, r1
 8004c74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c80:	f002 0804 	and.w	r8, r2, #4
 8004c84:	f04f 0900 	mov.w	r9, #0
 8004c88:	ea58 0309 	orrs.w	r3, r8, r9
 8004c8c:	d00b      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004c8e:	4bba      	ldr	r3, [pc, #744]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c94:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004c98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c9e:	4ab6      	ldr	r2, [pc, #728]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004ca0:	430b      	orrs	r3, r1
 8004ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ca6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cae:	f002 0a08 	and.w	sl, r2, #8
 8004cb2:	f04f 0b00 	mov.w	fp, #0
 8004cb6:	ea5a 030b 	orrs.w	r3, sl, fp
 8004cba:	d00b      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004cbc:	4bae      	ldr	r3, [pc, #696]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cc2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004cc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ccc:	4aaa      	ldr	r2, [pc, #680]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004cce:	430b      	orrs	r3, r1
 8004cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cdc:	f002 0310 	and.w	r3, r2, #16
 8004ce0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004cea:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004cee:	460b      	mov	r3, r1
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	d00b      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004cf4:	4ba0      	ldr	r3, [pc, #640]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cfa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004cfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d04:	4a9c      	ldr	r2, [pc, #624]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004d06:	430b      	orrs	r3, r1
 8004d08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d14:	f002 0320 	and.w	r3, r2, #32
 8004d18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d22:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	d00b      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004d2c:	4b92      	ldr	r3, [pc, #584]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004d2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d32:	f023 0107 	bic.w	r1, r3, #7
 8004d36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d3c:	4a8e      	ldr	r2, [pc, #568]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004d3e:	430b      	orrs	r3, r1
 8004d40:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004d50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d54:	2300      	movs	r3, #0
 8004d56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d5a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4313      	orrs	r3, r2
 8004d62:	d00b      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004d64:	4b84      	ldr	r3, [pc, #528]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d6a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004d6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d74:	4a80      	ldr	r2, [pc, #512]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004d76:	430b      	orrs	r3, r1
 8004d78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d84:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004d88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004d92:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004d96:	460b      	mov	r3, r1
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	d00b      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004d9c:	4b76      	ldr	r3, [pc, #472]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004da2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004da6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004daa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004dac:	4a72      	ldr	r2, [pc, #456]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004dae:	430b      	orrs	r3, r1
 8004db0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004db4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbc:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8004dc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004dca:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	d00b      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004dd4:	4b68      	ldr	r3, [pc, #416]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004dd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004dda:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004dde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004de2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004de4:	4a64      	ldr	r2, [pc, #400]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004de6:	430b      	orrs	r3, r1
 8004de8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004dec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004df8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004e02:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004e06:	460b      	mov	r3, r1
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	d00b      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004e0c:	4b5a      	ldr	r3, [pc, #360]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e12:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004e16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e1c:	4a56      	ldr	r2, [pc, #344]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004e1e:	430b      	orrs	r3, r1
 8004e20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004e30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e34:	2300      	movs	r3, #0
 8004e36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004e3a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4313      	orrs	r3, r2
 8004e42:	d00b      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004e44:	4b4c      	ldr	r3, [pc, #304]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004e46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e4a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004e4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e54:	4a48      	ldr	r2, [pc, #288]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004e56:	430b      	orrs	r3, r1
 8004e58:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e64:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004e68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e72:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004e76:	460b      	mov	r3, r1
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	d00b      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004e7c:	4b3e      	ldr	r3, [pc, #248]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e82:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004e86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e8c:	4a3a      	ldr	r2, [pc, #232]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004e8e:	430b      	orrs	r3, r1
 8004e90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004e94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004ea0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004ea6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4313      	orrs	r3, r2
 8004eae:	d00b      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004eb0:	4b31      	ldr	r3, [pc, #196]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004eb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004eb6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004eba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ebe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ec0:	4a2d      	ldr	r2, [pc, #180]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004ec2:	430b      	orrs	r3, r1
 8004ec4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ec8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed0:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004ed4:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	677b      	str	r3, [r7, #116]	@ 0x74
 8004eda:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	d04f      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004ee4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004eec:	2b80      	cmp	r3, #128	@ 0x80
 8004eee:	d02d      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004ef0:	2b80      	cmp	r3, #128	@ 0x80
 8004ef2:	d827      	bhi.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004ef4:	2b60      	cmp	r3, #96	@ 0x60
 8004ef6:	d02b      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8004ef8:	2b60      	cmp	r3, #96	@ 0x60
 8004efa:	d823      	bhi.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004efc:	2b40      	cmp	r3, #64	@ 0x40
 8004efe:	d006      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004f00:	2b40      	cmp	r3, #64	@ 0x40
 8004f02:	d81f      	bhi.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d009      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8004f08:	2b20      	cmp	r3, #32
 8004f0a:	d011      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004f0c:	e01a      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f12:	4a19      	ldr	r2, [pc, #100]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f18:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f1a:	e01a      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f20:	3308      	adds	r3, #8
 8004f22:	4618      	mov	r0, r3
 8004f24:	f002 f914 	bl	8007150 <RCCEx_PLL2_Config>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f2e:	e010      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f34:	332c      	adds	r3, #44	@ 0x2c
 8004f36:	4618      	mov	r0, r3
 8004f38:	f002 f9a2 	bl	8007280 <RCCEx_PLL3_Config>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f42:	e006      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004f4a:	e002      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8004f4c:	bf00      	nop
 8004f4e:	e000      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8004f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f52:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d110      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004f5a:	4b07      	ldr	r3, [pc, #28]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004f5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f60:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8004f64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f6c:	4a02      	ldr	r2, [pc, #8]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004f6e:	430b      	orrs	r3, r1
 8004f70:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004f74:	e006      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8004f76:	bf00      	nop
 8004f78:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f7c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8004f80:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004f84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004f90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f92:	2300      	movs	r3, #0
 8004f94:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f96:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	d046      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004fa0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004fa4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004fa8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004fac:	d028      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004fae:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004fb2:	d821      	bhi.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8004fb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fb8:	d022      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004fba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fbe:	d81b      	bhi.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8004fc0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004fc4:	d01c      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004fc6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004fca:	d815      	bhi.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8004fcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fd0:	d008      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8004fd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fd6:	d80f      	bhi.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d011      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004fdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fe0:	d00e      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004fe2:	e009      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004fe4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004fe8:	3308      	adds	r3, #8
 8004fea:	4618      	mov	r0, r3
 8004fec:	f002 f8b0 	bl	8007150 <RCCEx_PLL2_Config>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004ff6:	e004      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8004ffe:	e000      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 8005000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005002:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10d      	bne.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800500a:	4bb6      	ldr	r3, [pc, #728]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800500c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005010:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005014:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005018:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800501c:	4ab1      	ldr	r2, [pc, #708]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800501e:	430b      	orrs	r3, r1
 8005020:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005024:	e003      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005026:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800502a:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800502e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005036:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800503a:	663b      	str	r3, [r7, #96]	@ 0x60
 800503c:	2300      	movs	r3, #0
 800503e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005040:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005044:	460b      	mov	r3, r1
 8005046:	4313      	orrs	r3, r2
 8005048:	d03e      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800504a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800504e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005052:	2b04      	cmp	r3, #4
 8005054:	d81d      	bhi.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8005056:	a201      	add	r2, pc, #4	@ (adr r2, 800505c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8005058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505c:	0800509b 	.word	0x0800509b
 8005060:	08005071 	.word	0x08005071
 8005064:	0800507f 	.word	0x0800507f
 8005068:	0800509b 	.word	0x0800509b
 800506c:	0800509b 	.word	0x0800509b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005070:	4b9c      	ldr	r3, [pc, #624]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005074:	4a9b      	ldr	r2, [pc, #620]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005076:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800507a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800507c:	e00e      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800507e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005082:	332c      	adds	r3, #44	@ 0x2c
 8005084:	4618      	mov	r0, r3
 8005086:	f002 f8fb 	bl	8007280 <RCCEx_PLL3_Config>
 800508a:	4603      	mov	r3, r0
 800508c:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005090:	e004      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005098:	e000      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 800509a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800509c:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10d      	bne.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80050a4:	4b8f      	ldr	r3, [pc, #572]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80050a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80050aa:	f023 0107 	bic.w	r1, r3, #7
 80050ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80050b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050b6:	4a8b      	ldr	r2, [pc, #556]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80050b8:	430b      	orrs	r3, r1
 80050ba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80050be:	e003      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c0:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80050c4:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80050c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80050cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d0:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80050d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050d6:	2300      	movs	r3, #0
 80050d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80050de:	460b      	mov	r3, r1
 80050e0:	4313      	orrs	r3, r2
 80050e2:	d04a      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80050e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80050e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80050f0:	d028      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80050f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80050f6:	d821      	bhi.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x508>
 80050f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80050fc:	d024      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80050fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005102:	d81b      	bhi.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005104:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005108:	d00e      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800510a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800510e:	d815      	bhi.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005110:	2b00      	cmp	r3, #0
 8005112:	d01b      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005114:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005118:	d110      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800511a:	4b72      	ldr	r3, [pc, #456]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800511c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800511e:	4a71      	ldr	r2, [pc, #452]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005120:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005124:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005126:	e012      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005128:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800512c:	332c      	adds	r3, #44	@ 0x2c
 800512e:	4618      	mov	r0, r3
 8005130:	f002 f8a6 	bl	8007280 <RCCEx_PLL3_Config>
 8005134:	4603      	mov	r3, r0
 8005136:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800513a:	e008      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005142:	e004      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8005144:	bf00      	nop
 8005146:	e002      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8005148:	bf00      	nop
 800514a:	e000      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 800514c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800514e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10d      	bne.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005156:	4b63      	ldr	r3, [pc, #396]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005158:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800515c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005160:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005168:	4a5e      	ldr	r2, [pc, #376]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800516a:	430b      	orrs	r3, r1
 800516c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005170:	e003      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005172:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005176:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800517a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800517e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005182:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005186:	653b      	str	r3, [r7, #80]	@ 0x50
 8005188:	2300      	movs	r3, #0
 800518a:	657b      	str	r3, [r7, #84]	@ 0x54
 800518c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005190:	460b      	mov	r3, r1
 8005192:	4313      	orrs	r3, r2
 8005194:	f000 80ba 	beq.w	800530c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005198:	2300      	movs	r3, #0
 800519a:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800519e:	4b51      	ldr	r3, [pc, #324]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80051a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051a4:	f003 0304 	and.w	r3, r3, #4
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d113      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ac:	4b4d      	ldr	r3, [pc, #308]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80051ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051b2:	4a4c      	ldr	r2, [pc, #304]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80051b4:	f043 0304 	orr.w	r3, r3, #4
 80051b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80051bc:	4b49      	ldr	r3, [pc, #292]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80051be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051c2:	f003 0304 	and.w	r3, r3, #4
 80051c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
      pwrclkchanged = SET;
 80051ce:	2301      	movs	r3, #1
 80051d0:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80051d4:	4b44      	ldr	r3, [pc, #272]	@ (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 80051d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d8:	4a43      	ldr	r2, [pc, #268]	@ (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 80051da:	f043 0301 	orr.w	r3, r3, #1
 80051de:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051e0:	f7fc ff56 	bl	8002090 <HAL_GetTick>
 80051e4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80051e8:	e00b      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ea:	f7fc ff51 	bl	8002090 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d903      	bls.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005200:	e005      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005202:	4b39      	ldr	r3, [pc, #228]	@ (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8005204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0ed      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 800520e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d16a      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005216:	4b33      	ldr	r3, [pc, #204]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005218:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800521c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005220:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005224:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005228:	2b00      	cmp	r3, #0
 800522a:	d023      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x640>
 800522c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005230:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8005234:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005238:	4293      	cmp	r3, r2
 800523a:	d01b      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800523c:	4b29      	ldr	r3, [pc, #164]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800523e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005242:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005246:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800524a:	4b26      	ldr	r3, [pc, #152]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800524c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005250:	4a24      	ldr	r2, [pc, #144]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005252:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005256:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800525a:	4b22      	ldr	r3, [pc, #136]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800525c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005260:	4a20      	ldr	r2, [pc, #128]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005262:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005266:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800526a:	4a1e      	ldr	r2, [pc, #120]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800526c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005270:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005274:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d019      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005280:	f7fc ff06 	bl	8002090 <HAL_GetTick>
 8005284:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005288:	e00d      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800528a:	f7fc ff01 	bl	8002090 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005294:	1ad2      	subs	r2, r2, r3
 8005296:	f241 3388 	movw	r3, #5000	@ 0x1388
 800529a:	429a      	cmp	r2, r3
 800529c:	d903      	bls.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
            break;
 80052a4:	e006      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052a6:	4b0f      	ldr	r3, [pc, #60]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80052a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d0ea      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 80052b4:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10d      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80052bc:	4b09      	ldr	r3, [pc, #36]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80052be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80052c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80052ca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80052ce:	4a05      	ldr	r2, [pc, #20]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80052d0:	430b      	orrs	r3, r1
 80052d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80052d6:	e00d      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052d8:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80052dc:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
 80052e0:	e008      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 80052e2:	bf00      	nop
 80052e4:	46020c00 	.word	0x46020c00
 80052e8:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ec:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80052f0:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052f4:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d107      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052fc:	4bb2      	ldr	r3, [pc, #712]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80052fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005302:	4ab1      	ldr	r2, [pc, #708]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005304:	f023 0304 	bic.w	r3, r3, #4
 8005308:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800530c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005314:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005318:	64bb      	str	r3, [r7, #72]	@ 0x48
 800531a:	2300      	movs	r3, #0
 800531c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800531e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005322:	460b      	mov	r3, r1
 8005324:	4313      	orrs	r3, r2
 8005326:	d042      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005328:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800532c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005330:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005334:	d022      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x748>
 8005336:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800533a:	d81b      	bhi.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800533c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005340:	d011      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x732>
 8005342:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005346:	d815      	bhi.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005348:	2b00      	cmp	r3, #0
 800534a:	d019      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 800534c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005350:	d110      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005352:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005356:	3308      	adds	r3, #8
 8005358:	4618      	mov	r0, r3
 800535a:	f001 fef9 	bl	8007150 <RCCEx_PLL2_Config>
 800535e:	4603      	mov	r3, r0
 8005360:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005364:	e00d      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005366:	4b98      	ldr	r3, [pc, #608]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536a:	4a97      	ldr	r2, [pc, #604]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800536c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005370:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005372:	e006      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800537a:	e002      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 800537c:	bf00      	nop
 800537e:	e000      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8005380:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005382:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10d      	bne.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800538a:	4b8f      	ldr	r3, [pc, #572]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800538c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005390:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005394:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005398:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800539c:	4a8a      	ldr	r2, [pc, #552]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800539e:	430b      	orrs	r3, r1
 80053a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80053a4:	e003      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a6:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80053aa:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80053ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80053b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b6:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80053ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80053bc:	2300      	movs	r3, #0
 80053be:	647b      	str	r3, [r7, #68]	@ 0x44
 80053c0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80053c4:	460b      	mov	r3, r1
 80053c6:	4313      	orrs	r3, r2
 80053c8:	d02d      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80053ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80053ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053d6:	d00b      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80053d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053dc:	d804      	bhi.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d008      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80053e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053e6:	d007      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80053ee:	e004      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 80053f0:	bf00      	nop
 80053f2:	e002      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 80053f4:	bf00      	nop
 80053f6:	e000      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 80053f8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80053fa:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10d      	bne.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005402:	4b71      	ldr	r3, [pc, #452]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005404:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005408:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800540c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005414:	4a6c      	ldr	r2, [pc, #432]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005416:	430b      	orrs	r3, r1
 8005418:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800541c:	e003      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800541e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005422:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005426:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800542a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005432:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005434:	2300      	movs	r3, #0
 8005436:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005438:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800543c:	460b      	mov	r3, r1
 800543e:	4313      	orrs	r3, r2
 8005440:	d00c      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005442:	4b61      	ldr	r3, [pc, #388]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005444:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005448:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800544c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005450:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005454:	4a5c      	ldr	r2, [pc, #368]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005456:	430b      	orrs	r3, r1
 8005458:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800545c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005464:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005468:	633b      	str	r3, [r7, #48]	@ 0x30
 800546a:	2300      	movs	r3, #0
 800546c:	637b      	str	r3, [r7, #52]	@ 0x34
 800546e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005472:	460b      	mov	r3, r1
 8005474:	4313      	orrs	r3, r2
 8005476:	d019      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005478:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800547c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005480:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005484:	d105      	bne.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005486:	4b50      	ldr	r3, [pc, #320]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800548a:	4a4f      	ldr	r2, [pc, #316]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800548c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005490:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005492:	4b4d      	ldr	r3, [pc, #308]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005494:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005498:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800549c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80054a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054a4:	4a48      	ldr	r2, [pc, #288]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80054a6:	430b      	orrs	r3, r1
 80054a8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80054ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80054b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80054b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054ba:	2300      	movs	r3, #0
 80054bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054be:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80054c2:	460b      	mov	r3, r1
 80054c4:	4313      	orrs	r3, r2
 80054c6:	d00c      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80054c8:	4b3f      	ldr	r3, [pc, #252]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80054ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80054ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80054d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80054d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80054da:	493b      	ldr	r1, [pc, #236]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80054e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80054e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ea:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80054ee:	623b      	str	r3, [r7, #32]
 80054f0:	2300      	movs	r3, #0
 80054f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80054f4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80054f8:	460b      	mov	r3, r1
 80054fa:	4313      	orrs	r3, r2
 80054fc:	d00c      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80054fe:	4b32      	ldr	r3, [pc, #200]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005504:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005508:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800550c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005510:	492d      	ldr	r1, [pc, #180]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005512:	4313      	orrs	r3, r2
 8005514:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005518:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005520:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005524:	61bb      	str	r3, [r7, #24]
 8005526:	2300      	movs	r3, #0
 8005528:	61fb      	str	r3, [r7, #28]
 800552a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800552e:	460b      	mov	r3, r1
 8005530:	4313      	orrs	r3, r2
 8005532:	d00c      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005534:	4b24      	ldr	r3, [pc, #144]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005536:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800553a:	f023 0218 	bic.w	r2, r3, #24
 800553e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005542:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005546:	4920      	ldr	r1, [pc, #128]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005548:	4313      	orrs	r3, r2
 800554a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800554e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005556:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800555a:	613b      	str	r3, [r7, #16]
 800555c:	2300      	movs	r3, #0
 800555e:	617b      	str	r3, [r7, #20]
 8005560:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005564:	460b      	mov	r3, r1
 8005566:	4313      	orrs	r3, r2
 8005568:	d034      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800556a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800556e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005572:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005576:	d105      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005578:	4b13      	ldr	r3, [pc, #76]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800557a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800557c:	4a12      	ldr	r2, [pc, #72]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800557e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005582:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005584:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005588:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800558c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005590:	d108      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005592:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005596:	3308      	adds	r3, #8
 8005598:	4618      	mov	r0, r3
 800559a:	f001 fdd9 	bl	8007150 <RCCEx_PLL2_Config>
 800559e:	4603      	mov	r3, r0
 80055a0:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    }
    if (ret == HAL_OK)
 80055a4:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10f      	bne.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80055ac:	4b06      	ldr	r3, [pc, #24]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80055ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80055b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80055b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80055ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80055be:	4902      	ldr	r1, [pc, #8]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80055c6:	e005      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 80055c8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055cc:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80055d0:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80055d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80055d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055dc:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80055e0:	60bb      	str	r3, [r7, #8]
 80055e2:	2300      	movs	r3, #0
 80055e4:	60fb      	str	r3, [r7, #12]
 80055e6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80055ea:	460b      	mov	r3, r1
 80055ec:	4313      	orrs	r3, r2
 80055ee:	d03a      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80055f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80055f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055fc:	d00e      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80055fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005602:	d815      	bhi.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 8005604:	2b00      	cmp	r3, #0
 8005606:	d017      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005608:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800560c:	d110      	bne.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800560e:	4b27      	ldr	r3, [pc, #156]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005612:	4a26      	ldr	r2, [pc, #152]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005614:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005618:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800561a:	e00e      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800561c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005620:	3308      	adds	r3, #8
 8005622:	4618      	mov	r0, r3
 8005624:	f001 fd94 	bl	8007150 <RCCEx_PLL2_Config>
 8005628:	4603      	mov	r3, r0
 800562a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800562e:	e004      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8005636:	e000      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 8005638:	bf00      	nop
    }
    if (ret == HAL_OK)
 800563a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10d      	bne.n	800565e <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005642:	4b1a      	ldr	r3, [pc, #104]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005648:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800564c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005650:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005654:	4915      	ldr	r1, [pc, #84]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005656:	4313      	orrs	r3, r2
 8005658:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800565c:	e003      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800565e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8005662:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005666:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800566a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566e:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005672:	603b      	str	r3, [r7, #0]
 8005674:	2300      	movs	r3, #0
 8005676:	607b      	str	r3, [r7, #4]
 8005678:	e9d7 1200 	ldrd	r1, r2, [r7]
 800567c:	460b      	mov	r3, r1
 800567e:	4313      	orrs	r3, r2
 8005680:	d00c      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005682:	4b0a      	ldr	r3, [pc, #40]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005684:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005688:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800568c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005690:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005694:	4905      	ldr	r1, [pc, #20]	@ (80056ac <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005696:	4313      	orrs	r3, r2
 8005698:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800569c:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	37d8      	adds	r7, #216	@ 0xd8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056aa:	bf00      	nop
 80056ac:	46020c00 	.word	0x46020c00

080056b0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b089      	sub	sp, #36	@ 0x24
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80056b8:	4ba6      	ldr	r3, [pc, #664]	@ (8005954 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80056c2:	4ba4      	ldr	r3, [pc, #656]	@ (8005954 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c6:	f003 0303 	and.w	r3, r3, #3
 80056ca:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80056cc:	4ba1      	ldr	r3, [pc, #644]	@ (8005954 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d0:	0a1b      	lsrs	r3, r3, #8
 80056d2:	f003 030f 	and.w	r3, r3, #15
 80056d6:	3301      	adds	r3, #1
 80056d8:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80056da:	4b9e      	ldr	r3, [pc, #632]	@ (8005954 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056de:	091b      	lsrs	r3, r3, #4
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80056e6:	4b9b      	ldr	r3, [pc, #620]	@ (8005954 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ea:	08db      	lsrs	r3, r3, #3
 80056ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	fb02 f303 	mul.w	r3, r2, r3
 80056f6:	ee07 3a90 	vmov	s15, r3
 80056fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056fe:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2b03      	cmp	r3, #3
 8005706:	d062      	beq.n	80057ce <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	2b03      	cmp	r3, #3
 800570c:	f200 8081 	bhi.w	8005812 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d024      	beq.n	8005760 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	2b02      	cmp	r3, #2
 800571a:	d17a      	bne.n	8005812 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	ee07 3a90 	vmov	s15, r3
 8005722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005726:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005958 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800572a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800572e:	4b89      	ldr	r3, [pc, #548]	@ (8005954 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005736:	ee07 3a90 	vmov	s15, r3
 800573a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800573e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005742:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800595c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005746:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800574a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800574e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005752:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800575a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800575e:	e08f      	b.n	8005880 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005760:	4b7c      	ldr	r3, [pc, #496]	@ (8005954 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d005      	beq.n	8005778 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800576c:	4b79      	ldr	r3, [pc, #484]	@ (8005954 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	0f1b      	lsrs	r3, r3, #28
 8005772:	f003 030f 	and.w	r3, r3, #15
 8005776:	e006      	b.n	8005786 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8005778:	4b76      	ldr	r3, [pc, #472]	@ (8005954 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800577a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800577e:	041b      	lsls	r3, r3, #16
 8005780:	0f1b      	lsrs	r3, r3, #28
 8005782:	f003 030f 	and.w	r3, r3, #15
 8005786:	4a76      	ldr	r2, [pc, #472]	@ (8005960 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800578c:	ee07 3a90 	vmov	s15, r3
 8005790:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	ee07 3a90 	vmov	s15, r3
 800579a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800579e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	ee07 3a90 	vmov	s15, r3
 80057a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80057b0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800595c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80057b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80057c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057cc:	e058      	b.n	8005880 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	ee07 3a90 	vmov	s15, r3
 80057d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057d8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005958 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80057dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057e0:	4b5c      	ldr	r3, [pc, #368]	@ (8005954 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057e8:	ee07 3a90 	vmov	s15, r3
 80057ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80057f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80057f4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800595c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80057f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80057fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005800:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005804:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800580c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005810:	e036      	b.n	8005880 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005812:	4b50      	ldr	r3, [pc, #320]	@ (8005954 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d005      	beq.n	800582a <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800581e:	4b4d      	ldr	r3, [pc, #308]	@ (8005954 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	0f1b      	lsrs	r3, r3, #28
 8005824:	f003 030f 	and.w	r3, r3, #15
 8005828:	e006      	b.n	8005838 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800582a:	4b4a      	ldr	r3, [pc, #296]	@ (8005954 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800582c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005830:	041b      	lsls	r3, r3, #16
 8005832:	0f1b      	lsrs	r3, r3, #28
 8005834:	f003 030f 	and.w	r3, r3, #15
 8005838:	4a49      	ldr	r2, [pc, #292]	@ (8005960 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800583a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800583e:	ee07 3a90 	vmov	s15, r3
 8005842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	ee07 3a90 	vmov	s15, r3
 800584c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005850:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	ee07 3a90 	vmov	s15, r3
 800585a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800585e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005862:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800595c <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800586a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800586e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005872:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800587a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800587e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005880:	4b34      	ldr	r3, [pc, #208]	@ (8005954 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005884:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d017      	beq.n	80058bc <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800588c:	4b31      	ldr	r3, [pc, #196]	@ (8005954 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800588e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005890:	0a5b      	lsrs	r3, r3, #9
 8005892:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005896:	ee07 3a90 	vmov	s15, r3
 800589a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800589e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058a2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80058a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80058aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058b2:	ee17 2a90 	vmov	r2, s15
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	e002      	b.n	80058c2 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80058c2:	4b24      	ldr	r3, [pc, #144]	@ (8005954 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d017      	beq.n	80058fe <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80058ce:	4b21      	ldr	r3, [pc, #132]	@ (8005954 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058d2:	0c1b      	lsrs	r3, r3, #16
 80058d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058d8:	ee07 3a90 	vmov	s15, r3
 80058dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80058e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058e4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80058e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80058ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058f4:	ee17 2a90 	vmov	r2, s15
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	605a      	str	r2, [r3, #4]
 80058fc:	e002      	b.n	8005904 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005904:	4b13      	ldr	r3, [pc, #76]	@ (8005954 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005908:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d017      	beq.n	8005940 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005910:	4b10      	ldr	r3, [pc, #64]	@ (8005954 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005914:	0e1b      	lsrs	r3, r3, #24
 8005916:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005922:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005926:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800592a:	edd7 6a07 	vldr	s13, [r7, #28]
 800592e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005932:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005936:	ee17 2a90 	vmov	r2, s15
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800593e:	e002      	b.n	8005946 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	609a      	str	r2, [r3, #8]
}
 8005946:	bf00      	nop
 8005948:	3724      	adds	r7, #36	@ 0x24
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	46020c00 	.word	0x46020c00
 8005958:	4b742400 	.word	0x4b742400
 800595c:	46000000 	.word	0x46000000
 8005960:	0800b244 	.word	0x0800b244

08005964 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005964:	b480      	push	{r7}
 8005966:	b089      	sub	sp, #36	@ 0x24
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800596c:	4ba6      	ldr	r3, [pc, #664]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800596e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005974:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005976:	4ba4      	ldr	r3, [pc, #656]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800597a:	f003 0303 	and.w	r3, r3, #3
 800597e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005980:	4ba1      	ldr	r3, [pc, #644]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005984:	0a1b      	lsrs	r3, r3, #8
 8005986:	f003 030f 	and.w	r3, r3, #15
 800598a:	3301      	adds	r3, #1
 800598c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800598e:	4b9e      	ldr	r3, [pc, #632]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005992:	091b      	lsrs	r3, r3, #4
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800599a:	4b9b      	ldr	r3, [pc, #620]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800599c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800599e:	08db      	lsrs	r3, r3, #3
 80059a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	fb02 f303 	mul.w	r3, r2, r3
 80059aa:	ee07 3a90 	vmov	s15, r3
 80059ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059b2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2b03      	cmp	r3, #3
 80059ba:	d062      	beq.n	8005a82 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	2b03      	cmp	r3, #3
 80059c0:	f200 8081 	bhi.w	8005ac6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d024      	beq.n	8005a14 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d17a      	bne.n	8005ac6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	ee07 3a90 	vmov	s15, r3
 80059d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059da:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005c0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80059de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059e2:	4b89      	ldr	r3, [pc, #548]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80059e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ea:	ee07 3a90 	vmov	s15, r3
 80059ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80059f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80059f6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005c10 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80059fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80059fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a12:	e08f      	b.n	8005b34 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005a14:	4b7c      	ldr	r3, [pc, #496]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d005      	beq.n	8005a2c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005a20:	4b79      	ldr	r3, [pc, #484]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	0f1b      	lsrs	r3, r3, #28
 8005a26:	f003 030f 	and.w	r3, r3, #15
 8005a2a:	e006      	b.n	8005a3a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8005a2c:	4b76      	ldr	r3, [pc, #472]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005a32:	041b      	lsls	r3, r3, #16
 8005a34:	0f1b      	lsrs	r3, r3, #28
 8005a36:	f003 030f 	and.w	r3, r3, #15
 8005a3a:	4a76      	ldr	r2, [pc, #472]	@ (8005c14 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a40:	ee07 3a90 	vmov	s15, r3
 8005a44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	ee07 3a90 	vmov	s15, r3
 8005a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	ee07 3a90 	vmov	s15, r3
 8005a5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a60:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a64:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005c10 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005a68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a74:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a7c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a80:	e058      	b.n	8005b34 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	ee07 3a90 	vmov	s15, r3
 8005a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a8c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005c0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005a90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a94:	4b5c      	ldr	r3, [pc, #368]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a9c:	ee07 3a90 	vmov	s15, r3
 8005aa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005aa4:	ed97 6a02 	vldr	s12, [r7, #8]
 8005aa8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005c10 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005aac:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005ab0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ab4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ab8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ac0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ac4:	e036      	b.n	8005b34 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005ac6:	4b50      	ldr	r3, [pc, #320]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d005      	beq.n	8005ade <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8005ad2:	4b4d      	ldr	r3, [pc, #308]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	0f1b      	lsrs	r3, r3, #28
 8005ad8:	f003 030f 	and.w	r3, r3, #15
 8005adc:	e006      	b.n	8005aec <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8005ade:	4b4a      	ldr	r3, [pc, #296]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ae0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ae4:	041b      	lsls	r3, r3, #16
 8005ae6:	0f1b      	lsrs	r3, r3, #28
 8005ae8:	f003 030f 	and.w	r3, r3, #15
 8005aec:	4a49      	ldr	r2, [pc, #292]	@ (8005c14 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005af2:	ee07 3a90 	vmov	s15, r3
 8005af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	ee07 3a90 	vmov	s15, r3
 8005b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	ee07 3a90 	vmov	s15, r3
 8005b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b12:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b16:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005c10 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b32:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005b34:	4b34      	ldr	r3, [pc, #208]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d017      	beq.n	8005b70 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005b40:	4b31      	ldr	r3, [pc, #196]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b44:	0a5b      	lsrs	r3, r3, #9
 8005b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b4a:	ee07 3a90 	vmov	s15, r3
 8005b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005b52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b56:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005b5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b66:	ee17 2a90 	vmov	r2, s15
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	e002      	b.n	8005b76 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005b76:	4b24      	ldr	r3, [pc, #144]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d017      	beq.n	8005bb2 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005b82:	4b21      	ldr	r3, [pc, #132]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b86:	0c1b      	lsrs	r3, r3, #16
 8005b88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b8c:	ee07 3a90 	vmov	s15, r3
 8005b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005b94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b98:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005b9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ba8:	ee17 2a90 	vmov	r2, s15
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	605a      	str	r2, [r3, #4]
 8005bb0:	e002      	b.n	8005bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005bb8:	4b13      	ldr	r3, [pc, #76]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d017      	beq.n	8005bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005bc4:	4b10      	ldr	r3, [pc, #64]	@ (8005c08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bc8:	0e1b      	lsrs	r3, r3, #24
 8005bca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bce:	ee07 3a90 	vmov	s15, r3
 8005bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005bd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005bda:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005bde:	edd7 6a07 	vldr	s13, [r7, #28]
 8005be2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005be6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bea:	ee17 2a90 	vmov	r2, s15
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005bf2:	e002      	b.n	8005bfa <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	609a      	str	r2, [r3, #8]
}
 8005bfa:	bf00      	nop
 8005bfc:	3724      	adds	r7, #36	@ 0x24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	46020c00 	.word	0x46020c00
 8005c0c:	4b742400 	.word	0x4b742400
 8005c10:	46000000 	.word	0x46000000
 8005c14:	0800b244 	.word	0x0800b244

08005c18 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b089      	sub	sp, #36	@ 0x24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005c20:	4ba6      	ldr	r3, [pc, #664]	@ (8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c28:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005c2a:	4ba4      	ldr	r3, [pc, #656]	@ (8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c2e:	f003 0303 	and.w	r3, r3, #3
 8005c32:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005c34:	4ba1      	ldr	r3, [pc, #644]	@ (8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c38:	0a1b      	lsrs	r3, r3, #8
 8005c3a:	f003 030f 	and.w	r3, r3, #15
 8005c3e:	3301      	adds	r3, #1
 8005c40:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005c42:	4b9e      	ldr	r3, [pc, #632]	@ (8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c46:	091b      	lsrs	r3, r3, #4
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005c4e:	4b9b      	ldr	r3, [pc, #620]	@ (8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c52:	08db      	lsrs	r3, r3, #3
 8005c54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	fb02 f303 	mul.w	r3, r2, r3
 8005c5e:	ee07 3a90 	vmov	s15, r3
 8005c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c66:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2b03      	cmp	r3, #3
 8005c6e:	d062      	beq.n	8005d36 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	2b03      	cmp	r3, #3
 8005c74:	f200 8081 	bhi.w	8005d7a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d024      	beq.n	8005cc8 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d17a      	bne.n	8005d7a <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	ee07 3a90 	vmov	s15, r3
 8005c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c96:	4b89      	ldr	r3, [pc, #548]	@ (8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c9e:	ee07 3a90 	vmov	s15, r3
 8005ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ca6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005caa:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc2:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8005cc6:	e08f      	b.n	8005de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005cc8:	4b7c      	ldr	r3, [pc, #496]	@ (8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d005      	beq.n	8005ce0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005cd4:	4b79      	ldr	r3, [pc, #484]	@ (8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	0f1b      	lsrs	r3, r3, #28
 8005cda:	f003 030f 	and.w	r3, r3, #15
 8005cde:	e006      	b.n	8005cee <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8005ce0:	4b76      	ldr	r3, [pc, #472]	@ (8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ce2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ce6:	041b      	lsls	r3, r3, #16
 8005ce8:	0f1b      	lsrs	r3, r3, #28
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	4a76      	ldr	r2, [pc, #472]	@ (8005ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cf4:	ee07 3a90 	vmov	s15, r3
 8005cf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	ee07 3a90 	vmov	s15, r3
 8005d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	ee07 3a90 	vmov	s15, r3
 8005d10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d14:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d18:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005d1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d28:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d30:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d34:	e058      	b.n	8005de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	ee07 3a90 	vmov	s15, r3
 8005d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d40:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005d44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d48:	4b5c      	ldr	r3, [pc, #368]	@ (8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d50:	ee07 3a90 	vmov	s15, r3
 8005d54:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d58:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d5c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005d60:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005d64:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005d70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d74:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d78:	e036      	b.n	8005de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005d7a:	4b50      	ldr	r3, [pc, #320]	@ (8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d005      	beq.n	8005d92 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8005d86:	4b4d      	ldr	r3, [pc, #308]	@ (8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	0f1b      	lsrs	r3, r3, #28
 8005d8c:	f003 030f 	and.w	r3, r3, #15
 8005d90:	e006      	b.n	8005da0 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8005d92:	4b4a      	ldr	r3, [pc, #296]	@ (8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005d98:	041b      	lsls	r3, r3, #16
 8005d9a:	0f1b      	lsrs	r3, r3, #28
 8005d9c:	f003 030f 	and.w	r3, r3, #15
 8005da0:	4a49      	ldr	r2, [pc, #292]	@ (8005ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005da6:	ee07 3a90 	vmov	s15, r3
 8005daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	ee07 3a90 	vmov	s15, r3
 8005db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005db8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	ee07 3a90 	vmov	s15, r3
 8005dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dca:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005de2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005de6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005de8:	4b34      	ldr	r3, [pc, #208]	@ (8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d017      	beq.n	8005e24 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005df4:	4b31      	ldr	r3, [pc, #196]	@ (8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005df8:	0a5b      	lsrs	r3, r3, #9
 8005dfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dfe:	ee07 3a90 	vmov	s15, r3
 8005e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005e06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e0a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005e0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e1a:	ee17 2a90 	vmov	r2, s15
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	e002      	b.n	8005e2a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005e2a:	4b24      	ldr	r3, [pc, #144]	@ (8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d017      	beq.n	8005e66 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005e36:	4b21      	ldr	r3, [pc, #132]	@ (8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e3a:	0c1b      	lsrs	r3, r3, #16
 8005e3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e40:	ee07 3a90 	vmov	s15, r3
 8005e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005e48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e4c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005e50:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e5c:	ee17 2a90 	vmov	r2, s15
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	605a      	str	r2, [r3, #4]
 8005e64:	e002      	b.n	8005e6c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005e6c:	4b13      	ldr	r3, [pc, #76]	@ (8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d017      	beq.n	8005ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005e78:	4b10      	ldr	r3, [pc, #64]	@ (8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e7c:	0e1b      	lsrs	r3, r3, #24
 8005e7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e82:	ee07 3a90 	vmov	s15, r3
 8005e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005e8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e8e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005e92:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e9e:	ee17 2a90 	vmov	r2, s15
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005ea6:	e002      	b.n	8005eae <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	609a      	str	r2, [r3, #8]
}
 8005eae:	bf00      	nop
 8005eb0:	3724      	adds	r7, #36	@ 0x24
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	46020c00 	.word	0x46020c00
 8005ec0:	4b742400 	.word	0x4b742400
 8005ec4:	46000000 	.word	0x46000000
 8005ec8:	0800b244 	.word	0x0800b244

08005ecc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b08e      	sub	sp, #56	@ 0x38
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005ed6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eda:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8005ede:	430b      	orrs	r3, r1
 8005ee0:	d145      	bne.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005ee2:	4b9b      	ldr	r3, [pc, #620]	@ (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005ee4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ee8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005eec:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005eee:	4b98      	ldr	r3, [pc, #608]	@ (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005ef0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d108      	bne.n	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f02:	d104      	bne.n	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005f04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f08:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f0a:	f001 b912 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005f0e:	4b90      	ldr	r3, [pc, #576]	@ (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005f10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f1c:	d114      	bne.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f24:	d110      	bne.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005f26:	4b8a      	ldr	r3, [pc, #552]	@ (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005f28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f34:	d103      	bne.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8005f36:	23fa      	movs	r3, #250	@ 0xfa
 8005f38:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005f3a:	f001 b8fa 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005f3e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005f42:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005f44:	f001 b8f5 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005f48:	4b81      	ldr	r3, [pc, #516]	@ (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f54:	d107      	bne.n	8005f66 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8005f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f5c:	d103      	bne.n	8005f66 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8005f5e:	4b7d      	ldr	r3, [pc, #500]	@ (8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005f60:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f62:	f001 b8e6 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005f66:	2300      	movs	r3, #0
 8005f68:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f6a:	f001 b8e2 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005f6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f72:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005f76:	430b      	orrs	r3, r1
 8005f78:	d151      	bne.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005f7a:	4b75      	ldr	r3, [pc, #468]	@ (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005f7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f80:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8005f84:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f88:	2b80      	cmp	r3, #128	@ 0x80
 8005f8a:	d035      	beq.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8e:	2b80      	cmp	r3, #128	@ 0x80
 8005f90:	d841      	bhi.n	8006016 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f94:	2b60      	cmp	r3, #96	@ 0x60
 8005f96:	d02a      	beq.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9a:	2b60      	cmp	r3, #96	@ 0x60
 8005f9c:	d83b      	bhi.n	8006016 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa0:	2b40      	cmp	r3, #64	@ 0x40
 8005fa2:	d009      	beq.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa6:	2b40      	cmp	r3, #64	@ 0x40
 8005fa8:	d835      	bhi.n	8006016 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00c      	beq.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb2:	2b20      	cmp	r3, #32
 8005fb4:	d012      	beq.n	8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005fb6:	e02e      	b.n	8006016 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005fb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7ff fb77 	bl	80056b0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005fc6:	f001 b8b4 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fca:	f107 0318 	add.w	r3, r7, #24
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7ff fcc8 	bl	8005964 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005fd8:	f001 b8ab 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fdc:	f107 030c 	add.w	r3, r7, #12
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7ff fe19 	bl	8005c18 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005fea:	f001 b8a2 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005fee:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005ff2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ff4:	f001 b89d 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ff8:	4b55      	ldr	r3, [pc, #340]	@ (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006000:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006004:	d103      	bne.n	800600e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006006:	4b54      	ldr	r3, [pc, #336]	@ (8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8006008:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800600a:	f001 b892 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800600e:	2300      	movs	r3, #0
 8006010:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006012:	f001 b88e 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :
      {
        frequency = 0U;
 8006016:	2300      	movs	r3, #0
 8006018:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800601a:	f001 b88a 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        break;
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800601e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006022:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006026:	430b      	orrs	r3, r1
 8006028:	d126      	bne.n	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800602a:	4b49      	ldr	r3, [pc, #292]	@ (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800602c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006030:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006034:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8006036:	4b46      	ldr	r3, [pc, #280]	@ (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800603e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006042:	d106      	bne.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8006044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006046:	2b00      	cmp	r3, #0
 8006048:	d103      	bne.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
    {
      frequency = HSI_VALUE;
 800604a:	4b43      	ldr	r3, [pc, #268]	@ (8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800604c:	637b      	str	r3, [r7, #52]	@ 0x34
 800604e:	f001 b870 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8006052:	4b3f      	ldr	r3, [pc, #252]	@ (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800605a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800605e:	d107      	bne.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8006060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006062:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006066:	d103      	bne.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
    {
      frequency = HSI_VALUE >> 1U;
 8006068:	4b3c      	ldr	r3, [pc, #240]	@ (800615c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800606a:	637b      	str	r3, [r7, #52]	@ 0x34
 800606c:	f001 b861 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8006070:	2300      	movs	r3, #0
 8006072:	637b      	str	r3, [r7, #52]	@ 0x34
 8006074:	f001 b85d 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800607c:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8006080:	430b      	orrs	r3, r1
 8006082:	d171      	bne.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006084:	4b32      	ldr	r3, [pc, #200]	@ (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800608a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800608e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006092:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006096:	d034      	beq.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8006098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800609a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800609e:	d853      	bhi.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80060a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060a6:	d00b      	beq.n	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80060a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060ae:	d84b      	bhi.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 80060b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d016      	beq.n	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 80060b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80060bc:	d009      	beq.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 80060be:	e043      	b.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7ff faf3 	bl	80056b0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80060ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060ce:	f001 b830 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060d2:	f107 0318 	add.w	r3, r7, #24
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7ff fc44 	bl	8005964 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060e0:	f001 b827 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80060e4:	4b1a      	ldr	r3, [pc, #104]	@ (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060f0:	d103      	bne.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
        {
          frequency = HSI48_VALUE;
 80060f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80060f4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80060f6:	f001 b81c 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80060fa:	2300      	movs	r3, #0
 80060fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060fe:	f001 b818 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006102:	4b13      	ldr	r3, [pc, #76]	@ (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0320 	and.w	r3, r3, #32
 800610a:	2b20      	cmp	r3, #32
 800610c:	d118      	bne.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800610e:	4b10      	ldr	r3, [pc, #64]	@ (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d005      	beq.n	8006126 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800611a:	4b0d      	ldr	r3, [pc, #52]	@ (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	0e1b      	lsrs	r3, r3, #24
 8006120:	f003 030f 	and.w	r3, r3, #15
 8006124:	e006      	b.n	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 8006126:	4b0a      	ldr	r3, [pc, #40]	@ (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006128:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800612c:	041b      	lsls	r3, r3, #16
 800612e:	0e1b      	lsrs	r3, r3, #24
 8006130:	f003 030f 	and.w	r3, r3, #15
 8006134:	4a0b      	ldr	r2, [pc, #44]	@ (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800613a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800613c:	f000 bff9 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006140:	2300      	movs	r3, #0
 8006142:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006144:	f000 bff5 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :

        frequency = 0U;
 8006148:	2300      	movs	r3, #0
 800614a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800614c:	f000 bff1 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8006150:	46020c00 	.word	0x46020c00
 8006154:	0007a120 	.word	0x0007a120
 8006158:	00f42400 	.word	0x00f42400
 800615c:	007a1200 	.word	0x007a1200
 8006160:	02dc6c00 	.word	0x02dc6c00
 8006164:	0800b244 	.word	0x0800b244
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800616c:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006170:	430b      	orrs	r3, r1
 8006172:	d17f      	bne.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006174:	4ba8      	ldr	r3, [pc, #672]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006176:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800617a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800617e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006182:	2b00      	cmp	r3, #0
 8006184:	d165      	bne.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006186:	4ba4      	ldr	r3, [pc, #656]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800618c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006190:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8006192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006194:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006198:	d034      	beq.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800619a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80061a0:	d853      	bhi.n	800624a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 80061a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061a8:	d00b      	beq.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 80061aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061b0:	d84b      	bhi.n	800624a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 80061b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d016      	beq.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 80061b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80061be:	d009      	beq.n	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80061c0:	e043      	b.n	800624a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7ff fa72 	bl	80056b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ce:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80061d0:	f000 bfaf 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061d4:	f107 0318 	add.w	r3, r7, #24
 80061d8:	4618      	mov	r0, r3
 80061da:	f7ff fbc3 	bl	8005964 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80061e2:	f000 bfa6 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80061e6:	4b8c      	ldr	r3, [pc, #560]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061f2:	d103      	bne.n	80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          {
            frequency = HSI48_VALUE;
 80061f4:	4b89      	ldr	r3, [pc, #548]	@ (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 80061f6:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80061f8:	f000 bf9b 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006200:	f000 bf97 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006204:	4b84      	ldr	r3, [pc, #528]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0320 	and.w	r3, r3, #32
 800620c:	2b20      	cmp	r3, #32
 800620e:	d118      	bne.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006210:	4b81      	ldr	r3, [pc, #516]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d005      	beq.n	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 800621c:	4b7e      	ldr	r3, [pc, #504]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	0e1b      	lsrs	r3, r3, #24
 8006222:	f003 030f 	and.w	r3, r3, #15
 8006226:	e006      	b.n	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 8006228:	4b7b      	ldr	r3, [pc, #492]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800622a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800622e:	041b      	lsls	r3, r3, #16
 8006230:	0e1b      	lsrs	r3, r3, #24
 8006232:	f003 030f 	and.w	r3, r3, #15
 8006236:	4a7a      	ldr	r2, [pc, #488]	@ (8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8006238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800623c:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800623e:	f000 bf78 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 8006242:	2300      	movs	r3, #0
 8006244:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006246:	f000 bf74 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        default :
        {
          frequency = 0U;
 800624a:	2300      	movs	r3, #0
 800624c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800624e:	f000 bf70 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006254:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006258:	d108      	bne.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800625a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800625e:	4618      	mov	r0, r3
 8006260:	f7ff fa26 	bl	80056b0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006266:	637b      	str	r3, [r7, #52]	@ 0x34
 8006268:	f000 bf63 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else
    {
      frequency = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006270:	f000 bf5f 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006274:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006278:	1e51      	subs	r1, r2, #1
 800627a:	430b      	orrs	r3, r1
 800627c:	d136      	bne.n	80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x420>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800627e:	4b66      	ldr	r3, [pc, #408]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006284:	f003 0303 	and.w	r3, r3, #3
 8006288:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800628a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628c:	2b00      	cmp	r3, #0
 800628e:	d104      	bne.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006290:	f7fe fc22 	bl	8004ad8 <HAL_RCC_GetPCLK2Freq>
 8006294:	6378      	str	r0, [r7, #52]	@ 0x34
 8006296:	f000 bf4c 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800629a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629c:	2b01      	cmp	r3, #1
 800629e:	d104      	bne.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80062a0:	f7fe faea 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 80062a4:	6378      	str	r0, [r7, #52]	@ 0x34
 80062a6:	f000 bf44 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80062aa:	4b5b      	ldr	r3, [pc, #364]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062b6:	d106      	bne.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 80062b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d103      	bne.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HSI_VALUE;
 80062be:	4b59      	ldr	r3, [pc, #356]	@ (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80062c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80062c2:	f000 bf36 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80062c6:	4b54      	ldr	r3, [pc, #336]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80062c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d107      	bne.n	80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 80062d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d6:	2b03      	cmp	r3, #3
 80062d8:	d104      	bne.n	80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
    {
      frequency = LSE_VALUE;
 80062da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062de:	637b      	str	r3, [r7, #52]	@ 0x34
 80062e0:	f000 bf27 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80062e8:	f000 bf23 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80062ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062f0:	1f11      	subs	r1, r2, #4
 80062f2:	430b      	orrs	r3, r1
 80062f4:	d136      	bne.n	8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80062f6:	4b48      	ldr	r3, [pc, #288]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80062f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80062fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006300:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006304:	2b00      	cmp	r3, #0
 8006306:	d104      	bne.n	8006312 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006308:	f7fe fbd2 	bl	8004ab0 <HAL_RCC_GetPCLK1Freq>
 800630c:	6378      	str	r0, [r7, #52]	@ 0x34
 800630e:	f000 bf10 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006314:	2b10      	cmp	r3, #16
 8006316:	d104      	bne.n	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006318:	f7fe faae 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 800631c:	6378      	str	r0, [r7, #52]	@ 0x34
 800631e:	f000 bf08 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006322:	4b3d      	ldr	r3, [pc, #244]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800632a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800632e:	d106      	bne.n	800633e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006332:	2b20      	cmp	r3, #32
 8006334:	d103      	bne.n	800633e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    {
      frequency = HSI_VALUE;
 8006336:	4b3b      	ldr	r3, [pc, #236]	@ (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8006338:	637b      	str	r3, [r7, #52]	@ 0x34
 800633a:	f000 befa 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800633e:	4b36      	ldr	r3, [pc, #216]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006340:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006344:	f003 0302 	and.w	r3, r3, #2
 8006348:	2b02      	cmp	r3, #2
 800634a:	d107      	bne.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 800634c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634e:	2b30      	cmp	r3, #48	@ 0x30
 8006350:	d104      	bne.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = LSE_VALUE;
 8006352:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006356:	637b      	str	r3, [r7, #52]	@ 0x34
 8006358:	f000 beeb 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800635c:	2300      	movs	r3, #0
 800635e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006360:	f000 bee7 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006364:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006368:	f1a2 0108 	sub.w	r1, r2, #8
 800636c:	430b      	orrs	r3, r1
 800636e:	d136      	bne.n	80063de <HAL_RCCEx_GetPeriphCLKFreq+0x512>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006370:	4b29      	ldr	r3, [pc, #164]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006376:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800637a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800637c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637e:	2b00      	cmp	r3, #0
 8006380:	d104      	bne.n	800638c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006382:	f7fe fb95 	bl	8004ab0 <HAL_RCC_GetPCLK1Freq>
 8006386:	6378      	str	r0, [r7, #52]	@ 0x34
 8006388:	f000 bed3 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800638c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638e:	2b40      	cmp	r3, #64	@ 0x40
 8006390:	d104      	bne.n	800639c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006392:	f7fe fa71 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 8006396:	6378      	str	r0, [r7, #52]	@ 0x34
 8006398:	f000 becb 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800639c:	4b1e      	ldr	r3, [pc, #120]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063a8:	d106      	bne.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80063aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ac:	2b80      	cmp	r3, #128	@ 0x80
 80063ae:	d103      	bne.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
    {
      frequency = HSI_VALUE;
 80063b0:	4b1c      	ldr	r3, [pc, #112]	@ (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80063b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80063b4:	f000 bebd 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80063b8:	4b17      	ldr	r3, [pc, #92]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80063ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d107      	bne.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 80063c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c8:	2bc0      	cmp	r3, #192	@ 0xc0
 80063ca:	d104      	bne.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {
      frequency = LSE_VALUE;
 80063cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80063d2:	f000 beae 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80063d6:	2300      	movs	r3, #0
 80063d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80063da:	f000 beaa 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80063de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063e2:	f1a2 0110 	sub.w	r1, r2, #16
 80063e6:	430b      	orrs	r3, r1
 80063e8:	d141      	bne.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80063ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80063ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80063f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063f4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80063f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d104      	bne.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80063fc:	f7fe fb58 	bl	8004ab0 <HAL_RCC_GetPCLK1Freq>
 8006400:	6378      	str	r0, [r7, #52]	@ 0x34
 8006402:	f000 be96 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006408:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800640c:	d10c      	bne.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800640e:	f7fe fa33 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 8006412:	6378      	str	r0, [r7, #52]	@ 0x34
 8006414:	f000 be8d 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8006418:	46020c00 	.word	0x46020c00
 800641c:	02dc6c00 	.word	0x02dc6c00
 8006420:	0800b244 	.word	0x0800b244
 8006424:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006428:	4baa      	ldr	r3, [pc, #680]	@ (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006430:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006434:	d107      	bne.n	8006446 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8006436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800643c:	d103      	bne.n	8006446 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 800643e:	4ba6      	ldr	r3, [pc, #664]	@ (80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006440:	637b      	str	r3, [r7, #52]	@ 0x34
 8006442:	f000 be76 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006446:	4ba3      	ldr	r3, [pc, #652]	@ (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006448:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	2b02      	cmp	r3, #2
 8006452:	d108      	bne.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 8006454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006456:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800645a:	d104      	bne.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
    {
      frequency = LSE_VALUE;
 800645c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006460:	637b      	str	r3, [r7, #52]	@ 0x34
 8006462:	f000 be66 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006466:	2300      	movs	r3, #0
 8006468:	637b      	str	r3, [r7, #52]	@ 0x34
 800646a:	f000 be62 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800646e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006472:	f1a2 0120 	sub.w	r1, r2, #32
 8006476:	430b      	orrs	r3, r1
 8006478:	d158      	bne.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800647a:	4b96      	ldr	r3, [pc, #600]	@ (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800647c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006480:	f003 0307 	and.w	r3, r3, #7
 8006484:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006488:	2b00      	cmp	r3, #0
 800648a:	d104      	bne.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800648c:	f7fe fb38 	bl	8004b00 <HAL_RCC_GetPCLK3Freq>
 8006490:	6378      	str	r0, [r7, #52]	@ 0x34
 8006492:	f000 be4e 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006498:	2b01      	cmp	r3, #1
 800649a:	d104      	bne.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800649c:	f7fe f9ec 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 80064a0:	6378      	str	r0, [r7, #52]	@ 0x34
 80064a2:	f000 be46 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80064a6:	4b8b      	ldr	r3, [pc, #556]	@ (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064b2:	d106      	bne.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80064b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d103      	bne.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      frequency = HSI_VALUE;
 80064ba:	4b87      	ldr	r3, [pc, #540]	@ (80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80064bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80064be:	f000 be38 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80064c2:	4b84      	ldr	r3, [pc, #528]	@ (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80064c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d107      	bne.n	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80064d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d2:	2b03      	cmp	r3, #3
 80064d4:	d104      	bne.n	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = LSE_VALUE;
 80064d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064da:	637b      	str	r3, [r7, #52]	@ 0x34
 80064dc:	f000 be29 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80064e0:	4b7c      	ldr	r3, [pc, #496]	@ (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0320 	and.w	r3, r3, #32
 80064e8:	2b20      	cmp	r3, #32
 80064ea:	d11b      	bne.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80064ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ee:	2b04      	cmp	r3, #4
 80064f0:	d118      	bne.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80064f2:	4b78      	ldr	r3, [pc, #480]	@ (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d005      	beq.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
 80064fe:	4b75      	ldr	r3, [pc, #468]	@ (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	0e1b      	lsrs	r3, r3, #24
 8006504:	f003 030f 	and.w	r3, r3, #15
 8006508:	e006      	b.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800650a:	4b72      	ldr	r3, [pc, #456]	@ (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800650c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006510:	041b      	lsls	r3, r3, #16
 8006512:	0e1b      	lsrs	r3, r3, #24
 8006514:	f003 030f 	and.w	r3, r3, #15
 8006518:	4a70      	ldr	r2, [pc, #448]	@ (80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 800651a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800651e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006520:	f000 be07 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006524:	2300      	movs	r3, #0
 8006526:	637b      	str	r3, [r7, #52]	@ 0x34
 8006528:	f000 be03 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800652c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006530:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006534:	430b      	orrs	r3, r1
 8006536:	d16c      	bne.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006538:	4b66      	ldr	r3, [pc, #408]	@ (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800653a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800653e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006542:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006546:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800654a:	d104      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800654c:	f7fe f994 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 8006550:	6378      	str	r0, [r7, #52]	@ 0x34
 8006552:	f000 bdee 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006558:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800655c:	d108      	bne.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800655e:	f107 0318 	add.w	r3, r7, #24
 8006562:	4618      	mov	r0, r3
 8006564:	f7ff f9fe 	bl	8005964 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	637b      	str	r3, [r7, #52]	@ 0x34
 800656c:	f000 bde1 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006572:	2b00      	cmp	r3, #0
 8006574:	d104      	bne.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006576:	f7fe fa81 	bl	8004a7c <HAL_RCC_GetHCLKFreq>
 800657a:	6378      	str	r0, [r7, #52]	@ 0x34
 800657c:	f000 bdd9 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006582:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006586:	d122      	bne.n	80065ce <HAL_RCCEx_GetPeriphCLKFreq+0x702>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006588:	4b52      	ldr	r3, [pc, #328]	@ (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0320 	and.w	r3, r3, #32
 8006590:	2b20      	cmp	r3, #32
 8006592:	d118      	bne.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006594:	4b4f      	ldr	r3, [pc, #316]	@ (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d005      	beq.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80065a0:	4b4c      	ldr	r3, [pc, #304]	@ (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	0e1b      	lsrs	r3, r3, #24
 80065a6:	f003 030f 	and.w	r3, r3, #15
 80065aa:	e006      	b.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 80065ac:	4b49      	ldr	r3, [pc, #292]	@ (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80065ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80065b2:	041b      	lsls	r3, r3, #16
 80065b4:	0e1b      	lsrs	r3, r3, #24
 80065b6:	f003 030f 	and.w	r3, r3, #15
 80065ba:	4a48      	ldr	r2, [pc, #288]	@ (80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80065bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80065c2:	f000 bdb6 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 80065c6:	2300      	movs	r3, #0
 80065c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80065ca:	f000 bdb2 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80065ce:	4b41      	ldr	r3, [pc, #260]	@ (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065da:	d107      	bne.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80065dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80065e2:	d103      	bne.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x720>
    {
      frequency = HSE_VALUE;
 80065e4:	4b3c      	ldr	r3, [pc, #240]	@ (80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80065e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80065e8:	f000 bda3 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80065ec:	4b39      	ldr	r3, [pc, #228]	@ (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065f8:	d107      	bne.n	800660a <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 80065fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006600:	d103      	bne.n	800660a <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
    {
      frequency = HSI_VALUE;
 8006602:	4b35      	ldr	r3, [pc, #212]	@ (80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006604:	637b      	str	r3, [r7, #52]	@ 0x34
 8006606:	f000 bd94 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800660a:	2300      	movs	r3, #0
 800660c:	637b      	str	r3, [r7, #52]	@ 0x34
 800660e:	f000 bd90 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006612:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006616:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800661a:	430b      	orrs	r3, r1
 800661c:	d160      	bne.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800661e:	4b2d      	ldr	r3, [pc, #180]	@ (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006620:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006624:	f003 0307 	and.w	r3, r3, #7
 8006628:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800662a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662c:	2b04      	cmp	r3, #4
 800662e:	d84c      	bhi.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8006630:	a201      	add	r2, pc, #4	@ (adr r2, 8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8006632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006636:	bf00      	nop
 8006638:	08006671 	.word	0x08006671
 800663c:	0800664d 	.word	0x0800664d
 8006640:	0800665f 	.word	0x0800665f
 8006644:	0800667b 	.word	0x0800667b
 8006648:	08006685 	.word	0x08006685
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800664c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006650:	4618      	mov	r0, r3
 8006652:	f7ff f82d 	bl	80056b0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006658:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800665a:	f000 bd6a 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800665e:	f107 030c 	add.w	r3, r7, #12
 8006662:	4618      	mov	r0, r3
 8006664:	f7ff fad8 	bl	8005c18 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800666c:	f000 bd61 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006670:	f7fe fa04 	bl	8004a7c <HAL_RCC_GetHCLKFreq>
 8006674:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006676:	f000 bd5c 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800667a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800667e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006680:	f000 bd57 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006684:	4b13      	ldr	r3, [pc, #76]	@ (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0320 	and.w	r3, r3, #32
 800668c:	2b20      	cmp	r3, #32
 800668e:	d118      	bne.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006690:	4b10      	ldr	r3, [pc, #64]	@ (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d005      	beq.n	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 800669c:	4b0d      	ldr	r3, [pc, #52]	@ (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	0e1b      	lsrs	r3, r3, #24
 80066a2:	f003 030f 	and.w	r3, r3, #15
 80066a6:	e006      	b.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 80066a8:	4b0a      	ldr	r3, [pc, #40]	@ (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80066aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80066ae:	041b      	lsls	r3, r3, #16
 80066b0:	0e1b      	lsrs	r3, r3, #24
 80066b2:	f003 030f 	and.w	r3, r3, #15
 80066b6:	4a09      	ldr	r2, [pc, #36]	@ (80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80066b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066bc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80066be:	f000 bd38 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066c6:	f000 bd34 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80066ca:	2300      	movs	r3, #0
 80066cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066ce:	f000 bd30 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80066d2:	bf00      	nop
 80066d4:	46020c00 	.word	0x46020c00
 80066d8:	00f42400 	.word	0x00f42400
 80066dc:	0800b244 	.word	0x0800b244
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80066e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066e4:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80066e8:	430b      	orrs	r3, r1
 80066ea:	d167      	bne.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80066ec:	4ba0      	ldr	r3, [pc, #640]	@ (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80066ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80066f2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80066f6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80066f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066fe:	d036      	beq.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006702:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006706:	d855      	bhi.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8006708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800670e:	d029      	beq.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
 8006710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006712:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006716:	d84d      	bhi.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8006718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800671e:	d013      	beq.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8006720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006722:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006726:	d845      	bhi.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 8006728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800672a:	2b00      	cmp	r3, #0
 800672c:	d015      	beq.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 800672e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006734:	d13e      	bne.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006736:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800673a:	4618      	mov	r0, r3
 800673c:	f7fe ffb8 	bl	80056b0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006742:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006744:	f000 bcf5 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006748:	f107 030c 	add.w	r3, r7, #12
 800674c:	4618      	mov	r0, r3
 800674e:	f7ff fa63 	bl	8005c18 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006756:	f000 bcec 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800675a:	f7fe f98f 	bl	8004a7c <HAL_RCC_GetHCLKFreq>
 800675e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006760:	f000 bce7 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006764:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006768:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800676a:	f000 bce2 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800676e:	4b80      	ldr	r3, [pc, #512]	@ (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0320 	and.w	r3, r3, #32
 8006776:	2b20      	cmp	r3, #32
 8006778:	d118      	bne.n	80067ac <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800677a:	4b7d      	ldr	r3, [pc, #500]	@ (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d005      	beq.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8006786:	4b7a      	ldr	r3, [pc, #488]	@ (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	0e1b      	lsrs	r3, r3, #24
 800678c:	f003 030f 	and.w	r3, r3, #15
 8006790:	e006      	b.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 8006792:	4b77      	ldr	r3, [pc, #476]	@ (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006794:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006798:	041b      	lsls	r3, r3, #16
 800679a:	0e1b      	lsrs	r3, r3, #24
 800679c:	f003 030f 	and.w	r3, r3, #15
 80067a0:	4a74      	ldr	r2, [pc, #464]	@ (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80067a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067a6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80067a8:	f000 bcc3 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80067ac:	2300      	movs	r3, #0
 80067ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067b0:	f000 bcbf 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067b8:	f000 bcbb 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80067bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067c0:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80067c4:	430b      	orrs	r3, r1
 80067c6:	d14c      	bne.n	8006862 <HAL_RCCEx_GetPeriphCLKFreq+0x996>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80067c8:	4b69      	ldr	r3, [pc, #420]	@ (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80067ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067ce:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80067d2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80067d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d104      	bne.n	80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80067da:	f7fe f969 	bl	8004ab0 <HAL_RCC_GetPCLK1Freq>
 80067de:	6378      	str	r0, [r7, #52]	@ 0x34
 80067e0:	f000 bca7 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80067e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067ea:	d104      	bne.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80067ec:	f7fe f844 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 80067f0:	6378      	str	r0, [r7, #52]	@ 0x34
 80067f2:	f000 bc9e 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80067f6:	4b5e      	ldr	r3, [pc, #376]	@ (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006802:	d107      	bne.n	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 8006804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006806:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800680a:	d103      	bne.n	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
    {
      frequency = HSI_VALUE;
 800680c:	4b5a      	ldr	r3, [pc, #360]	@ (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800680e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006810:	f000 bc8f 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8006814:	4b56      	ldr	r3, [pc, #344]	@ (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0320 	and.w	r3, r3, #32
 800681c:	2b20      	cmp	r3, #32
 800681e:	d11c      	bne.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 8006820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006822:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006826:	d118      	bne.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006828:	4b51      	ldr	r3, [pc, #324]	@ (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d005      	beq.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 8006834:	4b4e      	ldr	r3, [pc, #312]	@ (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	0e1b      	lsrs	r3, r3, #24
 800683a:	f003 030f 	and.w	r3, r3, #15
 800683e:	e006      	b.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x982>
 8006840:	4b4b      	ldr	r3, [pc, #300]	@ (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006842:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006846:	041b      	lsls	r3, r3, #16
 8006848:	0e1b      	lsrs	r3, r3, #24
 800684a:	f003 030f 	and.w	r3, r3, #15
 800684e:	4a49      	ldr	r2, [pc, #292]	@ (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8006850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006854:	637b      	str	r3, [r7, #52]	@ 0x34
 8006856:	f000 bc6c 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800685a:	2300      	movs	r3, #0
 800685c:	637b      	str	r3, [r7, #52]	@ 0x34
 800685e:	f000 bc68 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8006862:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006866:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800686a:	430b      	orrs	r3, r1
 800686c:	d14c      	bne.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800686e:	4b40      	ldr	r3, [pc, #256]	@ (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006874:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006878:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800687a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687c:	2b00      	cmp	r3, #0
 800687e:	d104      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006880:	f7fe f916 	bl	8004ab0 <HAL_RCC_GetPCLK1Freq>
 8006884:	6378      	str	r0, [r7, #52]	@ 0x34
 8006886:	f000 bc54 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800688a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006890:	d104      	bne.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006892:	f7fd fff1 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 8006896:	6378      	str	r0, [r7, #52]	@ 0x34
 8006898:	f000 bc4b 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800689c:	4b34      	ldr	r3, [pc, #208]	@ (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068a8:	d107      	bne.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 80068aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068b0:	d103      	bne.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HSI_VALUE;
 80068b2:	4b31      	ldr	r3, [pc, #196]	@ (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80068b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80068b6:	f000 bc3c 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80068ba:	4b2d      	ldr	r3, [pc, #180]	@ (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0320 	and.w	r3, r3, #32
 80068c2:	2b20      	cmp	r3, #32
 80068c4:	d11c      	bne.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
 80068c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80068cc:	d118      	bne.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80068ce:	4b28      	ldr	r3, [pc, #160]	@ (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d005      	beq.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80068da:	4b25      	ldr	r3, [pc, #148]	@ (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	0e1b      	lsrs	r3, r3, #24
 80068e0:	f003 030f 	and.w	r3, r3, #15
 80068e4:	e006      	b.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>
 80068e6:	4b22      	ldr	r3, [pc, #136]	@ (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80068e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80068ec:	041b      	lsls	r3, r3, #16
 80068ee:	0e1b      	lsrs	r3, r3, #24
 80068f0:	f003 030f 	and.w	r3, r3, #15
 80068f4:	4a1f      	ldr	r2, [pc, #124]	@ (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80068f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80068fc:	f000 bc19 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006900:	2300      	movs	r3, #0
 8006902:	637b      	str	r3, [r7, #52]	@ 0x34
 8006904:	f000 bc15 	b.w	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006908:	e9d7 2300 	ldrd	r2, r3, [r7]
 800690c:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006910:	430b      	orrs	r3, r1
 8006912:	d157      	bne.n	80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006914:	4b16      	ldr	r3, [pc, #88]	@ (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006916:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800691a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800691e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006922:	2bc0      	cmp	r3, #192	@ 0xc0
 8006924:	d02a      	beq.n	800697c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8006926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006928:	2bc0      	cmp	r3, #192	@ 0xc0
 800692a:	d848      	bhi.n	80069be <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 800692c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692e:	2b80      	cmp	r3, #128	@ 0x80
 8006930:	d00d      	beq.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006934:	2b80      	cmp	r3, #128	@ 0x80
 8006936:	d842      	bhi.n	80069be <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8006938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0xa7a>
 800693e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006940:	2b40      	cmp	r3, #64	@ 0x40
 8006942:	d011      	beq.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006944:	e03b      	b.n	80069be <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8006946:	f7fe f8db 	bl	8004b00 <HAL_RCC_GetPCLK3Freq>
 800694a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800694c:	e3f1      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800694e:	4b08      	ldr	r3, [pc, #32]	@ (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006956:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800695a:	d102      	bne.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSI_VALUE;
 800695c:	4b06      	ldr	r3, [pc, #24]	@ (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800695e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006960:	e3e7      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006962:	2300      	movs	r3, #0
 8006964:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006966:	e3e4      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006968:	f7fd ff86 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 800696c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800696e:	e3e0      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8006970:	46020c00 	.word	0x46020c00
 8006974:	0800b244 	.word	0x0800b244
 8006978:	00f42400 	.word	0x00f42400
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800697c:	4ba3      	ldr	r3, [pc, #652]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0320 	and.w	r3, r3, #32
 8006984:	2b20      	cmp	r3, #32
 8006986:	d117      	bne.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006988:	4ba0      	ldr	r3, [pc, #640]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d005      	beq.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 8006994:	4b9d      	ldr	r3, [pc, #628]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	0e1b      	lsrs	r3, r3, #24
 800699a:	f003 030f 	and.w	r3, r3, #15
 800699e:	e006      	b.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 80069a0:	4b9a      	ldr	r3, [pc, #616]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80069a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80069a6:	041b      	lsls	r3, r3, #16
 80069a8:	0e1b      	lsrs	r3, r3, #24
 80069aa:	f003 030f 	and.w	r3, r3, #15
 80069ae:	4a98      	ldr	r2, [pc, #608]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80069b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069b4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80069b6:	e3bc      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069bc:	e3b9      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      default:
      {
        frequency = 0U;
 80069be:	2300      	movs	r3, #0
 80069c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069c2:	e3b6      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80069c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069c8:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80069cc:	430b      	orrs	r3, r1
 80069ce:	d147      	bne.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80069d0:	4b8e      	ldr	r3, [pc, #568]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80069d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069d6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80069da:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80069dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d103      	bne.n	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80069e2:	f7fe f865 	bl	8004ab0 <HAL_RCC_GetPCLK1Freq>
 80069e6:	6378      	str	r0, [r7, #52]	@ 0x34
 80069e8:	e3a3      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80069ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069f0:	d103      	bne.n	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0xb2e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80069f2:	f7fd ff41 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 80069f6:	6378      	str	r0, [r7, #52]	@ 0x34
 80069f8:	e39b      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80069fa:	4b84      	ldr	r3, [pc, #528]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a06:	d106      	bne.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8006a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a0e:	d102      	bne.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = HSI_VALUE;
 8006a10:	4b80      	ldr	r3, [pc, #512]	@ (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8006a12:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a14:	e38d      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006a16:	4b7d      	ldr	r3, [pc, #500]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0320 	and.w	r3, r3, #32
 8006a1e:	2b20      	cmp	r3, #32
 8006a20:	d11b      	bne.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
 8006a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a24:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006a28:	d117      	bne.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a2a:	4b78      	ldr	r3, [pc, #480]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d005      	beq.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
 8006a36:	4b75      	ldr	r3, [pc, #468]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	0e1b      	lsrs	r3, r3, #24
 8006a3c:	f003 030f 	and.w	r3, r3, #15
 8006a40:	e006      	b.n	8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8006a42:	4b72      	ldr	r3, [pc, #456]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006a44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006a48:	041b      	lsls	r3, r3, #16
 8006a4a:	0e1b      	lsrs	r3, r3, #24
 8006a4c:	f003 030f 	and.w	r3, r3, #15
 8006a50:	4a6f      	ldr	r2, [pc, #444]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a56:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a58:	e36b      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a5e:	e368      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8006a60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a64:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006a68:	430b      	orrs	r3, r1
 8006a6a:	d164      	bne.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006a6c:	4b67      	ldr	r3, [pc, #412]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006a6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a76:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d120      	bne.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006a7e:	4b63      	ldr	r3, [pc, #396]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0320 	and.w	r3, r3, #32
 8006a86:	2b20      	cmp	r3, #32
 8006a88:	d117      	bne.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a8a:	4b60      	ldr	r3, [pc, #384]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d005      	beq.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 8006a96:	4b5d      	ldr	r3, [pc, #372]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	0e1b      	lsrs	r3, r3, #24
 8006a9c:	f003 030f 	and.w	r3, r3, #15
 8006aa0:	e006      	b.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8006aa2:	4b5a      	ldr	r3, [pc, #360]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006aa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006aa8:	041b      	lsls	r3, r3, #16
 8006aaa:	0e1b      	lsrs	r3, r3, #24
 8006aac:	f003 030f 	and.w	r3, r3, #15
 8006ab0:	4a57      	ldr	r2, [pc, #348]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ab6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ab8:	e33b      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8006aba:	2300      	movs	r3, #0
 8006abc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006abe:	e338      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006ac0:	4b52      	ldr	r3, [pc, #328]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006ac2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ac6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006aca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ace:	d112      	bne.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ad6:	d10e      	bne.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006ad8:	4b4c      	ldr	r3, [pc, #304]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006ada:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ae2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ae6:	d102      	bne.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
      {
        frequency = LSI_VALUE / 128U;
 8006ae8:	23fa      	movs	r3, #250	@ 0xfa
 8006aea:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006aec:	e321      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8006aee:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006af2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006af4:	e31d      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006af6:	4b45      	ldr	r3, [pc, #276]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006afe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b02:	d106      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
 8006b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b0a:	d102      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
    {
      frequency = HSI_VALUE;
 8006b0c:	4b41      	ldr	r3, [pc, #260]	@ (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8006b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b10:	e30f      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006b12:	4b3e      	ldr	r3, [pc, #248]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006b14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b18:	f003 0302 	and.w	r3, r3, #2
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d107      	bne.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8006b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b26:	d103      	bne.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = LSE_VALUE;
 8006b28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b2e:	e300      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8006b30:	2300      	movs	r3, #0
 8006b32:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b34:	e2fd      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006b36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b3a:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006b3e:	430b      	orrs	r3, r1
 8006b40:	d16a      	bne.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006b42:	4b32      	ldr	r3, [pc, #200]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006b44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b48:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006b4c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d120      	bne.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006b54:	4b2d      	ldr	r3, [pc, #180]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0320 	and.w	r3, r3, #32
 8006b5c:	2b20      	cmp	r3, #32
 8006b5e:	d117      	bne.n	8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b60:	4b2a      	ldr	r3, [pc, #168]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d005      	beq.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8006b6c:	4b27      	ldr	r3, [pc, #156]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	0e1b      	lsrs	r3, r3, #24
 8006b72:	f003 030f 	and.w	r3, r3, #15
 8006b76:	e006      	b.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8006b78:	4b24      	ldr	r3, [pc, #144]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006b7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b7e:	041b      	lsls	r3, r3, #16
 8006b80:	0e1b      	lsrs	r3, r3, #24
 8006b82:	f003 030f 	and.w	r3, r3, #15
 8006b86:	4a22      	ldr	r2, [pc, #136]	@ (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b8e:	e2d0      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8006b90:	2300      	movs	r3, #0
 8006b92:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b94:	e2cd      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006b96:	4b1d      	ldr	r3, [pc, #116]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006b98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ba0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ba4:	d112      	bne.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bac:	d10e      	bne.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006bae:	4b17      	ldr	r3, [pc, #92]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006bb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bbc:	d102      	bne.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8006bbe:	23fa      	movs	r3, #250	@ 0xfa
 8006bc0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006bc2:	e2b6      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8006bc4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006bc8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006bca:	e2b2      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bd8:	d106      	bne.n	8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8006bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006be0:	d102      	bne.n	8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8006be2:	4b0c      	ldr	r3, [pc, #48]	@ (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8006be4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006be6:	e2a4      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006be8:	4b08      	ldr	r3, [pc, #32]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006bea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bee:	f003 0302 	and.w	r3, r3, #2
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d107      	bne.n	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006bfc:	d103      	bne.n	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8006bfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c02:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c04:	e295      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006c06:	2300      	movs	r3, #0
 8006c08:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c0a:	e292      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8006c0c:	46020c00 	.word	0x46020c00
 8006c10:	0800b244 	.word	0x0800b244
 8006c14:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006c18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c1c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006c20:	430b      	orrs	r3, r1
 8006c22:	d147      	bne.n	8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006c24:	4b9a      	ldr	r3, [pc, #616]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c2a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006c2e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d103      	bne.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006c36:	f7fd ff3b 	bl	8004ab0 <HAL_RCC_GetPCLK1Freq>
 8006c3a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c3c:	e279      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006c3e:	4b94      	ldr	r3, [pc, #592]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006c40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c4c:	d112      	bne.n	8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c50:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c54:	d10e      	bne.n	8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c56:	4b8e      	ldr	r3, [pc, #568]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006c58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c64:	d102      	bne.n	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
      {
        frequency = LSI_VALUE / 128U;
 8006c66:	23fa      	movs	r3, #250	@ 0xfa
 8006c68:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c6a:	e262      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8006c6c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006c70:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c72:	e25e      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006c74:	4b86      	ldr	r3, [pc, #536]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c80:	d106      	bne.n	8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
 8006c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c84:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006c88:	d102      	bne.n	8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
    {
      frequency = HSI_VALUE;
 8006c8a:	4b82      	ldr	r3, [pc, #520]	@ (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8006c8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c8e:	e250      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006c90:	4b7f      	ldr	r3, [pc, #508]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006c92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c96:	f003 0302 	and.w	r3, r3, #2
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d107      	bne.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006ca4:	d103      	bne.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
    {
      frequency = LSE_VALUE;
 8006ca6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006caa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cac:	e241      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cb2:	e23e      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006cb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cb8:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8006cbc:	430b      	orrs	r3, r1
 8006cbe:	d12d      	bne.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006cc0:	4b73      	ldr	r3, [pc, #460]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006cc6:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006cca:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006ccc:	4b70      	ldr	r3, [pc, #448]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cd8:	d105      	bne.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8006cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d102      	bne.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
    {
      frequency = HSE_VALUE;
 8006ce0:	4b6c      	ldr	r3, [pc, #432]	@ (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8006ce2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ce4:	e225      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006cec:	d107      	bne.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7fe fcdc 	bl	80056b0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cfc:	e219      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8006cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d04:	d107      	bne.n	8006d16 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d06:	f107 0318 	add.w	r3, r7, #24
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fe fe2a 	bl	8005964 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d14:	e20d      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006d16:	2300      	movs	r3, #0
 8006d18:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d1a:	e20a      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006d1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d20:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8006d24:	430b      	orrs	r3, r1
 8006d26:	d156      	bne.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006d28:	4b59      	ldr	r3, [pc, #356]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d2e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006d32:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d3a:	d028      	beq.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0xec2>
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d42:	d845      	bhi.n	8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8006d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d4a:	d013      	beq.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d52:	d83d      	bhi.n	8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8006d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d004      	beq.n	8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d60:	d004      	beq.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 8006d62:	e035      	b.n	8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8006d64:	f7fd feb8 	bl	8004ad8 <HAL_RCC_GetPCLK2Freq>
 8006d68:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006d6a:	e1e2      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006d6c:	f7fd fd84 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 8006d70:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006d72:	e1de      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d74:	4b46      	ldr	r3, [pc, #280]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d80:	d102      	bne.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
        {
          frequency = HSI_VALUE;
 8006d82:	4b44      	ldr	r3, [pc, #272]	@ (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8006d84:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d86:	e1d4      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d8c:	e1d1      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006d8e:	4b40      	ldr	r3, [pc, #256]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 0320 	and.w	r3, r3, #32
 8006d96:	2b20      	cmp	r3, #32
 8006d98:	d117      	bne.n	8006dca <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d9a:	4b3d      	ldr	r3, [pc, #244]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d005      	beq.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
 8006da6:	4b3a      	ldr	r3, [pc, #232]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	0e1b      	lsrs	r3, r3, #24
 8006dac:	f003 030f 	and.w	r3, r3, #15
 8006db0:	e006      	b.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8006db2:	4b37      	ldr	r3, [pc, #220]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006db4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006db8:	041b      	lsls	r3, r3, #16
 8006dba:	0e1b      	lsrs	r3, r3, #24
 8006dbc:	f003 030f 	and.w	r3, r3, #15
 8006dc0:	4a35      	ldr	r2, [pc, #212]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8006dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dc6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006dc8:	e1b3      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006dce:	e1b0      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006dd4:	e1ad      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006dd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dda:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8006dde:	430b      	orrs	r3, r1
 8006de0:	d15c      	bne.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006de2:	4b2b      	ldr	r3, [pc, #172]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006de8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006dec:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006df4:	d028      	beq.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 8006df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006dfc:	d845      	bhi.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e04:	d013      	beq.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8006e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e0c:	d83d      	bhi.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d004      	beq.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 8006e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e1a:	d004      	beq.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 8006e1c:	e035      	b.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8006e1e:	f7fd fe47 	bl	8004ab0 <HAL_RCC_GetPCLK1Freq>
 8006e22:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006e24:	e185      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006e26:	f7fd fd27 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 8006e2a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006e2c:	e181      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e2e:	4b18      	ldr	r3, [pc, #96]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e3a:	d102      	bne.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0xf76>
        {
          frequency = HSI_VALUE;
 8006e3c:	4b15      	ldr	r3, [pc, #84]	@ (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8006e3e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006e40:	e177      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006e42:	2300      	movs	r3, #0
 8006e44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e46:	e174      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006e48:	4b11      	ldr	r3, [pc, #68]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0320 	and.w	r3, r3, #32
 8006e50:	2b20      	cmp	r3, #32
 8006e52:	d117      	bne.n	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e54:	4b0e      	ldr	r3, [pc, #56]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d005      	beq.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0xfa0>
 8006e60:	4b0b      	ldr	r3, [pc, #44]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	0e1b      	lsrs	r3, r3, #24
 8006e66:	f003 030f 	and.w	r3, r3, #15
 8006e6a:	e006      	b.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 8006e6c:	4b08      	ldr	r3, [pc, #32]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006e6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e72:	041b      	lsls	r3, r3, #16
 8006e74:	0e1b      	lsrs	r3, r3, #24
 8006e76:	f003 030f 	and.w	r3, r3, #15
 8006e7a:	4a07      	ldr	r2, [pc, #28]	@ (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8006e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e80:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006e82:	e156      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006e84:	2300      	movs	r3, #0
 8006e86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e88:	e153      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e8e:	e150      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8006e90:	46020c00 	.word	0x46020c00
 8006e94:	00f42400 	.word	0x00f42400
 8006e98:	0800b244 	.word	0x0800b244
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8006e9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ea0:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8006ea4:	430b      	orrs	r3, r1
 8006ea6:	d176      	bne.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006ea8:	4ba4      	ldr	r3, [pc, #656]	@ (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006eaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006eae:	f003 0318 	and.w	r3, r3, #24
 8006eb2:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb6:	2b18      	cmp	r3, #24
 8006eb8:	d86a      	bhi.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8006eba:	a201      	add	r2, pc, #4	@ (adr r2, 8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8006ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec0:	08006f25 	.word	0x08006f25
 8006ec4:	08006f91 	.word	0x08006f91
 8006ec8:	08006f91 	.word	0x08006f91
 8006ecc:	08006f91 	.word	0x08006f91
 8006ed0:	08006f91 	.word	0x08006f91
 8006ed4:	08006f91 	.word	0x08006f91
 8006ed8:	08006f91 	.word	0x08006f91
 8006edc:	08006f91 	.word	0x08006f91
 8006ee0:	08006f2d 	.word	0x08006f2d
 8006ee4:	08006f91 	.word	0x08006f91
 8006ee8:	08006f91 	.word	0x08006f91
 8006eec:	08006f91 	.word	0x08006f91
 8006ef0:	08006f91 	.word	0x08006f91
 8006ef4:	08006f91 	.word	0x08006f91
 8006ef8:	08006f91 	.word	0x08006f91
 8006efc:	08006f91 	.word	0x08006f91
 8006f00:	08006f35 	.word	0x08006f35
 8006f04:	08006f91 	.word	0x08006f91
 8006f08:	08006f91 	.word	0x08006f91
 8006f0c:	08006f91 	.word	0x08006f91
 8006f10:	08006f91 	.word	0x08006f91
 8006f14:	08006f91 	.word	0x08006f91
 8006f18:	08006f91 	.word	0x08006f91
 8006f1c:	08006f91 	.word	0x08006f91
 8006f20:	08006f4f 	.word	0x08006f4f
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8006f24:	f7fd fdec 	bl	8004b00 <HAL_RCC_GetPCLK3Freq>
 8006f28:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006f2a:	e102      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006f2c:	f7fd fca4 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 8006f30:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006f32:	e0fe      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f34:	4b81      	ldr	r3, [pc, #516]	@ (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f40:	d102      	bne.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x107c>
        {
          frequency = HSI_VALUE;
 8006f42:	4b7f      	ldr	r3, [pc, #508]	@ (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8006f44:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006f46:	e0f4      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f4c:	e0f1      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006f4e:	4b7b      	ldr	r3, [pc, #492]	@ (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0320 	and.w	r3, r3, #32
 8006f56:	2b20      	cmp	r3, #32
 8006f58:	d117      	bne.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x10be>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f5a:	4b78      	ldr	r3, [pc, #480]	@ (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d005      	beq.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8006f66:	4b75      	ldr	r3, [pc, #468]	@ (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	0e1b      	lsrs	r3, r3, #24
 8006f6c:	f003 030f 	and.w	r3, r3, #15
 8006f70:	e006      	b.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 8006f72:	4b72      	ldr	r3, [pc, #456]	@ (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006f74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f78:	041b      	lsls	r3, r3, #16
 8006f7a:	0e1b      	lsrs	r3, r3, #24
 8006f7c:	f003 030f 	and.w	r3, r3, #15
 8006f80:	4a70      	ldr	r2, [pc, #448]	@ (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8006f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f86:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006f88:	e0d3      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f8e:	e0d0      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8006f90:	2300      	movs	r3, #0
 8006f92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f94:	e0cd      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8006f96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f9a:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8006f9e:	430b      	orrs	r3, r1
 8006fa0:	d155      	bne.n	800704e <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006fa2:	4b66      	ldr	r3, [pc, #408]	@ (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006fa4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006fa8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006fac:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006fb4:	d013      	beq.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 8006fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006fbc:	d844      	bhi.n	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8006fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fc4:	d013      	beq.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fcc:	d83c      	bhi.n	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8006fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d014      	beq.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fda:	d014      	beq.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8006fdc:	e034      	b.n	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fde:	f107 0318 	add.w	r3, r7, #24
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7fe fcbe 	bl	8005964 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fec:	e0a1      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fe fb5c 	bl	80056b0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ffa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ffc:	e099      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006ffe:	f7fd fc3b 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 8007002:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007004:	e095      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007006:	4b4d      	ldr	r3, [pc, #308]	@ (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 0320 	and.w	r3, r3, #32
 800700e:	2b20      	cmp	r3, #32
 8007010:	d117      	bne.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0x1176>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007012:	4b4a      	ldr	r3, [pc, #296]	@ (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d005      	beq.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x115e>
 800701e:	4b47      	ldr	r3, [pc, #284]	@ (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	0e1b      	lsrs	r3, r3, #24
 8007024:	f003 030f 	and.w	r3, r3, #15
 8007028:	e006      	b.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 800702a:	4b44      	ldr	r3, [pc, #272]	@ (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800702c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007030:	041b      	lsls	r3, r3, #16
 8007032:	0e1b      	lsrs	r3, r3, #24
 8007034:	f003 030f 	and.w	r3, r3, #15
 8007038:	4a42      	ldr	r2, [pc, #264]	@ (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 800703a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800703e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007040:	e077      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8007042:	2300      	movs	r3, #0
 8007044:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007046:	e074      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8007048:	2300      	movs	r3, #0
 800704a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800704c:	e071      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800704e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007052:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8007056:	430b      	orrs	r3, r1
 8007058:	d131      	bne.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800705a:	4b38      	ldr	r3, [pc, #224]	@ (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800705c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007060:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007064:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007066:	4b35      	ldr	r3, [pc, #212]	@ (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007068:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800706c:	f003 0302 	and.w	r3, r3, #2
 8007070:	2b02      	cmp	r3, #2
 8007072:	d106      	bne.n	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8007074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007076:	2b00      	cmp	r3, #0
 8007078:	d103      	bne.n	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
    {
      frequency = LSE_VALUE;
 800707a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800707e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007080:	e057      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007082:	4b2e      	ldr	r3, [pc, #184]	@ (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007084:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007088:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800708c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007090:	d112      	bne.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
 8007092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007094:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007098:	d10e      	bne.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800709a:	4b28      	ldr	r3, [pc, #160]	@ (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800709c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070a8:	d102      	bne.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
      {
        frequency = LSI_VALUE / 128U;
 80070aa:	23fa      	movs	r3, #250	@ 0xfa
 80070ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80070ae:	e040      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 80070b0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80070b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80070b6:	e03c      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80070b8:	2300      	movs	r3, #0
 80070ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80070bc:	e039      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80070be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070c2:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80070c6:	430b      	orrs	r3, r1
 80070c8:	d131      	bne.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80070ca:	4b1c      	ldr	r3, [pc, #112]	@ (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80070cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80070d0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80070d4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80070d6:	4b19      	ldr	r3, [pc, #100]	@ (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070e2:	d105      	bne.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 80070e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d102      	bne.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      frequency = HSI48_VALUE;
 80070ea:	4b17      	ldr	r3, [pc, #92]	@ (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 80070ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80070ee:	e020      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80070f0:	4b12      	ldr	r3, [pc, #72]	@ (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070fc:	d106      	bne.n	800710c <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 80070fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007100:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007104:	d102      	bne.n	800710c <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007106:	4b11      	ldr	r3, [pc, #68]	@ (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007108:	637b      	str	r3, [r7, #52]	@ 0x34
 800710a:	e012      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800710c:	4b0b      	ldr	r3, [pc, #44]	@ (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007114:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007118:	d106      	bne.n	8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
 800711a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007120:	d102      	bne.n	8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
    {
      frequency = HSI_VALUE;
 8007122:	4b07      	ldr	r3, [pc, #28]	@ (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8007124:	637b      	str	r3, [r7, #52]	@ 0x34
 8007126:	e004      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8007128:	2300      	movs	r3, #0
 800712a:	637b      	str	r3, [r7, #52]	@ 0x34
 800712c:	e001      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800712e:	2300      	movs	r3, #0
 8007130:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8007132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007134:	4618      	mov	r0, r3
 8007136:	3738      	adds	r7, #56	@ 0x38
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	46020c00 	.word	0x46020c00
 8007140:	00f42400 	.word	0x00f42400
 8007144:	0800b244 	.word	0x0800b244
 8007148:	02dc6c00 	.word	0x02dc6c00
 800714c:	016e3600 	.word	0x016e3600

08007150 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007158:	4b47      	ldr	r3, [pc, #284]	@ (8007278 <RCCEx_PLL2_Config+0x128>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a46      	ldr	r2, [pc, #280]	@ (8007278 <RCCEx_PLL2_Config+0x128>)
 800715e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007162:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007164:	f7fa ff94 	bl	8002090 <HAL_GetTick>
 8007168:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800716a:	e008      	b.n	800717e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800716c:	f7fa ff90 	bl	8002090 <HAL_GetTick>
 8007170:	4602      	mov	r2, r0
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	2b02      	cmp	r3, #2
 8007178:	d901      	bls.n	800717e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e077      	b.n	800726e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800717e:	4b3e      	ldr	r3, [pc, #248]	@ (8007278 <RCCEx_PLL2_Config+0x128>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1f0      	bne.n	800716c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800718a:	4b3b      	ldr	r3, [pc, #236]	@ (8007278 <RCCEx_PLL2_Config+0x128>)
 800718c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800718e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007192:	f023 0303 	bic.w	r3, r3, #3
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	6811      	ldr	r1, [r2, #0]
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	6852      	ldr	r2, [r2, #4]
 800719e:	3a01      	subs	r2, #1
 80071a0:	0212      	lsls	r2, r2, #8
 80071a2:	430a      	orrs	r2, r1
 80071a4:	4934      	ldr	r1, [pc, #208]	@ (8007278 <RCCEx_PLL2_Config+0x128>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80071aa:	4b33      	ldr	r3, [pc, #204]	@ (8007278 <RCCEx_PLL2_Config+0x128>)
 80071ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071ae:	4b33      	ldr	r3, [pc, #204]	@ (800727c <RCCEx_PLL2_Config+0x12c>)
 80071b0:	4013      	ands	r3, r2
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	6892      	ldr	r2, [r2, #8]
 80071b6:	3a01      	subs	r2, #1
 80071b8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	68d2      	ldr	r2, [r2, #12]
 80071c0:	3a01      	subs	r2, #1
 80071c2:	0252      	lsls	r2, r2, #9
 80071c4:	b292      	uxth	r2, r2
 80071c6:	4311      	orrs	r1, r2
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	6912      	ldr	r2, [r2, #16]
 80071cc:	3a01      	subs	r2, #1
 80071ce:	0412      	lsls	r2, r2, #16
 80071d0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80071d4:	4311      	orrs	r1, r2
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	6952      	ldr	r2, [r2, #20]
 80071da:	3a01      	subs	r2, #1
 80071dc:	0612      	lsls	r2, r2, #24
 80071de:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80071e2:	430a      	orrs	r2, r1
 80071e4:	4924      	ldr	r1, [pc, #144]	@ (8007278 <RCCEx_PLL2_Config+0x128>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80071ea:	4b23      	ldr	r3, [pc, #140]	@ (8007278 <RCCEx_PLL2_Config+0x128>)
 80071ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ee:	f023 020c 	bic.w	r2, r3, #12
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	4920      	ldr	r1, [pc, #128]	@ (8007278 <RCCEx_PLL2_Config+0x128>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80071fc:	4b1e      	ldr	r3, [pc, #120]	@ (8007278 <RCCEx_PLL2_Config+0x128>)
 80071fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a1b      	ldr	r3, [r3, #32]
 8007204:	491c      	ldr	r1, [pc, #112]	@ (8007278 <RCCEx_PLL2_Config+0x128>)
 8007206:	4313      	orrs	r3, r2
 8007208:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800720a:	4b1b      	ldr	r3, [pc, #108]	@ (8007278 <RCCEx_PLL2_Config+0x128>)
 800720c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720e:	4a1a      	ldr	r2, [pc, #104]	@ (8007278 <RCCEx_PLL2_Config+0x128>)
 8007210:	f023 0310 	bic.w	r3, r3, #16
 8007214:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007216:	4b18      	ldr	r3, [pc, #96]	@ (8007278 <RCCEx_PLL2_Config+0x128>)
 8007218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800721a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800721e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	69d2      	ldr	r2, [r2, #28]
 8007226:	00d2      	lsls	r2, r2, #3
 8007228:	4913      	ldr	r1, [pc, #76]	@ (8007278 <RCCEx_PLL2_Config+0x128>)
 800722a:	4313      	orrs	r3, r2
 800722c:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800722e:	4b12      	ldr	r3, [pc, #72]	@ (8007278 <RCCEx_PLL2_Config+0x128>)
 8007230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007232:	4a11      	ldr	r2, [pc, #68]	@ (8007278 <RCCEx_PLL2_Config+0x128>)
 8007234:	f043 0310 	orr.w	r3, r3, #16
 8007238:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800723a:	4b0f      	ldr	r3, [pc, #60]	@ (8007278 <RCCEx_PLL2_Config+0x128>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a0e      	ldr	r2, [pc, #56]	@ (8007278 <RCCEx_PLL2_Config+0x128>)
 8007240:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007244:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007246:	f7fa ff23 	bl	8002090 <HAL_GetTick>
 800724a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800724c:	e008      	b.n	8007260 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800724e:	f7fa ff1f 	bl	8002090 <HAL_GetTick>
 8007252:	4602      	mov	r2, r0
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	2b02      	cmp	r3, #2
 800725a:	d901      	bls.n	8007260 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e006      	b.n	800726e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007260:	4b05      	ldr	r3, [pc, #20]	@ (8007278 <RCCEx_PLL2_Config+0x128>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007268:	2b00      	cmp	r3, #0
 800726a:	d0f0      	beq.n	800724e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800726c:	2300      	movs	r3, #0

}
 800726e:	4618      	mov	r0, r3
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	46020c00 	.word	0x46020c00
 800727c:	80800000 	.word	0x80800000

08007280 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007288:	4b47      	ldr	r3, [pc, #284]	@ (80073a8 <RCCEx_PLL3_Config+0x128>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a46      	ldr	r2, [pc, #280]	@ (80073a8 <RCCEx_PLL3_Config+0x128>)
 800728e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007292:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007294:	f7fa fefc 	bl	8002090 <HAL_GetTick>
 8007298:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800729a:	e008      	b.n	80072ae <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800729c:	f7fa fef8 	bl	8002090 <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d901      	bls.n	80072ae <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	e077      	b.n	800739e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80072ae:	4b3e      	ldr	r3, [pc, #248]	@ (80073a8 <RCCEx_PLL3_Config+0x128>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1f0      	bne.n	800729c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80072ba:	4b3b      	ldr	r3, [pc, #236]	@ (80073a8 <RCCEx_PLL3_Config+0x128>)
 80072bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072be:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80072c2:	f023 0303 	bic.w	r3, r3, #3
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	6811      	ldr	r1, [r2, #0]
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	6852      	ldr	r2, [r2, #4]
 80072ce:	3a01      	subs	r2, #1
 80072d0:	0212      	lsls	r2, r2, #8
 80072d2:	430a      	orrs	r2, r1
 80072d4:	4934      	ldr	r1, [pc, #208]	@ (80073a8 <RCCEx_PLL3_Config+0x128>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	630b      	str	r3, [r1, #48]	@ 0x30
 80072da:	4b33      	ldr	r3, [pc, #204]	@ (80073a8 <RCCEx_PLL3_Config+0x128>)
 80072dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072de:	4b33      	ldr	r3, [pc, #204]	@ (80073ac <RCCEx_PLL3_Config+0x12c>)
 80072e0:	4013      	ands	r3, r2
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	6892      	ldr	r2, [r2, #8]
 80072e6:	3a01      	subs	r2, #1
 80072e8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	68d2      	ldr	r2, [r2, #12]
 80072f0:	3a01      	subs	r2, #1
 80072f2:	0252      	lsls	r2, r2, #9
 80072f4:	b292      	uxth	r2, r2
 80072f6:	4311      	orrs	r1, r2
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	6912      	ldr	r2, [r2, #16]
 80072fc:	3a01      	subs	r2, #1
 80072fe:	0412      	lsls	r2, r2, #16
 8007300:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007304:	4311      	orrs	r1, r2
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	6952      	ldr	r2, [r2, #20]
 800730a:	3a01      	subs	r2, #1
 800730c:	0612      	lsls	r2, r2, #24
 800730e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007312:	430a      	orrs	r2, r1
 8007314:	4924      	ldr	r1, [pc, #144]	@ (80073a8 <RCCEx_PLL3_Config+0x128>)
 8007316:	4313      	orrs	r3, r2
 8007318:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800731a:	4b23      	ldr	r3, [pc, #140]	@ (80073a8 <RCCEx_PLL3_Config+0x128>)
 800731c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800731e:	f023 020c 	bic.w	r2, r3, #12
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	4920      	ldr	r1, [pc, #128]	@ (80073a8 <RCCEx_PLL3_Config+0x128>)
 8007328:	4313      	orrs	r3, r2
 800732a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800732c:	4b1e      	ldr	r3, [pc, #120]	@ (80073a8 <RCCEx_PLL3_Config+0x128>)
 800732e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6a1b      	ldr	r3, [r3, #32]
 8007334:	491c      	ldr	r1, [pc, #112]	@ (80073a8 <RCCEx_PLL3_Config+0x128>)
 8007336:	4313      	orrs	r3, r2
 8007338:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800733a:	4b1b      	ldr	r3, [pc, #108]	@ (80073a8 <RCCEx_PLL3_Config+0x128>)
 800733c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800733e:	4a1a      	ldr	r2, [pc, #104]	@ (80073a8 <RCCEx_PLL3_Config+0x128>)
 8007340:	f023 0310 	bic.w	r3, r3, #16
 8007344:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007346:	4b18      	ldr	r3, [pc, #96]	@ (80073a8 <RCCEx_PLL3_Config+0x128>)
 8007348:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800734a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800734e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	69d2      	ldr	r2, [r2, #28]
 8007356:	00d2      	lsls	r2, r2, #3
 8007358:	4913      	ldr	r1, [pc, #76]	@ (80073a8 <RCCEx_PLL3_Config+0x128>)
 800735a:	4313      	orrs	r3, r2
 800735c:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800735e:	4b12      	ldr	r3, [pc, #72]	@ (80073a8 <RCCEx_PLL3_Config+0x128>)
 8007360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007362:	4a11      	ldr	r2, [pc, #68]	@ (80073a8 <RCCEx_PLL3_Config+0x128>)
 8007364:	f043 0310 	orr.w	r3, r3, #16
 8007368:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800736a:	4b0f      	ldr	r3, [pc, #60]	@ (80073a8 <RCCEx_PLL3_Config+0x128>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a0e      	ldr	r2, [pc, #56]	@ (80073a8 <RCCEx_PLL3_Config+0x128>)
 8007370:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007374:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007376:	f7fa fe8b 	bl	8002090 <HAL_GetTick>
 800737a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800737c:	e008      	b.n	8007390 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800737e:	f7fa fe87 	bl	8002090 <HAL_GetTick>
 8007382:	4602      	mov	r2, r0
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	2b02      	cmp	r3, #2
 800738a:	d901      	bls.n	8007390 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800738c:	2303      	movs	r3, #3
 800738e:	e006      	b.n	800739e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007390:	4b05      	ldr	r3, [pc, #20]	@ (80073a8 <RCCEx_PLL3_Config+0x128>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d0f0      	beq.n	800737e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	46020c00 	.word	0x46020c00
 80073ac:	80800000 	.word	0x80800000

080073b0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d101      	bne.n	80073c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e0fb      	b.n	80075ba <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a7f      	ldr	r2, [pc, #508]	@ (80075c4 <HAL_SPI_Init+0x214>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d004      	beq.n	80073d6 <HAL_SPI_Init+0x26>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a7d      	ldr	r2, [pc, #500]	@ (80075c8 <HAL_SPI_Init+0x218>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	e000      	b.n	80073d8 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 80073d6:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a78      	ldr	r2, [pc, #480]	@ (80075c4 <HAL_SPI_Init+0x214>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d004      	beq.n	80073f2 <HAL_SPI_Init+0x42>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a76      	ldr	r2, [pc, #472]	@ (80075c8 <HAL_SPI_Init+0x218>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d105      	bne.n	80073fe <HAL_SPI_Init+0x4e>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	2b0f      	cmp	r3, #15
 80073f8:	d901      	bls.n	80073fe <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e0dd      	b.n	80075ba <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fbca 	bl	8007b98 <SPI_GetPacketSize>
 8007404:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a6e      	ldr	r2, [pc, #440]	@ (80075c4 <HAL_SPI_Init+0x214>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d004      	beq.n	800741a <HAL_SPI_Init+0x6a>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a6c      	ldr	r2, [pc, #432]	@ (80075c8 <HAL_SPI_Init+0x218>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d102      	bne.n	8007420 <HAL_SPI_Init+0x70>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2b08      	cmp	r3, #8
 800741e:	d816      	bhi.n	800744e <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007424:	4a69      	ldr	r2, [pc, #420]	@ (80075cc <HAL_SPI_Init+0x21c>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d00e      	beq.n	8007448 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a68      	ldr	r2, [pc, #416]	@ (80075d0 <HAL_SPI_Init+0x220>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d009      	beq.n	8007448 <HAL_SPI_Init+0x98>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a66      	ldr	r2, [pc, #408]	@ (80075d4 <HAL_SPI_Init+0x224>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d004      	beq.n	8007448 <HAL_SPI_Init+0x98>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a65      	ldr	r2, [pc, #404]	@ (80075d8 <HAL_SPI_Init+0x228>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d104      	bne.n	8007452 <HAL_SPI_Init+0xa2>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2b10      	cmp	r3, #16
 800744c:	d901      	bls.n	8007452 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	e0b3      	b.n	80075ba <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b00      	cmp	r3, #0
 800745c:	d106      	bne.n	800746c <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7fa f97e 	bl	8001768 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2202      	movs	r2, #2
 8007470:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f022 0201 	bic.w	r2, r2, #1
 8007482:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800748e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007498:	d119      	bne.n	80074ce <HAL_SPI_Init+0x11e>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074a2:	d103      	bne.n	80074ac <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d008      	beq.n	80074be <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10c      	bne.n	80074ce <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80074b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074bc:	d107      	bne.n	80074ce <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80074cc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00f      	beq.n	80074fa <HAL_SPI_Init+0x14a>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	2b06      	cmp	r3, #6
 80074e0:	d90b      	bls.n	80074fa <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	430a      	orrs	r2, r1
 80074f6:	601a      	str	r2, [r3, #0]
 80074f8:	e007      	b.n	800750a <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007508:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	69da      	ldr	r2, [r3, #28]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007512:	431a      	orrs	r2, r3
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	431a      	orrs	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800751c:	ea42 0103 	orr.w	r1, r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	68da      	ldr	r2, [r3, #12]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	430a      	orrs	r2, r1
 800752a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007534:	431a      	orrs	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800753a:	431a      	orrs	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	431a      	orrs	r2, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	431a      	orrs	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	695b      	ldr	r3, [r3, #20]
 800754c:	431a      	orrs	r2, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	431a      	orrs	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	431a      	orrs	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800755e:	431a      	orrs	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	431a      	orrs	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800756a:	431a      	orrs	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007570:	431a      	orrs	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007576:	ea42 0103 	orr.w	r1, r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	430a      	orrs	r2, r1
 8007584:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00a      	beq.n	80075a8 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	430a      	orrs	r2, r1
 80075a6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	46002000 	.word	0x46002000
 80075c8:	56002000 	.word	0x56002000
 80075cc:	40013000 	.word	0x40013000
 80075d0:	50013000 	.word	0x50013000
 80075d4:	40003800 	.word	0x40003800
 80075d8:	50003800 	.word	0x50003800

080075dc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b088      	sub	sp, #32
 80075e0:	af02      	add	r7, sp, #8
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	603b      	str	r3, [r7, #0]
 80075e8:	4613      	mov	r3, r2
 80075ea:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	3320      	adds	r3, #32
 80075f2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075f4:	f7fa fd4c 	bl	8002090 <HAL_GetTick>
 80075f8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b01      	cmp	r3, #1
 8007604:	d001      	beq.n	800760a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8007606:	2302      	movs	r3, #2
 8007608:	e1f3      	b.n	80079f2 <HAL_SPI_Transmit+0x416>
  }

  if ((pData == NULL) || (Size == 0UL))
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d002      	beq.n	8007616 <HAL_SPI_Transmit+0x3a>
 8007610:	88fb      	ldrh	r3, [r7, #6]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d101      	bne.n	800761a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e1eb      	b.n	80079f2 <HAL_SPI_Transmit+0x416>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007620:	2b01      	cmp	r3, #1
 8007622:	d101      	bne.n	8007628 <HAL_SPI_Transmit+0x4c>
 8007624:	2302      	movs	r3, #2
 8007626:	e1e4      	b.n	80079f2 <HAL_SPI_Transmit+0x416>
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2203      	movs	r2, #3
 8007634:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2200      	movs	r2, #0
 800763c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	88fa      	ldrh	r2, [r7, #6]
 800764a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	88fa      	ldrh	r2, [r7, #6]
 8007652:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2200      	movs	r2, #0
 8007676:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007680:	d108      	bne.n	8007694 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007690:	601a      	str	r2, [r3, #0]
 8007692:	e009      	b.n	80076a8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80076a6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	0c1b      	lsrs	r3, r3, #16
 80076b0:	041b      	lsls	r3, r3, #16
 80076b2:	88f9      	ldrh	r1, [r7, #6]
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	6812      	ldr	r2, [r2, #0]
 80076b8:	430b      	orrs	r3, r1
 80076ba:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f042 0201 	orr.w	r2, r2, #1
 80076ca:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	69db      	ldr	r3, [r3, #28]
 80076d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10c      	bne.n	80076f4 <HAL_SPI_Transmit+0x118>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076e2:	d107      	bne.n	80076f4 <HAL_SPI_Transmit+0x118>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	2b0f      	cmp	r3, #15
 80076fa:	d95b      	bls.n	80077b4 <HAL_SPI_Transmit+0x1d8>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a8f      	ldr	r2, [pc, #572]	@ (8007940 <HAL_SPI_Transmit+0x364>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d04f      	beq.n	80077a6 <HAL_SPI_Transmit+0x1ca>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a8e      	ldr	r2, [pc, #568]	@ (8007944 <HAL_SPI_Transmit+0x368>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d04a      	beq.n	80077a6 <HAL_SPI_Transmit+0x1ca>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a8c      	ldr	r2, [pc, #560]	@ (8007948 <HAL_SPI_Transmit+0x36c>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d045      	beq.n	80077a6 <HAL_SPI_Transmit+0x1ca>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a8b      	ldr	r2, [pc, #556]	@ (800794c <HAL_SPI_Transmit+0x370>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d147      	bne.n	80077b4 <HAL_SPI_Transmit+0x1d8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007724:	e03f      	b.n	80077a6 <HAL_SPI_Transmit+0x1ca>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	695b      	ldr	r3, [r3, #20]
 800772c:	f003 0302 	and.w	r3, r3, #2
 8007730:	2b02      	cmp	r3, #2
 8007732:	d114      	bne.n	800775e <HAL_SPI_Transmit+0x182>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	6812      	ldr	r2, [r2, #0]
 800773e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007744:	1d1a      	adds	r2, r3, #4
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007750:	b29b      	uxth	r3, r3
 8007752:	3b01      	subs	r3, #1
 8007754:	b29a      	uxth	r2, r3
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800775c:	e023      	b.n	80077a6 <HAL_SPI_Transmit+0x1ca>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800775e:	f7fa fc97 	bl	8002090 <HAL_GetTick>
 8007762:	4602      	mov	r2, r0
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	683a      	ldr	r2, [r7, #0]
 800776a:	429a      	cmp	r2, r3
 800776c:	d803      	bhi.n	8007776 <HAL_SPI_Transmit+0x19a>
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007774:	d102      	bne.n	800777c <HAL_SPI_Transmit+0x1a0>
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d114      	bne.n	80077a6 <HAL_SPI_Transmit+0x1ca>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f000 f93d 	bl	80079fc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007788:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	e125      	b.n	80079f2 <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1b9      	bne.n	8007726 <HAL_SPI_Transmit+0x14a>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80077b2:	e0f8      	b.n	80079a6 <HAL_SPI_Transmit+0x3ca>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	2b07      	cmp	r3, #7
 80077ba:	f240 80ed 	bls.w	8007998 <HAL_SPI_Transmit+0x3bc>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80077be:	e05d      	b.n	800787c <HAL_SPI_Transmit+0x2a0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	695b      	ldr	r3, [r3, #20]
 80077c6:	f003 0302 	and.w	r3, r3, #2
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d132      	bne.n	8007834 <HAL_SPI_Transmit+0x258>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d918      	bls.n	800780c <HAL_SPI_Transmit+0x230>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d014      	beq.n	800780c <HAL_SPI_Transmit+0x230>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	6812      	ldr	r2, [r2, #0]
 80077ec:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077f2:	1d1a      	adds	r2, r3, #4
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80077fe:	b29b      	uxth	r3, r3
 8007800:	3b02      	subs	r3, #2
 8007802:	b29a      	uxth	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800780a:	e037      	b.n	800787c <HAL_SPI_Transmit+0x2a0>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007810:	881a      	ldrh	r2, [r3, #0]
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800781a:	1c9a      	adds	r2, r3, #2
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007826:	b29b      	uxth	r3, r3
 8007828:	3b01      	subs	r3, #1
 800782a:	b29a      	uxth	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007832:	e023      	b.n	800787c <HAL_SPI_Transmit+0x2a0>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007834:	f7fa fc2c 	bl	8002090 <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	683a      	ldr	r2, [r7, #0]
 8007840:	429a      	cmp	r2, r3
 8007842:	d803      	bhi.n	800784c <HAL_SPI_Transmit+0x270>
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800784a:	d102      	bne.n	8007852 <HAL_SPI_Transmit+0x276>
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d114      	bne.n	800787c <HAL_SPI_Transmit+0x2a0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f000 f8d2 	bl	80079fc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800785e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	e0ba      	b.n	80079f2 <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007882:	b29b      	uxth	r3, r3
 8007884:	2b00      	cmp	r3, #0
 8007886:	d19b      	bne.n	80077c0 <HAL_SPI_Transmit+0x1e4>
 8007888:	e08d      	b.n	80079a6 <HAL_SPI_Transmit+0x3ca>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	695b      	ldr	r3, [r3, #20]
 8007890:	f003 0302 	and.w	r3, r3, #2
 8007894:	2b02      	cmp	r3, #2
 8007896:	d15b      	bne.n	8007950 <HAL_SPI_Transmit+0x374>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800789e:	b29b      	uxth	r3, r3
 80078a0:	2b03      	cmp	r3, #3
 80078a2:	d918      	bls.n	80078d6 <HAL_SPI_Transmit+0x2fa>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078a8:	2b40      	cmp	r3, #64	@ 0x40
 80078aa:	d914      	bls.n	80078d6 <HAL_SPI_Transmit+0x2fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6812      	ldr	r2, [r2, #0]
 80078b6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078bc:	1d1a      	adds	r2, r3, #4
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	3b04      	subs	r3, #4
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80078d4:	e060      	b.n	8007998 <HAL_SPI_Transmit+0x3bc>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80078dc:	b29b      	uxth	r3, r3
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d917      	bls.n	8007912 <HAL_SPI_Transmit+0x336>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d013      	beq.n	8007912 <HAL_SPI_Transmit+0x336>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078ee:	881a      	ldrh	r2, [r3, #0]
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078f8:	1c9a      	adds	r2, r3, #2
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007904:	b29b      	uxth	r3, r3
 8007906:	3b02      	subs	r3, #2
 8007908:	b29a      	uxth	r2, r3
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007910:	e042      	b.n	8007998 <HAL_SPI_Transmit+0x3bc>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	3320      	adds	r3, #32
 800791c:	7812      	ldrb	r2, [r2, #0]
 800791e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007924:	1c5a      	adds	r2, r3, #1
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007930:	b29b      	uxth	r3, r3
 8007932:	3b01      	subs	r3, #1
 8007934:	b29a      	uxth	r2, r3
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800793c:	e02c      	b.n	8007998 <HAL_SPI_Transmit+0x3bc>
 800793e:	bf00      	nop
 8007940:	40013000 	.word	0x40013000
 8007944:	50013000 	.word	0x50013000
 8007948:	40003800 	.word	0x40003800
 800794c:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007950:	f7fa fb9e 	bl	8002090 <HAL_GetTick>
 8007954:	4602      	mov	r2, r0
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	429a      	cmp	r2, r3
 800795e:	d803      	bhi.n	8007968 <HAL_SPI_Transmit+0x38c>
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007966:	d102      	bne.n	800796e <HAL_SPI_Transmit+0x392>
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d114      	bne.n	8007998 <HAL_SPI_Transmit+0x3bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f000 f844 	bl	80079fc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800797a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2200      	movs	r2, #0
 8007990:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007994:	2303      	movs	r3, #3
 8007996:	e02c      	b.n	80079f2 <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800799e:	b29b      	uxth	r3, r3
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f47f af72 	bne.w	800788a <HAL_SPI_Transmit+0x2ae>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	9300      	str	r3, [sp, #0]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	2200      	movs	r2, #0
 80079ae:	2108      	movs	r1, #8
 80079b0:	68f8      	ldr	r0, [r7, #12]
 80079b2:	f000 f8c3 	bl	8007b3c <SPI_WaitOnFlagUntilTimeout>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d007      	beq.n	80079cc <HAL_SPI_Transmit+0x3f0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079c2:	f043 0220 	orr.w	r2, r3, #32
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 f815 	bl	80079fc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d001      	beq.n	80079f0 <HAL_SPI_Transmit+0x414>
  {
    return HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e000      	b.n	80079f2 <HAL_SPI_Transmit+0x416>
  }
  else
  {
    return HAL_OK;
 80079f0:	2300      	movs	r3, #0
  }
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3718      	adds	r7, #24
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop

080079fc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	695b      	ldr	r3, [r3, #20]
 8007a0a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	699a      	ldr	r2, [r3, #24]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f042 0208 	orr.w	r2, r2, #8
 8007a1a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	699a      	ldr	r2, [r3, #24]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f042 0210 	orr.w	r2, r2, #16
 8007a2a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f022 0201 	bic.w	r2, r2, #1
 8007a3a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	6812      	ldr	r2, [r2, #0]
 8007a46:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8007a4a:	f023 0303 	bic.w	r3, r3, #3
 8007a4e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	689a      	ldr	r2, [r3, #8]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007a5e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	2b04      	cmp	r3, #4
 8007a6a:	d014      	beq.n	8007a96 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f003 0320 	and.w	r3, r3, #32
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00f      	beq.n	8007a96 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a7c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	699a      	ldr	r2, [r3, #24]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f042 0220 	orr.w	r2, r2, #32
 8007a94:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	d014      	beq.n	8007acc <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00f      	beq.n	8007acc <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ab2:	f043 0204 	orr.w	r2, r3, #4
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	699a      	ldr	r2, [r3, #24]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007aca:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00f      	beq.n	8007af6 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007adc:	f043 0201 	orr.w	r2, r3, #1
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	699a      	ldr	r2, [r3, #24]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007af4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00f      	beq.n	8007b20 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b06:	f043 0208 	orr.w	r2, r3, #8
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	699a      	ldr	r2, [r3, #24]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007b1e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8007b30:	bf00      	nop
 8007b32:	3714      	adds	r7, #20
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	603b      	str	r3, [r7, #0]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007b4c:	e010      	b.n	8007b70 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b4e:	f7fa fa9f 	bl	8002090 <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	683a      	ldr	r2, [r7, #0]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d803      	bhi.n	8007b66 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b64:	d102      	bne.n	8007b6c <SPI_WaitOnFlagUntilTimeout+0x30>
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d101      	bne.n	8007b70 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	e00f      	b.n	8007b90 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	695a      	ldr	r2, [r3, #20]
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	4013      	ands	r3, r2
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	bf0c      	ite	eq
 8007b80:	2301      	moveq	r3, #1
 8007b82:	2300      	movne	r3, #0
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	461a      	mov	r2, r3
 8007b88:	79fb      	ldrb	r3, [r7, #7]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d0df      	beq.n	8007b4e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ba4:	095b      	lsrs	r3, r3, #5
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	3307      	adds	r3, #7
 8007bb6:	08db      	lsrs	r3, r3, #3
 8007bb8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	fb02 f303 	mul.w	r3, r2, r3
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3714      	adds	r7, #20
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8007bce:	b480      	push	{r7}
 8007bd0:	b083      	sub	sp, #12
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d12e      	bne.n	8007c42 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d101      	bne.n	8007bf2 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8007bee:	2302      	movs	r3, #2
 8007bf0:	e028      	b.n	8007c44 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2202      	movs	r2, #2
 8007bfe:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f022 0201 	bic.w	r2, r2, #1
 8007c10:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8007c1e:	ea42 0103 	orr.w	r1, r2, r3
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	689a      	ldr	r2, [r3, #8]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	e000      	b.n	8007c44 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
  }
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d101      	bne.n	8007c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e042      	b.n	8007ce8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d106      	bne.n	8007c7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f7f9 fde1 	bl	800183c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2224      	movs	r2, #36	@ 0x24
 8007c7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f022 0201 	bic.w	r2, r2, #1
 8007c90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d002      	beq.n	8007ca0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fa4e 	bl	800813c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 f8b3 	bl	8007e0c <UART_SetConfig>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d101      	bne.n	8007cb0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e01b      	b.n	8007ce8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	685a      	ldr	r2, [r3, #4]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007cbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	689a      	ldr	r2, [r3, #8]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007cce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f042 0201 	orr.w	r2, r2, #1
 8007cde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 facd 	bl	8008280 <UART_CheckIdleState>
 8007ce6:	4603      	mov	r3, r0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b08a      	sub	sp, #40	@ 0x28
 8007cf4:	af02      	add	r7, sp, #8
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	603b      	str	r3, [r7, #0]
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d06:	2b20      	cmp	r3, #32
 8007d08:	d17b      	bne.n	8007e02 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d002      	beq.n	8007d16 <HAL_UART_Transmit+0x26>
 8007d10:	88fb      	ldrh	r3, [r7, #6]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e074      	b.n	8007e04 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2221      	movs	r2, #33	@ 0x21
 8007d26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d2a:	f7fa f9b1 	bl	8002090 <HAL_GetTick>
 8007d2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	88fa      	ldrh	r2, [r7, #6]
 8007d34:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	88fa      	ldrh	r2, [r7, #6]
 8007d3c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d48:	d108      	bne.n	8007d5c <HAL_UART_Transmit+0x6c>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d104      	bne.n	8007d5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007d52:	2300      	movs	r3, #0
 8007d54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	61bb      	str	r3, [r7, #24]
 8007d5a:	e003      	b.n	8007d64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d60:	2300      	movs	r3, #0
 8007d62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007d64:	e030      	b.n	8007dc8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	9300      	str	r3, [sp, #0]
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	2180      	movs	r1, #128	@ 0x80
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f000 fb2f 	bl	80083d4 <UART_WaitOnFlagUntilTimeout>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2220      	movs	r2, #32
 8007d80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e03d      	b.n	8007e04 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10b      	bne.n	8007da6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	881b      	ldrh	r3, [r3, #0]
 8007d92:	461a      	mov	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d9c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	3302      	adds	r3, #2
 8007da2:	61bb      	str	r3, [r7, #24]
 8007da4:	e007      	b.n	8007db6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	781a      	ldrb	r2, [r3, #0]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	3301      	adds	r3, #1
 8007db4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1c8      	bne.n	8007d66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	2140      	movs	r1, #64	@ 0x40
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f000 faf8 	bl	80083d4 <UART_WaitOnFlagUntilTimeout>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d005      	beq.n	8007df6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2220      	movs	r2, #32
 8007dee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e006      	b.n	8007e04 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	e000      	b.n	8007e04 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007e02:	2302      	movs	r3, #2
  }
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3720      	adds	r7, #32
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e10:	b094      	sub	sp, #80	@ 0x50
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e16:	2300      	movs	r3, #0
 8007e18:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	4b9b      	ldr	r3, [pc, #620]	@ (8008090 <UART_SetConfig+0x284>)
 8007e22:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e26:	689a      	ldr	r2, [r3, #8]
 8007e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	431a      	orrs	r2, r3
 8007e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	431a      	orrs	r2, r3
 8007e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e36:	69db      	ldr	r3, [r3, #28]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4994      	ldr	r1, [pc, #592]	@ (8008094 <UART_SetConfig+0x288>)
 8007e44:	4019      	ands	r1, r3
 8007e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e4c:	430b      	orrs	r3, r1
 8007e4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e5c:	68d9      	ldr	r1, [r3, #12]
 8007e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	ea40 0301 	orr.w	r3, r0, r1
 8007e66:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e6a:	699b      	ldr	r3, [r3, #24]
 8007e6c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	4b87      	ldr	r3, [pc, #540]	@ (8008090 <UART_SetConfig+0x284>)
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d009      	beq.n	8007e8c <UART_SetConfig+0x80>
 8007e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	4b86      	ldr	r3, [pc, #536]	@ (8008098 <UART_SetConfig+0x28c>)
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d004      	beq.n	8007e8c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e84:	6a1a      	ldr	r2, [r3, #32]
 8007e86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8007e96:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8007e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ea0:	430b      	orrs	r3, r1
 8007ea2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eaa:	f023 000f 	bic.w	r0, r3, #15
 8007eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eb0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	ea40 0301 	orr.w	r3, r0, r1
 8007eba:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	4b76      	ldr	r3, [pc, #472]	@ (800809c <UART_SetConfig+0x290>)
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d102      	bne.n	8007ecc <UART_SetConfig+0xc0>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007eca:	e021      	b.n	8007f10 <UART_SetConfig+0x104>
 8007ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	4b73      	ldr	r3, [pc, #460]	@ (80080a0 <UART_SetConfig+0x294>)
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d102      	bne.n	8007edc <UART_SetConfig+0xd0>
 8007ed6:	2304      	movs	r3, #4
 8007ed8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007eda:	e019      	b.n	8007f10 <UART_SetConfig+0x104>
 8007edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	4b70      	ldr	r3, [pc, #448]	@ (80080a4 <UART_SetConfig+0x298>)
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d102      	bne.n	8007eec <UART_SetConfig+0xe0>
 8007ee6:	2308      	movs	r3, #8
 8007ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007eea:	e011      	b.n	8007f10 <UART_SetConfig+0x104>
 8007eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	4b6d      	ldr	r3, [pc, #436]	@ (80080a8 <UART_SetConfig+0x29c>)
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d102      	bne.n	8007efc <UART_SetConfig+0xf0>
 8007ef6:	2310      	movs	r3, #16
 8007ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007efa:	e009      	b.n	8007f10 <UART_SetConfig+0x104>
 8007efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	4b63      	ldr	r3, [pc, #396]	@ (8008090 <UART_SetConfig+0x284>)
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d102      	bne.n	8007f0c <UART_SetConfig+0x100>
 8007f06:	2320      	movs	r3, #32
 8007f08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f0a:	e001      	b.n	8007f10 <UART_SetConfig+0x104>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	4b5e      	ldr	r3, [pc, #376]	@ (8008090 <UART_SetConfig+0x284>)
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d004      	beq.n	8007f24 <UART_SetConfig+0x118>
 8007f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	4b5e      	ldr	r3, [pc, #376]	@ (8008098 <UART_SetConfig+0x28c>)
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d172      	bne.n	800800a <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007f24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f26:	2200      	movs	r2, #0
 8007f28:	623b      	str	r3, [r7, #32]
 8007f2a:	627a      	str	r2, [r7, #36]	@ 0x24
 8007f2c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007f30:	f7fd ffcc 	bl	8005ecc <HAL_RCCEx_GetPeriphCLKFreq>
 8007f34:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f000 80e7 	beq.w	800810c <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f42:	4a5a      	ldr	r2, [pc, #360]	@ (80080ac <UART_SetConfig+0x2a0>)
 8007f44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f48:	461a      	mov	r2, r3
 8007f4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f50:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f54:	685a      	ldr	r2, [r3, #4]
 8007f56:	4613      	mov	r3, r2
 8007f58:	005b      	lsls	r3, r3, #1
 8007f5a:	4413      	add	r3, r2
 8007f5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d305      	bcc.n	8007f6e <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d903      	bls.n	8007f76 <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007f74:	e048      	b.n	8008008 <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f78:	2200      	movs	r2, #0
 8007f7a:	61bb      	str	r3, [r7, #24]
 8007f7c:	61fa      	str	r2, [r7, #28]
 8007f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f82:	4a4a      	ldr	r2, [pc, #296]	@ (80080ac <UART_SetConfig+0x2a0>)
 8007f84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	613b      	str	r3, [r7, #16]
 8007f8e:	617a      	str	r2, [r7, #20]
 8007f90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007f94:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007f98:	f7f8 fe0a 	bl	8000bb0 <__aeabi_uldivmod>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	4610      	mov	r0, r2
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	f04f 0200 	mov.w	r2, #0
 8007fa8:	f04f 0300 	mov.w	r3, #0
 8007fac:	020b      	lsls	r3, r1, #8
 8007fae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007fb2:	0202      	lsls	r2, r0, #8
 8007fb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fb6:	6849      	ldr	r1, [r1, #4]
 8007fb8:	0849      	lsrs	r1, r1, #1
 8007fba:	2000      	movs	r0, #0
 8007fbc:	460c      	mov	r4, r1
 8007fbe:	4605      	mov	r5, r0
 8007fc0:	eb12 0804 	adds.w	r8, r2, r4
 8007fc4:	eb43 0905 	adc.w	r9, r3, r5
 8007fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	60bb      	str	r3, [r7, #8]
 8007fd0:	60fa      	str	r2, [r7, #12]
 8007fd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fd6:	4640      	mov	r0, r8
 8007fd8:	4649      	mov	r1, r9
 8007fda:	f7f8 fde9 	bl	8000bb0 <__aeabi_uldivmod>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007fe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fe8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fec:	d308      	bcc.n	8008000 <UART_SetConfig+0x1f4>
 8007fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ff0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ff4:	d204      	bcs.n	8008000 <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 8007ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007ffc:	60da      	str	r2, [r3, #12]
 8007ffe:	e003      	b.n	8008008 <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008006:	e081      	b.n	800810c <UART_SetConfig+0x300>
 8008008:	e080      	b.n	800810c <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800800a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800800c:	69db      	ldr	r3, [r3, #28]
 800800e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008012:	d14d      	bne.n	80080b0 <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008014:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008016:	2200      	movs	r2, #0
 8008018:	603b      	str	r3, [r7, #0]
 800801a:	607a      	str	r2, [r7, #4]
 800801c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008020:	f7fd ff54 	bl	8005ecc <HAL_RCCEx_GetPeriphCLKFreq>
 8008024:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008028:	2b00      	cmp	r3, #0
 800802a:	d06f      	beq.n	800810c <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800802c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800802e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008030:	4a1e      	ldr	r2, [pc, #120]	@ (80080ac <UART_SetConfig+0x2a0>)
 8008032:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008036:	461a      	mov	r2, r3
 8008038:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800803a:	fbb3 f3f2 	udiv	r3, r3, r2
 800803e:	005a      	lsls	r2, r3, #1
 8008040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	085b      	lsrs	r3, r3, #1
 8008046:	441a      	add	r2, r3
 8008048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008050:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008054:	2b0f      	cmp	r3, #15
 8008056:	d916      	bls.n	8008086 <UART_SetConfig+0x27a>
 8008058:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800805a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800805e:	d212      	bcs.n	8008086 <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008062:	b29b      	uxth	r3, r3
 8008064:	f023 030f 	bic.w	r3, r3, #15
 8008068:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800806a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800806c:	085b      	lsrs	r3, r3, #1
 800806e:	b29b      	uxth	r3, r3
 8008070:	f003 0307 	and.w	r3, r3, #7
 8008074:	b29a      	uxth	r2, r3
 8008076:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008078:	4313      	orrs	r3, r2
 800807a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800807c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008082:	60da      	str	r2, [r3, #12]
 8008084:	e042      	b.n	800810c <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800808c:	e03e      	b.n	800810c <UART_SetConfig+0x300>
 800808e:	bf00      	nop
 8008090:	46002400 	.word	0x46002400
 8008094:	cfff69f3 	.word	0xcfff69f3
 8008098:	56002400 	.word	0x56002400
 800809c:	40013800 	.word	0x40013800
 80080a0:	40004800 	.word	0x40004800
 80080a4:	40004c00 	.word	0x40004c00
 80080a8:	40005000 	.word	0x40005000
 80080ac:	0800b308 	.word	0x0800b308
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80080b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080b2:	2200      	movs	r2, #0
 80080b4:	469a      	mov	sl, r3
 80080b6:	4693      	mov	fp, r2
 80080b8:	4650      	mov	r0, sl
 80080ba:	4659      	mov	r1, fp
 80080bc:	f7fd ff06 	bl	8005ecc <HAL_RCCEx_GetPeriphCLKFreq>
 80080c0:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80080c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d021      	beq.n	800810c <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080cc:	4a1a      	ldr	r2, [pc, #104]	@ (8008138 <UART_SetConfig+0x32c>)
 80080ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080d2:	461a      	mov	r2, r3
 80080d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80080da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	085b      	lsrs	r3, r3, #1
 80080e0:	441a      	add	r2, r3
 80080e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080ee:	2b0f      	cmp	r3, #15
 80080f0:	d909      	bls.n	8008106 <UART_SetConfig+0x2fa>
 80080f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080f8:	d205      	bcs.n	8008106 <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080fc:	b29a      	uxth	r2, r3
 80080fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	60da      	str	r2, [r3, #12]
 8008104:	e002      	b.n	800810c <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800810c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800810e:	2201      	movs	r2, #1
 8008110:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008116:	2201      	movs	r2, #1
 8008118:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800811c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800811e:	2200      	movs	r2, #0
 8008120:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008124:	2200      	movs	r2, #0
 8008126:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008128:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800812c:	4618      	mov	r0, r3
 800812e:	3750      	adds	r7, #80	@ 0x50
 8008130:	46bd      	mov	sp, r7
 8008132:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008136:	bf00      	nop
 8008138:	0800b308 	.word	0x0800b308

0800813c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008148:	f003 0308 	and.w	r3, r3, #8
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00a      	beq.n	8008166 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	430a      	orrs	r2, r1
 8008164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00a      	beq.n	8008188 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	430a      	orrs	r2, r1
 8008186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800818c:	f003 0302 	and.w	r3, r3, #2
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00a      	beq.n	80081aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	430a      	orrs	r2, r1
 80081a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ae:	f003 0304 	and.w	r3, r3, #4
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00a      	beq.n	80081cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	430a      	orrs	r2, r1
 80081ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d0:	f003 0310 	and.w	r3, r3, #16
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00a      	beq.n	80081ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	430a      	orrs	r2, r1
 80081ec:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081f2:	f003 0320 	and.w	r3, r3, #32
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00a      	beq.n	8008210 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	430a      	orrs	r2, r1
 800820e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008218:	2b00      	cmp	r3, #0
 800821a:	d01a      	beq.n	8008252 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	430a      	orrs	r2, r1
 8008230:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008236:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800823a:	d10a      	bne.n	8008252 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	430a      	orrs	r2, r1
 8008250:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00a      	beq.n	8008274 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	430a      	orrs	r2, r1
 8008272:	605a      	str	r2, [r3, #4]
  }
}
 8008274:	bf00      	nop
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b098      	sub	sp, #96	@ 0x60
 8008284:	af02      	add	r7, sp, #8
 8008286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008290:	f7f9 fefe 	bl	8002090 <HAL_GetTick>
 8008294:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 0308 	and.w	r3, r3, #8
 80082a0:	2b08      	cmp	r3, #8
 80082a2:	d12f      	bne.n	8008304 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80082a8:	9300      	str	r3, [sp, #0]
 80082aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082ac:	2200      	movs	r2, #0
 80082ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 f88e 	bl	80083d4 <UART_WaitOnFlagUntilTimeout>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d022      	beq.n	8008304 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c6:	e853 3f00 	ldrex	r3, [r3]
 80082ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80082cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	461a      	mov	r2, r3
 80082da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80082de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80082e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082e4:	e841 2300 	strex	r3, r2, [r1]
 80082e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80082ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1e6      	bne.n	80082be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2220      	movs	r2, #32
 80082f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008300:	2303      	movs	r3, #3
 8008302:	e063      	b.n	80083cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 0304 	and.w	r3, r3, #4
 800830e:	2b04      	cmp	r3, #4
 8008310:	d149      	bne.n	80083a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008312:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800831a:	2200      	movs	r2, #0
 800831c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f857 	bl	80083d4 <UART_WaitOnFlagUntilTimeout>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d03c      	beq.n	80083a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008334:	e853 3f00 	ldrex	r3, [r3]
 8008338:	623b      	str	r3, [r7, #32]
   return(result);
 800833a:	6a3b      	ldr	r3, [r7, #32]
 800833c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008340:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	461a      	mov	r2, r3
 8008348:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800834a:	633b      	str	r3, [r7, #48]	@ 0x30
 800834c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008350:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008352:	e841 2300 	strex	r3, r2, [r1]
 8008356:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1e6      	bne.n	800832c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	3308      	adds	r3, #8
 8008364:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	e853 3f00 	ldrex	r3, [r3]
 800836c:	60fb      	str	r3, [r7, #12]
   return(result);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f023 0301 	bic.w	r3, r3, #1
 8008374:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	3308      	adds	r3, #8
 800837c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800837e:	61fa      	str	r2, [r7, #28]
 8008380:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008382:	69b9      	ldr	r1, [r7, #24]
 8008384:	69fa      	ldr	r2, [r7, #28]
 8008386:	e841 2300 	strex	r3, r2, [r1]
 800838a:	617b      	str	r3, [r7, #20]
   return(result);
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1e5      	bne.n	800835e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2220      	movs	r2, #32
 8008396:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e012      	b.n	80083cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2220      	movs	r2, #32
 80083aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2220      	movs	r2, #32
 80083b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3758      	adds	r7, #88	@ 0x58
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	603b      	str	r3, [r7, #0]
 80083e0:	4613      	mov	r3, r2
 80083e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083e4:	e04f      	b.n	8008486 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ec:	d04b      	beq.n	8008486 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083ee:	f7f9 fe4f 	bl	8002090 <HAL_GetTick>
 80083f2:	4602      	mov	r2, r0
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	69ba      	ldr	r2, [r7, #24]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d302      	bcc.n	8008404 <UART_WaitOnFlagUntilTimeout+0x30>
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d101      	bne.n	8008408 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008404:	2303      	movs	r3, #3
 8008406:	e04e      	b.n	80084a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 0304 	and.w	r3, r3, #4
 8008412:	2b00      	cmp	r3, #0
 8008414:	d037      	beq.n	8008486 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	2b80      	cmp	r3, #128	@ 0x80
 800841a:	d034      	beq.n	8008486 <UART_WaitOnFlagUntilTimeout+0xb2>
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	2b40      	cmp	r3, #64	@ 0x40
 8008420:	d031      	beq.n	8008486 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	69db      	ldr	r3, [r3, #28]
 8008428:	f003 0308 	and.w	r3, r3, #8
 800842c:	2b08      	cmp	r3, #8
 800842e:	d110      	bne.n	8008452 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2208      	movs	r2, #8
 8008436:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f000 f838 	bl	80084ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2208      	movs	r2, #8
 8008442:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2200      	movs	r2, #0
 800844a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e029      	b.n	80084a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	69db      	ldr	r3, [r3, #28]
 8008458:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800845c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008460:	d111      	bne.n	8008486 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800846a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f000 f81e 	bl	80084ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2220      	movs	r2, #32
 8008476:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008482:	2303      	movs	r3, #3
 8008484:	e00f      	b.n	80084a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	69da      	ldr	r2, [r3, #28]
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	4013      	ands	r3, r2
 8008490:	68ba      	ldr	r2, [r7, #8]
 8008492:	429a      	cmp	r2, r3
 8008494:	bf0c      	ite	eq
 8008496:	2301      	moveq	r3, #1
 8008498:	2300      	movne	r3, #0
 800849a:	b2db      	uxtb	r3, r3
 800849c:	461a      	mov	r2, r3
 800849e:	79fb      	ldrb	r3, [r7, #7]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d0a0      	beq.n	80083e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084ae:	b480      	push	{r7}
 80084b0:	b095      	sub	sp, #84	@ 0x54
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084be:	e853 3f00 	ldrex	r3, [r3]
 80084c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80084c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	461a      	mov	r2, r3
 80084d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80084d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80084da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80084dc:	e841 2300 	strex	r3, r2, [r1]
 80084e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80084e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d1e6      	bne.n	80084b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	3308      	adds	r3, #8
 80084ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f0:	6a3b      	ldr	r3, [r7, #32]
 80084f2:	e853 3f00 	ldrex	r3, [r3]
 80084f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084fe:	f023 0301 	bic.w	r3, r3, #1
 8008502:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	3308      	adds	r3, #8
 800850a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800850c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800850e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008510:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008512:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008514:	e841 2300 	strex	r3, r2, [r1]
 8008518:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800851a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800851c:	2b00      	cmp	r3, #0
 800851e:	d1e3      	bne.n	80084e8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008524:	2b01      	cmp	r3, #1
 8008526:	d118      	bne.n	800855a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	e853 3f00 	ldrex	r3, [r3]
 8008534:	60bb      	str	r3, [r7, #8]
   return(result);
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	f023 0310 	bic.w	r3, r3, #16
 800853c:	647b      	str	r3, [r7, #68]	@ 0x44
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	461a      	mov	r2, r3
 8008544:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008546:	61bb      	str	r3, [r7, #24]
 8008548:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854a:	6979      	ldr	r1, [r7, #20]
 800854c:	69ba      	ldr	r2, [r7, #24]
 800854e:	e841 2300 	strex	r3, r2, [r1]
 8008552:	613b      	str	r3, [r7, #16]
   return(result);
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1e6      	bne.n	8008528 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2220      	movs	r2, #32
 800855e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800856e:	bf00      	nop
 8008570:	3754      	adds	r7, #84	@ 0x54
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr

0800857a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800857a:	b480      	push	{r7}
 800857c:	b085      	sub	sp, #20
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008588:	2b01      	cmp	r3, #1
 800858a:	d101      	bne.n	8008590 <HAL_UARTEx_DisableFifoMode+0x16>
 800858c:	2302      	movs	r3, #2
 800858e:	e027      	b.n	80085e0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2224      	movs	r2, #36	@ 0x24
 800859c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f022 0201 	bic.w	r2, r2, #1
 80085b6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80085be:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68fa      	ldr	r2, [r7, #12]
 80085cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2220      	movs	r2, #32
 80085d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3714      	adds	r7, #20
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d101      	bne.n	8008604 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008600:	2302      	movs	r3, #2
 8008602:	e02d      	b.n	8008660 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2224      	movs	r2, #36	@ 0x24
 8008610:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f022 0201 	bic.w	r2, r2, #1
 800862a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	683a      	ldr	r2, [r7, #0]
 800863c:	430a      	orrs	r2, r1
 800863e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 f84f 	bl	80086e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68fa      	ldr	r2, [r7, #12]
 800864c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2220      	movs	r2, #32
 8008652:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	3710      	adds	r7, #16
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008678:	2b01      	cmp	r3, #1
 800867a:	d101      	bne.n	8008680 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800867c:	2302      	movs	r3, #2
 800867e:	e02d      	b.n	80086dc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2224      	movs	r2, #36	@ 0x24
 800868c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f022 0201 	bic.w	r2, r2, #1
 80086a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	683a      	ldr	r2, [r7, #0]
 80086b8:	430a      	orrs	r2, r1
 80086ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 f811 	bl	80086e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68fa      	ldr	r2, [r7, #12]
 80086c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2220      	movs	r2, #32
 80086ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d108      	bne.n	8008706 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008704:	e031      	b.n	800876a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008706:	2308      	movs	r3, #8
 8008708:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800870a:	2308      	movs	r3, #8
 800870c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	0e5b      	lsrs	r3, r3, #25
 8008716:	b2db      	uxtb	r3, r3
 8008718:	f003 0307 	and.w	r3, r3, #7
 800871c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	0f5b      	lsrs	r3, r3, #29
 8008726:	b2db      	uxtb	r3, r3
 8008728:	f003 0307 	and.w	r3, r3, #7
 800872c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800872e:	7bbb      	ldrb	r3, [r7, #14]
 8008730:	7b3a      	ldrb	r2, [r7, #12]
 8008732:	4911      	ldr	r1, [pc, #68]	@ (8008778 <UARTEx_SetNbDataToProcess+0x94>)
 8008734:	5c8a      	ldrb	r2, [r1, r2]
 8008736:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800873a:	7b3a      	ldrb	r2, [r7, #12]
 800873c:	490f      	ldr	r1, [pc, #60]	@ (800877c <UARTEx_SetNbDataToProcess+0x98>)
 800873e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008740:	fb93 f3f2 	sdiv	r3, r3, r2
 8008744:	b29a      	uxth	r2, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800874c:	7bfb      	ldrb	r3, [r7, #15]
 800874e:	7b7a      	ldrb	r2, [r7, #13]
 8008750:	4909      	ldr	r1, [pc, #36]	@ (8008778 <UARTEx_SetNbDataToProcess+0x94>)
 8008752:	5c8a      	ldrb	r2, [r1, r2]
 8008754:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008758:	7b7a      	ldrb	r2, [r7, #13]
 800875a:	4908      	ldr	r1, [pc, #32]	@ (800877c <UARTEx_SetNbDataToProcess+0x98>)
 800875c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800875e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008762:	b29a      	uxth	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800876a:	bf00      	nop
 800876c:	3714      	adds	r7, #20
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	0800b320 	.word	0x0800b320
 800877c:	0800b328 	.word	0x0800b328

08008780 <__cvt>:
 8008780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008784:	ec57 6b10 	vmov	r6, r7, d0
 8008788:	2f00      	cmp	r7, #0
 800878a:	460c      	mov	r4, r1
 800878c:	4619      	mov	r1, r3
 800878e:	463b      	mov	r3, r7
 8008790:	bfb4      	ite	lt
 8008792:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008796:	2300      	movge	r3, #0
 8008798:	4691      	mov	r9, r2
 800879a:	bfbf      	itttt	lt
 800879c:	4632      	movlt	r2, r6
 800879e:	461f      	movlt	r7, r3
 80087a0:	232d      	movlt	r3, #45	@ 0x2d
 80087a2:	4616      	movlt	r6, r2
 80087a4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80087a8:	700b      	strb	r3, [r1, #0]
 80087aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80087ac:	f023 0820 	bic.w	r8, r3, #32
 80087b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80087b4:	d005      	beq.n	80087c2 <__cvt+0x42>
 80087b6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80087ba:	d100      	bne.n	80087be <__cvt+0x3e>
 80087bc:	3401      	adds	r4, #1
 80087be:	2102      	movs	r1, #2
 80087c0:	e000      	b.n	80087c4 <__cvt+0x44>
 80087c2:	2103      	movs	r1, #3
 80087c4:	ab03      	add	r3, sp, #12
 80087c6:	4622      	mov	r2, r4
 80087c8:	9301      	str	r3, [sp, #4]
 80087ca:	ab02      	add	r3, sp, #8
 80087cc:	ec47 6b10 	vmov	d0, r6, r7
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	4653      	mov	r3, sl
 80087d4:	f000 ff54 	bl	8009680 <_dtoa_r>
 80087d8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80087dc:	4605      	mov	r5, r0
 80087de:	d119      	bne.n	8008814 <__cvt+0x94>
 80087e0:	f019 0f01 	tst.w	r9, #1
 80087e4:	d00e      	beq.n	8008804 <__cvt+0x84>
 80087e6:	eb00 0904 	add.w	r9, r0, r4
 80087ea:	2200      	movs	r2, #0
 80087ec:	2300      	movs	r3, #0
 80087ee:	4630      	mov	r0, r6
 80087f0:	4639      	mov	r1, r7
 80087f2:	f7f8 f96d 	bl	8000ad0 <__aeabi_dcmpeq>
 80087f6:	b108      	cbz	r0, 80087fc <__cvt+0x7c>
 80087f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80087fc:	2230      	movs	r2, #48	@ 0x30
 80087fe:	9b03      	ldr	r3, [sp, #12]
 8008800:	454b      	cmp	r3, r9
 8008802:	d31e      	bcc.n	8008842 <__cvt+0xc2>
 8008804:	9b03      	ldr	r3, [sp, #12]
 8008806:	4628      	mov	r0, r5
 8008808:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800880a:	1b5b      	subs	r3, r3, r5
 800880c:	6013      	str	r3, [r2, #0]
 800880e:	b004      	add	sp, #16
 8008810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008814:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008818:	eb00 0904 	add.w	r9, r0, r4
 800881c:	d1e5      	bne.n	80087ea <__cvt+0x6a>
 800881e:	7803      	ldrb	r3, [r0, #0]
 8008820:	2b30      	cmp	r3, #48	@ 0x30
 8008822:	d10a      	bne.n	800883a <__cvt+0xba>
 8008824:	2200      	movs	r2, #0
 8008826:	2300      	movs	r3, #0
 8008828:	4630      	mov	r0, r6
 800882a:	4639      	mov	r1, r7
 800882c:	f7f8 f950 	bl	8000ad0 <__aeabi_dcmpeq>
 8008830:	b918      	cbnz	r0, 800883a <__cvt+0xba>
 8008832:	f1c4 0401 	rsb	r4, r4, #1
 8008836:	f8ca 4000 	str.w	r4, [sl]
 800883a:	f8da 3000 	ldr.w	r3, [sl]
 800883e:	4499      	add	r9, r3
 8008840:	e7d3      	b.n	80087ea <__cvt+0x6a>
 8008842:	1c59      	adds	r1, r3, #1
 8008844:	9103      	str	r1, [sp, #12]
 8008846:	701a      	strb	r2, [r3, #0]
 8008848:	e7d9      	b.n	80087fe <__cvt+0x7e>

0800884a <__exponent>:
 800884a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800884c:	2900      	cmp	r1, #0
 800884e:	7002      	strb	r2, [r0, #0]
 8008850:	bfba      	itte	lt
 8008852:	4249      	neglt	r1, r1
 8008854:	232d      	movlt	r3, #45	@ 0x2d
 8008856:	232b      	movge	r3, #43	@ 0x2b
 8008858:	2909      	cmp	r1, #9
 800885a:	7043      	strb	r3, [r0, #1]
 800885c:	dd28      	ble.n	80088b0 <__exponent+0x66>
 800885e:	f10d 0307 	add.w	r3, sp, #7
 8008862:	270a      	movs	r7, #10
 8008864:	461d      	mov	r5, r3
 8008866:	461a      	mov	r2, r3
 8008868:	3b01      	subs	r3, #1
 800886a:	fbb1 f6f7 	udiv	r6, r1, r7
 800886e:	fb07 1416 	mls	r4, r7, r6, r1
 8008872:	3430      	adds	r4, #48	@ 0x30
 8008874:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008878:	460c      	mov	r4, r1
 800887a:	4631      	mov	r1, r6
 800887c:	2c63      	cmp	r4, #99	@ 0x63
 800887e:	dcf2      	bgt.n	8008866 <__exponent+0x1c>
 8008880:	3130      	adds	r1, #48	@ 0x30
 8008882:	1e94      	subs	r4, r2, #2
 8008884:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008888:	1c41      	adds	r1, r0, #1
 800888a:	4623      	mov	r3, r4
 800888c:	42ab      	cmp	r3, r5
 800888e:	d30a      	bcc.n	80088a6 <__exponent+0x5c>
 8008890:	f10d 0309 	add.w	r3, sp, #9
 8008894:	1a9b      	subs	r3, r3, r2
 8008896:	42ac      	cmp	r4, r5
 8008898:	bf88      	it	hi
 800889a:	2300      	movhi	r3, #0
 800889c:	3302      	adds	r3, #2
 800889e:	4403      	add	r3, r0
 80088a0:	1a18      	subs	r0, r3, r0
 80088a2:	b003      	add	sp, #12
 80088a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088a6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80088aa:	f801 6f01 	strb.w	r6, [r1, #1]!
 80088ae:	e7ed      	b.n	800888c <__exponent+0x42>
 80088b0:	2330      	movs	r3, #48	@ 0x30
 80088b2:	3130      	adds	r1, #48	@ 0x30
 80088b4:	7083      	strb	r3, [r0, #2]
 80088b6:	1d03      	adds	r3, r0, #4
 80088b8:	70c1      	strb	r1, [r0, #3]
 80088ba:	e7f1      	b.n	80088a0 <__exponent+0x56>

080088bc <_printf_float>:
 80088bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c0:	b08d      	sub	sp, #52	@ 0x34
 80088c2:	460c      	mov	r4, r1
 80088c4:	4616      	mov	r6, r2
 80088c6:	461f      	mov	r7, r3
 80088c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80088cc:	4605      	mov	r5, r0
 80088ce:	f000 fdc3 	bl	8009458 <_localeconv_r>
 80088d2:	6803      	ldr	r3, [r0, #0]
 80088d4:	4618      	mov	r0, r3
 80088d6:	9304      	str	r3, [sp, #16]
 80088d8:	f7f7 fcce 	bl	8000278 <strlen>
 80088dc:	2300      	movs	r3, #0
 80088de:	9005      	str	r0, [sp, #20]
 80088e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80088e2:	f8d8 3000 	ldr.w	r3, [r8]
 80088e6:	f894 a018 	ldrb.w	sl, [r4, #24]
 80088ea:	3307      	adds	r3, #7
 80088ec:	f8d4 b000 	ldr.w	fp, [r4]
 80088f0:	f023 0307 	bic.w	r3, r3, #7
 80088f4:	f103 0208 	add.w	r2, r3, #8
 80088f8:	f8c8 2000 	str.w	r2, [r8]
 80088fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008900:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008904:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008908:	f8cd 8018 	str.w	r8, [sp, #24]
 800890c:	9307      	str	r3, [sp, #28]
 800890e:	4b9d      	ldr	r3, [pc, #628]	@ (8008b84 <_printf_float+0x2c8>)
 8008910:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008914:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008918:	f7f8 f90c 	bl	8000b34 <__aeabi_dcmpun>
 800891c:	bb70      	cbnz	r0, 800897c <_printf_float+0xc0>
 800891e:	f04f 32ff 	mov.w	r2, #4294967295
 8008922:	4b98      	ldr	r3, [pc, #608]	@ (8008b84 <_printf_float+0x2c8>)
 8008924:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008928:	f7f8 f8e6 	bl	8000af8 <__aeabi_dcmple>
 800892c:	bb30      	cbnz	r0, 800897c <_printf_float+0xc0>
 800892e:	2200      	movs	r2, #0
 8008930:	2300      	movs	r3, #0
 8008932:	4640      	mov	r0, r8
 8008934:	4649      	mov	r1, r9
 8008936:	f7f8 f8d5 	bl	8000ae4 <__aeabi_dcmplt>
 800893a:	b110      	cbz	r0, 8008942 <_printf_float+0x86>
 800893c:	232d      	movs	r3, #45	@ 0x2d
 800893e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008942:	4a91      	ldr	r2, [pc, #580]	@ (8008b88 <_printf_float+0x2cc>)
 8008944:	4b91      	ldr	r3, [pc, #580]	@ (8008b8c <_printf_float+0x2d0>)
 8008946:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800894a:	bf94      	ite	ls
 800894c:	4690      	movls	r8, r2
 800894e:	4698      	movhi	r8, r3
 8008950:	2303      	movs	r3, #3
 8008952:	f04f 0900 	mov.w	r9, #0
 8008956:	6123      	str	r3, [r4, #16]
 8008958:	f02b 0304 	bic.w	r3, fp, #4
 800895c:	6023      	str	r3, [r4, #0]
 800895e:	4633      	mov	r3, r6
 8008960:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008962:	4621      	mov	r1, r4
 8008964:	4628      	mov	r0, r5
 8008966:	9700      	str	r7, [sp, #0]
 8008968:	f000 f9d2 	bl	8008d10 <_printf_common>
 800896c:	3001      	adds	r0, #1
 800896e:	f040 808d 	bne.w	8008a8c <_printf_float+0x1d0>
 8008972:	f04f 30ff 	mov.w	r0, #4294967295
 8008976:	b00d      	add	sp, #52	@ 0x34
 8008978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800897c:	4642      	mov	r2, r8
 800897e:	464b      	mov	r3, r9
 8008980:	4640      	mov	r0, r8
 8008982:	4649      	mov	r1, r9
 8008984:	f7f8 f8d6 	bl	8000b34 <__aeabi_dcmpun>
 8008988:	b140      	cbz	r0, 800899c <_printf_float+0xe0>
 800898a:	464b      	mov	r3, r9
 800898c:	4a80      	ldr	r2, [pc, #512]	@ (8008b90 <_printf_float+0x2d4>)
 800898e:	2b00      	cmp	r3, #0
 8008990:	bfbc      	itt	lt
 8008992:	232d      	movlt	r3, #45	@ 0x2d
 8008994:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008998:	4b7e      	ldr	r3, [pc, #504]	@ (8008b94 <_printf_float+0x2d8>)
 800899a:	e7d4      	b.n	8008946 <_printf_float+0x8a>
 800899c:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80089a0:	6863      	ldr	r3, [r4, #4]
 80089a2:	9206      	str	r2, [sp, #24]
 80089a4:	1c5a      	adds	r2, r3, #1
 80089a6:	d13b      	bne.n	8008a20 <_printf_float+0x164>
 80089a8:	2306      	movs	r3, #6
 80089aa:	6063      	str	r3, [r4, #4]
 80089ac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80089b0:	2300      	movs	r3, #0
 80089b2:	4628      	mov	r0, r5
 80089b4:	6022      	str	r2, [r4, #0]
 80089b6:	9303      	str	r3, [sp, #12]
 80089b8:	ab0a      	add	r3, sp, #40	@ 0x28
 80089ba:	e9cd a301 	strd	sl, r3, [sp, #4]
 80089be:	ab09      	add	r3, sp, #36	@ 0x24
 80089c0:	ec49 8b10 	vmov	d0, r8, r9
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80089ca:	6861      	ldr	r1, [r4, #4]
 80089cc:	f7ff fed8 	bl	8008780 <__cvt>
 80089d0:	9b06      	ldr	r3, [sp, #24]
 80089d2:	4680      	mov	r8, r0
 80089d4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80089d6:	2b47      	cmp	r3, #71	@ 0x47
 80089d8:	d129      	bne.n	8008a2e <_printf_float+0x172>
 80089da:	1cc8      	adds	r0, r1, #3
 80089dc:	db02      	blt.n	80089e4 <_printf_float+0x128>
 80089de:	6863      	ldr	r3, [r4, #4]
 80089e0:	4299      	cmp	r1, r3
 80089e2:	dd41      	ble.n	8008a68 <_printf_float+0x1ac>
 80089e4:	f1aa 0a02 	sub.w	sl, sl, #2
 80089e8:	fa5f fa8a 	uxtb.w	sl, sl
 80089ec:	3901      	subs	r1, #1
 80089ee:	4652      	mov	r2, sl
 80089f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80089f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80089f6:	f7ff ff28 	bl	800884a <__exponent>
 80089fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80089fc:	4681      	mov	r9, r0
 80089fe:	1813      	adds	r3, r2, r0
 8008a00:	2a01      	cmp	r2, #1
 8008a02:	6123      	str	r3, [r4, #16]
 8008a04:	dc02      	bgt.n	8008a0c <_printf_float+0x150>
 8008a06:	6822      	ldr	r2, [r4, #0]
 8008a08:	07d2      	lsls	r2, r2, #31
 8008a0a:	d501      	bpl.n	8008a10 <_printf_float+0x154>
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	6123      	str	r3, [r4, #16]
 8008a10:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d0a2      	beq.n	800895e <_printf_float+0xa2>
 8008a18:	232d      	movs	r3, #45	@ 0x2d
 8008a1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a1e:	e79e      	b.n	800895e <_printf_float+0xa2>
 8008a20:	9a06      	ldr	r2, [sp, #24]
 8008a22:	2a47      	cmp	r2, #71	@ 0x47
 8008a24:	d1c2      	bne.n	80089ac <_printf_float+0xf0>
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d1c0      	bne.n	80089ac <_printf_float+0xf0>
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e7bd      	b.n	80089aa <_printf_float+0xee>
 8008a2e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008a32:	d9db      	bls.n	80089ec <_printf_float+0x130>
 8008a34:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008a38:	d118      	bne.n	8008a6c <_printf_float+0x1b0>
 8008a3a:	2900      	cmp	r1, #0
 8008a3c:	6863      	ldr	r3, [r4, #4]
 8008a3e:	dd0b      	ble.n	8008a58 <_printf_float+0x19c>
 8008a40:	6121      	str	r1, [r4, #16]
 8008a42:	b913      	cbnz	r3, 8008a4a <_printf_float+0x18e>
 8008a44:	6822      	ldr	r2, [r4, #0]
 8008a46:	07d0      	lsls	r0, r2, #31
 8008a48:	d502      	bpl.n	8008a50 <_printf_float+0x194>
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	440b      	add	r3, r1
 8008a4e:	6123      	str	r3, [r4, #16]
 8008a50:	f04f 0900 	mov.w	r9, #0
 8008a54:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008a56:	e7db      	b.n	8008a10 <_printf_float+0x154>
 8008a58:	b913      	cbnz	r3, 8008a60 <_printf_float+0x1a4>
 8008a5a:	6822      	ldr	r2, [r4, #0]
 8008a5c:	07d2      	lsls	r2, r2, #31
 8008a5e:	d501      	bpl.n	8008a64 <_printf_float+0x1a8>
 8008a60:	3302      	adds	r3, #2
 8008a62:	e7f4      	b.n	8008a4e <_printf_float+0x192>
 8008a64:	2301      	movs	r3, #1
 8008a66:	e7f2      	b.n	8008a4e <_printf_float+0x192>
 8008a68:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008a6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a6e:	4299      	cmp	r1, r3
 8008a70:	db05      	blt.n	8008a7e <_printf_float+0x1c2>
 8008a72:	6823      	ldr	r3, [r4, #0]
 8008a74:	6121      	str	r1, [r4, #16]
 8008a76:	07d8      	lsls	r0, r3, #31
 8008a78:	d5ea      	bpl.n	8008a50 <_printf_float+0x194>
 8008a7a:	1c4b      	adds	r3, r1, #1
 8008a7c:	e7e7      	b.n	8008a4e <_printf_float+0x192>
 8008a7e:	2900      	cmp	r1, #0
 8008a80:	bfd4      	ite	le
 8008a82:	f1c1 0202 	rsble	r2, r1, #2
 8008a86:	2201      	movgt	r2, #1
 8008a88:	4413      	add	r3, r2
 8008a8a:	e7e0      	b.n	8008a4e <_printf_float+0x192>
 8008a8c:	6823      	ldr	r3, [r4, #0]
 8008a8e:	055a      	lsls	r2, r3, #21
 8008a90:	d407      	bmi.n	8008aa2 <_printf_float+0x1e6>
 8008a92:	6923      	ldr	r3, [r4, #16]
 8008a94:	4642      	mov	r2, r8
 8008a96:	4631      	mov	r1, r6
 8008a98:	4628      	mov	r0, r5
 8008a9a:	47b8      	blx	r7
 8008a9c:	3001      	adds	r0, #1
 8008a9e:	d12b      	bne.n	8008af8 <_printf_float+0x23c>
 8008aa0:	e767      	b.n	8008972 <_printf_float+0xb6>
 8008aa2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008aa6:	f240 80dd 	bls.w	8008c64 <_printf_float+0x3a8>
 8008aaa:	2200      	movs	r2, #0
 8008aac:	2300      	movs	r3, #0
 8008aae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008ab2:	f7f8 f80d 	bl	8000ad0 <__aeabi_dcmpeq>
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	d033      	beq.n	8008b22 <_printf_float+0x266>
 8008aba:	2301      	movs	r3, #1
 8008abc:	4a36      	ldr	r2, [pc, #216]	@ (8008b98 <_printf_float+0x2dc>)
 8008abe:	4631      	mov	r1, r6
 8008ac0:	4628      	mov	r0, r5
 8008ac2:	47b8      	blx	r7
 8008ac4:	3001      	adds	r0, #1
 8008ac6:	f43f af54 	beq.w	8008972 <_printf_float+0xb6>
 8008aca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008ace:	4543      	cmp	r3, r8
 8008ad0:	db02      	blt.n	8008ad8 <_printf_float+0x21c>
 8008ad2:	6823      	ldr	r3, [r4, #0]
 8008ad4:	07d8      	lsls	r0, r3, #31
 8008ad6:	d50f      	bpl.n	8008af8 <_printf_float+0x23c>
 8008ad8:	4631      	mov	r1, r6
 8008ada:	4628      	mov	r0, r5
 8008adc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ae0:	47b8      	blx	r7
 8008ae2:	3001      	adds	r0, #1
 8008ae4:	f43f af45 	beq.w	8008972 <_printf_float+0xb6>
 8008ae8:	f04f 0900 	mov.w	r9, #0
 8008aec:	f108 38ff 	add.w	r8, r8, #4294967295
 8008af0:	f104 0a1a 	add.w	sl, r4, #26
 8008af4:	45c8      	cmp	r8, r9
 8008af6:	dc09      	bgt.n	8008b0c <_printf_float+0x250>
 8008af8:	6823      	ldr	r3, [r4, #0]
 8008afa:	079b      	lsls	r3, r3, #30
 8008afc:	f100 8103 	bmi.w	8008d06 <_printf_float+0x44a>
 8008b00:	68e0      	ldr	r0, [r4, #12]
 8008b02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b04:	4298      	cmp	r0, r3
 8008b06:	bfb8      	it	lt
 8008b08:	4618      	movlt	r0, r3
 8008b0a:	e734      	b.n	8008976 <_printf_float+0xba>
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	4652      	mov	r2, sl
 8008b10:	4631      	mov	r1, r6
 8008b12:	4628      	mov	r0, r5
 8008b14:	47b8      	blx	r7
 8008b16:	3001      	adds	r0, #1
 8008b18:	f43f af2b 	beq.w	8008972 <_printf_float+0xb6>
 8008b1c:	f109 0901 	add.w	r9, r9, #1
 8008b20:	e7e8      	b.n	8008af4 <_printf_float+0x238>
 8008b22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	dc39      	bgt.n	8008b9c <_printf_float+0x2e0>
 8008b28:	2301      	movs	r3, #1
 8008b2a:	4a1b      	ldr	r2, [pc, #108]	@ (8008b98 <_printf_float+0x2dc>)
 8008b2c:	4631      	mov	r1, r6
 8008b2e:	4628      	mov	r0, r5
 8008b30:	47b8      	blx	r7
 8008b32:	3001      	adds	r0, #1
 8008b34:	f43f af1d 	beq.w	8008972 <_printf_float+0xb6>
 8008b38:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008b3c:	ea59 0303 	orrs.w	r3, r9, r3
 8008b40:	d102      	bne.n	8008b48 <_printf_float+0x28c>
 8008b42:	6823      	ldr	r3, [r4, #0]
 8008b44:	07d9      	lsls	r1, r3, #31
 8008b46:	d5d7      	bpl.n	8008af8 <_printf_float+0x23c>
 8008b48:	4631      	mov	r1, r6
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b50:	47b8      	blx	r7
 8008b52:	3001      	adds	r0, #1
 8008b54:	f43f af0d 	beq.w	8008972 <_printf_float+0xb6>
 8008b58:	f04f 0a00 	mov.w	sl, #0
 8008b5c:	f104 0b1a 	add.w	fp, r4, #26
 8008b60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b62:	425b      	negs	r3, r3
 8008b64:	4553      	cmp	r3, sl
 8008b66:	dc01      	bgt.n	8008b6c <_printf_float+0x2b0>
 8008b68:	464b      	mov	r3, r9
 8008b6a:	e793      	b.n	8008a94 <_printf_float+0x1d8>
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	465a      	mov	r2, fp
 8008b70:	4631      	mov	r1, r6
 8008b72:	4628      	mov	r0, r5
 8008b74:	47b8      	blx	r7
 8008b76:	3001      	adds	r0, #1
 8008b78:	f43f aefb 	beq.w	8008972 <_printf_float+0xb6>
 8008b7c:	f10a 0a01 	add.w	sl, sl, #1
 8008b80:	e7ee      	b.n	8008b60 <_printf_float+0x2a4>
 8008b82:	bf00      	nop
 8008b84:	7fefffff 	.word	0x7fefffff
 8008b88:	0800b330 	.word	0x0800b330
 8008b8c:	0800b334 	.word	0x0800b334
 8008b90:	0800b338 	.word	0x0800b338
 8008b94:	0800b33c 	.word	0x0800b33c
 8008b98:	0800b340 	.word	0x0800b340
 8008b9c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008b9e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008ba2:	4553      	cmp	r3, sl
 8008ba4:	bfa8      	it	ge
 8008ba6:	4653      	movge	r3, sl
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	4699      	mov	r9, r3
 8008bac:	dc36      	bgt.n	8008c1c <_printf_float+0x360>
 8008bae:	f04f 0b00 	mov.w	fp, #0
 8008bb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bb6:	f104 021a 	add.w	r2, r4, #26
 8008bba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008bbc:	9306      	str	r3, [sp, #24]
 8008bbe:	eba3 0309 	sub.w	r3, r3, r9
 8008bc2:	455b      	cmp	r3, fp
 8008bc4:	dc31      	bgt.n	8008c2a <_printf_float+0x36e>
 8008bc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bc8:	459a      	cmp	sl, r3
 8008bca:	dc3a      	bgt.n	8008c42 <_printf_float+0x386>
 8008bcc:	6823      	ldr	r3, [r4, #0]
 8008bce:	07da      	lsls	r2, r3, #31
 8008bd0:	d437      	bmi.n	8008c42 <_printf_float+0x386>
 8008bd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bd4:	ebaa 0903 	sub.w	r9, sl, r3
 8008bd8:	9b06      	ldr	r3, [sp, #24]
 8008bda:	ebaa 0303 	sub.w	r3, sl, r3
 8008bde:	4599      	cmp	r9, r3
 8008be0:	bfa8      	it	ge
 8008be2:	4699      	movge	r9, r3
 8008be4:	f1b9 0f00 	cmp.w	r9, #0
 8008be8:	dc33      	bgt.n	8008c52 <_printf_float+0x396>
 8008bea:	f04f 0800 	mov.w	r8, #0
 8008bee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bf2:	f104 0b1a 	add.w	fp, r4, #26
 8008bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bf8:	ebaa 0303 	sub.w	r3, sl, r3
 8008bfc:	eba3 0309 	sub.w	r3, r3, r9
 8008c00:	4543      	cmp	r3, r8
 8008c02:	f77f af79 	ble.w	8008af8 <_printf_float+0x23c>
 8008c06:	2301      	movs	r3, #1
 8008c08:	465a      	mov	r2, fp
 8008c0a:	4631      	mov	r1, r6
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	47b8      	blx	r7
 8008c10:	3001      	adds	r0, #1
 8008c12:	f43f aeae 	beq.w	8008972 <_printf_float+0xb6>
 8008c16:	f108 0801 	add.w	r8, r8, #1
 8008c1a:	e7ec      	b.n	8008bf6 <_printf_float+0x33a>
 8008c1c:	4642      	mov	r2, r8
 8008c1e:	4631      	mov	r1, r6
 8008c20:	4628      	mov	r0, r5
 8008c22:	47b8      	blx	r7
 8008c24:	3001      	adds	r0, #1
 8008c26:	d1c2      	bne.n	8008bae <_printf_float+0x2f2>
 8008c28:	e6a3      	b.n	8008972 <_printf_float+0xb6>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	4631      	mov	r1, r6
 8008c2e:	4628      	mov	r0, r5
 8008c30:	9206      	str	r2, [sp, #24]
 8008c32:	47b8      	blx	r7
 8008c34:	3001      	adds	r0, #1
 8008c36:	f43f ae9c 	beq.w	8008972 <_printf_float+0xb6>
 8008c3a:	f10b 0b01 	add.w	fp, fp, #1
 8008c3e:	9a06      	ldr	r2, [sp, #24]
 8008c40:	e7bb      	b.n	8008bba <_printf_float+0x2fe>
 8008c42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c46:	4631      	mov	r1, r6
 8008c48:	4628      	mov	r0, r5
 8008c4a:	47b8      	blx	r7
 8008c4c:	3001      	adds	r0, #1
 8008c4e:	d1c0      	bne.n	8008bd2 <_printf_float+0x316>
 8008c50:	e68f      	b.n	8008972 <_printf_float+0xb6>
 8008c52:	9a06      	ldr	r2, [sp, #24]
 8008c54:	464b      	mov	r3, r9
 8008c56:	4631      	mov	r1, r6
 8008c58:	4628      	mov	r0, r5
 8008c5a:	4442      	add	r2, r8
 8008c5c:	47b8      	blx	r7
 8008c5e:	3001      	adds	r0, #1
 8008c60:	d1c3      	bne.n	8008bea <_printf_float+0x32e>
 8008c62:	e686      	b.n	8008972 <_printf_float+0xb6>
 8008c64:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008c68:	f1ba 0f01 	cmp.w	sl, #1
 8008c6c:	dc01      	bgt.n	8008c72 <_printf_float+0x3b6>
 8008c6e:	07db      	lsls	r3, r3, #31
 8008c70:	d536      	bpl.n	8008ce0 <_printf_float+0x424>
 8008c72:	2301      	movs	r3, #1
 8008c74:	4642      	mov	r2, r8
 8008c76:	4631      	mov	r1, r6
 8008c78:	4628      	mov	r0, r5
 8008c7a:	47b8      	blx	r7
 8008c7c:	3001      	adds	r0, #1
 8008c7e:	f43f ae78 	beq.w	8008972 <_printf_float+0xb6>
 8008c82:	4631      	mov	r1, r6
 8008c84:	4628      	mov	r0, r5
 8008c86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c8a:	47b8      	blx	r7
 8008c8c:	3001      	adds	r0, #1
 8008c8e:	f43f ae70 	beq.w	8008972 <_printf_float+0xb6>
 8008c92:	2200      	movs	r2, #0
 8008c94:	2300      	movs	r3, #0
 8008c96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008c9e:	f7f7 ff17 	bl	8000ad0 <__aeabi_dcmpeq>
 8008ca2:	b9c0      	cbnz	r0, 8008cd6 <_printf_float+0x41a>
 8008ca4:	4653      	mov	r3, sl
 8008ca6:	f108 0201 	add.w	r2, r8, #1
 8008caa:	4631      	mov	r1, r6
 8008cac:	4628      	mov	r0, r5
 8008cae:	47b8      	blx	r7
 8008cb0:	3001      	adds	r0, #1
 8008cb2:	d10c      	bne.n	8008cce <_printf_float+0x412>
 8008cb4:	e65d      	b.n	8008972 <_printf_float+0xb6>
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	465a      	mov	r2, fp
 8008cba:	4631      	mov	r1, r6
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	47b8      	blx	r7
 8008cc0:	3001      	adds	r0, #1
 8008cc2:	f43f ae56 	beq.w	8008972 <_printf_float+0xb6>
 8008cc6:	f108 0801 	add.w	r8, r8, #1
 8008cca:	45d0      	cmp	r8, sl
 8008ccc:	dbf3      	blt.n	8008cb6 <_printf_float+0x3fa>
 8008cce:	464b      	mov	r3, r9
 8008cd0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008cd4:	e6df      	b.n	8008a96 <_printf_float+0x1da>
 8008cd6:	f04f 0800 	mov.w	r8, #0
 8008cda:	f104 0b1a 	add.w	fp, r4, #26
 8008cde:	e7f4      	b.n	8008cca <_printf_float+0x40e>
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	4642      	mov	r2, r8
 8008ce4:	e7e1      	b.n	8008caa <_printf_float+0x3ee>
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	464a      	mov	r2, r9
 8008cea:	4631      	mov	r1, r6
 8008cec:	4628      	mov	r0, r5
 8008cee:	47b8      	blx	r7
 8008cf0:	3001      	adds	r0, #1
 8008cf2:	f43f ae3e 	beq.w	8008972 <_printf_float+0xb6>
 8008cf6:	f108 0801 	add.w	r8, r8, #1
 8008cfa:	68e3      	ldr	r3, [r4, #12]
 8008cfc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008cfe:	1a5b      	subs	r3, r3, r1
 8008d00:	4543      	cmp	r3, r8
 8008d02:	dcf0      	bgt.n	8008ce6 <_printf_float+0x42a>
 8008d04:	e6fc      	b.n	8008b00 <_printf_float+0x244>
 8008d06:	f04f 0800 	mov.w	r8, #0
 8008d0a:	f104 0919 	add.w	r9, r4, #25
 8008d0e:	e7f4      	b.n	8008cfa <_printf_float+0x43e>

08008d10 <_printf_common>:
 8008d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d14:	4616      	mov	r6, r2
 8008d16:	4698      	mov	r8, r3
 8008d18:	688a      	ldr	r2, [r1, #8]
 8008d1a:	4607      	mov	r7, r0
 8008d1c:	690b      	ldr	r3, [r1, #16]
 8008d1e:	460c      	mov	r4, r1
 8008d20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d24:	4293      	cmp	r3, r2
 8008d26:	bfb8      	it	lt
 8008d28:	4613      	movlt	r3, r2
 8008d2a:	6033      	str	r3, [r6, #0]
 8008d2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d30:	b10a      	cbz	r2, 8008d36 <_printf_common+0x26>
 8008d32:	3301      	adds	r3, #1
 8008d34:	6033      	str	r3, [r6, #0]
 8008d36:	6823      	ldr	r3, [r4, #0]
 8008d38:	0699      	lsls	r1, r3, #26
 8008d3a:	bf42      	ittt	mi
 8008d3c:	6833      	ldrmi	r3, [r6, #0]
 8008d3e:	3302      	addmi	r3, #2
 8008d40:	6033      	strmi	r3, [r6, #0]
 8008d42:	6825      	ldr	r5, [r4, #0]
 8008d44:	f015 0506 	ands.w	r5, r5, #6
 8008d48:	d106      	bne.n	8008d58 <_printf_common+0x48>
 8008d4a:	f104 0a19 	add.w	sl, r4, #25
 8008d4e:	68e3      	ldr	r3, [r4, #12]
 8008d50:	6832      	ldr	r2, [r6, #0]
 8008d52:	1a9b      	subs	r3, r3, r2
 8008d54:	42ab      	cmp	r3, r5
 8008d56:	dc2b      	bgt.n	8008db0 <_printf_common+0xa0>
 8008d58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d5c:	6822      	ldr	r2, [r4, #0]
 8008d5e:	3b00      	subs	r3, #0
 8008d60:	bf18      	it	ne
 8008d62:	2301      	movne	r3, #1
 8008d64:	0692      	lsls	r2, r2, #26
 8008d66:	d430      	bmi.n	8008dca <_printf_common+0xba>
 8008d68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d6c:	4641      	mov	r1, r8
 8008d6e:	4638      	mov	r0, r7
 8008d70:	47c8      	blx	r9
 8008d72:	3001      	adds	r0, #1
 8008d74:	d023      	beq.n	8008dbe <_printf_common+0xae>
 8008d76:	6823      	ldr	r3, [r4, #0]
 8008d78:	341a      	adds	r4, #26
 8008d7a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8008d7e:	f003 0306 	and.w	r3, r3, #6
 8008d82:	2b04      	cmp	r3, #4
 8008d84:	bf0a      	itet	eq
 8008d86:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8008d8a:	2500      	movne	r5, #0
 8008d8c:	6833      	ldreq	r3, [r6, #0]
 8008d8e:	f04f 0600 	mov.w	r6, #0
 8008d92:	bf08      	it	eq
 8008d94:	1aed      	subeq	r5, r5, r3
 8008d96:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008d9a:	bf08      	it	eq
 8008d9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008da0:	4293      	cmp	r3, r2
 8008da2:	bfc4      	itt	gt
 8008da4:	1a9b      	subgt	r3, r3, r2
 8008da6:	18ed      	addgt	r5, r5, r3
 8008da8:	42b5      	cmp	r5, r6
 8008daa:	d11a      	bne.n	8008de2 <_printf_common+0xd2>
 8008dac:	2000      	movs	r0, #0
 8008dae:	e008      	b.n	8008dc2 <_printf_common+0xb2>
 8008db0:	2301      	movs	r3, #1
 8008db2:	4652      	mov	r2, sl
 8008db4:	4641      	mov	r1, r8
 8008db6:	4638      	mov	r0, r7
 8008db8:	47c8      	blx	r9
 8008dba:	3001      	adds	r0, #1
 8008dbc:	d103      	bne.n	8008dc6 <_printf_common+0xb6>
 8008dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dc6:	3501      	adds	r5, #1
 8008dc8:	e7c1      	b.n	8008d4e <_printf_common+0x3e>
 8008dca:	18e1      	adds	r1, r4, r3
 8008dcc:	1c5a      	adds	r2, r3, #1
 8008dce:	2030      	movs	r0, #48	@ 0x30
 8008dd0:	3302      	adds	r3, #2
 8008dd2:	4422      	add	r2, r4
 8008dd4:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008dd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ddc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008de0:	e7c2      	b.n	8008d68 <_printf_common+0x58>
 8008de2:	2301      	movs	r3, #1
 8008de4:	4622      	mov	r2, r4
 8008de6:	4641      	mov	r1, r8
 8008de8:	4638      	mov	r0, r7
 8008dea:	47c8      	blx	r9
 8008dec:	3001      	adds	r0, #1
 8008dee:	d0e6      	beq.n	8008dbe <_printf_common+0xae>
 8008df0:	3601      	adds	r6, #1
 8008df2:	e7d9      	b.n	8008da8 <_printf_common+0x98>

08008df4 <_printf_i>:
 8008df4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008df8:	7e0f      	ldrb	r7, [r1, #24]
 8008dfa:	4691      	mov	r9, r2
 8008dfc:	4680      	mov	r8, r0
 8008dfe:	460c      	mov	r4, r1
 8008e00:	2f78      	cmp	r7, #120	@ 0x78
 8008e02:	469a      	mov	sl, r3
 8008e04:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008e06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e0a:	d807      	bhi.n	8008e1c <_printf_i+0x28>
 8008e0c:	2f62      	cmp	r7, #98	@ 0x62
 8008e0e:	d80a      	bhi.n	8008e26 <_printf_i+0x32>
 8008e10:	2f00      	cmp	r7, #0
 8008e12:	f000 80d2 	beq.w	8008fba <_printf_i+0x1c6>
 8008e16:	2f58      	cmp	r7, #88	@ 0x58
 8008e18:	f000 80b9 	beq.w	8008f8e <_printf_i+0x19a>
 8008e1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e24:	e03a      	b.n	8008e9c <_printf_i+0xa8>
 8008e26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e2a:	2b15      	cmp	r3, #21
 8008e2c:	d8f6      	bhi.n	8008e1c <_printf_i+0x28>
 8008e2e:	a101      	add	r1, pc, #4	@ (adr r1, 8008e34 <_printf_i+0x40>)
 8008e30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e34:	08008e8d 	.word	0x08008e8d
 8008e38:	08008ea1 	.word	0x08008ea1
 8008e3c:	08008e1d 	.word	0x08008e1d
 8008e40:	08008e1d 	.word	0x08008e1d
 8008e44:	08008e1d 	.word	0x08008e1d
 8008e48:	08008e1d 	.word	0x08008e1d
 8008e4c:	08008ea1 	.word	0x08008ea1
 8008e50:	08008e1d 	.word	0x08008e1d
 8008e54:	08008e1d 	.word	0x08008e1d
 8008e58:	08008e1d 	.word	0x08008e1d
 8008e5c:	08008e1d 	.word	0x08008e1d
 8008e60:	08008fa1 	.word	0x08008fa1
 8008e64:	08008ecb 	.word	0x08008ecb
 8008e68:	08008f5b 	.word	0x08008f5b
 8008e6c:	08008e1d 	.word	0x08008e1d
 8008e70:	08008e1d 	.word	0x08008e1d
 8008e74:	08008fc3 	.word	0x08008fc3
 8008e78:	08008e1d 	.word	0x08008e1d
 8008e7c:	08008ecb 	.word	0x08008ecb
 8008e80:	08008e1d 	.word	0x08008e1d
 8008e84:	08008e1d 	.word	0x08008e1d
 8008e88:	08008f63 	.word	0x08008f63
 8008e8c:	6833      	ldr	r3, [r6, #0]
 8008e8e:	1d1a      	adds	r2, r3, #4
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6032      	str	r2, [r6, #0]
 8008e94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e09d      	b.n	8008fdc <_printf_i+0x1e8>
 8008ea0:	6833      	ldr	r3, [r6, #0]
 8008ea2:	6820      	ldr	r0, [r4, #0]
 8008ea4:	1d19      	adds	r1, r3, #4
 8008ea6:	6031      	str	r1, [r6, #0]
 8008ea8:	0606      	lsls	r6, r0, #24
 8008eaa:	d501      	bpl.n	8008eb0 <_printf_i+0xbc>
 8008eac:	681d      	ldr	r5, [r3, #0]
 8008eae:	e003      	b.n	8008eb8 <_printf_i+0xc4>
 8008eb0:	0645      	lsls	r5, r0, #25
 8008eb2:	d5fb      	bpl.n	8008eac <_printf_i+0xb8>
 8008eb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008eb8:	2d00      	cmp	r5, #0
 8008eba:	da03      	bge.n	8008ec4 <_printf_i+0xd0>
 8008ebc:	232d      	movs	r3, #45	@ 0x2d
 8008ebe:	426d      	negs	r5, r5
 8008ec0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ec4:	4859      	ldr	r0, [pc, #356]	@ (800902c <_printf_i+0x238>)
 8008ec6:	230a      	movs	r3, #10
 8008ec8:	e011      	b.n	8008eee <_printf_i+0xfa>
 8008eca:	6821      	ldr	r1, [r4, #0]
 8008ecc:	6833      	ldr	r3, [r6, #0]
 8008ece:	0608      	lsls	r0, r1, #24
 8008ed0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ed4:	d402      	bmi.n	8008edc <_printf_i+0xe8>
 8008ed6:	0649      	lsls	r1, r1, #25
 8008ed8:	bf48      	it	mi
 8008eda:	b2ad      	uxthmi	r5, r5
 8008edc:	2f6f      	cmp	r7, #111	@ 0x6f
 8008ede:	6033      	str	r3, [r6, #0]
 8008ee0:	4852      	ldr	r0, [pc, #328]	@ (800902c <_printf_i+0x238>)
 8008ee2:	bf14      	ite	ne
 8008ee4:	230a      	movne	r3, #10
 8008ee6:	2308      	moveq	r3, #8
 8008ee8:	2100      	movs	r1, #0
 8008eea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008eee:	6866      	ldr	r6, [r4, #4]
 8008ef0:	2e00      	cmp	r6, #0
 8008ef2:	60a6      	str	r6, [r4, #8]
 8008ef4:	bfa2      	ittt	ge
 8008ef6:	6821      	ldrge	r1, [r4, #0]
 8008ef8:	f021 0104 	bicge.w	r1, r1, #4
 8008efc:	6021      	strge	r1, [r4, #0]
 8008efe:	b90d      	cbnz	r5, 8008f04 <_printf_i+0x110>
 8008f00:	2e00      	cmp	r6, #0
 8008f02:	d04b      	beq.n	8008f9c <_printf_i+0x1a8>
 8008f04:	4616      	mov	r6, r2
 8008f06:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f0a:	fb03 5711 	mls	r7, r3, r1, r5
 8008f0e:	5dc7      	ldrb	r7, [r0, r7]
 8008f10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f14:	462f      	mov	r7, r5
 8008f16:	460d      	mov	r5, r1
 8008f18:	42bb      	cmp	r3, r7
 8008f1a:	d9f4      	bls.n	8008f06 <_printf_i+0x112>
 8008f1c:	2b08      	cmp	r3, #8
 8008f1e:	d10b      	bne.n	8008f38 <_printf_i+0x144>
 8008f20:	6823      	ldr	r3, [r4, #0]
 8008f22:	07df      	lsls	r7, r3, #31
 8008f24:	d508      	bpl.n	8008f38 <_printf_i+0x144>
 8008f26:	6923      	ldr	r3, [r4, #16]
 8008f28:	6861      	ldr	r1, [r4, #4]
 8008f2a:	4299      	cmp	r1, r3
 8008f2c:	bfde      	ittt	le
 8008f2e:	2330      	movle	r3, #48	@ 0x30
 8008f30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008f38:	1b92      	subs	r2, r2, r6
 8008f3a:	6122      	str	r2, [r4, #16]
 8008f3c:	464b      	mov	r3, r9
 8008f3e:	aa03      	add	r2, sp, #12
 8008f40:	4621      	mov	r1, r4
 8008f42:	4640      	mov	r0, r8
 8008f44:	f8cd a000 	str.w	sl, [sp]
 8008f48:	f7ff fee2 	bl	8008d10 <_printf_common>
 8008f4c:	3001      	adds	r0, #1
 8008f4e:	d14a      	bne.n	8008fe6 <_printf_i+0x1f2>
 8008f50:	f04f 30ff 	mov.w	r0, #4294967295
 8008f54:	b004      	add	sp, #16
 8008f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f5a:	6823      	ldr	r3, [r4, #0]
 8008f5c:	f043 0320 	orr.w	r3, r3, #32
 8008f60:	6023      	str	r3, [r4, #0]
 8008f62:	2778      	movs	r7, #120	@ 0x78
 8008f64:	4832      	ldr	r0, [pc, #200]	@ (8009030 <_printf_i+0x23c>)
 8008f66:	6823      	ldr	r3, [r4, #0]
 8008f68:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f6c:	061f      	lsls	r7, r3, #24
 8008f6e:	6831      	ldr	r1, [r6, #0]
 8008f70:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f74:	d402      	bmi.n	8008f7c <_printf_i+0x188>
 8008f76:	065f      	lsls	r7, r3, #25
 8008f78:	bf48      	it	mi
 8008f7a:	b2ad      	uxthmi	r5, r5
 8008f7c:	6031      	str	r1, [r6, #0]
 8008f7e:	07d9      	lsls	r1, r3, #31
 8008f80:	bf44      	itt	mi
 8008f82:	f043 0320 	orrmi.w	r3, r3, #32
 8008f86:	6023      	strmi	r3, [r4, #0]
 8008f88:	b11d      	cbz	r5, 8008f92 <_printf_i+0x19e>
 8008f8a:	2310      	movs	r3, #16
 8008f8c:	e7ac      	b.n	8008ee8 <_printf_i+0xf4>
 8008f8e:	4827      	ldr	r0, [pc, #156]	@ (800902c <_printf_i+0x238>)
 8008f90:	e7e9      	b.n	8008f66 <_printf_i+0x172>
 8008f92:	6823      	ldr	r3, [r4, #0]
 8008f94:	f023 0320 	bic.w	r3, r3, #32
 8008f98:	6023      	str	r3, [r4, #0]
 8008f9a:	e7f6      	b.n	8008f8a <_printf_i+0x196>
 8008f9c:	4616      	mov	r6, r2
 8008f9e:	e7bd      	b.n	8008f1c <_printf_i+0x128>
 8008fa0:	6833      	ldr	r3, [r6, #0]
 8008fa2:	6825      	ldr	r5, [r4, #0]
 8008fa4:	1d18      	adds	r0, r3, #4
 8008fa6:	6961      	ldr	r1, [r4, #20]
 8008fa8:	6030      	str	r0, [r6, #0]
 8008faa:	062e      	lsls	r6, r5, #24
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	d501      	bpl.n	8008fb4 <_printf_i+0x1c0>
 8008fb0:	6019      	str	r1, [r3, #0]
 8008fb2:	e002      	b.n	8008fba <_printf_i+0x1c6>
 8008fb4:	0668      	lsls	r0, r5, #25
 8008fb6:	d5fb      	bpl.n	8008fb0 <_printf_i+0x1bc>
 8008fb8:	8019      	strh	r1, [r3, #0]
 8008fba:	2300      	movs	r3, #0
 8008fbc:	4616      	mov	r6, r2
 8008fbe:	6123      	str	r3, [r4, #16]
 8008fc0:	e7bc      	b.n	8008f3c <_printf_i+0x148>
 8008fc2:	6833      	ldr	r3, [r6, #0]
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	1d1a      	adds	r2, r3, #4
 8008fc8:	6032      	str	r2, [r6, #0]
 8008fca:	681e      	ldr	r6, [r3, #0]
 8008fcc:	6862      	ldr	r2, [r4, #4]
 8008fce:	4630      	mov	r0, r6
 8008fd0:	f000 fab9 	bl	8009546 <memchr>
 8008fd4:	b108      	cbz	r0, 8008fda <_printf_i+0x1e6>
 8008fd6:	1b80      	subs	r0, r0, r6
 8008fd8:	6060      	str	r0, [r4, #4]
 8008fda:	6863      	ldr	r3, [r4, #4]
 8008fdc:	6123      	str	r3, [r4, #16]
 8008fde:	2300      	movs	r3, #0
 8008fe0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fe4:	e7aa      	b.n	8008f3c <_printf_i+0x148>
 8008fe6:	6923      	ldr	r3, [r4, #16]
 8008fe8:	4632      	mov	r2, r6
 8008fea:	4649      	mov	r1, r9
 8008fec:	4640      	mov	r0, r8
 8008fee:	47d0      	blx	sl
 8008ff0:	3001      	adds	r0, #1
 8008ff2:	d0ad      	beq.n	8008f50 <_printf_i+0x15c>
 8008ff4:	6823      	ldr	r3, [r4, #0]
 8008ff6:	079b      	lsls	r3, r3, #30
 8008ff8:	d413      	bmi.n	8009022 <_printf_i+0x22e>
 8008ffa:	68e0      	ldr	r0, [r4, #12]
 8008ffc:	9b03      	ldr	r3, [sp, #12]
 8008ffe:	4298      	cmp	r0, r3
 8009000:	bfb8      	it	lt
 8009002:	4618      	movlt	r0, r3
 8009004:	e7a6      	b.n	8008f54 <_printf_i+0x160>
 8009006:	2301      	movs	r3, #1
 8009008:	4632      	mov	r2, r6
 800900a:	4649      	mov	r1, r9
 800900c:	4640      	mov	r0, r8
 800900e:	47d0      	blx	sl
 8009010:	3001      	adds	r0, #1
 8009012:	d09d      	beq.n	8008f50 <_printf_i+0x15c>
 8009014:	3501      	adds	r5, #1
 8009016:	68e3      	ldr	r3, [r4, #12]
 8009018:	9903      	ldr	r1, [sp, #12]
 800901a:	1a5b      	subs	r3, r3, r1
 800901c:	42ab      	cmp	r3, r5
 800901e:	dcf2      	bgt.n	8009006 <_printf_i+0x212>
 8009020:	e7eb      	b.n	8008ffa <_printf_i+0x206>
 8009022:	2500      	movs	r5, #0
 8009024:	f104 0619 	add.w	r6, r4, #25
 8009028:	e7f5      	b.n	8009016 <_printf_i+0x222>
 800902a:	bf00      	nop
 800902c:	0800b342 	.word	0x0800b342
 8009030:	0800b353 	.word	0x0800b353

08009034 <std>:
 8009034:	2300      	movs	r3, #0
 8009036:	b510      	push	{r4, lr}
 8009038:	4604      	mov	r4, r0
 800903a:	6083      	str	r3, [r0, #8]
 800903c:	8181      	strh	r1, [r0, #12]
 800903e:	4619      	mov	r1, r3
 8009040:	6643      	str	r3, [r0, #100]	@ 0x64
 8009042:	81c2      	strh	r2, [r0, #14]
 8009044:	2208      	movs	r2, #8
 8009046:	6183      	str	r3, [r0, #24]
 8009048:	e9c0 3300 	strd	r3, r3, [r0]
 800904c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009050:	305c      	adds	r0, #92	@ 0x5c
 8009052:	f000 f9f9 	bl	8009448 <memset>
 8009056:	4b0d      	ldr	r3, [pc, #52]	@ (800908c <std+0x58>)
 8009058:	6224      	str	r4, [r4, #32]
 800905a:	6263      	str	r3, [r4, #36]	@ 0x24
 800905c:	4b0c      	ldr	r3, [pc, #48]	@ (8009090 <std+0x5c>)
 800905e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009060:	4b0c      	ldr	r3, [pc, #48]	@ (8009094 <std+0x60>)
 8009062:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009064:	4b0c      	ldr	r3, [pc, #48]	@ (8009098 <std+0x64>)
 8009066:	6323      	str	r3, [r4, #48]	@ 0x30
 8009068:	4b0c      	ldr	r3, [pc, #48]	@ (800909c <std+0x68>)
 800906a:	429c      	cmp	r4, r3
 800906c:	d006      	beq.n	800907c <std+0x48>
 800906e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009072:	4294      	cmp	r4, r2
 8009074:	d002      	beq.n	800907c <std+0x48>
 8009076:	33d0      	adds	r3, #208	@ 0xd0
 8009078:	429c      	cmp	r4, r3
 800907a:	d105      	bne.n	8009088 <std+0x54>
 800907c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009084:	f000 ba5c 	b.w	8009540 <__retarget_lock_init_recursive>
 8009088:	bd10      	pop	{r4, pc}
 800908a:	bf00      	nop
 800908c:	08009299 	.word	0x08009299
 8009090:	080092bb 	.word	0x080092bb
 8009094:	080092f3 	.word	0x080092f3
 8009098:	08009317 	.word	0x08009317
 800909c:	200004e4 	.word	0x200004e4

080090a0 <stdio_exit_handler>:
 80090a0:	4a02      	ldr	r2, [pc, #8]	@ (80090ac <stdio_exit_handler+0xc>)
 80090a2:	4903      	ldr	r1, [pc, #12]	@ (80090b0 <stdio_exit_handler+0x10>)
 80090a4:	4803      	ldr	r0, [pc, #12]	@ (80090b4 <stdio_exit_handler+0x14>)
 80090a6:	f000 b869 	b.w	800917c <_fwalk_sglue>
 80090aa:	bf00      	nop
 80090ac:	20000020 	.word	0x20000020
 80090b0:	0800aea5 	.word	0x0800aea5
 80090b4:	20000030 	.word	0x20000030

080090b8 <cleanup_stdio>:
 80090b8:	6841      	ldr	r1, [r0, #4]
 80090ba:	4b0c      	ldr	r3, [pc, #48]	@ (80090ec <cleanup_stdio+0x34>)
 80090bc:	4299      	cmp	r1, r3
 80090be:	b510      	push	{r4, lr}
 80090c0:	4604      	mov	r4, r0
 80090c2:	d001      	beq.n	80090c8 <cleanup_stdio+0x10>
 80090c4:	f001 feee 	bl	800aea4 <_fflush_r>
 80090c8:	68a1      	ldr	r1, [r4, #8]
 80090ca:	4b09      	ldr	r3, [pc, #36]	@ (80090f0 <cleanup_stdio+0x38>)
 80090cc:	4299      	cmp	r1, r3
 80090ce:	d002      	beq.n	80090d6 <cleanup_stdio+0x1e>
 80090d0:	4620      	mov	r0, r4
 80090d2:	f001 fee7 	bl	800aea4 <_fflush_r>
 80090d6:	68e1      	ldr	r1, [r4, #12]
 80090d8:	4b06      	ldr	r3, [pc, #24]	@ (80090f4 <cleanup_stdio+0x3c>)
 80090da:	4299      	cmp	r1, r3
 80090dc:	d004      	beq.n	80090e8 <cleanup_stdio+0x30>
 80090de:	4620      	mov	r0, r4
 80090e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090e4:	f001 bede 	b.w	800aea4 <_fflush_r>
 80090e8:	bd10      	pop	{r4, pc}
 80090ea:	bf00      	nop
 80090ec:	200004e4 	.word	0x200004e4
 80090f0:	2000054c 	.word	0x2000054c
 80090f4:	200005b4 	.word	0x200005b4

080090f8 <global_stdio_init.part.0>:
 80090f8:	b510      	push	{r4, lr}
 80090fa:	4b0b      	ldr	r3, [pc, #44]	@ (8009128 <global_stdio_init.part.0+0x30>)
 80090fc:	2104      	movs	r1, #4
 80090fe:	4c0b      	ldr	r4, [pc, #44]	@ (800912c <global_stdio_init.part.0+0x34>)
 8009100:	4a0b      	ldr	r2, [pc, #44]	@ (8009130 <global_stdio_init.part.0+0x38>)
 8009102:	4620      	mov	r0, r4
 8009104:	601a      	str	r2, [r3, #0]
 8009106:	2200      	movs	r2, #0
 8009108:	f7ff ff94 	bl	8009034 <std>
 800910c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009110:	2201      	movs	r2, #1
 8009112:	2109      	movs	r1, #9
 8009114:	f7ff ff8e 	bl	8009034 <std>
 8009118:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800911c:	2202      	movs	r2, #2
 800911e:	2112      	movs	r1, #18
 8009120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009124:	f7ff bf86 	b.w	8009034 <std>
 8009128:	2000061c 	.word	0x2000061c
 800912c:	200004e4 	.word	0x200004e4
 8009130:	080090a1 	.word	0x080090a1

08009134 <__sfp_lock_acquire>:
 8009134:	4801      	ldr	r0, [pc, #4]	@ (800913c <__sfp_lock_acquire+0x8>)
 8009136:	f000 ba04 	b.w	8009542 <__retarget_lock_acquire_recursive>
 800913a:	bf00      	nop
 800913c:	20000625 	.word	0x20000625

08009140 <__sfp_lock_release>:
 8009140:	4801      	ldr	r0, [pc, #4]	@ (8009148 <__sfp_lock_release+0x8>)
 8009142:	f000 b9ff 	b.w	8009544 <__retarget_lock_release_recursive>
 8009146:	bf00      	nop
 8009148:	20000625 	.word	0x20000625

0800914c <__sinit>:
 800914c:	b510      	push	{r4, lr}
 800914e:	4604      	mov	r4, r0
 8009150:	f7ff fff0 	bl	8009134 <__sfp_lock_acquire>
 8009154:	6a23      	ldr	r3, [r4, #32]
 8009156:	b11b      	cbz	r3, 8009160 <__sinit+0x14>
 8009158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800915c:	f7ff bff0 	b.w	8009140 <__sfp_lock_release>
 8009160:	4b04      	ldr	r3, [pc, #16]	@ (8009174 <__sinit+0x28>)
 8009162:	6223      	str	r3, [r4, #32]
 8009164:	4b04      	ldr	r3, [pc, #16]	@ (8009178 <__sinit+0x2c>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d1f5      	bne.n	8009158 <__sinit+0xc>
 800916c:	f7ff ffc4 	bl	80090f8 <global_stdio_init.part.0>
 8009170:	e7f2      	b.n	8009158 <__sinit+0xc>
 8009172:	bf00      	nop
 8009174:	080090b9 	.word	0x080090b9
 8009178:	2000061c 	.word	0x2000061c

0800917c <_fwalk_sglue>:
 800917c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009180:	4607      	mov	r7, r0
 8009182:	4688      	mov	r8, r1
 8009184:	4614      	mov	r4, r2
 8009186:	2600      	movs	r6, #0
 8009188:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800918c:	f1b9 0901 	subs.w	r9, r9, #1
 8009190:	d505      	bpl.n	800919e <_fwalk_sglue+0x22>
 8009192:	6824      	ldr	r4, [r4, #0]
 8009194:	2c00      	cmp	r4, #0
 8009196:	d1f7      	bne.n	8009188 <_fwalk_sglue+0xc>
 8009198:	4630      	mov	r0, r6
 800919a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800919e:	89ab      	ldrh	r3, [r5, #12]
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d907      	bls.n	80091b4 <_fwalk_sglue+0x38>
 80091a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091a8:	3301      	adds	r3, #1
 80091aa:	d003      	beq.n	80091b4 <_fwalk_sglue+0x38>
 80091ac:	4629      	mov	r1, r5
 80091ae:	4638      	mov	r0, r7
 80091b0:	47c0      	blx	r8
 80091b2:	4306      	orrs	r6, r0
 80091b4:	3568      	adds	r5, #104	@ 0x68
 80091b6:	e7e9      	b.n	800918c <_fwalk_sglue+0x10>

080091b8 <iprintf>:
 80091b8:	b40f      	push	{r0, r1, r2, r3}
 80091ba:	b507      	push	{r0, r1, r2, lr}
 80091bc:	4906      	ldr	r1, [pc, #24]	@ (80091d8 <iprintf+0x20>)
 80091be:	ab04      	add	r3, sp, #16
 80091c0:	6808      	ldr	r0, [r1, #0]
 80091c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80091c6:	6881      	ldr	r1, [r0, #8]
 80091c8:	9301      	str	r3, [sp, #4]
 80091ca:	f001 fccf 	bl	800ab6c <_vfiprintf_r>
 80091ce:	b003      	add	sp, #12
 80091d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80091d4:	b004      	add	sp, #16
 80091d6:	4770      	bx	lr
 80091d8:	2000002c 	.word	0x2000002c

080091dc <_puts_r>:
 80091dc:	6a03      	ldr	r3, [r0, #32]
 80091de:	b570      	push	{r4, r5, r6, lr}
 80091e0:	4605      	mov	r5, r0
 80091e2:	460e      	mov	r6, r1
 80091e4:	6884      	ldr	r4, [r0, #8]
 80091e6:	b90b      	cbnz	r3, 80091ec <_puts_r+0x10>
 80091e8:	f7ff ffb0 	bl	800914c <__sinit>
 80091ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091ee:	07db      	lsls	r3, r3, #31
 80091f0:	d405      	bmi.n	80091fe <_puts_r+0x22>
 80091f2:	89a3      	ldrh	r3, [r4, #12]
 80091f4:	0598      	lsls	r0, r3, #22
 80091f6:	d402      	bmi.n	80091fe <_puts_r+0x22>
 80091f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091fa:	f000 f9a2 	bl	8009542 <__retarget_lock_acquire_recursive>
 80091fe:	89a3      	ldrh	r3, [r4, #12]
 8009200:	0719      	lsls	r1, r3, #28
 8009202:	d502      	bpl.n	800920a <_puts_r+0x2e>
 8009204:	6923      	ldr	r3, [r4, #16]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d135      	bne.n	8009276 <_puts_r+0x9a>
 800920a:	4621      	mov	r1, r4
 800920c:	4628      	mov	r0, r5
 800920e:	f000 f8c5 	bl	800939c <__swsetup_r>
 8009212:	b380      	cbz	r0, 8009276 <_puts_r+0x9a>
 8009214:	f04f 35ff 	mov.w	r5, #4294967295
 8009218:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800921a:	07da      	lsls	r2, r3, #31
 800921c:	d405      	bmi.n	800922a <_puts_r+0x4e>
 800921e:	89a3      	ldrh	r3, [r4, #12]
 8009220:	059b      	lsls	r3, r3, #22
 8009222:	d402      	bmi.n	800922a <_puts_r+0x4e>
 8009224:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009226:	f000 f98d 	bl	8009544 <__retarget_lock_release_recursive>
 800922a:	4628      	mov	r0, r5
 800922c:	bd70      	pop	{r4, r5, r6, pc}
 800922e:	2b00      	cmp	r3, #0
 8009230:	da04      	bge.n	800923c <_puts_r+0x60>
 8009232:	69a2      	ldr	r2, [r4, #24]
 8009234:	429a      	cmp	r2, r3
 8009236:	dc17      	bgt.n	8009268 <_puts_r+0x8c>
 8009238:	290a      	cmp	r1, #10
 800923a:	d015      	beq.n	8009268 <_puts_r+0x8c>
 800923c:	6823      	ldr	r3, [r4, #0]
 800923e:	1c5a      	adds	r2, r3, #1
 8009240:	6022      	str	r2, [r4, #0]
 8009242:	7019      	strb	r1, [r3, #0]
 8009244:	68a3      	ldr	r3, [r4, #8]
 8009246:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800924a:	3b01      	subs	r3, #1
 800924c:	60a3      	str	r3, [r4, #8]
 800924e:	2900      	cmp	r1, #0
 8009250:	d1ed      	bne.n	800922e <_puts_r+0x52>
 8009252:	2b00      	cmp	r3, #0
 8009254:	da11      	bge.n	800927a <_puts_r+0x9e>
 8009256:	4622      	mov	r2, r4
 8009258:	210a      	movs	r1, #10
 800925a:	4628      	mov	r0, r5
 800925c:	f000 f85f 	bl	800931e <__swbuf_r>
 8009260:	3001      	adds	r0, #1
 8009262:	d0d7      	beq.n	8009214 <_puts_r+0x38>
 8009264:	250a      	movs	r5, #10
 8009266:	e7d7      	b.n	8009218 <_puts_r+0x3c>
 8009268:	4622      	mov	r2, r4
 800926a:	4628      	mov	r0, r5
 800926c:	f000 f857 	bl	800931e <__swbuf_r>
 8009270:	3001      	adds	r0, #1
 8009272:	d1e7      	bne.n	8009244 <_puts_r+0x68>
 8009274:	e7ce      	b.n	8009214 <_puts_r+0x38>
 8009276:	3e01      	subs	r6, #1
 8009278:	e7e4      	b.n	8009244 <_puts_r+0x68>
 800927a:	6823      	ldr	r3, [r4, #0]
 800927c:	1c5a      	adds	r2, r3, #1
 800927e:	6022      	str	r2, [r4, #0]
 8009280:	220a      	movs	r2, #10
 8009282:	701a      	strb	r2, [r3, #0]
 8009284:	e7ee      	b.n	8009264 <_puts_r+0x88>
	...

08009288 <puts>:
 8009288:	4b02      	ldr	r3, [pc, #8]	@ (8009294 <puts+0xc>)
 800928a:	4601      	mov	r1, r0
 800928c:	6818      	ldr	r0, [r3, #0]
 800928e:	f7ff bfa5 	b.w	80091dc <_puts_r>
 8009292:	bf00      	nop
 8009294:	2000002c 	.word	0x2000002c

08009298 <__sread>:
 8009298:	b510      	push	{r4, lr}
 800929a:	460c      	mov	r4, r1
 800929c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a0:	f000 f900 	bl	80094a4 <_read_r>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	bfab      	itete	ge
 80092a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80092aa:	89a3      	ldrhlt	r3, [r4, #12]
 80092ac:	181b      	addge	r3, r3, r0
 80092ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80092b2:	bfac      	ite	ge
 80092b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80092b6:	81a3      	strhlt	r3, [r4, #12]
 80092b8:	bd10      	pop	{r4, pc}

080092ba <__swrite>:
 80092ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092be:	461f      	mov	r7, r3
 80092c0:	898b      	ldrh	r3, [r1, #12]
 80092c2:	4605      	mov	r5, r0
 80092c4:	460c      	mov	r4, r1
 80092c6:	05db      	lsls	r3, r3, #23
 80092c8:	4616      	mov	r6, r2
 80092ca:	d505      	bpl.n	80092d8 <__swrite+0x1e>
 80092cc:	2302      	movs	r3, #2
 80092ce:	2200      	movs	r2, #0
 80092d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092d4:	f000 f8d4 	bl	8009480 <_lseek_r>
 80092d8:	89a3      	ldrh	r3, [r4, #12]
 80092da:	4632      	mov	r2, r6
 80092dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092e0:	4628      	mov	r0, r5
 80092e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80092e6:	81a3      	strh	r3, [r4, #12]
 80092e8:	463b      	mov	r3, r7
 80092ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092ee:	f000 b8eb 	b.w	80094c8 <_write_r>

080092f2 <__sseek>:
 80092f2:	b510      	push	{r4, lr}
 80092f4:	460c      	mov	r4, r1
 80092f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092fa:	f000 f8c1 	bl	8009480 <_lseek_r>
 80092fe:	1c43      	adds	r3, r0, #1
 8009300:	89a3      	ldrh	r3, [r4, #12]
 8009302:	bf15      	itete	ne
 8009304:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009306:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800930a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800930e:	81a3      	strheq	r3, [r4, #12]
 8009310:	bf18      	it	ne
 8009312:	81a3      	strhne	r3, [r4, #12]
 8009314:	bd10      	pop	{r4, pc}

08009316 <__sclose>:
 8009316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800931a:	f000 b8a1 	b.w	8009460 <_close_r>

0800931e <__swbuf_r>:
 800931e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009320:	460e      	mov	r6, r1
 8009322:	4614      	mov	r4, r2
 8009324:	4605      	mov	r5, r0
 8009326:	b118      	cbz	r0, 8009330 <__swbuf_r+0x12>
 8009328:	6a03      	ldr	r3, [r0, #32]
 800932a:	b90b      	cbnz	r3, 8009330 <__swbuf_r+0x12>
 800932c:	f7ff ff0e 	bl	800914c <__sinit>
 8009330:	69a3      	ldr	r3, [r4, #24]
 8009332:	60a3      	str	r3, [r4, #8]
 8009334:	89a3      	ldrh	r3, [r4, #12]
 8009336:	071a      	lsls	r2, r3, #28
 8009338:	d501      	bpl.n	800933e <__swbuf_r+0x20>
 800933a:	6923      	ldr	r3, [r4, #16]
 800933c:	b943      	cbnz	r3, 8009350 <__swbuf_r+0x32>
 800933e:	4621      	mov	r1, r4
 8009340:	4628      	mov	r0, r5
 8009342:	f000 f82b 	bl	800939c <__swsetup_r>
 8009346:	b118      	cbz	r0, 8009350 <__swbuf_r+0x32>
 8009348:	f04f 37ff 	mov.w	r7, #4294967295
 800934c:	4638      	mov	r0, r7
 800934e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009350:	6823      	ldr	r3, [r4, #0]
 8009352:	b2f6      	uxtb	r6, r6
 8009354:	6922      	ldr	r2, [r4, #16]
 8009356:	4637      	mov	r7, r6
 8009358:	1a98      	subs	r0, r3, r2
 800935a:	6963      	ldr	r3, [r4, #20]
 800935c:	4283      	cmp	r3, r0
 800935e:	dc05      	bgt.n	800936c <__swbuf_r+0x4e>
 8009360:	4621      	mov	r1, r4
 8009362:	4628      	mov	r0, r5
 8009364:	f001 fd9e 	bl	800aea4 <_fflush_r>
 8009368:	2800      	cmp	r0, #0
 800936a:	d1ed      	bne.n	8009348 <__swbuf_r+0x2a>
 800936c:	68a3      	ldr	r3, [r4, #8]
 800936e:	3b01      	subs	r3, #1
 8009370:	60a3      	str	r3, [r4, #8]
 8009372:	6823      	ldr	r3, [r4, #0]
 8009374:	1c5a      	adds	r2, r3, #1
 8009376:	6022      	str	r2, [r4, #0]
 8009378:	701e      	strb	r6, [r3, #0]
 800937a:	1c43      	adds	r3, r0, #1
 800937c:	6962      	ldr	r2, [r4, #20]
 800937e:	429a      	cmp	r2, r3
 8009380:	d004      	beq.n	800938c <__swbuf_r+0x6e>
 8009382:	89a3      	ldrh	r3, [r4, #12]
 8009384:	07db      	lsls	r3, r3, #31
 8009386:	d5e1      	bpl.n	800934c <__swbuf_r+0x2e>
 8009388:	2e0a      	cmp	r6, #10
 800938a:	d1df      	bne.n	800934c <__swbuf_r+0x2e>
 800938c:	4621      	mov	r1, r4
 800938e:	4628      	mov	r0, r5
 8009390:	f001 fd88 	bl	800aea4 <_fflush_r>
 8009394:	2800      	cmp	r0, #0
 8009396:	d0d9      	beq.n	800934c <__swbuf_r+0x2e>
 8009398:	e7d6      	b.n	8009348 <__swbuf_r+0x2a>
	...

0800939c <__swsetup_r>:
 800939c:	b538      	push	{r3, r4, r5, lr}
 800939e:	4b29      	ldr	r3, [pc, #164]	@ (8009444 <__swsetup_r+0xa8>)
 80093a0:	4605      	mov	r5, r0
 80093a2:	460c      	mov	r4, r1
 80093a4:	6818      	ldr	r0, [r3, #0]
 80093a6:	b118      	cbz	r0, 80093b0 <__swsetup_r+0x14>
 80093a8:	6a03      	ldr	r3, [r0, #32]
 80093aa:	b90b      	cbnz	r3, 80093b0 <__swsetup_r+0x14>
 80093ac:	f7ff fece 	bl	800914c <__sinit>
 80093b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093b4:	0719      	lsls	r1, r3, #28
 80093b6:	d422      	bmi.n	80093fe <__swsetup_r+0x62>
 80093b8:	06da      	lsls	r2, r3, #27
 80093ba:	d407      	bmi.n	80093cc <__swsetup_r+0x30>
 80093bc:	2209      	movs	r2, #9
 80093be:	602a      	str	r2, [r5, #0]
 80093c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093c4:	f04f 30ff 	mov.w	r0, #4294967295
 80093c8:	81a3      	strh	r3, [r4, #12]
 80093ca:	e033      	b.n	8009434 <__swsetup_r+0x98>
 80093cc:	0758      	lsls	r0, r3, #29
 80093ce:	d512      	bpl.n	80093f6 <__swsetup_r+0x5a>
 80093d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093d2:	b141      	cbz	r1, 80093e6 <__swsetup_r+0x4a>
 80093d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093d8:	4299      	cmp	r1, r3
 80093da:	d002      	beq.n	80093e2 <__swsetup_r+0x46>
 80093dc:	4628      	mov	r0, r5
 80093de:	f000 ff13 	bl	800a208 <_free_r>
 80093e2:	2300      	movs	r3, #0
 80093e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80093e6:	89a3      	ldrh	r3, [r4, #12]
 80093e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80093ec:	81a3      	strh	r3, [r4, #12]
 80093ee:	2300      	movs	r3, #0
 80093f0:	6063      	str	r3, [r4, #4]
 80093f2:	6923      	ldr	r3, [r4, #16]
 80093f4:	6023      	str	r3, [r4, #0]
 80093f6:	89a3      	ldrh	r3, [r4, #12]
 80093f8:	f043 0308 	orr.w	r3, r3, #8
 80093fc:	81a3      	strh	r3, [r4, #12]
 80093fe:	6923      	ldr	r3, [r4, #16]
 8009400:	b94b      	cbnz	r3, 8009416 <__swsetup_r+0x7a>
 8009402:	89a3      	ldrh	r3, [r4, #12]
 8009404:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009408:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800940c:	d003      	beq.n	8009416 <__swsetup_r+0x7a>
 800940e:	4621      	mov	r1, r4
 8009410:	4628      	mov	r0, r5
 8009412:	f001 fd94 	bl	800af3e <__smakebuf_r>
 8009416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800941a:	f013 0201 	ands.w	r2, r3, #1
 800941e:	d00a      	beq.n	8009436 <__swsetup_r+0x9a>
 8009420:	2200      	movs	r2, #0
 8009422:	60a2      	str	r2, [r4, #8]
 8009424:	6962      	ldr	r2, [r4, #20]
 8009426:	4252      	negs	r2, r2
 8009428:	61a2      	str	r2, [r4, #24]
 800942a:	6922      	ldr	r2, [r4, #16]
 800942c:	b942      	cbnz	r2, 8009440 <__swsetup_r+0xa4>
 800942e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009432:	d1c5      	bne.n	80093c0 <__swsetup_r+0x24>
 8009434:	bd38      	pop	{r3, r4, r5, pc}
 8009436:	0799      	lsls	r1, r3, #30
 8009438:	bf58      	it	pl
 800943a:	6962      	ldrpl	r2, [r4, #20]
 800943c:	60a2      	str	r2, [r4, #8]
 800943e:	e7f4      	b.n	800942a <__swsetup_r+0x8e>
 8009440:	2000      	movs	r0, #0
 8009442:	e7f7      	b.n	8009434 <__swsetup_r+0x98>
 8009444:	2000002c 	.word	0x2000002c

08009448 <memset>:
 8009448:	4402      	add	r2, r0
 800944a:	4603      	mov	r3, r0
 800944c:	4293      	cmp	r3, r2
 800944e:	d100      	bne.n	8009452 <memset+0xa>
 8009450:	4770      	bx	lr
 8009452:	f803 1b01 	strb.w	r1, [r3], #1
 8009456:	e7f9      	b.n	800944c <memset+0x4>

08009458 <_localeconv_r>:
 8009458:	4800      	ldr	r0, [pc, #0]	@ (800945c <_localeconv_r+0x4>)
 800945a:	4770      	bx	lr
 800945c:	2000016c 	.word	0x2000016c

08009460 <_close_r>:
 8009460:	b538      	push	{r3, r4, r5, lr}
 8009462:	2300      	movs	r3, #0
 8009464:	4d05      	ldr	r5, [pc, #20]	@ (800947c <_close_r+0x1c>)
 8009466:	4604      	mov	r4, r0
 8009468:	4608      	mov	r0, r1
 800946a:	602b      	str	r3, [r5, #0]
 800946c:	f7f8 fae0 	bl	8001a30 <_close>
 8009470:	1c43      	adds	r3, r0, #1
 8009472:	d102      	bne.n	800947a <_close_r+0x1a>
 8009474:	682b      	ldr	r3, [r5, #0]
 8009476:	b103      	cbz	r3, 800947a <_close_r+0x1a>
 8009478:	6023      	str	r3, [r4, #0]
 800947a:	bd38      	pop	{r3, r4, r5, pc}
 800947c:	20000620 	.word	0x20000620

08009480 <_lseek_r>:
 8009480:	b538      	push	{r3, r4, r5, lr}
 8009482:	4604      	mov	r4, r0
 8009484:	4d06      	ldr	r5, [pc, #24]	@ (80094a0 <_lseek_r+0x20>)
 8009486:	4608      	mov	r0, r1
 8009488:	4611      	mov	r1, r2
 800948a:	2200      	movs	r2, #0
 800948c:	602a      	str	r2, [r5, #0]
 800948e:	461a      	mov	r2, r3
 8009490:	f7f8 faf5 	bl	8001a7e <_lseek>
 8009494:	1c43      	adds	r3, r0, #1
 8009496:	d102      	bne.n	800949e <_lseek_r+0x1e>
 8009498:	682b      	ldr	r3, [r5, #0]
 800949a:	b103      	cbz	r3, 800949e <_lseek_r+0x1e>
 800949c:	6023      	str	r3, [r4, #0]
 800949e:	bd38      	pop	{r3, r4, r5, pc}
 80094a0:	20000620 	.word	0x20000620

080094a4 <_read_r>:
 80094a4:	b538      	push	{r3, r4, r5, lr}
 80094a6:	4604      	mov	r4, r0
 80094a8:	4d06      	ldr	r5, [pc, #24]	@ (80094c4 <_read_r+0x20>)
 80094aa:	4608      	mov	r0, r1
 80094ac:	4611      	mov	r1, r2
 80094ae:	2200      	movs	r2, #0
 80094b0:	602a      	str	r2, [r5, #0]
 80094b2:	461a      	mov	r2, r3
 80094b4:	f7f8 fa83 	bl	80019be <_read>
 80094b8:	1c43      	adds	r3, r0, #1
 80094ba:	d102      	bne.n	80094c2 <_read_r+0x1e>
 80094bc:	682b      	ldr	r3, [r5, #0]
 80094be:	b103      	cbz	r3, 80094c2 <_read_r+0x1e>
 80094c0:	6023      	str	r3, [r4, #0]
 80094c2:	bd38      	pop	{r3, r4, r5, pc}
 80094c4:	20000620 	.word	0x20000620

080094c8 <_write_r>:
 80094c8:	b538      	push	{r3, r4, r5, lr}
 80094ca:	4604      	mov	r4, r0
 80094cc:	4d06      	ldr	r5, [pc, #24]	@ (80094e8 <_write_r+0x20>)
 80094ce:	4608      	mov	r0, r1
 80094d0:	4611      	mov	r1, r2
 80094d2:	2200      	movs	r2, #0
 80094d4:	602a      	str	r2, [r5, #0]
 80094d6:	461a      	mov	r2, r3
 80094d8:	f7f8 fa8e 	bl	80019f8 <_write>
 80094dc:	1c43      	adds	r3, r0, #1
 80094de:	d102      	bne.n	80094e6 <_write_r+0x1e>
 80094e0:	682b      	ldr	r3, [r5, #0]
 80094e2:	b103      	cbz	r3, 80094e6 <_write_r+0x1e>
 80094e4:	6023      	str	r3, [r4, #0]
 80094e6:	bd38      	pop	{r3, r4, r5, pc}
 80094e8:	20000620 	.word	0x20000620

080094ec <__errno>:
 80094ec:	4b01      	ldr	r3, [pc, #4]	@ (80094f4 <__errno+0x8>)
 80094ee:	6818      	ldr	r0, [r3, #0]
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	2000002c 	.word	0x2000002c

080094f8 <__libc_init_array>:
 80094f8:	b570      	push	{r4, r5, r6, lr}
 80094fa:	4d0d      	ldr	r5, [pc, #52]	@ (8009530 <__libc_init_array+0x38>)
 80094fc:	2600      	movs	r6, #0
 80094fe:	4c0d      	ldr	r4, [pc, #52]	@ (8009534 <__libc_init_array+0x3c>)
 8009500:	1b64      	subs	r4, r4, r5
 8009502:	10a4      	asrs	r4, r4, #2
 8009504:	42a6      	cmp	r6, r4
 8009506:	d109      	bne.n	800951c <__libc_init_array+0x24>
 8009508:	4d0b      	ldr	r5, [pc, #44]	@ (8009538 <__libc_init_array+0x40>)
 800950a:	2600      	movs	r6, #0
 800950c:	4c0b      	ldr	r4, [pc, #44]	@ (800953c <__libc_init_array+0x44>)
 800950e:	f001 fe43 	bl	800b198 <_init>
 8009512:	1b64      	subs	r4, r4, r5
 8009514:	10a4      	asrs	r4, r4, #2
 8009516:	42a6      	cmp	r6, r4
 8009518:	d105      	bne.n	8009526 <__libc_init_array+0x2e>
 800951a:	bd70      	pop	{r4, r5, r6, pc}
 800951c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009520:	3601      	adds	r6, #1
 8009522:	4798      	blx	r3
 8009524:	e7ee      	b.n	8009504 <__libc_init_array+0xc>
 8009526:	f855 3b04 	ldr.w	r3, [r5], #4
 800952a:	3601      	adds	r6, #1
 800952c:	4798      	blx	r3
 800952e:	e7f2      	b.n	8009516 <__libc_init_array+0x1e>
 8009530:	0800b6a8 	.word	0x0800b6a8
 8009534:	0800b6a8 	.word	0x0800b6a8
 8009538:	0800b6a8 	.word	0x0800b6a8
 800953c:	0800b6ac 	.word	0x0800b6ac

08009540 <__retarget_lock_init_recursive>:
 8009540:	4770      	bx	lr

08009542 <__retarget_lock_acquire_recursive>:
 8009542:	4770      	bx	lr

08009544 <__retarget_lock_release_recursive>:
 8009544:	4770      	bx	lr

08009546 <memchr>:
 8009546:	b2c9      	uxtb	r1, r1
 8009548:	4603      	mov	r3, r0
 800954a:	4402      	add	r2, r0
 800954c:	b510      	push	{r4, lr}
 800954e:	4293      	cmp	r3, r2
 8009550:	4618      	mov	r0, r3
 8009552:	d101      	bne.n	8009558 <memchr+0x12>
 8009554:	2000      	movs	r0, #0
 8009556:	e003      	b.n	8009560 <memchr+0x1a>
 8009558:	7804      	ldrb	r4, [r0, #0]
 800955a:	3301      	adds	r3, #1
 800955c:	428c      	cmp	r4, r1
 800955e:	d1f6      	bne.n	800954e <memchr+0x8>
 8009560:	bd10      	pop	{r4, pc}

08009562 <quorem>:
 8009562:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009566:	6903      	ldr	r3, [r0, #16]
 8009568:	4607      	mov	r7, r0
 800956a:	690c      	ldr	r4, [r1, #16]
 800956c:	42a3      	cmp	r3, r4
 800956e:	f2c0 8083 	blt.w	8009678 <quorem+0x116>
 8009572:	3c01      	subs	r4, #1
 8009574:	f100 0514 	add.w	r5, r0, #20
 8009578:	f101 0814 	add.w	r8, r1, #20
 800957c:	00a3      	lsls	r3, r4, #2
 800957e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009582:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009586:	9300      	str	r3, [sp, #0]
 8009588:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800958c:	9301      	str	r3, [sp, #4]
 800958e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009592:	3301      	adds	r3, #1
 8009594:	429a      	cmp	r2, r3
 8009596:	fbb2 f6f3 	udiv	r6, r2, r3
 800959a:	d331      	bcc.n	8009600 <quorem+0x9e>
 800959c:	f04f 0a00 	mov.w	sl, #0
 80095a0:	46c4      	mov	ip, r8
 80095a2:	46ae      	mov	lr, r5
 80095a4:	46d3      	mov	fp, sl
 80095a6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80095aa:	b298      	uxth	r0, r3
 80095ac:	45e1      	cmp	r9, ip
 80095ae:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80095b2:	fb06 a000 	mla	r0, r6, r0, sl
 80095b6:	ea4f 4210 	mov.w	r2, r0, lsr #16
 80095ba:	b280      	uxth	r0, r0
 80095bc:	fb06 2303 	mla	r3, r6, r3, r2
 80095c0:	f8de 2000 	ldr.w	r2, [lr]
 80095c4:	b292      	uxth	r2, r2
 80095c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80095ca:	eba2 0200 	sub.w	r2, r2, r0
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	f8de 0000 	ldr.w	r0, [lr]
 80095d4:	445a      	add	r2, fp
 80095d6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80095da:	b292      	uxth	r2, r2
 80095dc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80095e0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80095e4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80095e8:	f84e 2b04 	str.w	r2, [lr], #4
 80095ec:	d2db      	bcs.n	80095a6 <quorem+0x44>
 80095ee:	9b00      	ldr	r3, [sp, #0]
 80095f0:	58eb      	ldr	r3, [r5, r3]
 80095f2:	b92b      	cbnz	r3, 8009600 <quorem+0x9e>
 80095f4:	9b01      	ldr	r3, [sp, #4]
 80095f6:	3b04      	subs	r3, #4
 80095f8:	429d      	cmp	r5, r3
 80095fa:	461a      	mov	r2, r3
 80095fc:	d330      	bcc.n	8009660 <quorem+0xfe>
 80095fe:	613c      	str	r4, [r7, #16]
 8009600:	4638      	mov	r0, r7
 8009602:	f001 f97d 	bl	800a900 <__mcmp>
 8009606:	2800      	cmp	r0, #0
 8009608:	db26      	blt.n	8009658 <quorem+0xf6>
 800960a:	4629      	mov	r1, r5
 800960c:	2000      	movs	r0, #0
 800960e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009612:	f8d1 c000 	ldr.w	ip, [r1]
 8009616:	fa1f fe82 	uxth.w	lr, r2
 800961a:	45c1      	cmp	r9, r8
 800961c:	fa1f f38c 	uxth.w	r3, ip
 8009620:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8009624:	eba3 030e 	sub.w	r3, r3, lr
 8009628:	4403      	add	r3, r0
 800962a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800962e:	b29b      	uxth	r3, r3
 8009630:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009634:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009638:	ea4f 4022 	mov.w	r0, r2, asr #16
 800963c:	f841 3b04 	str.w	r3, [r1], #4
 8009640:	d2e5      	bcs.n	800960e <quorem+0xac>
 8009642:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009646:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800964a:	b922      	cbnz	r2, 8009656 <quorem+0xf4>
 800964c:	3b04      	subs	r3, #4
 800964e:	429d      	cmp	r5, r3
 8009650:	461a      	mov	r2, r3
 8009652:	d30b      	bcc.n	800966c <quorem+0x10a>
 8009654:	613c      	str	r4, [r7, #16]
 8009656:	3601      	adds	r6, #1
 8009658:	4630      	mov	r0, r6
 800965a:	b003      	add	sp, #12
 800965c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009660:	6812      	ldr	r2, [r2, #0]
 8009662:	3b04      	subs	r3, #4
 8009664:	2a00      	cmp	r2, #0
 8009666:	d1ca      	bne.n	80095fe <quorem+0x9c>
 8009668:	3c01      	subs	r4, #1
 800966a:	e7c5      	b.n	80095f8 <quorem+0x96>
 800966c:	6812      	ldr	r2, [r2, #0]
 800966e:	3b04      	subs	r3, #4
 8009670:	2a00      	cmp	r2, #0
 8009672:	d1ef      	bne.n	8009654 <quorem+0xf2>
 8009674:	3c01      	subs	r4, #1
 8009676:	e7ea      	b.n	800964e <quorem+0xec>
 8009678:	2000      	movs	r0, #0
 800967a:	e7ee      	b.n	800965a <quorem+0xf8>
 800967c:	0000      	movs	r0, r0
	...

08009680 <_dtoa_r>:
 8009680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009684:	69c7      	ldr	r7, [r0, #28]
 8009686:	b099      	sub	sp, #100	@ 0x64
 8009688:	4683      	mov	fp, r0
 800968a:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800968c:	9109      	str	r1, [sp, #36]	@ 0x24
 800968e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009690:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009692:	ec55 4b10 	vmov	r4, r5, d0
 8009696:	ed8d 0b02 	vstr	d0, [sp, #8]
 800969a:	b97f      	cbnz	r7, 80096bc <_dtoa_r+0x3c>
 800969c:	2010      	movs	r0, #16
 800969e:	f000 fdfd 	bl	800a29c <malloc>
 80096a2:	4602      	mov	r2, r0
 80096a4:	f8cb 001c 	str.w	r0, [fp, #28]
 80096a8:	b920      	cbnz	r0, 80096b4 <_dtoa_r+0x34>
 80096aa:	4ba7      	ldr	r3, [pc, #668]	@ (8009948 <_dtoa_r+0x2c8>)
 80096ac:	21ef      	movs	r1, #239	@ 0xef
 80096ae:	48a7      	ldr	r0, [pc, #668]	@ (800994c <_dtoa_r+0x2cc>)
 80096b0:	f001 fcc2 	bl	800b038 <__assert_func>
 80096b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80096b8:	6007      	str	r7, [r0, #0]
 80096ba:	60c7      	str	r7, [r0, #12]
 80096bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80096c0:	6819      	ldr	r1, [r3, #0]
 80096c2:	b159      	cbz	r1, 80096dc <_dtoa_r+0x5c>
 80096c4:	685a      	ldr	r2, [r3, #4]
 80096c6:	2301      	movs	r3, #1
 80096c8:	4658      	mov	r0, fp
 80096ca:	4093      	lsls	r3, r2
 80096cc:	604a      	str	r2, [r1, #4]
 80096ce:	608b      	str	r3, [r1, #8]
 80096d0:	f000 feda 	bl	800a488 <_Bfree>
 80096d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80096d8:	2200      	movs	r2, #0
 80096da:	601a      	str	r2, [r3, #0]
 80096dc:	1e2b      	subs	r3, r5, #0
 80096de:	bfb7      	itett	lt
 80096e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80096e4:	2300      	movge	r3, #0
 80096e6:	2201      	movlt	r2, #1
 80096e8:	9303      	strlt	r3, [sp, #12]
 80096ea:	bfa8      	it	ge
 80096ec:	6033      	strge	r3, [r6, #0]
 80096ee:	9f03      	ldr	r7, [sp, #12]
 80096f0:	4b97      	ldr	r3, [pc, #604]	@ (8009950 <_dtoa_r+0x2d0>)
 80096f2:	bfb8      	it	lt
 80096f4:	6032      	strlt	r2, [r6, #0]
 80096f6:	43bb      	bics	r3, r7
 80096f8:	d112      	bne.n	8009720 <_dtoa_r+0xa0>
 80096fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80096fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009700:	6013      	str	r3, [r2, #0]
 8009702:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009706:	4323      	orrs	r3, r4
 8009708:	f000 854c 	beq.w	800a1a4 <_dtoa_r+0xb24>
 800970c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800970e:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009964 <_dtoa_r+0x2e4>
 8009712:	2b00      	cmp	r3, #0
 8009714:	f000 854e 	beq.w	800a1b4 <_dtoa_r+0xb34>
 8009718:	f10a 0303 	add.w	r3, sl, #3
 800971c:	f000 bd48 	b.w	800a1b0 <_dtoa_r+0xb30>
 8009720:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009724:	2200      	movs	r2, #0
 8009726:	2300      	movs	r3, #0
 8009728:	ec51 0b17 	vmov	r0, r1, d7
 800972c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009730:	f7f7 f9ce 	bl	8000ad0 <__aeabi_dcmpeq>
 8009734:	4680      	mov	r8, r0
 8009736:	b158      	cbz	r0, 8009750 <_dtoa_r+0xd0>
 8009738:	2301      	movs	r3, #1
 800973a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800973c:	6013      	str	r3, [r2, #0]
 800973e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009740:	b113      	cbz	r3, 8009748 <_dtoa_r+0xc8>
 8009742:	4b84      	ldr	r3, [pc, #528]	@ (8009954 <_dtoa_r+0x2d4>)
 8009744:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009746:	6013      	str	r3, [r2, #0]
 8009748:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8009968 <_dtoa_r+0x2e8>
 800974c:	f000 bd32 	b.w	800a1b4 <_dtoa_r+0xb34>
 8009750:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009754:	aa16      	add	r2, sp, #88	@ 0x58
 8009756:	a917      	add	r1, sp, #92	@ 0x5c
 8009758:	4658      	mov	r0, fp
 800975a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800975e:	f001 f983 	bl	800aa68 <__d2b>
 8009762:	4681      	mov	r9, r0
 8009764:	2e00      	cmp	r6, #0
 8009766:	d075      	beq.n	8009854 <_dtoa_r+0x1d4>
 8009768:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800976a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800976e:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009772:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009776:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800977a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800977e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009782:	4619      	mov	r1, r3
 8009784:	2200      	movs	r2, #0
 8009786:	4b74      	ldr	r3, [pc, #464]	@ (8009958 <_dtoa_r+0x2d8>)
 8009788:	f7f6 fd82 	bl	8000290 <__aeabi_dsub>
 800978c:	a368      	add	r3, pc, #416	@ (adr r3, 8009930 <_dtoa_r+0x2b0>)
 800978e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009792:	f7f6 ff35 	bl	8000600 <__aeabi_dmul>
 8009796:	a368      	add	r3, pc, #416	@ (adr r3, 8009938 <_dtoa_r+0x2b8>)
 8009798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979c:	f7f6 fd7a 	bl	8000294 <__adddf3>
 80097a0:	4604      	mov	r4, r0
 80097a2:	460d      	mov	r5, r1
 80097a4:	4630      	mov	r0, r6
 80097a6:	f7f6 fec1 	bl	800052c <__aeabi_i2d>
 80097aa:	a365      	add	r3, pc, #404	@ (adr r3, 8009940 <_dtoa_r+0x2c0>)
 80097ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b0:	f7f6 ff26 	bl	8000600 <__aeabi_dmul>
 80097b4:	4602      	mov	r2, r0
 80097b6:	460b      	mov	r3, r1
 80097b8:	4620      	mov	r0, r4
 80097ba:	4629      	mov	r1, r5
 80097bc:	f7f6 fd6a 	bl	8000294 <__adddf3>
 80097c0:	4604      	mov	r4, r0
 80097c2:	460d      	mov	r5, r1
 80097c4:	f7f7 f9cc 	bl	8000b60 <__aeabi_d2iz>
 80097c8:	2200      	movs	r2, #0
 80097ca:	4607      	mov	r7, r0
 80097cc:	2300      	movs	r3, #0
 80097ce:	4620      	mov	r0, r4
 80097d0:	4629      	mov	r1, r5
 80097d2:	f7f7 f987 	bl	8000ae4 <__aeabi_dcmplt>
 80097d6:	b140      	cbz	r0, 80097ea <_dtoa_r+0x16a>
 80097d8:	4638      	mov	r0, r7
 80097da:	f7f6 fea7 	bl	800052c <__aeabi_i2d>
 80097de:	4622      	mov	r2, r4
 80097e0:	462b      	mov	r3, r5
 80097e2:	f7f7 f975 	bl	8000ad0 <__aeabi_dcmpeq>
 80097e6:	b900      	cbnz	r0, 80097ea <_dtoa_r+0x16a>
 80097e8:	3f01      	subs	r7, #1
 80097ea:	2f16      	cmp	r7, #22
 80097ec:	d851      	bhi.n	8009892 <_dtoa_r+0x212>
 80097ee:	4b5b      	ldr	r3, [pc, #364]	@ (800995c <_dtoa_r+0x2dc>)
 80097f0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80097f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fc:	f7f7 f972 	bl	8000ae4 <__aeabi_dcmplt>
 8009800:	2800      	cmp	r0, #0
 8009802:	d048      	beq.n	8009896 <_dtoa_r+0x216>
 8009804:	3f01      	subs	r7, #1
 8009806:	2300      	movs	r3, #0
 8009808:	9312      	str	r3, [sp, #72]	@ 0x48
 800980a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800980c:	1b9b      	subs	r3, r3, r6
 800980e:	1e5a      	subs	r2, r3, #1
 8009810:	bf46      	itte	mi
 8009812:	f1c3 0801 	rsbmi	r8, r3, #1
 8009816:	2300      	movmi	r3, #0
 8009818:	f04f 0800 	movpl.w	r8, #0
 800981c:	9208      	str	r2, [sp, #32]
 800981e:	bf48      	it	mi
 8009820:	9308      	strmi	r3, [sp, #32]
 8009822:	2f00      	cmp	r7, #0
 8009824:	db39      	blt.n	800989a <_dtoa_r+0x21a>
 8009826:	9b08      	ldr	r3, [sp, #32]
 8009828:	970f      	str	r7, [sp, #60]	@ 0x3c
 800982a:	443b      	add	r3, r7
 800982c:	9308      	str	r3, [sp, #32]
 800982e:	2300      	movs	r3, #0
 8009830:	930a      	str	r3, [sp, #40]	@ 0x28
 8009832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009834:	2b09      	cmp	r3, #9
 8009836:	d864      	bhi.n	8009902 <_dtoa_r+0x282>
 8009838:	2b05      	cmp	r3, #5
 800983a:	bfc5      	ittet	gt
 800983c:	3b04      	subgt	r3, #4
 800983e:	2400      	movgt	r4, #0
 8009840:	2401      	movle	r4, #1
 8009842:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009844:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009846:	3b02      	subs	r3, #2
 8009848:	2b03      	cmp	r3, #3
 800984a:	d865      	bhi.n	8009918 <_dtoa_r+0x298>
 800984c:	e8df f003 	tbb	[pc, r3]
 8009850:	5737392c 	.word	0x5737392c
 8009854:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009858:	441e      	add	r6, r3
 800985a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800985e:	2b20      	cmp	r3, #32
 8009860:	bfc9      	itett	gt
 8009862:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009866:	f1c3 0320 	rsble	r3, r3, #32
 800986a:	409f      	lslgt	r7, r3
 800986c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009870:	bfd8      	it	le
 8009872:	fa04 f003 	lslle.w	r0, r4, r3
 8009876:	f106 36ff 	add.w	r6, r6, #4294967295
 800987a:	bfc4      	itt	gt
 800987c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009880:	ea47 0003 	orrgt.w	r0, r7, r3
 8009884:	f7f6 fe42 	bl	800050c <__aeabi_ui2d>
 8009888:	2201      	movs	r2, #1
 800988a:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800988e:	9214      	str	r2, [sp, #80]	@ 0x50
 8009890:	e777      	b.n	8009782 <_dtoa_r+0x102>
 8009892:	2301      	movs	r3, #1
 8009894:	e7b8      	b.n	8009808 <_dtoa_r+0x188>
 8009896:	9012      	str	r0, [sp, #72]	@ 0x48
 8009898:	e7b7      	b.n	800980a <_dtoa_r+0x18a>
 800989a:	427b      	negs	r3, r7
 800989c:	eba8 0807 	sub.w	r8, r8, r7
 80098a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80098a2:	2300      	movs	r3, #0
 80098a4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80098a6:	e7c4      	b.n	8009832 <_dtoa_r+0x1b2>
 80098a8:	2300      	movs	r3, #0
 80098aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	dc35      	bgt.n	800991e <_dtoa_r+0x29e>
 80098b2:	2301      	movs	r3, #1
 80098b4:	461a      	mov	r2, r3
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	9307      	str	r3, [sp, #28]
 80098ba:	920e      	str	r2, [sp, #56]	@ 0x38
 80098bc:	e00b      	b.n	80098d6 <_dtoa_r+0x256>
 80098be:	2301      	movs	r3, #1
 80098c0:	e7f3      	b.n	80098aa <_dtoa_r+0x22a>
 80098c2:	2300      	movs	r3, #0
 80098c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098c8:	18fb      	adds	r3, r7, r3
 80098ca:	9300      	str	r3, [sp, #0]
 80098cc:	3301      	adds	r3, #1
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	9307      	str	r3, [sp, #28]
 80098d2:	bfb8      	it	lt
 80098d4:	2301      	movlt	r3, #1
 80098d6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80098da:	2100      	movs	r1, #0
 80098dc:	2204      	movs	r2, #4
 80098de:	f102 0514 	add.w	r5, r2, #20
 80098e2:	429d      	cmp	r5, r3
 80098e4:	d91f      	bls.n	8009926 <_dtoa_r+0x2a6>
 80098e6:	6041      	str	r1, [r0, #4]
 80098e8:	4658      	mov	r0, fp
 80098ea:	f000 fd8d 	bl	800a408 <_Balloc>
 80098ee:	4682      	mov	sl, r0
 80098f0:	2800      	cmp	r0, #0
 80098f2:	d13b      	bne.n	800996c <_dtoa_r+0x2ec>
 80098f4:	4b1a      	ldr	r3, [pc, #104]	@ (8009960 <_dtoa_r+0x2e0>)
 80098f6:	4602      	mov	r2, r0
 80098f8:	f240 11af 	movw	r1, #431	@ 0x1af
 80098fc:	e6d7      	b.n	80096ae <_dtoa_r+0x2e>
 80098fe:	2301      	movs	r3, #1
 8009900:	e7e0      	b.n	80098c4 <_dtoa_r+0x244>
 8009902:	2401      	movs	r4, #1
 8009904:	2300      	movs	r3, #0
 8009906:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009908:	9309      	str	r3, [sp, #36]	@ 0x24
 800990a:	f04f 33ff 	mov.w	r3, #4294967295
 800990e:	2200      	movs	r2, #0
 8009910:	9300      	str	r3, [sp, #0]
 8009912:	9307      	str	r3, [sp, #28]
 8009914:	2312      	movs	r3, #18
 8009916:	e7d0      	b.n	80098ba <_dtoa_r+0x23a>
 8009918:	2301      	movs	r3, #1
 800991a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800991c:	e7f5      	b.n	800990a <_dtoa_r+0x28a>
 800991e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009920:	9300      	str	r3, [sp, #0]
 8009922:	9307      	str	r3, [sp, #28]
 8009924:	e7d7      	b.n	80098d6 <_dtoa_r+0x256>
 8009926:	3101      	adds	r1, #1
 8009928:	0052      	lsls	r2, r2, #1
 800992a:	e7d8      	b.n	80098de <_dtoa_r+0x25e>
 800992c:	f3af 8000 	nop.w
 8009930:	636f4361 	.word	0x636f4361
 8009934:	3fd287a7 	.word	0x3fd287a7
 8009938:	8b60c8b3 	.word	0x8b60c8b3
 800993c:	3fc68a28 	.word	0x3fc68a28
 8009940:	509f79fb 	.word	0x509f79fb
 8009944:	3fd34413 	.word	0x3fd34413
 8009948:	0800b371 	.word	0x0800b371
 800994c:	0800b388 	.word	0x0800b388
 8009950:	7ff00000 	.word	0x7ff00000
 8009954:	0800b341 	.word	0x0800b341
 8009958:	3ff80000 	.word	0x3ff80000
 800995c:	0800b480 	.word	0x0800b480
 8009960:	0800b3e0 	.word	0x0800b3e0
 8009964:	0800b36d 	.word	0x0800b36d
 8009968:	0800b340 	.word	0x0800b340
 800996c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009970:	6018      	str	r0, [r3, #0]
 8009972:	9b07      	ldr	r3, [sp, #28]
 8009974:	2b0e      	cmp	r3, #14
 8009976:	f200 80a4 	bhi.w	8009ac2 <_dtoa_r+0x442>
 800997a:	2c00      	cmp	r4, #0
 800997c:	f000 80a1 	beq.w	8009ac2 <_dtoa_r+0x442>
 8009980:	2f00      	cmp	r7, #0
 8009982:	dd33      	ble.n	80099ec <_dtoa_r+0x36c>
 8009984:	f007 020f 	and.w	r2, r7, #15
 8009988:	4bac      	ldr	r3, [pc, #688]	@ (8009c3c <_dtoa_r+0x5bc>)
 800998a:	05f8      	lsls	r0, r7, #23
 800998c:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009990:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009994:	ed93 7b00 	vldr	d7, [r3]
 8009998:	ed8d 7b04 	vstr	d7, [sp, #16]
 800999c:	d516      	bpl.n	80099cc <_dtoa_r+0x34c>
 800999e:	4ba8      	ldr	r3, [pc, #672]	@ (8009c40 <_dtoa_r+0x5c0>)
 80099a0:	f004 040f 	and.w	r4, r4, #15
 80099a4:	2603      	movs	r6, #3
 80099a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80099aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099ae:	f7f6 ff51 	bl	8000854 <__aeabi_ddiv>
 80099b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099b6:	4da2      	ldr	r5, [pc, #648]	@ (8009c40 <_dtoa_r+0x5c0>)
 80099b8:	b954      	cbnz	r4, 80099d0 <_dtoa_r+0x350>
 80099ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099c2:	f7f6 ff47 	bl	8000854 <__aeabi_ddiv>
 80099c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099ca:	e028      	b.n	8009a1e <_dtoa_r+0x39e>
 80099cc:	2602      	movs	r6, #2
 80099ce:	e7f2      	b.n	80099b6 <_dtoa_r+0x336>
 80099d0:	07e1      	lsls	r1, r4, #31
 80099d2:	d508      	bpl.n	80099e6 <_dtoa_r+0x366>
 80099d4:	3601      	adds	r6, #1
 80099d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80099de:	f7f6 fe0f 	bl	8000600 <__aeabi_dmul>
 80099e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099e6:	1064      	asrs	r4, r4, #1
 80099e8:	3508      	adds	r5, #8
 80099ea:	e7e5      	b.n	80099b8 <_dtoa_r+0x338>
 80099ec:	f000 80d2 	beq.w	8009b94 <_dtoa_r+0x514>
 80099f0:	427c      	negs	r4, r7
 80099f2:	4b92      	ldr	r3, [pc, #584]	@ (8009c3c <_dtoa_r+0x5bc>)
 80099f4:	4d92      	ldr	r5, [pc, #584]	@ (8009c40 <_dtoa_r+0x5c0>)
 80099f6:	2602      	movs	r6, #2
 80099f8:	f004 020f 	and.w	r2, r4, #15
 80099fc:	1124      	asrs	r4, r4, #4
 80099fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a0a:	f7f6 fdf9 	bl	8000600 <__aeabi_dmul>
 8009a0e:	2300      	movs	r3, #0
 8009a10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a14:	2c00      	cmp	r4, #0
 8009a16:	f040 80b2 	bne.w	8009b7e <_dtoa_r+0x4fe>
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d1d3      	bne.n	80099c6 <_dtoa_r+0x346>
 8009a1e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009a20:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	f000 80b7 	beq.w	8009b98 <_dtoa_r+0x518>
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	4b85      	ldr	r3, [pc, #532]	@ (8009c44 <_dtoa_r+0x5c4>)
 8009a2e:	4620      	mov	r0, r4
 8009a30:	4629      	mov	r1, r5
 8009a32:	f7f7 f857 	bl	8000ae4 <__aeabi_dcmplt>
 8009a36:	2800      	cmp	r0, #0
 8009a38:	f000 80ae 	beq.w	8009b98 <_dtoa_r+0x518>
 8009a3c:	9b07      	ldr	r3, [sp, #28]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	f000 80aa 	beq.w	8009b98 <_dtoa_r+0x518>
 8009a44:	9b00      	ldr	r3, [sp, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	dd37      	ble.n	8009aba <_dtoa_r+0x43a>
 8009a4a:	1e7b      	subs	r3, r7, #1
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	2200      	movs	r2, #0
 8009a50:	4629      	mov	r1, r5
 8009a52:	9304      	str	r3, [sp, #16]
 8009a54:	3601      	adds	r6, #1
 8009a56:	4b7c      	ldr	r3, [pc, #496]	@ (8009c48 <_dtoa_r+0x5c8>)
 8009a58:	f7f6 fdd2 	bl	8000600 <__aeabi_dmul>
 8009a5c:	9c00      	ldr	r4, [sp, #0]
 8009a5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a62:	4630      	mov	r0, r6
 8009a64:	f7f6 fd62 	bl	800052c <__aeabi_i2d>
 8009a68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a6c:	f7f6 fdc8 	bl	8000600 <__aeabi_dmul>
 8009a70:	2200      	movs	r2, #0
 8009a72:	4b76      	ldr	r3, [pc, #472]	@ (8009c4c <_dtoa_r+0x5cc>)
 8009a74:	f7f6 fc0e 	bl	8000294 <__adddf3>
 8009a78:	4605      	mov	r5, r0
 8009a7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009a7e:	2c00      	cmp	r4, #0
 8009a80:	f040 808d 	bne.w	8009b9e <_dtoa_r+0x51e>
 8009a84:	2200      	movs	r2, #0
 8009a86:	4b72      	ldr	r3, [pc, #456]	@ (8009c50 <_dtoa_r+0x5d0>)
 8009a88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a8c:	f7f6 fc00 	bl	8000290 <__aeabi_dsub>
 8009a90:	4602      	mov	r2, r0
 8009a92:	460b      	mov	r3, r1
 8009a94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a98:	462a      	mov	r2, r5
 8009a9a:	4633      	mov	r3, r6
 8009a9c:	f7f7 f840 	bl	8000b20 <__aeabi_dcmpgt>
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	f040 828b 	bne.w	8009fbc <_dtoa_r+0x93c>
 8009aa6:	462a      	mov	r2, r5
 8009aa8:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009aac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ab0:	f7f7 f818 	bl	8000ae4 <__aeabi_dcmplt>
 8009ab4:	2800      	cmp	r0, #0
 8009ab6:	f040 8128 	bne.w	8009d0a <_dtoa_r+0x68a>
 8009aba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009abe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009ac2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f2c0 815a 	blt.w	8009d7e <_dtoa_r+0x6fe>
 8009aca:	2f0e      	cmp	r7, #14
 8009acc:	f300 8157 	bgt.w	8009d7e <_dtoa_r+0x6fe>
 8009ad0:	4b5a      	ldr	r3, [pc, #360]	@ (8009c3c <_dtoa_r+0x5bc>)
 8009ad2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009ad6:	ed93 7b00 	vldr	d7, [r3]
 8009ada:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	ed8d 7b00 	vstr	d7, [sp]
 8009ae2:	da03      	bge.n	8009aec <_dtoa_r+0x46c>
 8009ae4:	9b07      	ldr	r3, [sp, #28]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	f340 8101 	ble.w	8009cee <_dtoa_r+0x66e>
 8009aec:	4656      	mov	r6, sl
 8009aee:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009af2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009af6:	4620      	mov	r0, r4
 8009af8:	4629      	mov	r1, r5
 8009afa:	f7f6 feab 	bl	8000854 <__aeabi_ddiv>
 8009afe:	f7f7 f82f 	bl	8000b60 <__aeabi_d2iz>
 8009b02:	4680      	mov	r8, r0
 8009b04:	f7f6 fd12 	bl	800052c <__aeabi_i2d>
 8009b08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b0c:	f7f6 fd78 	bl	8000600 <__aeabi_dmul>
 8009b10:	4602      	mov	r2, r0
 8009b12:	4620      	mov	r0, r4
 8009b14:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009b18:	460b      	mov	r3, r1
 8009b1a:	4629      	mov	r1, r5
 8009b1c:	f7f6 fbb8 	bl	8000290 <__aeabi_dsub>
 8009b20:	9d07      	ldr	r5, [sp, #28]
 8009b22:	f806 4b01 	strb.w	r4, [r6], #1
 8009b26:	eba6 040a 	sub.w	r4, r6, sl
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	42a5      	cmp	r5, r4
 8009b30:	f040 8117 	bne.w	8009d62 <_dtoa_r+0x6e2>
 8009b34:	f7f6 fbae 	bl	8000294 <__adddf3>
 8009b38:	4604      	mov	r4, r0
 8009b3a:	460d      	mov	r5, r1
 8009b3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b40:	f7f6 ffee 	bl	8000b20 <__aeabi_dcmpgt>
 8009b44:	2800      	cmp	r0, #0
 8009b46:	f040 80f9 	bne.w	8009d3c <_dtoa_r+0x6bc>
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	4629      	mov	r1, r5
 8009b4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b52:	f7f6 ffbd 	bl	8000ad0 <__aeabi_dcmpeq>
 8009b56:	b118      	cbz	r0, 8009b60 <_dtoa_r+0x4e0>
 8009b58:	f018 0f01 	tst.w	r8, #1
 8009b5c:	f040 80ee 	bne.w	8009d3c <_dtoa_r+0x6bc>
 8009b60:	4649      	mov	r1, r9
 8009b62:	4658      	mov	r0, fp
 8009b64:	f000 fc90 	bl	800a488 <_Bfree>
 8009b68:	2300      	movs	r3, #0
 8009b6a:	3701      	adds	r7, #1
 8009b6c:	7033      	strb	r3, [r6, #0]
 8009b6e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009b70:	601f      	str	r7, [r3, #0]
 8009b72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f000 831d 	beq.w	800a1b4 <_dtoa_r+0xb34>
 8009b7a:	601e      	str	r6, [r3, #0]
 8009b7c:	e31a      	b.n	800a1b4 <_dtoa_r+0xb34>
 8009b7e:	07e2      	lsls	r2, r4, #31
 8009b80:	d505      	bpl.n	8009b8e <_dtoa_r+0x50e>
 8009b82:	3601      	adds	r6, #1
 8009b84:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b88:	f7f6 fd3a 	bl	8000600 <__aeabi_dmul>
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	1064      	asrs	r4, r4, #1
 8009b90:	3508      	adds	r5, #8
 8009b92:	e73f      	b.n	8009a14 <_dtoa_r+0x394>
 8009b94:	2602      	movs	r6, #2
 8009b96:	e742      	b.n	8009a1e <_dtoa_r+0x39e>
 8009b98:	9c07      	ldr	r4, [sp, #28]
 8009b9a:	9704      	str	r7, [sp, #16]
 8009b9c:	e761      	b.n	8009a62 <_dtoa_r+0x3e2>
 8009b9e:	4b27      	ldr	r3, [pc, #156]	@ (8009c3c <_dtoa_r+0x5bc>)
 8009ba0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009ba2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009ba6:	4454      	add	r4, sl
 8009ba8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009bac:	2900      	cmp	r1, #0
 8009bae:	d053      	beq.n	8009c58 <_dtoa_r+0x5d8>
 8009bb0:	2000      	movs	r0, #0
 8009bb2:	4928      	ldr	r1, [pc, #160]	@ (8009c54 <_dtoa_r+0x5d4>)
 8009bb4:	f7f6 fe4e 	bl	8000854 <__aeabi_ddiv>
 8009bb8:	4633      	mov	r3, r6
 8009bba:	4656      	mov	r6, sl
 8009bbc:	462a      	mov	r2, r5
 8009bbe:	f7f6 fb67 	bl	8000290 <__aeabi_dsub>
 8009bc2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009bc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bca:	f7f6 ffc9 	bl	8000b60 <__aeabi_d2iz>
 8009bce:	4605      	mov	r5, r0
 8009bd0:	f7f6 fcac 	bl	800052c <__aeabi_i2d>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	460b      	mov	r3, r1
 8009bd8:	3530      	adds	r5, #48	@ 0x30
 8009bda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bde:	f7f6 fb57 	bl	8000290 <__aeabi_dsub>
 8009be2:	4602      	mov	r2, r0
 8009be4:	460b      	mov	r3, r1
 8009be6:	f806 5b01 	strb.w	r5, [r6], #1
 8009bea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009bee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009bf2:	f7f6 ff77 	bl	8000ae4 <__aeabi_dcmplt>
 8009bf6:	2800      	cmp	r0, #0
 8009bf8:	d171      	bne.n	8009cde <_dtoa_r+0x65e>
 8009bfa:	2000      	movs	r0, #0
 8009bfc:	4911      	ldr	r1, [pc, #68]	@ (8009c44 <_dtoa_r+0x5c4>)
 8009bfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c02:	f7f6 fb45 	bl	8000290 <__aeabi_dsub>
 8009c06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009c0a:	f7f6 ff6b 	bl	8000ae4 <__aeabi_dcmplt>
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	f040 8095 	bne.w	8009d3e <_dtoa_r+0x6be>
 8009c14:	42a6      	cmp	r6, r4
 8009c16:	f43f af50 	beq.w	8009aba <_dtoa_r+0x43a>
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8009c48 <_dtoa_r+0x5c8>)
 8009c1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009c22:	f7f6 fced 	bl	8000600 <__aeabi_dmul>
 8009c26:	2200      	movs	r2, #0
 8009c28:	4b07      	ldr	r3, [pc, #28]	@ (8009c48 <_dtoa_r+0x5c8>)
 8009c2a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009c2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c32:	f7f6 fce5 	bl	8000600 <__aeabi_dmul>
 8009c36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c3a:	e7c4      	b.n	8009bc6 <_dtoa_r+0x546>
 8009c3c:	0800b480 	.word	0x0800b480
 8009c40:	0800b458 	.word	0x0800b458
 8009c44:	3ff00000 	.word	0x3ff00000
 8009c48:	40240000 	.word	0x40240000
 8009c4c:	401c0000 	.word	0x401c0000
 8009c50:	40140000 	.word	0x40140000
 8009c54:	3fe00000 	.word	0x3fe00000
 8009c58:	4631      	mov	r1, r6
 8009c5a:	4656      	mov	r6, sl
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	f7f6 fccf 	bl	8000600 <__aeabi_dmul>
 8009c62:	9415      	str	r4, [sp, #84]	@ 0x54
 8009c64:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009c68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c6c:	f7f6 ff78 	bl	8000b60 <__aeabi_d2iz>
 8009c70:	4605      	mov	r5, r0
 8009c72:	f7f6 fc5b 	bl	800052c <__aeabi_i2d>
 8009c76:	4602      	mov	r2, r0
 8009c78:	3530      	adds	r5, #48	@ 0x30
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c80:	f7f6 fb06 	bl	8000290 <__aeabi_dsub>
 8009c84:	f806 5b01 	strb.w	r5, [r6], #1
 8009c88:	4602      	mov	r2, r0
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	42a6      	cmp	r6, r4
 8009c8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c92:	f04f 0200 	mov.w	r2, #0
 8009c96:	d124      	bne.n	8009ce2 <_dtoa_r+0x662>
 8009c98:	4bac      	ldr	r3, [pc, #688]	@ (8009f4c <_dtoa_r+0x8cc>)
 8009c9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009c9e:	f7f6 faf9 	bl	8000294 <__adddf3>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009caa:	f7f6 ff39 	bl	8000b20 <__aeabi_dcmpgt>
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	d145      	bne.n	8009d3e <_dtoa_r+0x6be>
 8009cb2:	2000      	movs	r0, #0
 8009cb4:	49a5      	ldr	r1, [pc, #660]	@ (8009f4c <_dtoa_r+0x8cc>)
 8009cb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009cba:	f7f6 fae9 	bl	8000290 <__aeabi_dsub>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cc6:	f7f6 ff0d 	bl	8000ae4 <__aeabi_dcmplt>
 8009cca:	2800      	cmp	r0, #0
 8009ccc:	f43f aef5 	beq.w	8009aba <_dtoa_r+0x43a>
 8009cd0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009cd2:	1e73      	subs	r3, r6, #1
 8009cd4:	9315      	str	r3, [sp, #84]	@ 0x54
 8009cd6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009cda:	2b30      	cmp	r3, #48	@ 0x30
 8009cdc:	d0f8      	beq.n	8009cd0 <_dtoa_r+0x650>
 8009cde:	9f04      	ldr	r7, [sp, #16]
 8009ce0:	e73e      	b.n	8009b60 <_dtoa_r+0x4e0>
 8009ce2:	4b9b      	ldr	r3, [pc, #620]	@ (8009f50 <_dtoa_r+0x8d0>)
 8009ce4:	f7f6 fc8c 	bl	8000600 <__aeabi_dmul>
 8009ce8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cec:	e7bc      	b.n	8009c68 <_dtoa_r+0x5e8>
 8009cee:	d10c      	bne.n	8009d0a <_dtoa_r+0x68a>
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	4b98      	ldr	r3, [pc, #608]	@ (8009f54 <_dtoa_r+0x8d4>)
 8009cf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009cf8:	f7f6 fc82 	bl	8000600 <__aeabi_dmul>
 8009cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d00:	f7f6 ff04 	bl	8000b0c <__aeabi_dcmpge>
 8009d04:	2800      	cmp	r0, #0
 8009d06:	f000 8157 	beq.w	8009fb8 <_dtoa_r+0x938>
 8009d0a:	2400      	movs	r4, #0
 8009d0c:	4625      	mov	r5, r4
 8009d0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d10:	4656      	mov	r6, sl
 8009d12:	43db      	mvns	r3, r3
 8009d14:	9304      	str	r3, [sp, #16]
 8009d16:	2700      	movs	r7, #0
 8009d18:	4621      	mov	r1, r4
 8009d1a:	4658      	mov	r0, fp
 8009d1c:	f000 fbb4 	bl	800a488 <_Bfree>
 8009d20:	2d00      	cmp	r5, #0
 8009d22:	d0dc      	beq.n	8009cde <_dtoa_r+0x65e>
 8009d24:	b12f      	cbz	r7, 8009d32 <_dtoa_r+0x6b2>
 8009d26:	42af      	cmp	r7, r5
 8009d28:	d003      	beq.n	8009d32 <_dtoa_r+0x6b2>
 8009d2a:	4639      	mov	r1, r7
 8009d2c:	4658      	mov	r0, fp
 8009d2e:	f000 fbab 	bl	800a488 <_Bfree>
 8009d32:	4629      	mov	r1, r5
 8009d34:	4658      	mov	r0, fp
 8009d36:	f000 fba7 	bl	800a488 <_Bfree>
 8009d3a:	e7d0      	b.n	8009cde <_dtoa_r+0x65e>
 8009d3c:	9704      	str	r7, [sp, #16]
 8009d3e:	4633      	mov	r3, r6
 8009d40:	461e      	mov	r6, r3
 8009d42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d46:	2a39      	cmp	r2, #57	@ 0x39
 8009d48:	d107      	bne.n	8009d5a <_dtoa_r+0x6da>
 8009d4a:	459a      	cmp	sl, r3
 8009d4c:	d1f8      	bne.n	8009d40 <_dtoa_r+0x6c0>
 8009d4e:	9a04      	ldr	r2, [sp, #16]
 8009d50:	3201      	adds	r2, #1
 8009d52:	9204      	str	r2, [sp, #16]
 8009d54:	2230      	movs	r2, #48	@ 0x30
 8009d56:	f88a 2000 	strb.w	r2, [sl]
 8009d5a:	781a      	ldrb	r2, [r3, #0]
 8009d5c:	3201      	adds	r2, #1
 8009d5e:	701a      	strb	r2, [r3, #0]
 8009d60:	e7bd      	b.n	8009cde <_dtoa_r+0x65e>
 8009d62:	2200      	movs	r2, #0
 8009d64:	4b7a      	ldr	r3, [pc, #488]	@ (8009f50 <_dtoa_r+0x8d0>)
 8009d66:	f7f6 fc4b 	bl	8000600 <__aeabi_dmul>
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	4604      	mov	r4, r0
 8009d70:	460d      	mov	r5, r1
 8009d72:	f7f6 fead 	bl	8000ad0 <__aeabi_dcmpeq>
 8009d76:	2800      	cmp	r0, #0
 8009d78:	f43f aebb 	beq.w	8009af2 <_dtoa_r+0x472>
 8009d7c:	e6f0      	b.n	8009b60 <_dtoa_r+0x4e0>
 8009d7e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009d80:	2a00      	cmp	r2, #0
 8009d82:	f000 80db 	beq.w	8009f3c <_dtoa_r+0x8bc>
 8009d86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d88:	2a01      	cmp	r2, #1
 8009d8a:	f300 80bf 	bgt.w	8009f0c <_dtoa_r+0x88c>
 8009d8e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009d90:	2a00      	cmp	r2, #0
 8009d92:	f000 80b7 	beq.w	8009f04 <_dtoa_r+0x884>
 8009d96:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009d9a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009d9c:	4646      	mov	r6, r8
 8009d9e:	9a08      	ldr	r2, [sp, #32]
 8009da0:	2101      	movs	r1, #1
 8009da2:	4658      	mov	r0, fp
 8009da4:	4498      	add	r8, r3
 8009da6:	441a      	add	r2, r3
 8009da8:	9208      	str	r2, [sp, #32]
 8009daa:	f000 fc23 	bl	800a5f4 <__i2b>
 8009dae:	4605      	mov	r5, r0
 8009db0:	b15e      	cbz	r6, 8009dca <_dtoa_r+0x74a>
 8009db2:	9b08      	ldr	r3, [sp, #32]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	dd08      	ble.n	8009dca <_dtoa_r+0x74a>
 8009db8:	42b3      	cmp	r3, r6
 8009dba:	9a08      	ldr	r2, [sp, #32]
 8009dbc:	bfa8      	it	ge
 8009dbe:	4633      	movge	r3, r6
 8009dc0:	eba8 0803 	sub.w	r8, r8, r3
 8009dc4:	1af6      	subs	r6, r6, r3
 8009dc6:	1ad3      	subs	r3, r2, r3
 8009dc8:	9308      	str	r3, [sp, #32]
 8009dca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dcc:	b1f3      	cbz	r3, 8009e0c <_dtoa_r+0x78c>
 8009dce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	f000 80b7 	beq.w	8009f44 <_dtoa_r+0x8c4>
 8009dd6:	b18c      	cbz	r4, 8009dfc <_dtoa_r+0x77c>
 8009dd8:	4629      	mov	r1, r5
 8009dda:	4622      	mov	r2, r4
 8009ddc:	4658      	mov	r0, fp
 8009dde:	f000 fcc9 	bl	800a774 <__pow5mult>
 8009de2:	464a      	mov	r2, r9
 8009de4:	4601      	mov	r1, r0
 8009de6:	4605      	mov	r5, r0
 8009de8:	4658      	mov	r0, fp
 8009dea:	f000 fc19 	bl	800a620 <__multiply>
 8009dee:	4649      	mov	r1, r9
 8009df0:	9004      	str	r0, [sp, #16]
 8009df2:	4658      	mov	r0, fp
 8009df4:	f000 fb48 	bl	800a488 <_Bfree>
 8009df8:	9b04      	ldr	r3, [sp, #16]
 8009dfa:	4699      	mov	r9, r3
 8009dfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dfe:	1b1a      	subs	r2, r3, r4
 8009e00:	d004      	beq.n	8009e0c <_dtoa_r+0x78c>
 8009e02:	4649      	mov	r1, r9
 8009e04:	4658      	mov	r0, fp
 8009e06:	f000 fcb5 	bl	800a774 <__pow5mult>
 8009e0a:	4681      	mov	r9, r0
 8009e0c:	2101      	movs	r1, #1
 8009e0e:	4658      	mov	r0, fp
 8009e10:	f000 fbf0 	bl	800a5f4 <__i2b>
 8009e14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e16:	4604      	mov	r4, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	f000 81cf 	beq.w	800a1bc <_dtoa_r+0xb3c>
 8009e1e:	461a      	mov	r2, r3
 8009e20:	4601      	mov	r1, r0
 8009e22:	4658      	mov	r0, fp
 8009e24:	f000 fca6 	bl	800a774 <__pow5mult>
 8009e28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e2a:	4604      	mov	r4, r0
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	f300 8095 	bgt.w	8009f5c <_dtoa_r+0x8dc>
 8009e32:	9b02      	ldr	r3, [sp, #8]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	f040 8087 	bne.w	8009f48 <_dtoa_r+0x8c8>
 8009e3a:	9b03      	ldr	r3, [sp, #12]
 8009e3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	f040 8089 	bne.w	8009f58 <_dtoa_r+0x8d8>
 8009e46:	9b03      	ldr	r3, [sp, #12]
 8009e48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009e4c:	0d1b      	lsrs	r3, r3, #20
 8009e4e:	051b      	lsls	r3, r3, #20
 8009e50:	b12b      	cbz	r3, 8009e5e <_dtoa_r+0x7de>
 8009e52:	9b08      	ldr	r3, [sp, #32]
 8009e54:	f108 0801 	add.w	r8, r8, #1
 8009e58:	3301      	adds	r3, #1
 8009e5a:	9308      	str	r3, [sp, #32]
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	f000 81b0 	beq.w	800a1c8 <_dtoa_r+0xb48>
 8009e68:	6923      	ldr	r3, [r4, #16]
 8009e6a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009e6e:	6918      	ldr	r0, [r3, #16]
 8009e70:	f000 fb74 	bl	800a55c <__hi0bits>
 8009e74:	f1c0 0020 	rsb	r0, r0, #32
 8009e78:	9b08      	ldr	r3, [sp, #32]
 8009e7a:	4418      	add	r0, r3
 8009e7c:	f010 001f 	ands.w	r0, r0, #31
 8009e80:	d077      	beq.n	8009f72 <_dtoa_r+0x8f2>
 8009e82:	f1c0 0320 	rsb	r3, r0, #32
 8009e86:	2b04      	cmp	r3, #4
 8009e88:	dd6b      	ble.n	8009f62 <_dtoa_r+0x8e2>
 8009e8a:	f1c0 001c 	rsb	r0, r0, #28
 8009e8e:	9b08      	ldr	r3, [sp, #32]
 8009e90:	4480      	add	r8, r0
 8009e92:	4403      	add	r3, r0
 8009e94:	4406      	add	r6, r0
 8009e96:	9308      	str	r3, [sp, #32]
 8009e98:	f1b8 0f00 	cmp.w	r8, #0
 8009e9c:	dd05      	ble.n	8009eaa <_dtoa_r+0x82a>
 8009e9e:	4649      	mov	r1, r9
 8009ea0:	4642      	mov	r2, r8
 8009ea2:	4658      	mov	r0, fp
 8009ea4:	f000 fcc0 	bl	800a828 <__lshift>
 8009ea8:	4681      	mov	r9, r0
 8009eaa:	9b08      	ldr	r3, [sp, #32]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	dd05      	ble.n	8009ebc <_dtoa_r+0x83c>
 8009eb0:	4621      	mov	r1, r4
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	4658      	mov	r0, fp
 8009eb6:	f000 fcb7 	bl	800a828 <__lshift>
 8009eba:	4604      	mov	r4, r0
 8009ebc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d059      	beq.n	8009f76 <_dtoa_r+0x8f6>
 8009ec2:	4621      	mov	r1, r4
 8009ec4:	4648      	mov	r0, r9
 8009ec6:	f000 fd1b 	bl	800a900 <__mcmp>
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	da53      	bge.n	8009f76 <_dtoa_r+0x8f6>
 8009ece:	1e7b      	subs	r3, r7, #1
 8009ed0:	4649      	mov	r1, r9
 8009ed2:	220a      	movs	r2, #10
 8009ed4:	4658      	mov	r0, fp
 8009ed6:	9304      	str	r3, [sp, #16]
 8009ed8:	2300      	movs	r3, #0
 8009eda:	f000 faf7 	bl	800a4cc <__multadd>
 8009ede:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ee0:	4681      	mov	r9, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	f000 8172 	beq.w	800a1cc <_dtoa_r+0xb4c>
 8009ee8:	2300      	movs	r3, #0
 8009eea:	4629      	mov	r1, r5
 8009eec:	220a      	movs	r2, #10
 8009eee:	4658      	mov	r0, fp
 8009ef0:	f000 faec 	bl	800a4cc <__multadd>
 8009ef4:	9b00      	ldr	r3, [sp, #0]
 8009ef6:	4605      	mov	r5, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	dc67      	bgt.n	8009fcc <_dtoa_r+0x94c>
 8009efc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009efe:	2b02      	cmp	r3, #2
 8009f00:	dc41      	bgt.n	8009f86 <_dtoa_r+0x906>
 8009f02:	e063      	b.n	8009fcc <_dtoa_r+0x94c>
 8009f04:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009f06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009f0a:	e746      	b.n	8009d9a <_dtoa_r+0x71a>
 8009f0c:	9b07      	ldr	r3, [sp, #28]
 8009f0e:	1e5c      	subs	r4, r3, #1
 8009f10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f12:	42a3      	cmp	r3, r4
 8009f14:	bfb7      	itett	lt
 8009f16:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009f18:	1b1c      	subge	r4, r3, r4
 8009f1a:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009f1c:	1ae3      	sublt	r3, r4, r3
 8009f1e:	bfbe      	ittt	lt
 8009f20:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009f22:	2400      	movlt	r4, #0
 8009f24:	18d2      	addlt	r2, r2, r3
 8009f26:	9b07      	ldr	r3, [sp, #28]
 8009f28:	bfb8      	it	lt
 8009f2a:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	bfb5      	itete	lt
 8009f30:	eba8 0603 	sublt.w	r6, r8, r3
 8009f34:	4646      	movge	r6, r8
 8009f36:	2300      	movlt	r3, #0
 8009f38:	9b07      	ldrge	r3, [sp, #28]
 8009f3a:	e730      	b.n	8009d9e <_dtoa_r+0x71e>
 8009f3c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009f3e:	4646      	mov	r6, r8
 8009f40:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009f42:	e735      	b.n	8009db0 <_dtoa_r+0x730>
 8009f44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009f46:	e75c      	b.n	8009e02 <_dtoa_r+0x782>
 8009f48:	2300      	movs	r3, #0
 8009f4a:	e788      	b.n	8009e5e <_dtoa_r+0x7de>
 8009f4c:	3fe00000 	.word	0x3fe00000
 8009f50:	40240000 	.word	0x40240000
 8009f54:	40140000 	.word	0x40140000
 8009f58:	9b02      	ldr	r3, [sp, #8]
 8009f5a:	e780      	b.n	8009e5e <_dtoa_r+0x7de>
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f60:	e782      	b.n	8009e68 <_dtoa_r+0x7e8>
 8009f62:	d099      	beq.n	8009e98 <_dtoa_r+0x818>
 8009f64:	331c      	adds	r3, #28
 8009f66:	9a08      	ldr	r2, [sp, #32]
 8009f68:	441a      	add	r2, r3
 8009f6a:	4498      	add	r8, r3
 8009f6c:	441e      	add	r6, r3
 8009f6e:	9208      	str	r2, [sp, #32]
 8009f70:	e792      	b.n	8009e98 <_dtoa_r+0x818>
 8009f72:	4603      	mov	r3, r0
 8009f74:	e7f6      	b.n	8009f64 <_dtoa_r+0x8e4>
 8009f76:	9b07      	ldr	r3, [sp, #28]
 8009f78:	9704      	str	r7, [sp, #16]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	dc20      	bgt.n	8009fc0 <_dtoa_r+0x940>
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f82:	2b02      	cmp	r3, #2
 8009f84:	dd1e      	ble.n	8009fc4 <_dtoa_r+0x944>
 8009f86:	9b00      	ldr	r3, [sp, #0]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f47f aec0 	bne.w	8009d0e <_dtoa_r+0x68e>
 8009f8e:	4621      	mov	r1, r4
 8009f90:	2205      	movs	r2, #5
 8009f92:	4658      	mov	r0, fp
 8009f94:	f000 fa9a 	bl	800a4cc <__multadd>
 8009f98:	4601      	mov	r1, r0
 8009f9a:	4604      	mov	r4, r0
 8009f9c:	4648      	mov	r0, r9
 8009f9e:	f000 fcaf 	bl	800a900 <__mcmp>
 8009fa2:	2800      	cmp	r0, #0
 8009fa4:	f77f aeb3 	ble.w	8009d0e <_dtoa_r+0x68e>
 8009fa8:	2331      	movs	r3, #49	@ 0x31
 8009faa:	4656      	mov	r6, sl
 8009fac:	f806 3b01 	strb.w	r3, [r6], #1
 8009fb0:	9b04      	ldr	r3, [sp, #16]
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	9304      	str	r3, [sp, #16]
 8009fb6:	e6ae      	b.n	8009d16 <_dtoa_r+0x696>
 8009fb8:	9c07      	ldr	r4, [sp, #28]
 8009fba:	9704      	str	r7, [sp, #16]
 8009fbc:	4625      	mov	r5, r4
 8009fbe:	e7f3      	b.n	8009fa8 <_dtoa_r+0x928>
 8009fc0:	9b07      	ldr	r3, [sp, #28]
 8009fc2:	9300      	str	r3, [sp, #0]
 8009fc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	f000 8104 	beq.w	800a1d4 <_dtoa_r+0xb54>
 8009fcc:	2e00      	cmp	r6, #0
 8009fce:	dd05      	ble.n	8009fdc <_dtoa_r+0x95c>
 8009fd0:	4629      	mov	r1, r5
 8009fd2:	4632      	mov	r2, r6
 8009fd4:	4658      	mov	r0, fp
 8009fd6:	f000 fc27 	bl	800a828 <__lshift>
 8009fda:	4605      	mov	r5, r0
 8009fdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d05a      	beq.n	800a098 <_dtoa_r+0xa18>
 8009fe2:	6869      	ldr	r1, [r5, #4]
 8009fe4:	4658      	mov	r0, fp
 8009fe6:	f000 fa0f 	bl	800a408 <_Balloc>
 8009fea:	4606      	mov	r6, r0
 8009fec:	b928      	cbnz	r0, 8009ffa <_dtoa_r+0x97a>
 8009fee:	4b84      	ldr	r3, [pc, #528]	@ (800a200 <_dtoa_r+0xb80>)
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009ff6:	f7ff bb5a 	b.w	80096ae <_dtoa_r+0x2e>
 8009ffa:	692a      	ldr	r2, [r5, #16]
 8009ffc:	f105 010c 	add.w	r1, r5, #12
 800a000:	300c      	adds	r0, #12
 800a002:	3202      	adds	r2, #2
 800a004:	0092      	lsls	r2, r2, #2
 800a006:	f001 f809 	bl	800b01c <memcpy>
 800a00a:	2201      	movs	r2, #1
 800a00c:	4631      	mov	r1, r6
 800a00e:	4658      	mov	r0, fp
 800a010:	f000 fc0a 	bl	800a828 <__lshift>
 800a014:	f10a 0301 	add.w	r3, sl, #1
 800a018:	462f      	mov	r7, r5
 800a01a:	4605      	mov	r5, r0
 800a01c:	9307      	str	r3, [sp, #28]
 800a01e:	9b00      	ldr	r3, [sp, #0]
 800a020:	4453      	add	r3, sl
 800a022:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a024:	9b02      	ldr	r3, [sp, #8]
 800a026:	f003 0301 	and.w	r3, r3, #1
 800a02a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a02c:	9b07      	ldr	r3, [sp, #28]
 800a02e:	4621      	mov	r1, r4
 800a030:	4648      	mov	r0, r9
 800a032:	3b01      	subs	r3, #1
 800a034:	9300      	str	r3, [sp, #0]
 800a036:	f7ff fa94 	bl	8009562 <quorem>
 800a03a:	4639      	mov	r1, r7
 800a03c:	9002      	str	r0, [sp, #8]
 800a03e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a042:	4648      	mov	r0, r9
 800a044:	f000 fc5c 	bl	800a900 <__mcmp>
 800a048:	462a      	mov	r2, r5
 800a04a:	9008      	str	r0, [sp, #32]
 800a04c:	4621      	mov	r1, r4
 800a04e:	4658      	mov	r0, fp
 800a050:	f000 fc72 	bl	800a938 <__mdiff>
 800a054:	68c2      	ldr	r2, [r0, #12]
 800a056:	4606      	mov	r6, r0
 800a058:	bb02      	cbnz	r2, 800a09c <_dtoa_r+0xa1c>
 800a05a:	4601      	mov	r1, r0
 800a05c:	4648      	mov	r0, r9
 800a05e:	f000 fc4f 	bl	800a900 <__mcmp>
 800a062:	4602      	mov	r2, r0
 800a064:	4631      	mov	r1, r6
 800a066:	4658      	mov	r0, fp
 800a068:	920e      	str	r2, [sp, #56]	@ 0x38
 800a06a:	f000 fa0d 	bl	800a488 <_Bfree>
 800a06e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a070:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a072:	9e07      	ldr	r6, [sp, #28]
 800a074:	ea43 0102 	orr.w	r1, r3, r2
 800a078:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a07a:	4319      	orrs	r1, r3
 800a07c:	d110      	bne.n	800a0a0 <_dtoa_r+0xa20>
 800a07e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a082:	d029      	beq.n	800a0d8 <_dtoa_r+0xa58>
 800a084:	9b08      	ldr	r3, [sp, #32]
 800a086:	2b00      	cmp	r3, #0
 800a088:	dd02      	ble.n	800a090 <_dtoa_r+0xa10>
 800a08a:	9b02      	ldr	r3, [sp, #8]
 800a08c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a090:	9b00      	ldr	r3, [sp, #0]
 800a092:	f883 8000 	strb.w	r8, [r3]
 800a096:	e63f      	b.n	8009d18 <_dtoa_r+0x698>
 800a098:	4628      	mov	r0, r5
 800a09a:	e7bb      	b.n	800a014 <_dtoa_r+0x994>
 800a09c:	2201      	movs	r2, #1
 800a09e:	e7e1      	b.n	800a064 <_dtoa_r+0x9e4>
 800a0a0:	9b08      	ldr	r3, [sp, #32]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	db04      	blt.n	800a0b0 <_dtoa_r+0xa30>
 800a0a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a0a8:	430b      	orrs	r3, r1
 800a0aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a0ac:	430b      	orrs	r3, r1
 800a0ae:	d120      	bne.n	800a0f2 <_dtoa_r+0xa72>
 800a0b0:	2a00      	cmp	r2, #0
 800a0b2:	dded      	ble.n	800a090 <_dtoa_r+0xa10>
 800a0b4:	4649      	mov	r1, r9
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	4658      	mov	r0, fp
 800a0ba:	f000 fbb5 	bl	800a828 <__lshift>
 800a0be:	4621      	mov	r1, r4
 800a0c0:	4681      	mov	r9, r0
 800a0c2:	f000 fc1d 	bl	800a900 <__mcmp>
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	dc03      	bgt.n	800a0d2 <_dtoa_r+0xa52>
 800a0ca:	d1e1      	bne.n	800a090 <_dtoa_r+0xa10>
 800a0cc:	f018 0f01 	tst.w	r8, #1
 800a0d0:	d0de      	beq.n	800a090 <_dtoa_r+0xa10>
 800a0d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a0d6:	d1d8      	bne.n	800a08a <_dtoa_r+0xa0a>
 800a0d8:	2339      	movs	r3, #57	@ 0x39
 800a0da:	9a00      	ldr	r2, [sp, #0]
 800a0dc:	7013      	strb	r3, [r2, #0]
 800a0de:	4633      	mov	r3, r6
 800a0e0:	461e      	mov	r6, r3
 800a0e2:	3b01      	subs	r3, #1
 800a0e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a0e8:	2a39      	cmp	r2, #57	@ 0x39
 800a0ea:	d052      	beq.n	800a192 <_dtoa_r+0xb12>
 800a0ec:	3201      	adds	r2, #1
 800a0ee:	701a      	strb	r2, [r3, #0]
 800a0f0:	e612      	b.n	8009d18 <_dtoa_r+0x698>
 800a0f2:	2a00      	cmp	r2, #0
 800a0f4:	dd07      	ble.n	800a106 <_dtoa_r+0xa86>
 800a0f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a0fa:	d0ed      	beq.n	800a0d8 <_dtoa_r+0xa58>
 800a0fc:	f108 0301 	add.w	r3, r8, #1
 800a100:	9a00      	ldr	r2, [sp, #0]
 800a102:	7013      	strb	r3, [r2, #0]
 800a104:	e608      	b.n	8009d18 <_dtoa_r+0x698>
 800a106:	9b07      	ldr	r3, [sp, #28]
 800a108:	9a07      	ldr	r2, [sp, #28]
 800a10a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a10e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a110:	4293      	cmp	r3, r2
 800a112:	d028      	beq.n	800a166 <_dtoa_r+0xae6>
 800a114:	4649      	mov	r1, r9
 800a116:	2300      	movs	r3, #0
 800a118:	220a      	movs	r2, #10
 800a11a:	4658      	mov	r0, fp
 800a11c:	f000 f9d6 	bl	800a4cc <__multadd>
 800a120:	42af      	cmp	r7, r5
 800a122:	4681      	mov	r9, r0
 800a124:	f04f 0300 	mov.w	r3, #0
 800a128:	f04f 020a 	mov.w	r2, #10
 800a12c:	4639      	mov	r1, r7
 800a12e:	4658      	mov	r0, fp
 800a130:	d107      	bne.n	800a142 <_dtoa_r+0xac2>
 800a132:	f000 f9cb 	bl	800a4cc <__multadd>
 800a136:	4607      	mov	r7, r0
 800a138:	4605      	mov	r5, r0
 800a13a:	9b07      	ldr	r3, [sp, #28]
 800a13c:	3301      	adds	r3, #1
 800a13e:	9307      	str	r3, [sp, #28]
 800a140:	e774      	b.n	800a02c <_dtoa_r+0x9ac>
 800a142:	f000 f9c3 	bl	800a4cc <__multadd>
 800a146:	4629      	mov	r1, r5
 800a148:	4607      	mov	r7, r0
 800a14a:	2300      	movs	r3, #0
 800a14c:	220a      	movs	r2, #10
 800a14e:	4658      	mov	r0, fp
 800a150:	f000 f9bc 	bl	800a4cc <__multadd>
 800a154:	4605      	mov	r5, r0
 800a156:	e7f0      	b.n	800a13a <_dtoa_r+0xaba>
 800a158:	9b00      	ldr	r3, [sp, #0]
 800a15a:	2700      	movs	r7, #0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	bfcc      	ite	gt
 800a160:	461e      	movgt	r6, r3
 800a162:	2601      	movle	r6, #1
 800a164:	4456      	add	r6, sl
 800a166:	4649      	mov	r1, r9
 800a168:	2201      	movs	r2, #1
 800a16a:	4658      	mov	r0, fp
 800a16c:	f000 fb5c 	bl	800a828 <__lshift>
 800a170:	4621      	mov	r1, r4
 800a172:	4681      	mov	r9, r0
 800a174:	f000 fbc4 	bl	800a900 <__mcmp>
 800a178:	2800      	cmp	r0, #0
 800a17a:	dcb0      	bgt.n	800a0de <_dtoa_r+0xa5e>
 800a17c:	d102      	bne.n	800a184 <_dtoa_r+0xb04>
 800a17e:	f018 0f01 	tst.w	r8, #1
 800a182:	d1ac      	bne.n	800a0de <_dtoa_r+0xa5e>
 800a184:	4633      	mov	r3, r6
 800a186:	461e      	mov	r6, r3
 800a188:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a18c:	2a30      	cmp	r2, #48	@ 0x30
 800a18e:	d0fa      	beq.n	800a186 <_dtoa_r+0xb06>
 800a190:	e5c2      	b.n	8009d18 <_dtoa_r+0x698>
 800a192:	459a      	cmp	sl, r3
 800a194:	d1a4      	bne.n	800a0e0 <_dtoa_r+0xa60>
 800a196:	9b04      	ldr	r3, [sp, #16]
 800a198:	3301      	adds	r3, #1
 800a19a:	9304      	str	r3, [sp, #16]
 800a19c:	2331      	movs	r3, #49	@ 0x31
 800a19e:	f88a 3000 	strb.w	r3, [sl]
 800a1a2:	e5b9      	b.n	8009d18 <_dtoa_r+0x698>
 800a1a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a1a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a204 <_dtoa_r+0xb84>
 800a1aa:	b11b      	cbz	r3, 800a1b4 <_dtoa_r+0xb34>
 800a1ac:	f10a 0308 	add.w	r3, sl, #8
 800a1b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a1b2:	6013      	str	r3, [r2, #0]
 800a1b4:	4650      	mov	r0, sl
 800a1b6:	b019      	add	sp, #100	@ 0x64
 800a1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	f77f ae37 	ble.w	8009e32 <_dtoa_r+0x7b2>
 800a1c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1c8:	2001      	movs	r0, #1
 800a1ca:	e655      	b.n	8009e78 <_dtoa_r+0x7f8>
 800a1cc:	9b00      	ldr	r3, [sp, #0]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	f77f aed6 	ble.w	8009f80 <_dtoa_r+0x900>
 800a1d4:	4656      	mov	r6, sl
 800a1d6:	4621      	mov	r1, r4
 800a1d8:	4648      	mov	r0, r9
 800a1da:	f7ff f9c2 	bl	8009562 <quorem>
 800a1de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a1e2:	9b00      	ldr	r3, [sp, #0]
 800a1e4:	f806 8b01 	strb.w	r8, [r6], #1
 800a1e8:	eba6 020a 	sub.w	r2, r6, sl
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	ddb3      	ble.n	800a158 <_dtoa_r+0xad8>
 800a1f0:	4649      	mov	r1, r9
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	220a      	movs	r2, #10
 800a1f6:	4658      	mov	r0, fp
 800a1f8:	f000 f968 	bl	800a4cc <__multadd>
 800a1fc:	4681      	mov	r9, r0
 800a1fe:	e7ea      	b.n	800a1d6 <_dtoa_r+0xb56>
 800a200:	0800b3e0 	.word	0x0800b3e0
 800a204:	0800b364 	.word	0x0800b364

0800a208 <_free_r>:
 800a208:	b538      	push	{r3, r4, r5, lr}
 800a20a:	4605      	mov	r5, r0
 800a20c:	2900      	cmp	r1, #0
 800a20e:	d041      	beq.n	800a294 <_free_r+0x8c>
 800a210:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a214:	1f0c      	subs	r4, r1, #4
 800a216:	2b00      	cmp	r3, #0
 800a218:	bfb8      	it	lt
 800a21a:	18e4      	addlt	r4, r4, r3
 800a21c:	f000 f8e8 	bl	800a3f0 <__malloc_lock>
 800a220:	4a1d      	ldr	r2, [pc, #116]	@ (800a298 <_free_r+0x90>)
 800a222:	6813      	ldr	r3, [r2, #0]
 800a224:	b933      	cbnz	r3, 800a234 <_free_r+0x2c>
 800a226:	6063      	str	r3, [r4, #4]
 800a228:	6014      	str	r4, [r2, #0]
 800a22a:	4628      	mov	r0, r5
 800a22c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a230:	f000 b8e4 	b.w	800a3fc <__malloc_unlock>
 800a234:	42a3      	cmp	r3, r4
 800a236:	d908      	bls.n	800a24a <_free_r+0x42>
 800a238:	6820      	ldr	r0, [r4, #0]
 800a23a:	1821      	adds	r1, r4, r0
 800a23c:	428b      	cmp	r3, r1
 800a23e:	bf01      	itttt	eq
 800a240:	6819      	ldreq	r1, [r3, #0]
 800a242:	685b      	ldreq	r3, [r3, #4]
 800a244:	1809      	addeq	r1, r1, r0
 800a246:	6021      	streq	r1, [r4, #0]
 800a248:	e7ed      	b.n	800a226 <_free_r+0x1e>
 800a24a:	461a      	mov	r2, r3
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	b10b      	cbz	r3, 800a254 <_free_r+0x4c>
 800a250:	42a3      	cmp	r3, r4
 800a252:	d9fa      	bls.n	800a24a <_free_r+0x42>
 800a254:	6811      	ldr	r1, [r2, #0]
 800a256:	1850      	adds	r0, r2, r1
 800a258:	42a0      	cmp	r0, r4
 800a25a:	d10b      	bne.n	800a274 <_free_r+0x6c>
 800a25c:	6820      	ldr	r0, [r4, #0]
 800a25e:	4401      	add	r1, r0
 800a260:	1850      	adds	r0, r2, r1
 800a262:	6011      	str	r1, [r2, #0]
 800a264:	4283      	cmp	r3, r0
 800a266:	d1e0      	bne.n	800a22a <_free_r+0x22>
 800a268:	6818      	ldr	r0, [r3, #0]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	4408      	add	r0, r1
 800a26e:	6053      	str	r3, [r2, #4]
 800a270:	6010      	str	r0, [r2, #0]
 800a272:	e7da      	b.n	800a22a <_free_r+0x22>
 800a274:	d902      	bls.n	800a27c <_free_r+0x74>
 800a276:	230c      	movs	r3, #12
 800a278:	602b      	str	r3, [r5, #0]
 800a27a:	e7d6      	b.n	800a22a <_free_r+0x22>
 800a27c:	6820      	ldr	r0, [r4, #0]
 800a27e:	1821      	adds	r1, r4, r0
 800a280:	428b      	cmp	r3, r1
 800a282:	bf02      	ittt	eq
 800a284:	6819      	ldreq	r1, [r3, #0]
 800a286:	685b      	ldreq	r3, [r3, #4]
 800a288:	1809      	addeq	r1, r1, r0
 800a28a:	6063      	str	r3, [r4, #4]
 800a28c:	bf08      	it	eq
 800a28e:	6021      	streq	r1, [r4, #0]
 800a290:	6054      	str	r4, [r2, #4]
 800a292:	e7ca      	b.n	800a22a <_free_r+0x22>
 800a294:	bd38      	pop	{r3, r4, r5, pc}
 800a296:	bf00      	nop
 800a298:	2000062c 	.word	0x2000062c

0800a29c <malloc>:
 800a29c:	4b02      	ldr	r3, [pc, #8]	@ (800a2a8 <malloc+0xc>)
 800a29e:	4601      	mov	r1, r0
 800a2a0:	6818      	ldr	r0, [r3, #0]
 800a2a2:	f000 b825 	b.w	800a2f0 <_malloc_r>
 800a2a6:	bf00      	nop
 800a2a8:	2000002c 	.word	0x2000002c

0800a2ac <sbrk_aligned>:
 800a2ac:	b570      	push	{r4, r5, r6, lr}
 800a2ae:	4e0f      	ldr	r6, [pc, #60]	@ (800a2ec <sbrk_aligned+0x40>)
 800a2b0:	460c      	mov	r4, r1
 800a2b2:	4605      	mov	r5, r0
 800a2b4:	6831      	ldr	r1, [r6, #0]
 800a2b6:	b911      	cbnz	r1, 800a2be <sbrk_aligned+0x12>
 800a2b8:	f000 fea0 	bl	800affc <_sbrk_r>
 800a2bc:	6030      	str	r0, [r6, #0]
 800a2be:	4621      	mov	r1, r4
 800a2c0:	4628      	mov	r0, r5
 800a2c2:	f000 fe9b 	bl	800affc <_sbrk_r>
 800a2c6:	1c43      	adds	r3, r0, #1
 800a2c8:	d103      	bne.n	800a2d2 <sbrk_aligned+0x26>
 800a2ca:	f04f 34ff 	mov.w	r4, #4294967295
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	bd70      	pop	{r4, r5, r6, pc}
 800a2d2:	1cc4      	adds	r4, r0, #3
 800a2d4:	f024 0403 	bic.w	r4, r4, #3
 800a2d8:	42a0      	cmp	r0, r4
 800a2da:	d0f8      	beq.n	800a2ce <sbrk_aligned+0x22>
 800a2dc:	1a21      	subs	r1, r4, r0
 800a2de:	4628      	mov	r0, r5
 800a2e0:	f000 fe8c 	bl	800affc <_sbrk_r>
 800a2e4:	3001      	adds	r0, #1
 800a2e6:	d1f2      	bne.n	800a2ce <sbrk_aligned+0x22>
 800a2e8:	e7ef      	b.n	800a2ca <sbrk_aligned+0x1e>
 800a2ea:	bf00      	nop
 800a2ec:	20000628 	.word	0x20000628

0800a2f0 <_malloc_r>:
 800a2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2f4:	1ccd      	adds	r5, r1, #3
 800a2f6:	4606      	mov	r6, r0
 800a2f8:	f025 0503 	bic.w	r5, r5, #3
 800a2fc:	3508      	adds	r5, #8
 800a2fe:	2d0c      	cmp	r5, #12
 800a300:	bf38      	it	cc
 800a302:	250c      	movcc	r5, #12
 800a304:	2d00      	cmp	r5, #0
 800a306:	db01      	blt.n	800a30c <_malloc_r+0x1c>
 800a308:	42a9      	cmp	r1, r5
 800a30a:	d904      	bls.n	800a316 <_malloc_r+0x26>
 800a30c:	230c      	movs	r3, #12
 800a30e:	6033      	str	r3, [r6, #0]
 800a310:	2000      	movs	r0, #0
 800a312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a316:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a3ec <_malloc_r+0xfc>
 800a31a:	f000 f869 	bl	800a3f0 <__malloc_lock>
 800a31e:	f8d8 3000 	ldr.w	r3, [r8]
 800a322:	461c      	mov	r4, r3
 800a324:	bb44      	cbnz	r4, 800a378 <_malloc_r+0x88>
 800a326:	4629      	mov	r1, r5
 800a328:	4630      	mov	r0, r6
 800a32a:	f7ff ffbf 	bl	800a2ac <sbrk_aligned>
 800a32e:	1c43      	adds	r3, r0, #1
 800a330:	4604      	mov	r4, r0
 800a332:	d158      	bne.n	800a3e6 <_malloc_r+0xf6>
 800a334:	f8d8 4000 	ldr.w	r4, [r8]
 800a338:	4627      	mov	r7, r4
 800a33a:	2f00      	cmp	r7, #0
 800a33c:	d143      	bne.n	800a3c6 <_malloc_r+0xd6>
 800a33e:	2c00      	cmp	r4, #0
 800a340:	d04b      	beq.n	800a3da <_malloc_r+0xea>
 800a342:	6823      	ldr	r3, [r4, #0]
 800a344:	4639      	mov	r1, r7
 800a346:	4630      	mov	r0, r6
 800a348:	eb04 0903 	add.w	r9, r4, r3
 800a34c:	f000 fe56 	bl	800affc <_sbrk_r>
 800a350:	4581      	cmp	r9, r0
 800a352:	d142      	bne.n	800a3da <_malloc_r+0xea>
 800a354:	6821      	ldr	r1, [r4, #0]
 800a356:	4630      	mov	r0, r6
 800a358:	1a6d      	subs	r5, r5, r1
 800a35a:	4629      	mov	r1, r5
 800a35c:	f7ff ffa6 	bl	800a2ac <sbrk_aligned>
 800a360:	3001      	adds	r0, #1
 800a362:	d03a      	beq.n	800a3da <_malloc_r+0xea>
 800a364:	6823      	ldr	r3, [r4, #0]
 800a366:	442b      	add	r3, r5
 800a368:	6023      	str	r3, [r4, #0]
 800a36a:	f8d8 3000 	ldr.w	r3, [r8]
 800a36e:	685a      	ldr	r2, [r3, #4]
 800a370:	bb62      	cbnz	r2, 800a3cc <_malloc_r+0xdc>
 800a372:	f8c8 7000 	str.w	r7, [r8]
 800a376:	e00f      	b.n	800a398 <_malloc_r+0xa8>
 800a378:	6822      	ldr	r2, [r4, #0]
 800a37a:	1b52      	subs	r2, r2, r5
 800a37c:	d420      	bmi.n	800a3c0 <_malloc_r+0xd0>
 800a37e:	2a0b      	cmp	r2, #11
 800a380:	d917      	bls.n	800a3b2 <_malloc_r+0xc2>
 800a382:	1961      	adds	r1, r4, r5
 800a384:	42a3      	cmp	r3, r4
 800a386:	6025      	str	r5, [r4, #0]
 800a388:	bf18      	it	ne
 800a38a:	6059      	strne	r1, [r3, #4]
 800a38c:	6863      	ldr	r3, [r4, #4]
 800a38e:	bf08      	it	eq
 800a390:	f8c8 1000 	streq.w	r1, [r8]
 800a394:	5162      	str	r2, [r4, r5]
 800a396:	604b      	str	r3, [r1, #4]
 800a398:	4630      	mov	r0, r6
 800a39a:	f000 f82f 	bl	800a3fc <__malloc_unlock>
 800a39e:	f104 000b 	add.w	r0, r4, #11
 800a3a2:	1d23      	adds	r3, r4, #4
 800a3a4:	f020 0007 	bic.w	r0, r0, #7
 800a3a8:	1ac2      	subs	r2, r0, r3
 800a3aa:	bf1c      	itt	ne
 800a3ac:	1a1b      	subne	r3, r3, r0
 800a3ae:	50a3      	strne	r3, [r4, r2]
 800a3b0:	e7af      	b.n	800a312 <_malloc_r+0x22>
 800a3b2:	6862      	ldr	r2, [r4, #4]
 800a3b4:	42a3      	cmp	r3, r4
 800a3b6:	bf0c      	ite	eq
 800a3b8:	f8c8 2000 	streq.w	r2, [r8]
 800a3bc:	605a      	strne	r2, [r3, #4]
 800a3be:	e7eb      	b.n	800a398 <_malloc_r+0xa8>
 800a3c0:	4623      	mov	r3, r4
 800a3c2:	6864      	ldr	r4, [r4, #4]
 800a3c4:	e7ae      	b.n	800a324 <_malloc_r+0x34>
 800a3c6:	463c      	mov	r4, r7
 800a3c8:	687f      	ldr	r7, [r7, #4]
 800a3ca:	e7b6      	b.n	800a33a <_malloc_r+0x4a>
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	42a3      	cmp	r3, r4
 800a3d2:	d1fb      	bne.n	800a3cc <_malloc_r+0xdc>
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	6053      	str	r3, [r2, #4]
 800a3d8:	e7de      	b.n	800a398 <_malloc_r+0xa8>
 800a3da:	230c      	movs	r3, #12
 800a3dc:	4630      	mov	r0, r6
 800a3de:	6033      	str	r3, [r6, #0]
 800a3e0:	f000 f80c 	bl	800a3fc <__malloc_unlock>
 800a3e4:	e794      	b.n	800a310 <_malloc_r+0x20>
 800a3e6:	6005      	str	r5, [r0, #0]
 800a3e8:	e7d6      	b.n	800a398 <_malloc_r+0xa8>
 800a3ea:	bf00      	nop
 800a3ec:	2000062c 	.word	0x2000062c

0800a3f0 <__malloc_lock>:
 800a3f0:	4801      	ldr	r0, [pc, #4]	@ (800a3f8 <__malloc_lock+0x8>)
 800a3f2:	f7ff b8a6 	b.w	8009542 <__retarget_lock_acquire_recursive>
 800a3f6:	bf00      	nop
 800a3f8:	20000624 	.word	0x20000624

0800a3fc <__malloc_unlock>:
 800a3fc:	4801      	ldr	r0, [pc, #4]	@ (800a404 <__malloc_unlock+0x8>)
 800a3fe:	f7ff b8a1 	b.w	8009544 <__retarget_lock_release_recursive>
 800a402:	bf00      	nop
 800a404:	20000624 	.word	0x20000624

0800a408 <_Balloc>:
 800a408:	b570      	push	{r4, r5, r6, lr}
 800a40a:	69c6      	ldr	r6, [r0, #28]
 800a40c:	4604      	mov	r4, r0
 800a40e:	460d      	mov	r5, r1
 800a410:	b976      	cbnz	r6, 800a430 <_Balloc+0x28>
 800a412:	2010      	movs	r0, #16
 800a414:	f7ff ff42 	bl	800a29c <malloc>
 800a418:	4602      	mov	r2, r0
 800a41a:	61e0      	str	r0, [r4, #28]
 800a41c:	b920      	cbnz	r0, 800a428 <_Balloc+0x20>
 800a41e:	4b18      	ldr	r3, [pc, #96]	@ (800a480 <_Balloc+0x78>)
 800a420:	216b      	movs	r1, #107	@ 0x6b
 800a422:	4818      	ldr	r0, [pc, #96]	@ (800a484 <_Balloc+0x7c>)
 800a424:	f000 fe08 	bl	800b038 <__assert_func>
 800a428:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a42c:	6006      	str	r6, [r0, #0]
 800a42e:	60c6      	str	r6, [r0, #12]
 800a430:	69e6      	ldr	r6, [r4, #28]
 800a432:	68f3      	ldr	r3, [r6, #12]
 800a434:	b183      	cbz	r3, 800a458 <_Balloc+0x50>
 800a436:	69e3      	ldr	r3, [r4, #28]
 800a438:	68db      	ldr	r3, [r3, #12]
 800a43a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a43e:	b9b8      	cbnz	r0, 800a470 <_Balloc+0x68>
 800a440:	2101      	movs	r1, #1
 800a442:	4620      	mov	r0, r4
 800a444:	fa01 f605 	lsl.w	r6, r1, r5
 800a448:	1d72      	adds	r2, r6, #5
 800a44a:	0092      	lsls	r2, r2, #2
 800a44c:	f000 fe12 	bl	800b074 <_calloc_r>
 800a450:	b160      	cbz	r0, 800a46c <_Balloc+0x64>
 800a452:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a456:	e00e      	b.n	800a476 <_Balloc+0x6e>
 800a458:	2221      	movs	r2, #33	@ 0x21
 800a45a:	2104      	movs	r1, #4
 800a45c:	4620      	mov	r0, r4
 800a45e:	f000 fe09 	bl	800b074 <_calloc_r>
 800a462:	69e3      	ldr	r3, [r4, #28]
 800a464:	60f0      	str	r0, [r6, #12]
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d1e4      	bne.n	800a436 <_Balloc+0x2e>
 800a46c:	2000      	movs	r0, #0
 800a46e:	bd70      	pop	{r4, r5, r6, pc}
 800a470:	6802      	ldr	r2, [r0, #0]
 800a472:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a476:	2300      	movs	r3, #0
 800a478:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a47c:	e7f7      	b.n	800a46e <_Balloc+0x66>
 800a47e:	bf00      	nop
 800a480:	0800b371 	.word	0x0800b371
 800a484:	0800b3f1 	.word	0x0800b3f1

0800a488 <_Bfree>:
 800a488:	b570      	push	{r4, r5, r6, lr}
 800a48a:	69c6      	ldr	r6, [r0, #28]
 800a48c:	4605      	mov	r5, r0
 800a48e:	460c      	mov	r4, r1
 800a490:	b976      	cbnz	r6, 800a4b0 <_Bfree+0x28>
 800a492:	2010      	movs	r0, #16
 800a494:	f7ff ff02 	bl	800a29c <malloc>
 800a498:	4602      	mov	r2, r0
 800a49a:	61e8      	str	r0, [r5, #28]
 800a49c:	b920      	cbnz	r0, 800a4a8 <_Bfree+0x20>
 800a49e:	4b09      	ldr	r3, [pc, #36]	@ (800a4c4 <_Bfree+0x3c>)
 800a4a0:	218f      	movs	r1, #143	@ 0x8f
 800a4a2:	4809      	ldr	r0, [pc, #36]	@ (800a4c8 <_Bfree+0x40>)
 800a4a4:	f000 fdc8 	bl	800b038 <__assert_func>
 800a4a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4ac:	6006      	str	r6, [r0, #0]
 800a4ae:	60c6      	str	r6, [r0, #12]
 800a4b0:	b13c      	cbz	r4, 800a4c2 <_Bfree+0x3a>
 800a4b2:	69eb      	ldr	r3, [r5, #28]
 800a4b4:	6862      	ldr	r2, [r4, #4]
 800a4b6:	68db      	ldr	r3, [r3, #12]
 800a4b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a4bc:	6021      	str	r1, [r4, #0]
 800a4be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a4c2:	bd70      	pop	{r4, r5, r6, pc}
 800a4c4:	0800b371 	.word	0x0800b371
 800a4c8:	0800b3f1 	.word	0x0800b3f1

0800a4cc <__multadd>:
 800a4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4d0:	f101 0c14 	add.w	ip, r1, #20
 800a4d4:	4607      	mov	r7, r0
 800a4d6:	460c      	mov	r4, r1
 800a4d8:	461e      	mov	r6, r3
 800a4da:	690d      	ldr	r5, [r1, #16]
 800a4dc:	2000      	movs	r0, #0
 800a4de:	f8dc 3000 	ldr.w	r3, [ip]
 800a4e2:	3001      	adds	r0, #1
 800a4e4:	b299      	uxth	r1, r3
 800a4e6:	4285      	cmp	r5, r0
 800a4e8:	fb02 6101 	mla	r1, r2, r1, r6
 800a4ec:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a4f0:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800a4f4:	b289      	uxth	r1, r1
 800a4f6:	fb02 3306 	mla	r3, r2, r6, r3
 800a4fa:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a4fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a502:	f84c 1b04 	str.w	r1, [ip], #4
 800a506:	dcea      	bgt.n	800a4de <__multadd+0x12>
 800a508:	b30e      	cbz	r6, 800a54e <__multadd+0x82>
 800a50a:	68a3      	ldr	r3, [r4, #8]
 800a50c:	42ab      	cmp	r3, r5
 800a50e:	dc19      	bgt.n	800a544 <__multadd+0x78>
 800a510:	6861      	ldr	r1, [r4, #4]
 800a512:	4638      	mov	r0, r7
 800a514:	3101      	adds	r1, #1
 800a516:	f7ff ff77 	bl	800a408 <_Balloc>
 800a51a:	4680      	mov	r8, r0
 800a51c:	b928      	cbnz	r0, 800a52a <__multadd+0x5e>
 800a51e:	4602      	mov	r2, r0
 800a520:	4b0c      	ldr	r3, [pc, #48]	@ (800a554 <__multadd+0x88>)
 800a522:	21ba      	movs	r1, #186	@ 0xba
 800a524:	480c      	ldr	r0, [pc, #48]	@ (800a558 <__multadd+0x8c>)
 800a526:	f000 fd87 	bl	800b038 <__assert_func>
 800a52a:	6922      	ldr	r2, [r4, #16]
 800a52c:	f104 010c 	add.w	r1, r4, #12
 800a530:	300c      	adds	r0, #12
 800a532:	3202      	adds	r2, #2
 800a534:	0092      	lsls	r2, r2, #2
 800a536:	f000 fd71 	bl	800b01c <memcpy>
 800a53a:	4621      	mov	r1, r4
 800a53c:	4644      	mov	r4, r8
 800a53e:	4638      	mov	r0, r7
 800a540:	f7ff ffa2 	bl	800a488 <_Bfree>
 800a544:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a548:	3501      	adds	r5, #1
 800a54a:	615e      	str	r6, [r3, #20]
 800a54c:	6125      	str	r5, [r4, #16]
 800a54e:	4620      	mov	r0, r4
 800a550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a554:	0800b3e0 	.word	0x0800b3e0
 800a558:	0800b3f1 	.word	0x0800b3f1

0800a55c <__hi0bits>:
 800a55c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a560:	4603      	mov	r3, r0
 800a562:	bf36      	itet	cc
 800a564:	0403      	lslcc	r3, r0, #16
 800a566:	2000      	movcs	r0, #0
 800a568:	2010      	movcc	r0, #16
 800a56a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a56e:	bf3c      	itt	cc
 800a570:	021b      	lslcc	r3, r3, #8
 800a572:	3008      	addcc	r0, #8
 800a574:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a578:	bf3c      	itt	cc
 800a57a:	011b      	lslcc	r3, r3, #4
 800a57c:	3004      	addcc	r0, #4
 800a57e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a582:	bf3c      	itt	cc
 800a584:	009b      	lslcc	r3, r3, #2
 800a586:	3002      	addcc	r0, #2
 800a588:	2b00      	cmp	r3, #0
 800a58a:	db05      	blt.n	800a598 <__hi0bits+0x3c>
 800a58c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a590:	f100 0001 	add.w	r0, r0, #1
 800a594:	bf08      	it	eq
 800a596:	2020      	moveq	r0, #32
 800a598:	4770      	bx	lr

0800a59a <__lo0bits>:
 800a59a:	6803      	ldr	r3, [r0, #0]
 800a59c:	4602      	mov	r2, r0
 800a59e:	f013 0007 	ands.w	r0, r3, #7
 800a5a2:	d00b      	beq.n	800a5bc <__lo0bits+0x22>
 800a5a4:	07d9      	lsls	r1, r3, #31
 800a5a6:	d421      	bmi.n	800a5ec <__lo0bits+0x52>
 800a5a8:	0798      	lsls	r0, r3, #30
 800a5aa:	bf47      	ittee	mi
 800a5ac:	085b      	lsrmi	r3, r3, #1
 800a5ae:	2001      	movmi	r0, #1
 800a5b0:	089b      	lsrpl	r3, r3, #2
 800a5b2:	2002      	movpl	r0, #2
 800a5b4:	bf4c      	ite	mi
 800a5b6:	6013      	strmi	r3, [r2, #0]
 800a5b8:	6013      	strpl	r3, [r2, #0]
 800a5ba:	4770      	bx	lr
 800a5bc:	b299      	uxth	r1, r3
 800a5be:	b909      	cbnz	r1, 800a5c4 <__lo0bits+0x2a>
 800a5c0:	0c1b      	lsrs	r3, r3, #16
 800a5c2:	2010      	movs	r0, #16
 800a5c4:	b2d9      	uxtb	r1, r3
 800a5c6:	b909      	cbnz	r1, 800a5cc <__lo0bits+0x32>
 800a5c8:	3008      	adds	r0, #8
 800a5ca:	0a1b      	lsrs	r3, r3, #8
 800a5cc:	0719      	lsls	r1, r3, #28
 800a5ce:	bf04      	itt	eq
 800a5d0:	091b      	lsreq	r3, r3, #4
 800a5d2:	3004      	addeq	r0, #4
 800a5d4:	0799      	lsls	r1, r3, #30
 800a5d6:	bf04      	itt	eq
 800a5d8:	089b      	lsreq	r3, r3, #2
 800a5da:	3002      	addeq	r0, #2
 800a5dc:	07d9      	lsls	r1, r3, #31
 800a5de:	d403      	bmi.n	800a5e8 <__lo0bits+0x4e>
 800a5e0:	085b      	lsrs	r3, r3, #1
 800a5e2:	f100 0001 	add.w	r0, r0, #1
 800a5e6:	d003      	beq.n	800a5f0 <__lo0bits+0x56>
 800a5e8:	6013      	str	r3, [r2, #0]
 800a5ea:	4770      	bx	lr
 800a5ec:	2000      	movs	r0, #0
 800a5ee:	4770      	bx	lr
 800a5f0:	2020      	movs	r0, #32
 800a5f2:	4770      	bx	lr

0800a5f4 <__i2b>:
 800a5f4:	b510      	push	{r4, lr}
 800a5f6:	460c      	mov	r4, r1
 800a5f8:	2101      	movs	r1, #1
 800a5fa:	f7ff ff05 	bl	800a408 <_Balloc>
 800a5fe:	4602      	mov	r2, r0
 800a600:	b928      	cbnz	r0, 800a60e <__i2b+0x1a>
 800a602:	4b05      	ldr	r3, [pc, #20]	@ (800a618 <__i2b+0x24>)
 800a604:	f240 1145 	movw	r1, #325	@ 0x145
 800a608:	4804      	ldr	r0, [pc, #16]	@ (800a61c <__i2b+0x28>)
 800a60a:	f000 fd15 	bl	800b038 <__assert_func>
 800a60e:	2301      	movs	r3, #1
 800a610:	6144      	str	r4, [r0, #20]
 800a612:	6103      	str	r3, [r0, #16]
 800a614:	bd10      	pop	{r4, pc}
 800a616:	bf00      	nop
 800a618:	0800b3e0 	.word	0x0800b3e0
 800a61c:	0800b3f1 	.word	0x0800b3f1

0800a620 <__multiply>:
 800a620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a624:	4614      	mov	r4, r2
 800a626:	690a      	ldr	r2, [r1, #16]
 800a628:	460f      	mov	r7, r1
 800a62a:	b085      	sub	sp, #20
 800a62c:	6923      	ldr	r3, [r4, #16]
 800a62e:	429a      	cmp	r2, r3
 800a630:	bfa2      	ittt	ge
 800a632:	4623      	movge	r3, r4
 800a634:	460c      	movge	r4, r1
 800a636:	461f      	movge	r7, r3
 800a638:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a63c:	68a3      	ldr	r3, [r4, #8]
 800a63e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a642:	6861      	ldr	r1, [r4, #4]
 800a644:	eb0a 0609 	add.w	r6, sl, r9
 800a648:	42b3      	cmp	r3, r6
 800a64a:	bfb8      	it	lt
 800a64c:	3101      	addlt	r1, #1
 800a64e:	f7ff fedb 	bl	800a408 <_Balloc>
 800a652:	b930      	cbnz	r0, 800a662 <__multiply+0x42>
 800a654:	4602      	mov	r2, r0
 800a656:	4b45      	ldr	r3, [pc, #276]	@ (800a76c <__multiply+0x14c>)
 800a658:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a65c:	4844      	ldr	r0, [pc, #272]	@ (800a770 <__multiply+0x150>)
 800a65e:	f000 fceb 	bl	800b038 <__assert_func>
 800a662:	f100 0514 	add.w	r5, r0, #20
 800a666:	2200      	movs	r2, #0
 800a668:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a66c:	462b      	mov	r3, r5
 800a66e:	4543      	cmp	r3, r8
 800a670:	d321      	bcc.n	800a6b6 <__multiply+0x96>
 800a672:	f107 0114 	add.w	r1, r7, #20
 800a676:	f104 0214 	add.w	r2, r4, #20
 800a67a:	f104 0715 	add.w	r7, r4, #21
 800a67e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a682:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a686:	9302      	str	r3, [sp, #8]
 800a688:	1b13      	subs	r3, r2, r4
 800a68a:	3b15      	subs	r3, #21
 800a68c:	f023 0303 	bic.w	r3, r3, #3
 800a690:	3304      	adds	r3, #4
 800a692:	42ba      	cmp	r2, r7
 800a694:	bf38      	it	cc
 800a696:	2304      	movcc	r3, #4
 800a698:	9301      	str	r3, [sp, #4]
 800a69a:	9b02      	ldr	r3, [sp, #8]
 800a69c:	9103      	str	r1, [sp, #12]
 800a69e:	428b      	cmp	r3, r1
 800a6a0:	d80c      	bhi.n	800a6bc <__multiply+0x9c>
 800a6a2:	2e00      	cmp	r6, #0
 800a6a4:	dd03      	ble.n	800a6ae <__multiply+0x8e>
 800a6a6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d05b      	beq.n	800a766 <__multiply+0x146>
 800a6ae:	6106      	str	r6, [r0, #16]
 800a6b0:	b005      	add	sp, #20
 800a6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6b6:	f843 2b04 	str.w	r2, [r3], #4
 800a6ba:	e7d8      	b.n	800a66e <__multiply+0x4e>
 800a6bc:	f8b1 a000 	ldrh.w	sl, [r1]
 800a6c0:	f1ba 0f00 	cmp.w	sl, #0
 800a6c4:	d024      	beq.n	800a710 <__multiply+0xf0>
 800a6c6:	f104 0e14 	add.w	lr, r4, #20
 800a6ca:	46a9      	mov	r9, r5
 800a6cc:	f04f 0c00 	mov.w	ip, #0
 800a6d0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a6d4:	f8d9 3000 	ldr.w	r3, [r9]
 800a6d8:	fa1f fb87 	uxth.w	fp, r7
 800a6dc:	4572      	cmp	r2, lr
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	fb0a 330b 	mla	r3, sl, fp, r3
 800a6e4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a6e8:	f8d9 7000 	ldr.w	r7, [r9]
 800a6ec:	4463      	add	r3, ip
 800a6ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a6f2:	fb0a c70b 	mla	r7, sl, fp, ip
 800a6f6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a700:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a704:	f849 3b04 	str.w	r3, [r9], #4
 800a708:	d8e2      	bhi.n	800a6d0 <__multiply+0xb0>
 800a70a:	9b01      	ldr	r3, [sp, #4]
 800a70c:	f845 c003 	str.w	ip, [r5, r3]
 800a710:	9b03      	ldr	r3, [sp, #12]
 800a712:	3104      	adds	r1, #4
 800a714:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a718:	f1b9 0f00 	cmp.w	r9, #0
 800a71c:	d021      	beq.n	800a762 <__multiply+0x142>
 800a71e:	682b      	ldr	r3, [r5, #0]
 800a720:	f104 0c14 	add.w	ip, r4, #20
 800a724:	46ae      	mov	lr, r5
 800a726:	f04f 0a00 	mov.w	sl, #0
 800a72a:	f8bc b000 	ldrh.w	fp, [ip]
 800a72e:	b29b      	uxth	r3, r3
 800a730:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a734:	fb09 770b 	mla	r7, r9, fp, r7
 800a738:	4457      	add	r7, sl
 800a73a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a73e:	f84e 3b04 	str.w	r3, [lr], #4
 800a742:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a746:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a74a:	f8be 3000 	ldrh.w	r3, [lr]
 800a74e:	4562      	cmp	r2, ip
 800a750:	fb09 330a 	mla	r3, r9, sl, r3
 800a754:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a758:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a75c:	d8e5      	bhi.n	800a72a <__multiply+0x10a>
 800a75e:	9f01      	ldr	r7, [sp, #4]
 800a760:	51eb      	str	r3, [r5, r7]
 800a762:	3504      	adds	r5, #4
 800a764:	e799      	b.n	800a69a <__multiply+0x7a>
 800a766:	3e01      	subs	r6, #1
 800a768:	e79b      	b.n	800a6a2 <__multiply+0x82>
 800a76a:	bf00      	nop
 800a76c:	0800b3e0 	.word	0x0800b3e0
 800a770:	0800b3f1 	.word	0x0800b3f1

0800a774 <__pow5mult>:
 800a774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a778:	4615      	mov	r5, r2
 800a77a:	f012 0203 	ands.w	r2, r2, #3
 800a77e:	4607      	mov	r7, r0
 800a780:	460e      	mov	r6, r1
 800a782:	d007      	beq.n	800a794 <__pow5mult+0x20>
 800a784:	3a01      	subs	r2, #1
 800a786:	4c25      	ldr	r4, [pc, #148]	@ (800a81c <__pow5mult+0xa8>)
 800a788:	2300      	movs	r3, #0
 800a78a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a78e:	f7ff fe9d 	bl	800a4cc <__multadd>
 800a792:	4606      	mov	r6, r0
 800a794:	10ad      	asrs	r5, r5, #2
 800a796:	d03d      	beq.n	800a814 <__pow5mult+0xa0>
 800a798:	69fc      	ldr	r4, [r7, #28]
 800a79a:	b97c      	cbnz	r4, 800a7bc <__pow5mult+0x48>
 800a79c:	2010      	movs	r0, #16
 800a79e:	f7ff fd7d 	bl	800a29c <malloc>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	61f8      	str	r0, [r7, #28]
 800a7a6:	b928      	cbnz	r0, 800a7b4 <__pow5mult+0x40>
 800a7a8:	4b1d      	ldr	r3, [pc, #116]	@ (800a820 <__pow5mult+0xac>)
 800a7aa:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a7ae:	481d      	ldr	r0, [pc, #116]	@ (800a824 <__pow5mult+0xb0>)
 800a7b0:	f000 fc42 	bl	800b038 <__assert_func>
 800a7b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a7b8:	6004      	str	r4, [r0, #0]
 800a7ba:	60c4      	str	r4, [r0, #12]
 800a7bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a7c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a7c4:	b94c      	cbnz	r4, 800a7da <__pow5mult+0x66>
 800a7c6:	f240 2171 	movw	r1, #625	@ 0x271
 800a7ca:	4638      	mov	r0, r7
 800a7cc:	f7ff ff12 	bl	800a5f4 <__i2b>
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	4604      	mov	r4, r0
 800a7d4:	f8c8 0008 	str.w	r0, [r8, #8]
 800a7d8:	6003      	str	r3, [r0, #0]
 800a7da:	f04f 0900 	mov.w	r9, #0
 800a7de:	07eb      	lsls	r3, r5, #31
 800a7e0:	d50a      	bpl.n	800a7f8 <__pow5mult+0x84>
 800a7e2:	4631      	mov	r1, r6
 800a7e4:	4622      	mov	r2, r4
 800a7e6:	4638      	mov	r0, r7
 800a7e8:	f7ff ff1a 	bl	800a620 <__multiply>
 800a7ec:	4680      	mov	r8, r0
 800a7ee:	4631      	mov	r1, r6
 800a7f0:	4638      	mov	r0, r7
 800a7f2:	4646      	mov	r6, r8
 800a7f4:	f7ff fe48 	bl	800a488 <_Bfree>
 800a7f8:	106d      	asrs	r5, r5, #1
 800a7fa:	d00b      	beq.n	800a814 <__pow5mult+0xa0>
 800a7fc:	6820      	ldr	r0, [r4, #0]
 800a7fe:	b938      	cbnz	r0, 800a810 <__pow5mult+0x9c>
 800a800:	4622      	mov	r2, r4
 800a802:	4621      	mov	r1, r4
 800a804:	4638      	mov	r0, r7
 800a806:	f7ff ff0b 	bl	800a620 <__multiply>
 800a80a:	6020      	str	r0, [r4, #0]
 800a80c:	f8c0 9000 	str.w	r9, [r0]
 800a810:	4604      	mov	r4, r0
 800a812:	e7e4      	b.n	800a7de <__pow5mult+0x6a>
 800a814:	4630      	mov	r0, r6
 800a816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a81a:	bf00      	nop
 800a81c:	0800b44c 	.word	0x0800b44c
 800a820:	0800b371 	.word	0x0800b371
 800a824:	0800b3f1 	.word	0x0800b3f1

0800a828 <__lshift>:
 800a828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a82c:	460c      	mov	r4, r1
 800a82e:	4607      	mov	r7, r0
 800a830:	4691      	mov	r9, r2
 800a832:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a836:	6923      	ldr	r3, [r4, #16]
 800a838:	6849      	ldr	r1, [r1, #4]
 800a83a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a83e:	68a3      	ldr	r3, [r4, #8]
 800a840:	f108 0601 	add.w	r6, r8, #1
 800a844:	42b3      	cmp	r3, r6
 800a846:	db0b      	blt.n	800a860 <__lshift+0x38>
 800a848:	4638      	mov	r0, r7
 800a84a:	f7ff fddd 	bl	800a408 <_Balloc>
 800a84e:	4605      	mov	r5, r0
 800a850:	b948      	cbnz	r0, 800a866 <__lshift+0x3e>
 800a852:	4602      	mov	r2, r0
 800a854:	4b28      	ldr	r3, [pc, #160]	@ (800a8f8 <__lshift+0xd0>)
 800a856:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a85a:	4828      	ldr	r0, [pc, #160]	@ (800a8fc <__lshift+0xd4>)
 800a85c:	f000 fbec 	bl	800b038 <__assert_func>
 800a860:	3101      	adds	r1, #1
 800a862:	005b      	lsls	r3, r3, #1
 800a864:	e7ee      	b.n	800a844 <__lshift+0x1c>
 800a866:	2300      	movs	r3, #0
 800a868:	f100 0114 	add.w	r1, r0, #20
 800a86c:	f100 0210 	add.w	r2, r0, #16
 800a870:	4618      	mov	r0, r3
 800a872:	4553      	cmp	r3, sl
 800a874:	db33      	blt.n	800a8de <__lshift+0xb6>
 800a876:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a87a:	f104 0314 	add.w	r3, r4, #20
 800a87e:	6920      	ldr	r0, [r4, #16]
 800a880:	f019 091f 	ands.w	r9, r9, #31
 800a884:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a888:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a88c:	d02b      	beq.n	800a8e6 <__lshift+0xbe>
 800a88e:	f1c9 0e20 	rsb	lr, r9, #32
 800a892:	468a      	mov	sl, r1
 800a894:	2200      	movs	r2, #0
 800a896:	6818      	ldr	r0, [r3, #0]
 800a898:	fa00 f009 	lsl.w	r0, r0, r9
 800a89c:	4310      	orrs	r0, r2
 800a89e:	f84a 0b04 	str.w	r0, [sl], #4
 800a8a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8a6:	459c      	cmp	ip, r3
 800a8a8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a8ac:	d8f3      	bhi.n	800a896 <__lshift+0x6e>
 800a8ae:	ebac 0304 	sub.w	r3, ip, r4
 800a8b2:	f104 0015 	add.w	r0, r4, #21
 800a8b6:	3b15      	subs	r3, #21
 800a8b8:	f023 0303 	bic.w	r3, r3, #3
 800a8bc:	3304      	adds	r3, #4
 800a8be:	4584      	cmp	ip, r0
 800a8c0:	bf38      	it	cc
 800a8c2:	2304      	movcc	r3, #4
 800a8c4:	50ca      	str	r2, [r1, r3]
 800a8c6:	b10a      	cbz	r2, 800a8cc <__lshift+0xa4>
 800a8c8:	f108 0602 	add.w	r6, r8, #2
 800a8cc:	3e01      	subs	r6, #1
 800a8ce:	4638      	mov	r0, r7
 800a8d0:	4621      	mov	r1, r4
 800a8d2:	612e      	str	r6, [r5, #16]
 800a8d4:	f7ff fdd8 	bl	800a488 <_Bfree>
 800a8d8:	4628      	mov	r0, r5
 800a8da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8de:	3301      	adds	r3, #1
 800a8e0:	f842 0f04 	str.w	r0, [r2, #4]!
 800a8e4:	e7c5      	b.n	800a872 <__lshift+0x4a>
 800a8e6:	3904      	subs	r1, #4
 800a8e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8ec:	459c      	cmp	ip, r3
 800a8ee:	f841 2f04 	str.w	r2, [r1, #4]!
 800a8f2:	d8f9      	bhi.n	800a8e8 <__lshift+0xc0>
 800a8f4:	e7ea      	b.n	800a8cc <__lshift+0xa4>
 800a8f6:	bf00      	nop
 800a8f8:	0800b3e0 	.word	0x0800b3e0
 800a8fc:	0800b3f1 	.word	0x0800b3f1

0800a900 <__mcmp>:
 800a900:	4603      	mov	r3, r0
 800a902:	690a      	ldr	r2, [r1, #16]
 800a904:	6900      	ldr	r0, [r0, #16]
 800a906:	1a80      	subs	r0, r0, r2
 800a908:	b530      	push	{r4, r5, lr}
 800a90a:	d10e      	bne.n	800a92a <__mcmp+0x2a>
 800a90c:	3314      	adds	r3, #20
 800a90e:	3114      	adds	r1, #20
 800a910:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a914:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a918:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a91c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a920:	4295      	cmp	r5, r2
 800a922:	d003      	beq.n	800a92c <__mcmp+0x2c>
 800a924:	d205      	bcs.n	800a932 <__mcmp+0x32>
 800a926:	f04f 30ff 	mov.w	r0, #4294967295
 800a92a:	bd30      	pop	{r4, r5, pc}
 800a92c:	42a3      	cmp	r3, r4
 800a92e:	d3f3      	bcc.n	800a918 <__mcmp+0x18>
 800a930:	e7fb      	b.n	800a92a <__mcmp+0x2a>
 800a932:	2001      	movs	r0, #1
 800a934:	e7f9      	b.n	800a92a <__mcmp+0x2a>
	...

0800a938 <__mdiff>:
 800a938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a93c:	4689      	mov	r9, r1
 800a93e:	4606      	mov	r6, r0
 800a940:	4611      	mov	r1, r2
 800a942:	4614      	mov	r4, r2
 800a944:	4648      	mov	r0, r9
 800a946:	f7ff ffdb 	bl	800a900 <__mcmp>
 800a94a:	1e05      	subs	r5, r0, #0
 800a94c:	d112      	bne.n	800a974 <__mdiff+0x3c>
 800a94e:	4629      	mov	r1, r5
 800a950:	4630      	mov	r0, r6
 800a952:	f7ff fd59 	bl	800a408 <_Balloc>
 800a956:	4602      	mov	r2, r0
 800a958:	b928      	cbnz	r0, 800a966 <__mdiff+0x2e>
 800a95a:	4b41      	ldr	r3, [pc, #260]	@ (800aa60 <__mdiff+0x128>)
 800a95c:	f240 2137 	movw	r1, #567	@ 0x237
 800a960:	4840      	ldr	r0, [pc, #256]	@ (800aa64 <__mdiff+0x12c>)
 800a962:	f000 fb69 	bl	800b038 <__assert_func>
 800a966:	2301      	movs	r3, #1
 800a968:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a96c:	4610      	mov	r0, r2
 800a96e:	b003      	add	sp, #12
 800a970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a974:	bfbc      	itt	lt
 800a976:	464b      	movlt	r3, r9
 800a978:	46a1      	movlt	r9, r4
 800a97a:	4630      	mov	r0, r6
 800a97c:	bfb8      	it	lt
 800a97e:	2501      	movlt	r5, #1
 800a980:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a984:	bfb4      	ite	lt
 800a986:	461c      	movlt	r4, r3
 800a988:	2500      	movge	r5, #0
 800a98a:	f7ff fd3d 	bl	800a408 <_Balloc>
 800a98e:	4602      	mov	r2, r0
 800a990:	b918      	cbnz	r0, 800a99a <__mdiff+0x62>
 800a992:	4b33      	ldr	r3, [pc, #204]	@ (800aa60 <__mdiff+0x128>)
 800a994:	f240 2145 	movw	r1, #581	@ 0x245
 800a998:	e7e2      	b.n	800a960 <__mdiff+0x28>
 800a99a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a99e:	f104 0e14 	add.w	lr, r4, #20
 800a9a2:	6926      	ldr	r6, [r4, #16]
 800a9a4:	f100 0b14 	add.w	fp, r0, #20
 800a9a8:	60c5      	str	r5, [r0, #12]
 800a9aa:	f109 0514 	add.w	r5, r9, #20
 800a9ae:	f109 0310 	add.w	r3, r9, #16
 800a9b2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a9b6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a9ba:	46d9      	mov	r9, fp
 800a9bc:	f04f 0c00 	mov.w	ip, #0
 800a9c0:	9301      	str	r3, [sp, #4]
 800a9c2:	9b01      	ldr	r3, [sp, #4]
 800a9c4:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a9c8:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a9cc:	4576      	cmp	r6, lr
 800a9ce:	9301      	str	r3, [sp, #4]
 800a9d0:	fa1f f38a 	uxth.w	r3, sl
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	b283      	uxth	r3, r0
 800a9d8:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800a9dc:	eba1 0303 	sub.w	r3, r1, r3
 800a9e0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a9e4:	4463      	add	r3, ip
 800a9e6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a9f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a9f4:	f849 3b04 	str.w	r3, [r9], #4
 800a9f8:	d8e3      	bhi.n	800a9c2 <__mdiff+0x8a>
 800a9fa:	1b33      	subs	r3, r6, r4
 800a9fc:	3415      	adds	r4, #21
 800a9fe:	3b15      	subs	r3, #21
 800aa00:	f023 0303 	bic.w	r3, r3, #3
 800aa04:	3304      	adds	r3, #4
 800aa06:	42a6      	cmp	r6, r4
 800aa08:	bf38      	it	cc
 800aa0a:	2304      	movcc	r3, #4
 800aa0c:	441d      	add	r5, r3
 800aa0e:	445b      	add	r3, fp
 800aa10:	462c      	mov	r4, r5
 800aa12:	461e      	mov	r6, r3
 800aa14:	4544      	cmp	r4, r8
 800aa16:	d30e      	bcc.n	800aa36 <__mdiff+0xfe>
 800aa18:	f108 0103 	add.w	r1, r8, #3
 800aa1c:	1b49      	subs	r1, r1, r5
 800aa1e:	3d03      	subs	r5, #3
 800aa20:	f021 0103 	bic.w	r1, r1, #3
 800aa24:	45a8      	cmp	r8, r5
 800aa26:	bf38      	it	cc
 800aa28:	2100      	movcc	r1, #0
 800aa2a:	440b      	add	r3, r1
 800aa2c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa30:	b199      	cbz	r1, 800aa5a <__mdiff+0x122>
 800aa32:	6117      	str	r7, [r2, #16]
 800aa34:	e79a      	b.n	800a96c <__mdiff+0x34>
 800aa36:	f854 1b04 	ldr.w	r1, [r4], #4
 800aa3a:	46e6      	mov	lr, ip
 800aa3c:	fa1f fc81 	uxth.w	ip, r1
 800aa40:	0c08      	lsrs	r0, r1, #16
 800aa42:	4471      	add	r1, lr
 800aa44:	44f4      	add	ip, lr
 800aa46:	b289      	uxth	r1, r1
 800aa48:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800aa4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aa50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aa54:	f846 1b04 	str.w	r1, [r6], #4
 800aa58:	e7dc      	b.n	800aa14 <__mdiff+0xdc>
 800aa5a:	3f01      	subs	r7, #1
 800aa5c:	e7e6      	b.n	800aa2c <__mdiff+0xf4>
 800aa5e:	bf00      	nop
 800aa60:	0800b3e0 	.word	0x0800b3e0
 800aa64:	0800b3f1 	.word	0x0800b3f1

0800aa68 <__d2b>:
 800aa68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa6c:	460f      	mov	r7, r1
 800aa6e:	2101      	movs	r1, #1
 800aa70:	4616      	mov	r6, r2
 800aa72:	ec59 8b10 	vmov	r8, r9, d0
 800aa76:	f7ff fcc7 	bl	800a408 <_Balloc>
 800aa7a:	4604      	mov	r4, r0
 800aa7c:	b930      	cbnz	r0, 800aa8c <__d2b+0x24>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	4b23      	ldr	r3, [pc, #140]	@ (800ab10 <__d2b+0xa8>)
 800aa82:	f240 310f 	movw	r1, #783	@ 0x30f
 800aa86:	4823      	ldr	r0, [pc, #140]	@ (800ab14 <__d2b+0xac>)
 800aa88:	f000 fad6 	bl	800b038 <__assert_func>
 800aa8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aa90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa94:	b10d      	cbz	r5, 800aa9a <__d2b+0x32>
 800aa96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa9a:	9301      	str	r3, [sp, #4]
 800aa9c:	f1b8 0300 	subs.w	r3, r8, #0
 800aaa0:	d023      	beq.n	800aaea <__d2b+0x82>
 800aaa2:	4668      	mov	r0, sp
 800aaa4:	9300      	str	r3, [sp, #0]
 800aaa6:	f7ff fd78 	bl	800a59a <__lo0bits>
 800aaaa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aaae:	b1d0      	cbz	r0, 800aae6 <__d2b+0x7e>
 800aab0:	f1c0 0320 	rsb	r3, r0, #32
 800aab4:	fa02 f303 	lsl.w	r3, r2, r3
 800aab8:	40c2      	lsrs	r2, r0
 800aaba:	430b      	orrs	r3, r1
 800aabc:	9201      	str	r2, [sp, #4]
 800aabe:	6163      	str	r3, [r4, #20]
 800aac0:	9b01      	ldr	r3, [sp, #4]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	61a3      	str	r3, [r4, #24]
 800aac6:	bf0c      	ite	eq
 800aac8:	2201      	moveq	r2, #1
 800aaca:	2202      	movne	r2, #2
 800aacc:	6122      	str	r2, [r4, #16]
 800aace:	b1a5      	cbz	r5, 800aafa <__d2b+0x92>
 800aad0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aad4:	4405      	add	r5, r0
 800aad6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aada:	603d      	str	r5, [r7, #0]
 800aadc:	6030      	str	r0, [r6, #0]
 800aade:	4620      	mov	r0, r4
 800aae0:	b003      	add	sp, #12
 800aae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aae6:	6161      	str	r1, [r4, #20]
 800aae8:	e7ea      	b.n	800aac0 <__d2b+0x58>
 800aaea:	a801      	add	r0, sp, #4
 800aaec:	f7ff fd55 	bl	800a59a <__lo0bits>
 800aaf0:	9b01      	ldr	r3, [sp, #4]
 800aaf2:	3020      	adds	r0, #32
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	6163      	str	r3, [r4, #20]
 800aaf8:	e7e8      	b.n	800aacc <__d2b+0x64>
 800aafa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aafe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab02:	6038      	str	r0, [r7, #0]
 800ab04:	6918      	ldr	r0, [r3, #16]
 800ab06:	f7ff fd29 	bl	800a55c <__hi0bits>
 800ab0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab0e:	e7e5      	b.n	800aadc <__d2b+0x74>
 800ab10:	0800b3e0 	.word	0x0800b3e0
 800ab14:	0800b3f1 	.word	0x0800b3f1

0800ab18 <__sfputc_r>:
 800ab18:	6893      	ldr	r3, [r2, #8]
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	6093      	str	r3, [r2, #8]
 800ab20:	b410      	push	{r4}
 800ab22:	da08      	bge.n	800ab36 <__sfputc_r+0x1e>
 800ab24:	6994      	ldr	r4, [r2, #24]
 800ab26:	42a3      	cmp	r3, r4
 800ab28:	db01      	blt.n	800ab2e <__sfputc_r+0x16>
 800ab2a:	290a      	cmp	r1, #10
 800ab2c:	d103      	bne.n	800ab36 <__sfputc_r+0x1e>
 800ab2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab32:	f7fe bbf4 	b.w	800931e <__swbuf_r>
 800ab36:	6813      	ldr	r3, [r2, #0]
 800ab38:	1c58      	adds	r0, r3, #1
 800ab3a:	6010      	str	r0, [r2, #0]
 800ab3c:	4608      	mov	r0, r1
 800ab3e:	7019      	strb	r1, [r3, #0]
 800ab40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab44:	4770      	bx	lr

0800ab46 <__sfputs_r>:
 800ab46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab48:	4606      	mov	r6, r0
 800ab4a:	460f      	mov	r7, r1
 800ab4c:	4614      	mov	r4, r2
 800ab4e:	18d5      	adds	r5, r2, r3
 800ab50:	42ac      	cmp	r4, r5
 800ab52:	d101      	bne.n	800ab58 <__sfputs_r+0x12>
 800ab54:	2000      	movs	r0, #0
 800ab56:	e007      	b.n	800ab68 <__sfputs_r+0x22>
 800ab58:	463a      	mov	r2, r7
 800ab5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab5e:	4630      	mov	r0, r6
 800ab60:	f7ff ffda 	bl	800ab18 <__sfputc_r>
 800ab64:	1c43      	adds	r3, r0, #1
 800ab66:	d1f3      	bne.n	800ab50 <__sfputs_r+0xa>
 800ab68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab6c <_vfiprintf_r>:
 800ab6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab70:	460d      	mov	r5, r1
 800ab72:	b09d      	sub	sp, #116	@ 0x74
 800ab74:	4614      	mov	r4, r2
 800ab76:	4698      	mov	r8, r3
 800ab78:	4606      	mov	r6, r0
 800ab7a:	b118      	cbz	r0, 800ab84 <_vfiprintf_r+0x18>
 800ab7c:	6a03      	ldr	r3, [r0, #32]
 800ab7e:	b90b      	cbnz	r3, 800ab84 <_vfiprintf_r+0x18>
 800ab80:	f7fe fae4 	bl	800914c <__sinit>
 800ab84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab86:	07d9      	lsls	r1, r3, #31
 800ab88:	d405      	bmi.n	800ab96 <_vfiprintf_r+0x2a>
 800ab8a:	89ab      	ldrh	r3, [r5, #12]
 800ab8c:	059a      	lsls	r2, r3, #22
 800ab8e:	d402      	bmi.n	800ab96 <_vfiprintf_r+0x2a>
 800ab90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab92:	f7fe fcd6 	bl	8009542 <__retarget_lock_acquire_recursive>
 800ab96:	89ab      	ldrh	r3, [r5, #12]
 800ab98:	071b      	lsls	r3, r3, #28
 800ab9a:	d501      	bpl.n	800aba0 <_vfiprintf_r+0x34>
 800ab9c:	692b      	ldr	r3, [r5, #16]
 800ab9e:	b99b      	cbnz	r3, 800abc8 <_vfiprintf_r+0x5c>
 800aba0:	4629      	mov	r1, r5
 800aba2:	4630      	mov	r0, r6
 800aba4:	f7fe fbfa 	bl	800939c <__swsetup_r>
 800aba8:	b170      	cbz	r0, 800abc8 <_vfiprintf_r+0x5c>
 800abaa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800abac:	07dc      	lsls	r4, r3, #31
 800abae:	d504      	bpl.n	800abba <_vfiprintf_r+0x4e>
 800abb0:	f04f 30ff 	mov.w	r0, #4294967295
 800abb4:	b01d      	add	sp, #116	@ 0x74
 800abb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abba:	89ab      	ldrh	r3, [r5, #12]
 800abbc:	0598      	lsls	r0, r3, #22
 800abbe:	d4f7      	bmi.n	800abb0 <_vfiprintf_r+0x44>
 800abc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800abc2:	f7fe fcbf 	bl	8009544 <__retarget_lock_release_recursive>
 800abc6:	e7f3      	b.n	800abb0 <_vfiprintf_r+0x44>
 800abc8:	2300      	movs	r3, #0
 800abca:	f8cd 800c 	str.w	r8, [sp, #12]
 800abce:	f04f 0901 	mov.w	r9, #1
 800abd2:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800ad88 <_vfiprintf_r+0x21c>
 800abd6:	9309      	str	r3, [sp, #36]	@ 0x24
 800abd8:	2320      	movs	r3, #32
 800abda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800abde:	2330      	movs	r3, #48	@ 0x30
 800abe0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800abe4:	4623      	mov	r3, r4
 800abe6:	469a      	mov	sl, r3
 800abe8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abec:	b10a      	cbz	r2, 800abf2 <_vfiprintf_r+0x86>
 800abee:	2a25      	cmp	r2, #37	@ 0x25
 800abf0:	d1f9      	bne.n	800abe6 <_vfiprintf_r+0x7a>
 800abf2:	ebba 0b04 	subs.w	fp, sl, r4
 800abf6:	d00b      	beq.n	800ac10 <_vfiprintf_r+0xa4>
 800abf8:	465b      	mov	r3, fp
 800abfa:	4622      	mov	r2, r4
 800abfc:	4629      	mov	r1, r5
 800abfe:	4630      	mov	r0, r6
 800ac00:	f7ff ffa1 	bl	800ab46 <__sfputs_r>
 800ac04:	3001      	adds	r0, #1
 800ac06:	f000 80a7 	beq.w	800ad58 <_vfiprintf_r+0x1ec>
 800ac0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac0c:	445a      	add	r2, fp
 800ac0e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac10:	f89a 3000 	ldrb.w	r3, [sl]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	f000 809f 	beq.w	800ad58 <_vfiprintf_r+0x1ec>
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac20:	f10a 0a01 	add.w	sl, sl, #1
 800ac24:	9304      	str	r3, [sp, #16]
 800ac26:	9307      	str	r3, [sp, #28]
 800ac28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac2c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac32:	4654      	mov	r4, sl
 800ac34:	2205      	movs	r2, #5
 800ac36:	4854      	ldr	r0, [pc, #336]	@ (800ad88 <_vfiprintf_r+0x21c>)
 800ac38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac3c:	f7fe fc83 	bl	8009546 <memchr>
 800ac40:	9a04      	ldr	r2, [sp, #16]
 800ac42:	b9d8      	cbnz	r0, 800ac7c <_vfiprintf_r+0x110>
 800ac44:	06d1      	lsls	r1, r2, #27
 800ac46:	bf44      	itt	mi
 800ac48:	2320      	movmi	r3, #32
 800ac4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac4e:	0713      	lsls	r3, r2, #28
 800ac50:	bf44      	itt	mi
 800ac52:	232b      	movmi	r3, #43	@ 0x2b
 800ac54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac58:	f89a 3000 	ldrb.w	r3, [sl]
 800ac5c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac5e:	d015      	beq.n	800ac8c <_vfiprintf_r+0x120>
 800ac60:	9a07      	ldr	r2, [sp, #28]
 800ac62:	4654      	mov	r4, sl
 800ac64:	2000      	movs	r0, #0
 800ac66:	f04f 0c0a 	mov.w	ip, #10
 800ac6a:	4621      	mov	r1, r4
 800ac6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac70:	3b30      	subs	r3, #48	@ 0x30
 800ac72:	2b09      	cmp	r3, #9
 800ac74:	d94b      	bls.n	800ad0e <_vfiprintf_r+0x1a2>
 800ac76:	b1b0      	cbz	r0, 800aca6 <_vfiprintf_r+0x13a>
 800ac78:	9207      	str	r2, [sp, #28]
 800ac7a:	e014      	b.n	800aca6 <_vfiprintf_r+0x13a>
 800ac7c:	eba0 0308 	sub.w	r3, r0, r8
 800ac80:	46a2      	mov	sl, r4
 800ac82:	fa09 f303 	lsl.w	r3, r9, r3
 800ac86:	4313      	orrs	r3, r2
 800ac88:	9304      	str	r3, [sp, #16]
 800ac8a:	e7d2      	b.n	800ac32 <_vfiprintf_r+0xc6>
 800ac8c:	9b03      	ldr	r3, [sp, #12]
 800ac8e:	1d19      	adds	r1, r3, #4
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	9103      	str	r1, [sp, #12]
 800ac96:	bfbb      	ittet	lt
 800ac98:	425b      	neglt	r3, r3
 800ac9a:	f042 0202 	orrlt.w	r2, r2, #2
 800ac9e:	9307      	strge	r3, [sp, #28]
 800aca0:	9307      	strlt	r3, [sp, #28]
 800aca2:	bfb8      	it	lt
 800aca4:	9204      	strlt	r2, [sp, #16]
 800aca6:	7823      	ldrb	r3, [r4, #0]
 800aca8:	2b2e      	cmp	r3, #46	@ 0x2e
 800acaa:	d10a      	bne.n	800acc2 <_vfiprintf_r+0x156>
 800acac:	7863      	ldrb	r3, [r4, #1]
 800acae:	2b2a      	cmp	r3, #42	@ 0x2a
 800acb0:	d132      	bne.n	800ad18 <_vfiprintf_r+0x1ac>
 800acb2:	9b03      	ldr	r3, [sp, #12]
 800acb4:	3402      	adds	r4, #2
 800acb6:	1d1a      	adds	r2, r3, #4
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800acbe:	9203      	str	r2, [sp, #12]
 800acc0:	9305      	str	r3, [sp, #20]
 800acc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ad98 <_vfiprintf_r+0x22c>
 800acc6:	2203      	movs	r2, #3
 800acc8:	7821      	ldrb	r1, [r4, #0]
 800acca:	4650      	mov	r0, sl
 800accc:	f7fe fc3b 	bl	8009546 <memchr>
 800acd0:	b138      	cbz	r0, 800ace2 <_vfiprintf_r+0x176>
 800acd2:	eba0 000a 	sub.w	r0, r0, sl
 800acd6:	2240      	movs	r2, #64	@ 0x40
 800acd8:	9b04      	ldr	r3, [sp, #16]
 800acda:	3401      	adds	r4, #1
 800acdc:	4082      	lsls	r2, r0
 800acde:	4313      	orrs	r3, r2
 800ace0:	9304      	str	r3, [sp, #16]
 800ace2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ace6:	2206      	movs	r2, #6
 800ace8:	4828      	ldr	r0, [pc, #160]	@ (800ad8c <_vfiprintf_r+0x220>)
 800acea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800acee:	f7fe fc2a 	bl	8009546 <memchr>
 800acf2:	2800      	cmp	r0, #0
 800acf4:	d03f      	beq.n	800ad76 <_vfiprintf_r+0x20a>
 800acf6:	4b26      	ldr	r3, [pc, #152]	@ (800ad90 <_vfiprintf_r+0x224>)
 800acf8:	bb1b      	cbnz	r3, 800ad42 <_vfiprintf_r+0x1d6>
 800acfa:	9b03      	ldr	r3, [sp, #12]
 800acfc:	3307      	adds	r3, #7
 800acfe:	f023 0307 	bic.w	r3, r3, #7
 800ad02:	3308      	adds	r3, #8
 800ad04:	9303      	str	r3, [sp, #12]
 800ad06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad08:	443b      	add	r3, r7
 800ad0a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad0c:	e76a      	b.n	800abe4 <_vfiprintf_r+0x78>
 800ad0e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad12:	460c      	mov	r4, r1
 800ad14:	2001      	movs	r0, #1
 800ad16:	e7a8      	b.n	800ac6a <_vfiprintf_r+0xfe>
 800ad18:	2300      	movs	r3, #0
 800ad1a:	3401      	adds	r4, #1
 800ad1c:	f04f 0c0a 	mov.w	ip, #10
 800ad20:	4619      	mov	r1, r3
 800ad22:	9305      	str	r3, [sp, #20]
 800ad24:	4620      	mov	r0, r4
 800ad26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad2a:	3a30      	subs	r2, #48	@ 0x30
 800ad2c:	2a09      	cmp	r2, #9
 800ad2e:	d903      	bls.n	800ad38 <_vfiprintf_r+0x1cc>
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d0c6      	beq.n	800acc2 <_vfiprintf_r+0x156>
 800ad34:	9105      	str	r1, [sp, #20]
 800ad36:	e7c4      	b.n	800acc2 <_vfiprintf_r+0x156>
 800ad38:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad3c:	4604      	mov	r4, r0
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e7f0      	b.n	800ad24 <_vfiprintf_r+0x1b8>
 800ad42:	ab03      	add	r3, sp, #12
 800ad44:	462a      	mov	r2, r5
 800ad46:	a904      	add	r1, sp, #16
 800ad48:	4630      	mov	r0, r6
 800ad4a:	9300      	str	r3, [sp, #0]
 800ad4c:	4b11      	ldr	r3, [pc, #68]	@ (800ad94 <_vfiprintf_r+0x228>)
 800ad4e:	f7fd fdb5 	bl	80088bc <_printf_float>
 800ad52:	4607      	mov	r7, r0
 800ad54:	1c78      	adds	r0, r7, #1
 800ad56:	d1d6      	bne.n	800ad06 <_vfiprintf_r+0x19a>
 800ad58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad5a:	07d9      	lsls	r1, r3, #31
 800ad5c:	d405      	bmi.n	800ad6a <_vfiprintf_r+0x1fe>
 800ad5e:	89ab      	ldrh	r3, [r5, #12]
 800ad60:	059a      	lsls	r2, r3, #22
 800ad62:	d402      	bmi.n	800ad6a <_vfiprintf_r+0x1fe>
 800ad64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad66:	f7fe fbed 	bl	8009544 <__retarget_lock_release_recursive>
 800ad6a:	89ab      	ldrh	r3, [r5, #12]
 800ad6c:	065b      	lsls	r3, r3, #25
 800ad6e:	f53f af1f 	bmi.w	800abb0 <_vfiprintf_r+0x44>
 800ad72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad74:	e71e      	b.n	800abb4 <_vfiprintf_r+0x48>
 800ad76:	ab03      	add	r3, sp, #12
 800ad78:	462a      	mov	r2, r5
 800ad7a:	a904      	add	r1, sp, #16
 800ad7c:	4630      	mov	r0, r6
 800ad7e:	9300      	str	r3, [sp, #0]
 800ad80:	4b04      	ldr	r3, [pc, #16]	@ (800ad94 <_vfiprintf_r+0x228>)
 800ad82:	f7fe f837 	bl	8008df4 <_printf_i>
 800ad86:	e7e4      	b.n	800ad52 <_vfiprintf_r+0x1e6>
 800ad88:	0800b548 	.word	0x0800b548
 800ad8c:	0800b552 	.word	0x0800b552
 800ad90:	080088bd 	.word	0x080088bd
 800ad94:	0800ab47 	.word	0x0800ab47
 800ad98:	0800b54e 	.word	0x0800b54e

0800ad9c <__sflush_r>:
 800ad9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ada0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ada4:	0716      	lsls	r6, r2, #28
 800ada6:	4605      	mov	r5, r0
 800ada8:	460c      	mov	r4, r1
 800adaa:	d454      	bmi.n	800ae56 <__sflush_r+0xba>
 800adac:	684b      	ldr	r3, [r1, #4]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	dc02      	bgt.n	800adb8 <__sflush_r+0x1c>
 800adb2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	dd48      	ble.n	800ae4a <__sflush_r+0xae>
 800adb8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800adba:	2e00      	cmp	r6, #0
 800adbc:	d045      	beq.n	800ae4a <__sflush_r+0xae>
 800adbe:	2300      	movs	r3, #0
 800adc0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800adc4:	682f      	ldr	r7, [r5, #0]
 800adc6:	6a21      	ldr	r1, [r4, #32]
 800adc8:	602b      	str	r3, [r5, #0]
 800adca:	d030      	beq.n	800ae2e <__sflush_r+0x92>
 800adcc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800adce:	89a3      	ldrh	r3, [r4, #12]
 800add0:	0759      	lsls	r1, r3, #29
 800add2:	d505      	bpl.n	800ade0 <__sflush_r+0x44>
 800add4:	6863      	ldr	r3, [r4, #4]
 800add6:	1ad2      	subs	r2, r2, r3
 800add8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800adda:	b10b      	cbz	r3, 800ade0 <__sflush_r+0x44>
 800addc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800adde:	1ad2      	subs	r2, r2, r3
 800ade0:	2300      	movs	r3, #0
 800ade2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ade4:	6a21      	ldr	r1, [r4, #32]
 800ade6:	4628      	mov	r0, r5
 800ade8:	47b0      	blx	r6
 800adea:	1c43      	adds	r3, r0, #1
 800adec:	89a3      	ldrh	r3, [r4, #12]
 800adee:	d106      	bne.n	800adfe <__sflush_r+0x62>
 800adf0:	6829      	ldr	r1, [r5, #0]
 800adf2:	291d      	cmp	r1, #29
 800adf4:	d82b      	bhi.n	800ae4e <__sflush_r+0xb2>
 800adf6:	4a2a      	ldr	r2, [pc, #168]	@ (800aea0 <__sflush_r+0x104>)
 800adf8:	410a      	asrs	r2, r1
 800adfa:	07d6      	lsls	r6, r2, #31
 800adfc:	d427      	bmi.n	800ae4e <__sflush_r+0xb2>
 800adfe:	2200      	movs	r2, #0
 800ae00:	04d9      	lsls	r1, r3, #19
 800ae02:	6062      	str	r2, [r4, #4]
 800ae04:	6922      	ldr	r2, [r4, #16]
 800ae06:	6022      	str	r2, [r4, #0]
 800ae08:	d504      	bpl.n	800ae14 <__sflush_r+0x78>
 800ae0a:	1c42      	adds	r2, r0, #1
 800ae0c:	d101      	bne.n	800ae12 <__sflush_r+0x76>
 800ae0e:	682b      	ldr	r3, [r5, #0]
 800ae10:	b903      	cbnz	r3, 800ae14 <__sflush_r+0x78>
 800ae12:	6560      	str	r0, [r4, #84]	@ 0x54
 800ae14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae16:	602f      	str	r7, [r5, #0]
 800ae18:	b1b9      	cbz	r1, 800ae4a <__sflush_r+0xae>
 800ae1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae1e:	4299      	cmp	r1, r3
 800ae20:	d002      	beq.n	800ae28 <__sflush_r+0x8c>
 800ae22:	4628      	mov	r0, r5
 800ae24:	f7ff f9f0 	bl	800a208 <_free_r>
 800ae28:	2300      	movs	r3, #0
 800ae2a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae2c:	e00d      	b.n	800ae4a <__sflush_r+0xae>
 800ae2e:	2301      	movs	r3, #1
 800ae30:	4628      	mov	r0, r5
 800ae32:	47b0      	blx	r6
 800ae34:	4602      	mov	r2, r0
 800ae36:	1c50      	adds	r0, r2, #1
 800ae38:	d1c9      	bne.n	800adce <__sflush_r+0x32>
 800ae3a:	682b      	ldr	r3, [r5, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d0c6      	beq.n	800adce <__sflush_r+0x32>
 800ae40:	2b1d      	cmp	r3, #29
 800ae42:	d001      	beq.n	800ae48 <__sflush_r+0xac>
 800ae44:	2b16      	cmp	r3, #22
 800ae46:	d11d      	bne.n	800ae84 <__sflush_r+0xe8>
 800ae48:	602f      	str	r7, [r5, #0]
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	e021      	b.n	800ae92 <__sflush_r+0xf6>
 800ae4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae52:	b21b      	sxth	r3, r3
 800ae54:	e01a      	b.n	800ae8c <__sflush_r+0xf0>
 800ae56:	690f      	ldr	r7, [r1, #16]
 800ae58:	2f00      	cmp	r7, #0
 800ae5a:	d0f6      	beq.n	800ae4a <__sflush_r+0xae>
 800ae5c:	0793      	lsls	r3, r2, #30
 800ae5e:	680e      	ldr	r6, [r1, #0]
 800ae60:	600f      	str	r7, [r1, #0]
 800ae62:	bf0c      	ite	eq
 800ae64:	694b      	ldreq	r3, [r1, #20]
 800ae66:	2300      	movne	r3, #0
 800ae68:	eba6 0807 	sub.w	r8, r6, r7
 800ae6c:	608b      	str	r3, [r1, #8]
 800ae6e:	f1b8 0f00 	cmp.w	r8, #0
 800ae72:	ddea      	ble.n	800ae4a <__sflush_r+0xae>
 800ae74:	4643      	mov	r3, r8
 800ae76:	463a      	mov	r2, r7
 800ae78:	6a21      	ldr	r1, [r4, #32]
 800ae7a:	4628      	mov	r0, r5
 800ae7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ae7e:	47b0      	blx	r6
 800ae80:	2800      	cmp	r0, #0
 800ae82:	dc08      	bgt.n	800ae96 <__sflush_r+0xfa>
 800ae84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae90:	81a3      	strh	r3, [r4, #12]
 800ae92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae96:	4407      	add	r7, r0
 800ae98:	eba8 0800 	sub.w	r8, r8, r0
 800ae9c:	e7e7      	b.n	800ae6e <__sflush_r+0xd2>
 800ae9e:	bf00      	nop
 800aea0:	dfbffffe 	.word	0xdfbffffe

0800aea4 <_fflush_r>:
 800aea4:	b538      	push	{r3, r4, r5, lr}
 800aea6:	690b      	ldr	r3, [r1, #16]
 800aea8:	4605      	mov	r5, r0
 800aeaa:	460c      	mov	r4, r1
 800aeac:	b913      	cbnz	r3, 800aeb4 <_fflush_r+0x10>
 800aeae:	2500      	movs	r5, #0
 800aeb0:	4628      	mov	r0, r5
 800aeb2:	bd38      	pop	{r3, r4, r5, pc}
 800aeb4:	b118      	cbz	r0, 800aebe <_fflush_r+0x1a>
 800aeb6:	6a03      	ldr	r3, [r0, #32]
 800aeb8:	b90b      	cbnz	r3, 800aebe <_fflush_r+0x1a>
 800aeba:	f7fe f947 	bl	800914c <__sinit>
 800aebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d0f3      	beq.n	800aeae <_fflush_r+0xa>
 800aec6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aec8:	07d0      	lsls	r0, r2, #31
 800aeca:	d404      	bmi.n	800aed6 <_fflush_r+0x32>
 800aecc:	0599      	lsls	r1, r3, #22
 800aece:	d402      	bmi.n	800aed6 <_fflush_r+0x32>
 800aed0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aed2:	f7fe fb36 	bl	8009542 <__retarget_lock_acquire_recursive>
 800aed6:	4628      	mov	r0, r5
 800aed8:	4621      	mov	r1, r4
 800aeda:	f7ff ff5f 	bl	800ad9c <__sflush_r>
 800aede:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aee0:	4605      	mov	r5, r0
 800aee2:	07da      	lsls	r2, r3, #31
 800aee4:	d4e4      	bmi.n	800aeb0 <_fflush_r+0xc>
 800aee6:	89a3      	ldrh	r3, [r4, #12]
 800aee8:	059b      	lsls	r3, r3, #22
 800aeea:	d4e1      	bmi.n	800aeb0 <_fflush_r+0xc>
 800aeec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aeee:	f7fe fb29 	bl	8009544 <__retarget_lock_release_recursive>
 800aef2:	e7dd      	b.n	800aeb0 <_fflush_r+0xc>

0800aef4 <__swhatbuf_r>:
 800aef4:	b570      	push	{r4, r5, r6, lr}
 800aef6:	460c      	mov	r4, r1
 800aef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aefc:	b096      	sub	sp, #88	@ 0x58
 800aefe:	4615      	mov	r5, r2
 800af00:	2900      	cmp	r1, #0
 800af02:	461e      	mov	r6, r3
 800af04:	da0c      	bge.n	800af20 <__swhatbuf_r+0x2c>
 800af06:	89a3      	ldrh	r3, [r4, #12]
 800af08:	2100      	movs	r1, #0
 800af0a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800af0e:	bf14      	ite	ne
 800af10:	2340      	movne	r3, #64	@ 0x40
 800af12:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800af16:	2000      	movs	r0, #0
 800af18:	6031      	str	r1, [r6, #0]
 800af1a:	602b      	str	r3, [r5, #0]
 800af1c:	b016      	add	sp, #88	@ 0x58
 800af1e:	bd70      	pop	{r4, r5, r6, pc}
 800af20:	466a      	mov	r2, sp
 800af22:	f000 f849 	bl	800afb8 <_fstat_r>
 800af26:	2800      	cmp	r0, #0
 800af28:	dbed      	blt.n	800af06 <__swhatbuf_r+0x12>
 800af2a:	9901      	ldr	r1, [sp, #4]
 800af2c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800af30:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800af34:	4259      	negs	r1, r3
 800af36:	4159      	adcs	r1, r3
 800af38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af3c:	e7eb      	b.n	800af16 <__swhatbuf_r+0x22>

0800af3e <__smakebuf_r>:
 800af3e:	898b      	ldrh	r3, [r1, #12]
 800af40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af42:	079d      	lsls	r5, r3, #30
 800af44:	4606      	mov	r6, r0
 800af46:	460c      	mov	r4, r1
 800af48:	d507      	bpl.n	800af5a <__smakebuf_r+0x1c>
 800af4a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800af4e:	6023      	str	r3, [r4, #0]
 800af50:	6123      	str	r3, [r4, #16]
 800af52:	2301      	movs	r3, #1
 800af54:	6163      	str	r3, [r4, #20]
 800af56:	b003      	add	sp, #12
 800af58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af5a:	ab01      	add	r3, sp, #4
 800af5c:	466a      	mov	r2, sp
 800af5e:	f7ff ffc9 	bl	800aef4 <__swhatbuf_r>
 800af62:	9f00      	ldr	r7, [sp, #0]
 800af64:	4605      	mov	r5, r0
 800af66:	4630      	mov	r0, r6
 800af68:	4639      	mov	r1, r7
 800af6a:	f7ff f9c1 	bl	800a2f0 <_malloc_r>
 800af6e:	b948      	cbnz	r0, 800af84 <__smakebuf_r+0x46>
 800af70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af74:	059a      	lsls	r2, r3, #22
 800af76:	d4ee      	bmi.n	800af56 <__smakebuf_r+0x18>
 800af78:	f023 0303 	bic.w	r3, r3, #3
 800af7c:	f043 0302 	orr.w	r3, r3, #2
 800af80:	81a3      	strh	r3, [r4, #12]
 800af82:	e7e2      	b.n	800af4a <__smakebuf_r+0xc>
 800af84:	89a3      	ldrh	r3, [r4, #12]
 800af86:	6020      	str	r0, [r4, #0]
 800af88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af8c:	81a3      	strh	r3, [r4, #12]
 800af8e:	9b01      	ldr	r3, [sp, #4]
 800af90:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800af94:	b15b      	cbz	r3, 800afae <__smakebuf_r+0x70>
 800af96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af9a:	4630      	mov	r0, r6
 800af9c:	f000 f81e 	bl	800afdc <_isatty_r>
 800afa0:	b128      	cbz	r0, 800afae <__smakebuf_r+0x70>
 800afa2:	89a3      	ldrh	r3, [r4, #12]
 800afa4:	f023 0303 	bic.w	r3, r3, #3
 800afa8:	f043 0301 	orr.w	r3, r3, #1
 800afac:	81a3      	strh	r3, [r4, #12]
 800afae:	89a3      	ldrh	r3, [r4, #12]
 800afb0:	431d      	orrs	r5, r3
 800afb2:	81a5      	strh	r5, [r4, #12]
 800afb4:	e7cf      	b.n	800af56 <__smakebuf_r+0x18>
	...

0800afb8 <_fstat_r>:
 800afb8:	b538      	push	{r3, r4, r5, lr}
 800afba:	2300      	movs	r3, #0
 800afbc:	4d06      	ldr	r5, [pc, #24]	@ (800afd8 <_fstat_r+0x20>)
 800afbe:	4604      	mov	r4, r0
 800afc0:	4608      	mov	r0, r1
 800afc2:	4611      	mov	r1, r2
 800afc4:	602b      	str	r3, [r5, #0]
 800afc6:	f7f6 fd3f 	bl	8001a48 <_fstat>
 800afca:	1c43      	adds	r3, r0, #1
 800afcc:	d102      	bne.n	800afd4 <_fstat_r+0x1c>
 800afce:	682b      	ldr	r3, [r5, #0]
 800afd0:	b103      	cbz	r3, 800afd4 <_fstat_r+0x1c>
 800afd2:	6023      	str	r3, [r4, #0]
 800afd4:	bd38      	pop	{r3, r4, r5, pc}
 800afd6:	bf00      	nop
 800afd8:	20000620 	.word	0x20000620

0800afdc <_isatty_r>:
 800afdc:	b538      	push	{r3, r4, r5, lr}
 800afde:	2300      	movs	r3, #0
 800afe0:	4d05      	ldr	r5, [pc, #20]	@ (800aff8 <_isatty_r+0x1c>)
 800afe2:	4604      	mov	r4, r0
 800afe4:	4608      	mov	r0, r1
 800afe6:	602b      	str	r3, [r5, #0]
 800afe8:	f7f6 fd3e 	bl	8001a68 <_isatty>
 800afec:	1c43      	adds	r3, r0, #1
 800afee:	d102      	bne.n	800aff6 <_isatty_r+0x1a>
 800aff0:	682b      	ldr	r3, [r5, #0]
 800aff2:	b103      	cbz	r3, 800aff6 <_isatty_r+0x1a>
 800aff4:	6023      	str	r3, [r4, #0]
 800aff6:	bd38      	pop	{r3, r4, r5, pc}
 800aff8:	20000620 	.word	0x20000620

0800affc <_sbrk_r>:
 800affc:	b538      	push	{r3, r4, r5, lr}
 800affe:	2300      	movs	r3, #0
 800b000:	4d05      	ldr	r5, [pc, #20]	@ (800b018 <_sbrk_r+0x1c>)
 800b002:	4604      	mov	r4, r0
 800b004:	4608      	mov	r0, r1
 800b006:	602b      	str	r3, [r5, #0]
 800b008:	f7f6 fd46 	bl	8001a98 <_sbrk>
 800b00c:	1c43      	adds	r3, r0, #1
 800b00e:	d102      	bne.n	800b016 <_sbrk_r+0x1a>
 800b010:	682b      	ldr	r3, [r5, #0]
 800b012:	b103      	cbz	r3, 800b016 <_sbrk_r+0x1a>
 800b014:	6023      	str	r3, [r4, #0]
 800b016:	bd38      	pop	{r3, r4, r5, pc}
 800b018:	20000620 	.word	0x20000620

0800b01c <memcpy>:
 800b01c:	440a      	add	r2, r1
 800b01e:	1e43      	subs	r3, r0, #1
 800b020:	4291      	cmp	r1, r2
 800b022:	d100      	bne.n	800b026 <memcpy+0xa>
 800b024:	4770      	bx	lr
 800b026:	b510      	push	{r4, lr}
 800b028:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b02c:	4291      	cmp	r1, r2
 800b02e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b032:	d1f9      	bne.n	800b028 <memcpy+0xc>
 800b034:	bd10      	pop	{r4, pc}
	...

0800b038 <__assert_func>:
 800b038:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b03a:	4614      	mov	r4, r2
 800b03c:	461a      	mov	r2, r3
 800b03e:	4b09      	ldr	r3, [pc, #36]	@ (800b064 <__assert_func+0x2c>)
 800b040:	4605      	mov	r5, r0
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	68d8      	ldr	r0, [r3, #12]
 800b046:	b954      	cbnz	r4, 800b05e <__assert_func+0x26>
 800b048:	4b07      	ldr	r3, [pc, #28]	@ (800b068 <__assert_func+0x30>)
 800b04a:	461c      	mov	r4, r3
 800b04c:	9100      	str	r1, [sp, #0]
 800b04e:	4907      	ldr	r1, [pc, #28]	@ (800b06c <__assert_func+0x34>)
 800b050:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b054:	462b      	mov	r3, r5
 800b056:	f000 f841 	bl	800b0dc <fiprintf>
 800b05a:	f000 f851 	bl	800b100 <abort>
 800b05e:	4b04      	ldr	r3, [pc, #16]	@ (800b070 <__assert_func+0x38>)
 800b060:	e7f4      	b.n	800b04c <__assert_func+0x14>
 800b062:	bf00      	nop
 800b064:	2000002c 	.word	0x2000002c
 800b068:	0800b59e 	.word	0x0800b59e
 800b06c:	0800b570 	.word	0x0800b570
 800b070:	0800b563 	.word	0x0800b563

0800b074 <_calloc_r>:
 800b074:	b570      	push	{r4, r5, r6, lr}
 800b076:	fba1 5402 	umull	r5, r4, r1, r2
 800b07a:	b93c      	cbnz	r4, 800b08c <_calloc_r+0x18>
 800b07c:	4629      	mov	r1, r5
 800b07e:	f7ff f937 	bl	800a2f0 <_malloc_r>
 800b082:	4606      	mov	r6, r0
 800b084:	b928      	cbnz	r0, 800b092 <_calloc_r+0x1e>
 800b086:	2600      	movs	r6, #0
 800b088:	4630      	mov	r0, r6
 800b08a:	bd70      	pop	{r4, r5, r6, pc}
 800b08c:	220c      	movs	r2, #12
 800b08e:	6002      	str	r2, [r0, #0]
 800b090:	e7f9      	b.n	800b086 <_calloc_r+0x12>
 800b092:	462a      	mov	r2, r5
 800b094:	4621      	mov	r1, r4
 800b096:	f7fe f9d7 	bl	8009448 <memset>
 800b09a:	e7f5      	b.n	800b088 <_calloc_r+0x14>

0800b09c <__ascii_mbtowc>:
 800b09c:	b082      	sub	sp, #8
 800b09e:	b901      	cbnz	r1, 800b0a2 <__ascii_mbtowc+0x6>
 800b0a0:	a901      	add	r1, sp, #4
 800b0a2:	b142      	cbz	r2, 800b0b6 <__ascii_mbtowc+0x1a>
 800b0a4:	b14b      	cbz	r3, 800b0ba <__ascii_mbtowc+0x1e>
 800b0a6:	7813      	ldrb	r3, [r2, #0]
 800b0a8:	600b      	str	r3, [r1, #0]
 800b0aa:	7812      	ldrb	r2, [r2, #0]
 800b0ac:	1e10      	subs	r0, r2, #0
 800b0ae:	bf18      	it	ne
 800b0b0:	2001      	movne	r0, #1
 800b0b2:	b002      	add	sp, #8
 800b0b4:	4770      	bx	lr
 800b0b6:	4610      	mov	r0, r2
 800b0b8:	e7fb      	b.n	800b0b2 <__ascii_mbtowc+0x16>
 800b0ba:	f06f 0001 	mvn.w	r0, #1
 800b0be:	e7f8      	b.n	800b0b2 <__ascii_mbtowc+0x16>

0800b0c0 <__ascii_wctomb>:
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	4608      	mov	r0, r1
 800b0c4:	b141      	cbz	r1, 800b0d8 <__ascii_wctomb+0x18>
 800b0c6:	2aff      	cmp	r2, #255	@ 0xff
 800b0c8:	d904      	bls.n	800b0d4 <__ascii_wctomb+0x14>
 800b0ca:	228a      	movs	r2, #138	@ 0x8a
 800b0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d0:	601a      	str	r2, [r3, #0]
 800b0d2:	4770      	bx	lr
 800b0d4:	2001      	movs	r0, #1
 800b0d6:	700a      	strb	r2, [r1, #0]
 800b0d8:	4770      	bx	lr
	...

0800b0dc <fiprintf>:
 800b0dc:	b40e      	push	{r1, r2, r3}
 800b0de:	b503      	push	{r0, r1, lr}
 800b0e0:	ab03      	add	r3, sp, #12
 800b0e2:	4601      	mov	r1, r0
 800b0e4:	4805      	ldr	r0, [pc, #20]	@ (800b0fc <fiprintf+0x20>)
 800b0e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0ea:	6800      	ldr	r0, [r0, #0]
 800b0ec:	9301      	str	r3, [sp, #4]
 800b0ee:	f7ff fd3d 	bl	800ab6c <_vfiprintf_r>
 800b0f2:	b002      	add	sp, #8
 800b0f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0f8:	b003      	add	sp, #12
 800b0fa:	4770      	bx	lr
 800b0fc:	2000002c 	.word	0x2000002c

0800b100 <abort>:
 800b100:	2006      	movs	r0, #6
 800b102:	b508      	push	{r3, lr}
 800b104:	f000 f82c 	bl	800b160 <raise>
 800b108:	2001      	movs	r0, #1
 800b10a:	f7f6 fc4d 	bl	80019a8 <_exit>

0800b10e <_raise_r>:
 800b10e:	291f      	cmp	r1, #31
 800b110:	b538      	push	{r3, r4, r5, lr}
 800b112:	4605      	mov	r5, r0
 800b114:	460c      	mov	r4, r1
 800b116:	d904      	bls.n	800b122 <_raise_r+0x14>
 800b118:	2316      	movs	r3, #22
 800b11a:	6003      	str	r3, [r0, #0]
 800b11c:	f04f 30ff 	mov.w	r0, #4294967295
 800b120:	bd38      	pop	{r3, r4, r5, pc}
 800b122:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b124:	b112      	cbz	r2, 800b12c <_raise_r+0x1e>
 800b126:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b12a:	b94b      	cbnz	r3, 800b140 <_raise_r+0x32>
 800b12c:	4628      	mov	r0, r5
 800b12e:	f000 f831 	bl	800b194 <_getpid_r>
 800b132:	4622      	mov	r2, r4
 800b134:	4601      	mov	r1, r0
 800b136:	4628      	mov	r0, r5
 800b138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b13c:	f000 b818 	b.w	800b170 <_kill_r>
 800b140:	2b01      	cmp	r3, #1
 800b142:	d00a      	beq.n	800b15a <_raise_r+0x4c>
 800b144:	1c59      	adds	r1, r3, #1
 800b146:	d103      	bne.n	800b150 <_raise_r+0x42>
 800b148:	2316      	movs	r3, #22
 800b14a:	6003      	str	r3, [r0, #0]
 800b14c:	2001      	movs	r0, #1
 800b14e:	e7e7      	b.n	800b120 <_raise_r+0x12>
 800b150:	2100      	movs	r1, #0
 800b152:	4620      	mov	r0, r4
 800b154:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b158:	4798      	blx	r3
 800b15a:	2000      	movs	r0, #0
 800b15c:	e7e0      	b.n	800b120 <_raise_r+0x12>
	...

0800b160 <raise>:
 800b160:	4b02      	ldr	r3, [pc, #8]	@ (800b16c <raise+0xc>)
 800b162:	4601      	mov	r1, r0
 800b164:	6818      	ldr	r0, [r3, #0]
 800b166:	f7ff bfd2 	b.w	800b10e <_raise_r>
 800b16a:	bf00      	nop
 800b16c:	2000002c 	.word	0x2000002c

0800b170 <_kill_r>:
 800b170:	b538      	push	{r3, r4, r5, lr}
 800b172:	2300      	movs	r3, #0
 800b174:	4d06      	ldr	r5, [pc, #24]	@ (800b190 <_kill_r+0x20>)
 800b176:	4604      	mov	r4, r0
 800b178:	4608      	mov	r0, r1
 800b17a:	4611      	mov	r1, r2
 800b17c:	602b      	str	r3, [r5, #0]
 800b17e:	f7f6 fc03 	bl	8001988 <_kill>
 800b182:	1c43      	adds	r3, r0, #1
 800b184:	d102      	bne.n	800b18c <_kill_r+0x1c>
 800b186:	682b      	ldr	r3, [r5, #0]
 800b188:	b103      	cbz	r3, 800b18c <_kill_r+0x1c>
 800b18a:	6023      	str	r3, [r4, #0]
 800b18c:	bd38      	pop	{r3, r4, r5, pc}
 800b18e:	bf00      	nop
 800b190:	20000620 	.word	0x20000620

0800b194 <_getpid_r>:
 800b194:	f7f6 bbf0 	b.w	8001978 <_getpid>

0800b198 <_init>:
 800b198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b19a:	bf00      	nop
 800b19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b19e:	bc08      	pop	{r3}
 800b1a0:	469e      	mov	lr, r3
 800b1a2:	4770      	bx	lr

0800b1a4 <_fini>:
 800b1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1a6:	bf00      	nop
 800b1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1aa:	bc08      	pop	{r3}
 800b1ac:	469e      	mov	lr, r3
 800b1ae:	4770      	bx	lr
